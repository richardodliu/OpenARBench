{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge Regression on the given dataset using the closed-form solution.\n    \n    Parameters:\n    - data: An ndarray where the last column is the target y, and all preceding columns are the features X.\n    - alpha: The regularization strength.\n\n    Returns:\n    A list of weights rounded to 4 decimal places. If the matrix is not invertible, returns -1.\n    \"\"\"\n    # Splitting data into X (features) and y (target)\n    X = data[:, :-1]  # All rows, all columns except the last one\n    y = data[:, -1]   # All rows, only the last column\n    \n    # Adding bias term (column of ones) to X\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    \n    # Calculate the weight vector using the closed-form solution of Ridge Regression\n    # Compute (X^T X + alpha*I)^(-1) X^T y\n    I = np.identity(X_b.shape[1])  # Identity matrix of dim = num_features + 1 (bias included)\n    try:\n        # Attempt to calculate the pseudo-inverse\n        w = np.linalg.solve(X_b.T.dot(X_b) + alpha * I, X_b.T.dot(y))\n    except np.linalg.LinAlgError:  # If the matrix is not invertible (e.g., singular)\n        return [-1]\n    \n    # Return weights rounded to 4 decimal places\n    return [np.round(w_i, 4) for w_i in w]\n\n# Check function with provided data points\ndef check_solution():\n    data1 = np.array([[2, 3, 5], [4, 5, 9], [6, 7, 13]])  # X = [[2, 3], [4, 5], [6, 7]], y = [5, 9, 13]\n    alpha1 = 0.0\n    result1 = ridge_regression(data1, alpha1)\n    expected1 = [0., 1., 2.]  # Expected weights without regularization\n    print(f\"Test Case 1: {'Passed' if np.allclose(result1, expected1, atol=1e-4) else 'Failed'}\")\n    \n    data2 = np.array([[2, 3, 5], [4, 5, 9], [6, 7, 13]])\n    alpha2 = 0.1\n    result2 = ridge_regression(data2, alpha2)\n    print(f\"Test Case 2: {'Passed' if result2[0] == -1 else 'Failed'} (Expected -1 due to non-invertibility)\")\n    \ncheck_solution()\n```"}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    iter_count = 0\n\n    def gram_matrix(X):\n        \"\"\"Compute the Gram matrix for the input samples.\"\"\"\n        return np.dot(X, X.T)\n\n    while iter_count < n_iter:\n        iter_alpha_change = False\n        gram = gram_matrix(X_train)\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                iter_alpha_change = True\n        if not iter_alpha_change:\n            break\n        iter_count += 1\n\n    # Compute the primal weights from the final alphas\n    w = np.sum([alpha[j] * y_train[j] * X_train[j] for j in range(n_samples)], axis=0)\n    w_rounded = [round(val, 4) for val in w]\n    b_rounded = round(b, 4)\n    return w_rounded, b_rounded\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3]])\n# y_train = np.array([1, -1, 1])\n# print(perceptron_dual(X_train, y_train))\n```\n\n### Explanation:\n1. **Initialization**: We initialize `alpha` to zeros and `b` to zero. Also, we keep track of the number of iterations (`iter_count`).\n\n2. **Gram Matrix**: The Gram matrix `K(x\u1d62, x\u2c7c)` is computed using the dot product of the training samples.\n\n3. **Training Loop**: We iterate over the samples. For each sample, we compute the activation by summing the contributions from all other samples weighted by their corresponding `alpha` values and labels. If the sample is misclassified (margin \u2264 0), we update `alpha` and `b`.\n\n4. **Convergence Check**: If no updates are made in a full pass over the data, we terminate the loop.\n\n5. **Primal Weight Calculation**: After training, we compute the primal weight vector `w` from the final `alpha` values and return it along with `b`, both rounded to four decimal places.\n\nThis implementation ensures that the perceptron converges if the data are linearly separable, and it provides a foundation for understanding kernel methods by operating solely on the Gram matrix."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return np.asarray(mu)\n\n    def identity_inv_link(eta):\n        return np.asarray(eta)\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(np.clip(mu, np.finfo(float).eps, None))\n\n    def log_inv_link(eta):\n        return np.exp(np.asarray(eta))\n\n    def log_derivative(mu):\n        mu = np.clip(mu, np.finfo(float).eps, None)\n        return 1.0 / mu\n\n    def logit_link(mu):\n        mu = np.clip(mu, np.finfo(float).eps, 1 - np.finfo(float).eps)\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        exp_eta = np.exp(np.asarray(eta))\n        return exp_eta / (1 + exp_eta)\n\n    def logit_derivative(mu):\n        mu = np.clip(mu, np.finfo(float).eps, 1 - np.finfo(float).eps)\n        return 1.0 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 array([-1.3863,  1.3863])\nmu2 = links[\"logit\"][\"inv_link\"](eta)   # \u2192 array([0.2, 0.8])\n\nprint(f\"Logit link(\u03bc): {eta.round(4)}\")\nprint(f\"Logit inv_link(\u03b7): {mu2.round(4)}\")\n```\n\nThis script defines a function `glm_links` that returns a dictionary of dictionaries, each containing the link function, its inverse, and its derivative for the identity, log, and logit links. The functions are designed to work with both scalar and numpy array inputs. The example usage demonstrates how to use these functions with numpy arrays, ensuring the outputs are rounded to four decimal places as specified."}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def grow_tree(indices):\n        if len(indices) <= 2:\n            return indices, 0\n        else:\n            feature_idx = np.random.choice(len(data[0]))\n            down = np.min(data[indices, feature_idx])\n            up = np.max(data[indices, feature_idx])\n            v = np.random.uniform(down, up)\n            left_indices = [i for i in indices if data[i, feature_idx] <= v]\n            right_indices = [i for i in indices if data[i, feature_idx] > v]\n            left_leaves, left_depth = grow_tree(left_indices)\n            right_leaves, right_depth = grow_tree(right_indices)\n            return left_leaves + right_leaves, min(left_depth, right_depth) + 1\n    \n    all_indices = list(range(len(data)))\n    leaves, depth = grow_tree(all_indices)\n    path_lengths = [0] * len(data)\n    \n    for idx, i in enumerate(all_indices):\n        if i in leaves:\n            path_lengths[i] = depth - 1  # Subtract 1 because depth includes the extra edge beyond leaf\n    \n    return path_lengths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))\n```\n\nThis code defines the `isolation_tree_path_length` function, which builds an isolation tree based on the given data matrix and computes the depth of the leaf reached by every sample. The function ensures reproducibility by setting the random seed to 0 inside the main function. It uses a recursive approach to build the tree and calculate the depths of the leaves."}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    item_counts = Counter()\n\n    # Count the frequency of each item\n    for transaction in transactions:\n        unique_items = frozenset(transaction)\n        for item in unique_items:\n            item_counts[item] += 1\n\n    # Filter out infrequent items\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support_count}\n\n    # Generate candidate itemsets from frequent items\n    candidate_itemsets = []\n    for r in range(1, len(frequent_items) + 1):\n        for itemset in combinations(frequent_items, r):\n            candidate_itemsets.append(itemset)\n\n    # Calculate support for each candidate itemset\n    itemset_supports = Counter()\n    for transaction in transactions:\n        unique_items = frozenset(transaction)\n        for itemset in candidate_itemsets:\n            if unique_items.issuperset(itemset):\n                itemset_supports[itemset] += 1\n\n    # Filter and return only the frequent itemsets\n    return {itemset: count for itemset, count in itemset_supports.items() if count >= min_support_count}\n\n# Example usage:\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nresult = find_frequent_itemsets(transactions, minsup)\nprint(result)\n```\n\nThis code defines the `find_frequent_itemsets` function which implements the Apriori algorithm for finding frequent itemsets in a list of transactions. It first counts the frequency of individual items, filters out those that do not meet the minimum support requirement, generates candidate itemsets, calculates their support, and finally returns the frequent itemsets along with their support counts."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    \n    # Step 1: Initialize centroids as the first k samples\n    centroids = data[:k].copy()\n    n_samples, n_features = data.shape\n    labels = np.zeros(n_samples, dtype=int)\n    \n    for iteration in range(max_iter):\n        # Assign each sample to the nearest centroid\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Recompute centroids as the mean of assigned samples\n        new_centroids = np.empty_like(centroids)\n        for c in range(k):\n            cluster_points = data[labels == c]\n            if len(cluster_points) > 0:\n                new_centroids[c] = np.mean(cluster_points, axis=0)\n            else:\n                # If a centroid is empty, reinitialize it with a random sample\n                new_centroids[c] = data[np.random.randint(n_samples)]\n        \n        # Check for convergence\n        max_change = np.max(np.linalg.norm(new_centroids - centroids, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centroids = new_centroids\n    \n    # Round centroids to 4 decimal places\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in centroids]\n    \n    return rounded_centroids, list(labels)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Generate some example data\n    np.random.seed(42)\n    true_centers = np.array([[1, 2], [5, 7], [9, 12]])\n    data = np.vstack([np.random.randn(200, 2) + true_centers[0],\n                      np.random.randn(200, 2) + true_centers[1],\n                      np.random.randn(200, 2) + true_centers[2]])\n    \n    # Run K-Means clustering\n    k = 3\n    epsilon = 1e-3\n    max_iter = 2000\n    centers, cluster_labels = kmeans(data, k, epsilon, max_iter)\n    \n    print(\"Final Centers:\", centers)\n    print(\"Cluster Labels:\", cluster_labels)\n```\n\n### Explanation:\n1. **Initialization**: The first `k` samples are chosen as initial centroids.\n2. **Assignment Step**: Each sample is assigned to the nearest centroid based on squared Euclidean distance.\n3. **Update Step**: New centroids are computed as the mean of all points assigned to each centroid. If a centroid becomes empty, it is re-initialized with a random sample from the dataset.\n4. **Convergence Check**: The algorithm stops when the maximum change in any centroid's position is less than `epsilon` or after `max_iter` iterations.\n5. **Rounding**: The final centroids are rounded to four decimal places before being returned.\n\nThis implementation ensures that the algorithm is deterministic, reinitializes empty centroids, and meets all specified constraints."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    \n    n_users, n_items = data.shape\n    \n    def mean_center(v):\n        return v - np.mean(v[v > 0])\n\n    # Step 1: Compute item-item similarity matrix S\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Find users who rated both items i and j\n            common_users = np.intersect1d(np.nonzero(data[:, i])[0], np.nonzero(data[:, j])[0])\n            if len(common_users) == 0:\n                continue\n            \n            ratings_i = data[common_users, i]\n            ratings_j = data[common_users, j]\n\n            if criterion == 'cosine':\n                # Mean center only if std dev is greater than 1e-3\n                if np.std(ratings_i) > 1e-3:\n                    ratings_i = mean_center(ratings_i)\n                if np.std(ratings_j) > 1e-3:\n                    ratings_j = mean_center(ratings_j)\n                \n                # Cosine similarity\n                S[i, j] = np.dot(ratings_i, ratings_j) / (np.linalg.norm(ratings_i) * np.linalg.norm(ratings_j) + 1e-9)\n                S[j, i] = S[i, j]\n            \n            elif criterion == 'pearson':\n                # Pearson correlation\n                S[i, j] = np.corrcoef(ratings_i, ratings_j)[0, 1]\n                S[j, i] = S[i, j]\n    \n    # Step 2: Get the indices of items already rated by the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    \n    # If the user has rated all items, return an empty list\n    if len(rated_items) == n_items:\n        return []\n    \n    # Step 3: Predict attractiveness scores for unrated items\n    scores = defaultdict(float)\n    for t in range(n_items):\n        if data[user_ind, t] > 0:\n            continue\n        \n        numerator = 0.0\n        denominator = 0.0\n        for i in rated_items:\n            numerator += data[user_ind, i] * S[t, i]\n            denominator += abs(S[t, i])\n        \n        if denominator > 0:\n            scores[t] = numerator / denominator\n        else:\n            scores[t] = 0.0\n\n    # Step 4: Sort the scores and get top k items\n    sorted_items = sorted(scores.keys(), key=lambda x: (-scores[x], x))[:k]\n    \n    return list(sorted_items)\n\n# Example usage:\n# data = np.array([[5, 3, 0, 1],\n#                  [4, 0, 0, 1],\n#                  [1, 1, 0, 5],\n#                  [1, 0, 0, 4],\n#                  [0, 1, 5, 4]])\n# print(knn_recommend(data, user_ind=0, k=2))\n```\n\n### Explanation:\n1. **Mean Centering**: When computing cosine similarities, we mean center the rating vectors only if their standard deviation is greater than `1e-3`. This helps avoid numerical instability when dealing with constant vectors.\n  \n2. **Similarity Matrix Construction**: We compute the item-item similarity matrix `S` using either cosine similarity or Pearson correlation, depending on the `criterion` parameter.\n\n3. **Prediction Scores**: For each unrated item, we compute a prediction score based on the weighted sum of similarities to already rated items. The weights are the actual ratings given by the user.\n\n4. **Sorting and Returning Recommendations**: We sort the items by their predicted scores and return the top `k` items. If two items have the same score, the one with the smaller index comes first due to Python's stable sort behavior.\n\nThis solution ensures that the recommendations are computed efficiently and correctly according to the problem statement."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    def loss_function(gradients, hessians, gamma, lam):\n        sum_gradients = np.sum(gradients)\n        sum_hessians = np.sum(hessians) + lam\n        return -0.5 * (sum_gradients ** 2) / sum_hessians + gamma\n\n    for feature_index in range(n_features):\n        # Get unique values sorted to avoid redundant checks\n        feature_values = np.unique(X[:, feature_index])\n        \n        for j in range(len(feature_values) - 1):\n            threshold_left = feature_values[j]\n            threshold_right = feature_values[j+1]\n            threshold = (threshold_left + threshold_right) / 2\n\n            # Find indices of samples that would go to the left or right node\n            left_indices = (X[:, feature_index] < threshold_right)\n            right_indices = (~left_indices)\n\n            # Check if this is a valid split\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n\n            # Compute the loss for the left and right nodes\n            left_loss = loss_function(g[left_indices], h[left_indices], gamma, lam)\n            right_loss = loss_function(g[right_indices], h[right_indices], gamma, lam)\n            \n            # Compute the total loss before splitting\n            total_loss_before = loss_function(g, h, gamma, lam)\n            \n            # Compute the gain from this split\n            gain = total_loss_before - left_loss - right_loss\n\n            # Update best split if this one is better\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n\n    # If no valid split was found, return None\n    if best_gain <= 0:\n        return None\n\n    return (best_feature, best_threshold)\n\n# Example usage:\n# X = np.array([[0.1, 0.2], [0.5, 0.8], [0.3, 0.1], [0.9, 0.7]])\n# g = np.array([-0.2, 0.5, -0.7, 0.3])\n# h = np.array([0.1, 0.3, 0.2, 0.4])\n# gamma = 1e-3\n# lam = 1e-1\n# print(best_split(X, g, h, gamma, lam))\n```\n\nThis code defines the `best_split` function which computes the best split for a gradient boosting tree node based on the provided feature matrix, first-order gradients, second-order gradients, and regularization parameters. It evaluates all possible splits for each feature and finds the one that maximizes the gain in the regularized loss. If no valid split provides a positive gain, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Ensure input is a NumPy array\n    x = np.array(x, dtype=float)\n\n    # Compute sigmoid values\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Round sigmoid values to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    \n    # Compute the gradient of the sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round gradient to 4 decimal places\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Convert back to Python lists if input was not a scalar\n    if x.ndim > 0:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n\n    return (float(sigmoid_x) if isinstance(sigmoid_x, np.float) else sigmoid_x,\n            float(gradient_x) if isinstance(gradient_x, np.float) else gradient_x)\n\n# Example Usage:\n\n# Scalar input\nscalar_result = sigmoid_activation(2.5)\nprint(\"Scalar:\", scalar_result)\n\n# List input\nlist_result = sigmoid_activation([1, 2, 3])\nprint(\"List:\", list_result)\n\n# 1D Numpy Array input\narray_1d_result = sigmoid_activation(np.array([1, 2, 3]))\nprint(\"1D Array:\", array_1d_result)\n\n# 2D Numpy Array input\narray_2d_result = sigmoid_activation(np.array([[1, 2], [3, 4]]))\nprint(\"2D Array:\", array_2d_result)\n```\n\nThis implementation ensures that the function works correctly for all specified input types and formats the output appropriately according to the problem constraints."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], \n                        y_train: list[int], \n                        x_test: list[float], \n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n\n    def calculate_error(stump, D, x_train, y_train):\n        error = 0.0\n        d, theta = stump\n        for i, x in enumerate(x_train):\n            if (d == 0 and (x <= theta) != (y_train[i] == 1)) or \\\n               (d == 1 and (x > theta) != (y_train[i] == 1)):\n                error += D[i]\n        return error\n\n    def predict_single_sample(sample, stumps, alphas):\n        score = 0\n        for alpha, (d, theta) in zip(alphas, stumps):\n            if (d == 0 and sample <= theta) or (d == 1 and sample > theta):\n                score += alpha\n            else:\n                score -= alpha\n        return int(np.sign(score))\n\n    n_samples = len(x_train)\n    D = np.full(n_samples, 1/n_samples)\n    stumps = []\n    alphas = []\n\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n\n    while True:\n        errors = defaultdict(lambda: float('inf'))\n        for d in [0, 1]:\n            thresholds = [(x_train_sorted[i] + x_train_sorted[i+1]) / 2 for i in range(n_samples - 1)]\n            for theta in thresholds:\n                error = calculate_error((d, theta), D, x_train_sorted, y_train_sorted)\n                errors[(d, theta)] = min(error, 1 - error)\n\n        best_stump = min(errors, key=errors.get)\n        best_error = errors[best_stump]\n        if best_error >= 0.5:\n            break\n\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n        for i in range(n_samples):\n            if (best_stump[0] == 0 and (x_train_sorted[i] <= best_stump[1]) != (y_train_sorted[i] == 1)) or \\\n               (best_stump[0] == 1 and (x_train_sorted[i] > best_stump[1]) != (y_train_sorted[i] == 1)):\n                D[i] *= math.exp(alpha)\n            else:\n                D[i] *= math.exp(-alpha)\n        D /= np.sum(D)\n\n        train_predictions = np.array([predict_single_sample(x, stumps, alphas) for x in x_train])\n        train_error = np.mean(train_predictions != np.array(y_train))\n        if train_error <= epsilon:\n            break\n\n    test_predictions = [predict_single_sample(x, stumps, alphas) for x in x_test]\n    return test_predictions\n\n# Example usage:\n# x_train = [0.1, 0.2, 0.3, 0.4, 0.5]\n# y_train = [1, -1, 1, -1, 1]\n# x_test = [0.6, 0.7, 0.8, 0.9, 1.0]\n# print(adaboost_1d_predict(x_train, y_train, x_test))\n```\n\nThis code defines the `adaboost_1d_predict` function that implements the AdaBoost algorithm with one-dimensional decision stumps. It sorts the training data, calculates the error for each potential stump, selects the best stump, updates the sample weights, and continues until the training error is less than or equal to the specified `epsilon`. Finally, it predicts the labels for the test set based on the trained ensemble."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n_samples_test = X_test.shape[0]\n    n_samples_train = X_train.shape[0]\n\n    # Compute the Gaussian kernel matrix between X_train and X_test\n    # K[i, j] = exp(-gamma * ||X_train[i] - X_test[j]||^2)\n    K = np.zeros((n_samples_train, n_samples_test))\n    for i in range(n_samples_train):\n        diff = X_train[i:i+1] - X_test\n        K[i] = np.exp(-gamma * np.sum(diff**2, axis=1))\n\n    # Compute the decision function g(z) for each test sample\n    g_z = np.dot(alpha * y_train, K) + b\n\n    # Predict the class label for each test sample\n    predictions = np.sign(g_z).astype(int).tolist()\n    \n    return predictions\n```\n\nThis solution fully vectorizes the computation of the Gaussian kernel matrix and avoids explicit loops over test samples within the function body. It leverages NumPy's efficient array operations to compute the kernel matrix and the decision function, ensuring the function scales well with the number of test samples."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (1 <= k <= min(len(X), len(X[0]))):\n        return -1\n    \n    # Convert input list to numpy array for easier manipulation\n    X_np = np.array(X)\n    \n    # Perform SVD decomposition\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate SVD to keep only the first k components\n    U_k = U[:, :k]\n    s_k = np.diag(s[:k])\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix using the truncated components\n    X_hat_np = U_k @ s_k @ Vt_k\n    \n    # Calculate Mean Squared Error\n    mse = np.mean((X_np - X_hat_np)**2)\n    \n    # Round the result and MSE to 4 decimal places\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    mse_rounded = round(mse, 4)\n    \n    return X_hat_rounded, mse_rounded\n\n# Example usage:\nX_example = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk_example = 1\nresult = linear_autoencoder(X_example, k_example)\nprint(\"Reconstructed Matrix:\", result[0])\nprint(\"Mean Squared Error:\", result[1])\n```\n\nThis script defines a function `linear_autoencoder` which performs a truncated Singular Value Decomposition (SVD) on the given matrix `X` to obtain the optimal rank-\\(k\\) reconstruction and calculates the mean squared error of this reconstruction. The function checks if the provided `k` is within the valid range, performs the necessary computations, rounds the results to four decimal places, and returns the reconstructed matrix and the MSE."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    \n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    n_samples = len(x_train)\n    \n    # Sort the training samples by the feature and align the labels accordingly.\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals as the original targets.\n    residuals = y_train.copy()\n    prediction = 0.0\n    \n    while True:\n        # Determine the candidate split points.\n        split_points = (x_train[:-1] + x_train[1:]) / 2\n        \n        best_rss = np.inf\n        best_stump = None\n        \n        for split_point in split_points:\n            # Compute the residuals means on both sides of the split.\n            left_residuals = residuals[x_train <= split_point]\n            right_residuals = residuals[x_train > split_point]\n            \n            if len(left_residuals) == 0 or len(right_residuals) == 0:\n                continue  # Skip invalid splits.\n            \n            c1 = np.mean(left_residuals)\n            c2 = np.mean(right_residuals)\n            \n            # Compute the RSS for this split.\n            rss = np.sum((residuals[x_train <= split_point] - c1) ** 2) + \\\n                  np.sum((residuals[x_train > split_point] - c2) ** 2)\n            \n            # Check if this split results in a better RSS.\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (split_point, c1, c2)\n        \n        # Stop if the best RSS is sufficiently small.\n        if best_rss < epsilon * len(y_train):\n            break\n        \n        # Otherwise, update the residuals and the prediction.\n        split_point, c1, c2 = best_stump\n        prediction += (c1 if x_query <= split_point else c2)\n        residuals -= ((c1 if x_train <= split_point else c2))\n    \n    return round(prediction, 4)\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [2.5, 3.0, 2.8, 3.2, 3.5]\n# x_query = 3.5\n# print(predict_boosting_tree(x_train, y_train, x_query))  # Expected output: Rounded prediction value.\n```\n\nThis script defines the `predict_boosting_tree` function, which implements a simple 1-D gradient boosting model using decision stumps. It sorts the training data, iteratively adds the best stump based on minimizing the residual sum of squares, and updates the residuals. Finally, it returns the prediction for the queried point, rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a binary tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n\n    Parameters:\n        shape (tuple): The shape of the desired tensor.\n        sparsity (float): The probability of generating a 1.0. Must be in the range [0, 1].\n        seed (int, optional): Seed for the random number generator for reproducibility.\n\n    Returns:\n        np.ndarray: A NumPy array of the specified shape, dtype=float, filled with 0.0s and 1.0s.\n        \n    Raises:\n        ValueError: If 'sparsity' is not within the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate the binary tensor using the Bernoulli distribution\n    tensor = np.random.uniform(0, 1, size=shape)\n    tensor = np.where(tensor < sparsity, 1.0, 0.0)\n    \n    return tensor.astype(np.float)\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_shapes = [(4, 4), (3, 3, 3)]\n    test_sparsities = [0.3, 0.7]\n    test_seeds = [42, 123]\n    \n    for shape in test_shapes:\n        for sparsity in test_sparsities:\n            for seed in test_seeds:\n                result = random_binary_tensor(shape, sparsity, seed)\n                if result == -1:\n                    print(f\"Shape: {shape}, Sparsity: {sparsity}, Seed: {seed} -> Invalid sparsity\")\n                    continue\n                print(f\"Shape: {shape}, Sparsity: {sparsity:.1f}, Seed: {seed}\")\n                print(result, \"\\n\")\n\ncheck()\n```\n\nThis script defines the `random_binary_tensor` function which meets all the specified criteria. It also includes a `check` function to demonstrate and validate the functionality with various inputs."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Step 1: Use argpartition to find the median index\n    med_index = len(data) // 2\n    partitioned_indices = np.argpartition(data[:, d], med_index)\n    \n    # Step 2: Extract the k-th (median) element's index\n    # We need to ensure that the median is correctly positioned\n    # by considering the position of the med_index element in the partition\n    median_value = np.median(data[:, d])\n    pivot = next(i for i in partitioned_indices if data[i, d] == median_value)\n    \n    # Step 3: Separate indices into left and right of the median\n    left_indices = partitioned_indices[partitioned_indices < pivot]\n    right_indices = partitioned_indices[partitioned_indices > pivot]\n    \n    # Convert to Python lists and sort them\n    left_sorted = sorted(left_indices.tolist())\n    right_sorted = sorted(right_indices.tolist())\n\n    return pivot, left_sorted, right_sorted\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data array (n_samples=6, n_features=2)\n    data = np.array([\n        [2.3, 4.5],\n        [1.2, 3.1],\n        [5.4, 7.8],\n        [3.2, 2.0],\n        [4.5, 5.5],\n        [6.7, 8.9]\n    ])\n    d = 0  # Split along the first dimension\n    \n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot index: {pivot}, Left indices: {left}, Right indices: {right}\")\n```\n\n### Explanation:\n1. **Partitioning**: The `numpy.argpartition` method is used to partially sort the data such that the element at the `med_index` position will be the true median. Since `argpartition` only guarantees correct ordering around the pivot, we need to find the exact median value and then retrieve the corresponding index.\n\n2. **Finding the Median Index**: After obtaining the partitioned indices, we iterate through them to find the exact index `pivot` where the value in column `d` matches the calculated median.\n\n3. **Splitting Indices**: Based on the `pivot`, we separate the remaining indices into those that are less than (`left`) and greater than (`right`) the pivot. These are then converted to sorted Python lists before returning.\n\nThis approach ensures an efficient O(n) operation while maintaining the required output constraints."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Validate input conditions\n    assert len(x.shape) == 1, \"Input signal x must be one-dimensional.\"\n    assert stride > 0, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Signal length must be greater than or equal to frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Check if there are enough elements to form at least one complete frame\n    if n_frames <= 0:\n        raise ValueError(\"Not enough elements to form a single frame with the given parameters.\")\n\n    # Compute strides for as_strided\n    itemsize = x.strides[0]\n    frame_strides = (itemsize * stride, itemsize)\n\n    # Create the strided output array\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n    \n    # Set the writeable flag according to the 'writeable' parameter\n    framed_signal.flags.writeable = writeable and x.flags.writeable\n\n    return framed_signal\n\n# Example usage:\nif __name__ == \"__main__\":\n    x = np.array([1, 2, 3, 4, 5, 6])\n    frame_width = 3\n    stride = 2\n\n    print(\"Original signal:\")\n    print(x)\n\n    framed = to_frames(x, frame_width, stride, writeable=True)\n    print(\"\\nFramed signal with writeable=True:\")\n    print(framed)\n\n    framed[0, 0] = 99  # Modify the first element of the first frame\n    print(\"\\nAfter modifying the framed signal:\")\n    print(x)  # Check if the original signal was modified\n\n    non_writeable_framed = to_frames(x, frame_width, stride, writeable=False)\n    try:\n        non_writeable_framed[0, 0] = 99  # Attempt to modify the framed signal\n    except ValueError:\n        print(\"\\nAttempt to modify non-writeable framed signal raised ValueError as expected.\")\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array if it isn't already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n\n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n\n    # Check if all elements are within the range [0, 1]\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-8):\n        return False\n\n    return True\n\n# Test cases to verify the correctness of the function\ndef check():\n    # Define test matrices\n    test_matrices = [\n        ([1], True),  # Single element matrix\n        ([[1]], True),  # Single element row vector\n        ([[0.5, 0.5], [0.3, 0.7]], True),  # Valid stochastic matrix\n        ([[1, 0], [0, 1]], True),  # Valid stochastic matrix\n        ([[1, 0], [0.6, 0.4]], False),  # Invalid due to row sum\n        ([[1, 0], [-1, 2]], False),  # Invalid due to out-of-range values\n        ([[1, 0], [0.5, 0.6]], False),  # Invalid due to row sum\n        ([[1, 0], [0.49999999, 0.50000001]], True),  # Edge case within tolerance\n        ([[1, 0], [0.49999991, 0.50000009]], True),  # Within tolerance\n        ([[1, 0], [0.49999990, 0.50000010]], False),  # Outside tolerance\n    ]\n\n    all_passed = True\n    for matrix, expected in test_matrices:\n        result = is_stochastic(matrix)\n        if result != expected:\n            print(f\"Test failed for matrix {matrix}. Expected {expected}, got {result}\")\n            all_passed = False\n\n    if all_passed:\n        print(\"All tests passed!\")\n\ncheck()\n```\n\nThis script defines the `is_stochastic` function and runs several test cases to ensure its correctness. The function checks if a given matrix is row-stochastic according to the specified criteria."}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Determine which samples to use in this iteration\n        if n <= batch_size:\n            batch_indices = np.arange(n)\n        else:\n            batch_indices = np.random.choice(n, batch_size, replace=False)\n        \n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        \n        # Compute the gradient for the current batch\n        gradient = np.dot(X_batch.T, np.dot(X_batch, w) - y_batch) / len(batch_indices)\n        \n        # Update the running average of the squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update the weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check the stopping condition\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(x, 4) for x in w]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([3, 4, 5, 6])\n# print(rms_prop(X, y))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the weight vector `w` to zeros and the running average of squared gradients `s` to zeros.\n2. **Batch Processing**: For each iteration, we determine which samples to include in the current batch. If the number of samples is less than or equal to the batch size, we use the entire dataset. Otherwise, we randomly select a batch of samples.\n3. **Gradient Calculation**: We compute the gradient of the loss function with respect to the current weights using the selected batch.\n4. **Running Average of Squared Gradients**: We update the running average `s` of the squared gradients.\n5. **Weight Update**: We update the weights using the RMSprop update rule.\n6. **Stopping Condition**: We check if the norm of the gradient is below a specified threshold (`epsilon`). If so, we stop the optimization early.\n7. **Return**: Finally, we return the weight vector rounded to four decimal places as a Python list."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its gradient.\n\n    Args:\n        x (scalar, list, or np.array): Input values.\n        deriv (bool): If True, compute the derivative of SoftPlus; else, compute SoftPlus itself.\n    \n    Returns:\n        list or float: Rounded SoftPlus or its gradient values.\n    \"\"\"\n    # Convert x to a NumPy array for consistent processing\n    x_arr = np.asarray(x)\n\n    if deriv:\n        # For gradient, use the logistic/sigmoid function\n        result = 1 / (1 + np.exp(-x_arr))\n    else:\n        # For SoftPlus, use the numerically stable method\n        result = np.maximum(0, x_arr) + np.log1p(np.exp(-np.abs(x_arr)))\n\n    # Round the results to 4 decimal places\n    rounded_result = np.round(result, 4)\n\n    # Convert the result to a Python list, or return a float if the input was a scalar\n    if x_arr.size == 1:\n        return float(rounded_result)\n    else:\n        return rounded_result.tolist()\n\n# Check function to verify the correctness of the generated function.\ndef check_softplus():\n    test_cases = [\n        (1, False, 1.3133),\n        (np.array([-1, 0, 1]), False, [0.3133, 0.6931, 1.3133]),\n        ([-100, 100], True, [0.0, 1.0]),\n        (1, True, 0.7311)\n    ]\n    \n    all_passed = True\n    for idx, (input_val, deriv_flag, expected) in enumerate(test_cases):\n        result = softplus(input_val, deriv=deriv_flag)\n        if isinstance(expected, list):\n            if not np.allclose(result, expected, atol=1e-4):\n                print(f\"Test case {idx + 1} failed: expected {expected}, got {result}\")\n                all_passed = False\n        else:\n            if not np.isclose(result, expected, atol=1e-4):\n                print(f\"Test case {idx + 1} failed: expected {expected}, got {result}\")\n                all_passed = False\n                \n    if all_passed:\n        print(\"All test cases passed.\")\n        \ncheck_softplus()\n```\n\nThis solution defines the `softplus` function according to the task requirements and includes a `check_softplus` function to validate the implementation against some predefined test cases."}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter, defaultdict\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    \n    if N < 1:\n        raise ValueError(\"N must be >= 1\")\n    \n    # Count n-grams in the training corpus\n    ngram_counts = defaultdict(int)\n    context_counts = defaultdict(int)\n    \n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i + N])\n        context = tuple(corpus[i:i + N - 1])\n        \n        ngram_counts[ngram] += 1\n        context_counts[context] += 1\n    \n    # Calculate the log-probability of the sequence\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        context = tuple(sequence[i:i + N - 1])\n        \n        if ngram_counts[ngram] == 0 or context_counts[context] == 0:\n            return float('-inf')\n        \n        log_prob = np.log(ngram_counts[ngram]) - np.log(context_counts[context])\n        total_log_prob += log_prob\n    \n    return round(total_log_prob, 4)\n\n# Example usage:\n# corpus = [\"this\", \"is\", \"a\", \"test\", \"this\", \"is\", \"only\", \"a\", \"test\"]\n# sequence = [\"this\", \"is\", \"a\", \"test\"]\n# N = 2\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output: -3.2189\n```\n\n### Explanation:\n1. **Counting N-grams and Contexts**: We use `defaultdict(int)` to count occurrences of each n-gram and its preceding context (n-1 gram).\n   - `ngram_counts` keeps track of how often each n-gram appears in the corpus.\n   - `context_counts` keeps track of how often each context (the first N-1 words of the n-gram) appears in the corpus.\n\n2. **Calculating Log-Probabilities**: For each position in the sequence, we extract the n-gram and its context. We then compute the log-probability using the formula:\n   \\[\n   \\text{log\\_prob} = \\log\\left(\\frac{\\text{count(n-gram)}}{\\text{count(context)}}\\right)\n   \\]\n   If any of these counts are zero, we return `-inf` immediately.\n\n3. **Rounding the Result**: Finally, we return the total log-probability rounded to 4 decimal places.\n\nThis solution ensures that the function handles all edge cases, including when the n-gram or its context is not found in the corpus, and correctly computes the log-probability as specified."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(\n    X: list[float] | \"np.ndarray\", \n    y: list[float] | \"np.ndarray\", \n    degree: int, \n    reg_factor: float, \n    n_iterations: int = 1000, \n    tol: float = 1e-6\n) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays if they aren't already\n    X = np.array(X)\n    y = np.array(y)\n        \n    # Generate polynomial features\n    num_samples = len(X)\n    design_matrix = np.stack([X**i for i in range(degree + 1)], axis=1)\n\n    # Add a column of ones to the design matrix for the bias term\n    design_matrix = np.hstack((np.ones((num_samples, 1)), design_matrix))\n    \n    # Initialize weights\n    weights = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        max_change = 0\n        \n        # Update the bias term\n        weights[0] = np.mean(y - np.dot(design_matrix[:, 1:], weights[1:]))\n        \n        # Update the other weights using coordinate descent\n        for j in range(1, len(weights)):\n            # Compute \u03c1\n            rho = np.dot(design_matrix[:, j], y - np.dot(design_matrix, weights)) \n            # Apply soft thresholding\n            weights[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / np.dot(design_matrix[:, j], design_matrix[:, j])\n            \n            # Track the largest change in any weight\n            max_change = max(max_change, abs(weights[j] - np.sign(rho) * max(abs(rho) - reg_factor, 0) / np.dot(design_matrix[:, j], design_matrix[:, j])))\n            \n            # Ensure weights are updated correctly\n            weights[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / np.dot(design_matrix[:, j], design_matrix[:, j])\n\n        # Check for convergence\n        if max_change < tol:\n            break\n\n    return [round(weight, 4) for weight in weights]\n\n# Example usage\nif __name__ == \"__main__\":\n    X = [1, 2, 3, 4, 5]\n    y = [2, 4, 6, 8, 10]\n    degree = 2\n    reg_factor = 0.1\n    result = lasso_regression(X, y, degree, reg_factor)\n    print(result)\n```"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list of list of float): Transition probability matrix of shape (N, N).\n    B (list of list of float): Emission probability matrix of shape (N, M).\n    obs (list of int): Observation sequence of length T.\n    t (int): Time index (0 <= t < T) for which to calculate the backward probabilities.\n    \n    Returns:\n    list of float: The backward probability vector \u03b2_t rounded to 4 decimal places.\n    \"\"\"\n    \n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    num_states = len(A)  # Assuming A is a square matrix\n    \n    # Initialize the backward probability vector \u03b2_T-1\n    beta = [1.0] * num_states\n    \n    # Iterate backward from t to T-1\n    for tau in range(t + 1, len(obs)):\n        new_beta = []\n        for i in range(num_states):\n            prob = sum(A[i, j] * B[j, obs[tau]] * beta[j] for j in range(num_states))\n            new_beta.append(prob)\n        beta = new_beta\n    \n    return [round(val, 4) for val in beta]\n\n# Example usage:\ntransition_matrix = [[0.7, 0.3], [0.4, 0.6]]\nemission_matrix = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservation_sequence = [0, 1, 2]\ntime_index = 1\n\nprint(backward_beta(transition_matrix, emission_matrix, observation_sequence, time_index))\n```\n\nThis code defines the `backward_beta` function which computes the backward probability vector \\(\\beta_t\\) for a specified time index \\(t\\) within a Hidden Markov Model. It takes the transition probability matrix \\(A\\), emission probability matrix \\(B\\), the observation sequence \\(obs\\), and the time index \\(t\\) as inputs. It outputs a list of backward probabilities rounded to four decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    \n    if not A or not B or not pi or not obs:\n        return 0.0\n    \n    N = len(pi)\n    T = len(obs)\n\n    # Initialize beta values\n    beta = [[0.0 for _ in range(N)] for _ in range(T)]\n    \n    # Base case initialization\n    for i in range(N):\n        beta[T - 1][i] = 1.0  # log(1.0) = 0.0\n\n    # Fill in the beta table backwards\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t][i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n    \n    # Compute the final probability\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N))\n\n    return round(prob, 6)\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\npi = [0.6, 0.4]\nobs = [0, 1, 2]\n\nprint(backward_prob(A, B, pi, obs))\n```\n\nThis implementation defines the `backward_prob` function which computes the probability of generating the given observation sequence `obs` using the backward algorithm in a Hidden Markov Model (HMM). It handles the base case initialization, fills in the beta table backwards, and finally computes the probability of the observation sequence. The result is rounded to six decimal places before being returned."}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    if len(S.shape) != 1 or len(A.shape) != 2 or len(B.shape) != 2:\n        return -1\n    \n    n_states = S.shape[0]\n    if A.shape != (n_states, n_states) or B.shape[0] != n_states:\n        return -1\n    \n    n_observations = observations.shape[0]\n    if n_observations == 0:\n        return -1\n    if B.shape[1] != np.max(observations) + 1:\n        return -1\n    if np.min(observations) < 0 or np.max(observations) >= B.shape[1]:\n        return -1\n    \n    # Initialize alpha values\n    alphas = np.zeros((n_observations, n_states))\n    alphas[0, :] = S * B[:, observations[0]]\n    \n    # Implement the forward algorithm\n    for t in range(1, n_observations):\n        for j in range(n_states):\n            alphas[t, j] = np.sum(alphas[t-1, :] * A[:, j]) * B[j, observations[t]]\n    \n    # The probability of the observation sequence is the sum of the last row of alphas\n    prob_obs_sequence = np.round(np.sum(alphas[-1, :]), 4)\n    \n    return prob_obs_sequence\n\n# Example usage:\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]\n\nprint(forward_algorithm(S, A, B, observations))  # Expected output: Rounded probability\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input dimensions are correct. It ensures that `S` is a vector, `A` and `B` are matrices with appropriate dimensions, and the observation indices are within the valid range.\n2. **Initialization**: The `alphas` array is initialized to store the forward variables for each time step and each state.\n3. **Forward Algorithm**: The algorithm iteratively updates the `alphas` values using the transition and emission probabilities.\n4. **Result**: The final probability of the observation sequence is computed as the sum of the last row of `alphas`, and it is rounded to four decimal places before being returned."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    \n    def create_header_table(transactions):\n        header_table = {}\n        for tid, transaction in enumerate(transactions):\n            for item in transaction:\n                if item not in header_table:\n                    header_table[item] = [0, None]\n                header_table[item][0] += 1\n                header_table[item][1] = tid\n        return {k: v for k, v in header_table.items() if v[0] >= min_support}\n\n    def build_fp_tree(transactions, header_table):\n        root = FPNode()\n        for tid, transaction in enumerate(transactions):\n            for item in sorted(transaction, key=lambda x: header_table[x][0], reverse=True):\n                if item in header_table:\n                    update_path(root, item, tid)\n        return root\n\n    def update_path(node, item, tid):\n        if node.item == item:\n            node.count += 1\n            node.transactions.add(tid)\n        else:\n            if not node.children:\n                node.children[item] = FPNode(item=item)\n            update_path(node.children[item], item, tid)\n\n    def find_prefix_paths(tree, item):\n        path = []\n        if tree.item == item:\n            path.append(tree.transactions)\n        for child in tree.children.values():\n            if child.item != item:\n                find_prefix_paths(child, item)\n        return path\n\n    def mine_fp_tree(tree, header_table, prefix):\n        frequent_items = []\n        if not tree.children:\n            return frequent_items\n        \n        for item in sorted(header_table.keys()):\n            new_prefix = prefix + [item]\n            frequent_items.append(new_prefix)\n            conditional_tree, conditional_header = construct_conditional_tree(tree, item)\n            if conditional_header:\n                frequent_items.extend(mine_fp_tree(conditional_tree, conditional_header, new_prefix))\n        return frequent_items\n\n    def construct_conditional_tree(tree, item):\n        paths = find_prefix_paths(tree, item)\n        header_table = create_header_table(paths)\n        if not header_table:\n            return None, header_table\n\n        conditional_tree = build_fp_tree(paths, header_table)\n        return conditional_tree, header_table\n\n    class FPNode:\n        def __init__(self, item=None):\n            self.item = item\n            self.count = 0\n            self.transactions = set()\n            self.children = {}\n\n    if not transactions:\n        return []\n\n    header_table = create_header_table(transactions)\n    if not header_table:\n        return []\n\n    fp_tree = build_fp_tree(transactions, header_table)\n    frequent_itemsets = mine_fp_tree(fp_tree, header_table, [])\n    \n    # Sort each itemset lexicographically\n    frequent_itemsets = [sorted(itemset) for itemset in frequent_itemsets]\n\n    # Sort the outer list by length and then lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['A', 'B', 'C'],\n    ['B', 'C', 'D'],\n    ['A', 'D'],\n    ['B', 'D'],\n    ['C', 'D']\n]\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis implementation of the FP-Growth algorithm constructs an FP-tree from the given transactions and recursively mines frequent itemsets from the tree. It ensures that each itemset is sorted lexicographically and the final list of frequent itemsets is sorted by their length and lexicographical order."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (isinstance(k, int) and 1 <= k <= len(X_train)):\n        return [-1]\n\n    def euclidean_distance(a, b):\n        return np.sum([(aa - bb) ** 2 for aa, bb in zip(a, b)])\n    \n    def predict_single(x):\n        distances = [(euclidean_distance(x, x_train), y_train[i]) for i, x_train in enumerate(X_train)]\n        nearest = [y for _, y in sorted(distances)[:k]]\n        return min(set(nearest), key=lambda class_label: (-nearest.count(class_label), class_label))\n    \n    return [predict_single(sample) for sample in X_test]\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [5, 6]]\ny_train = [0, 1, 0, 1]\nX_test = [[1, 1], [4, 5]]\nk = 3\n\npredictions = knn_predict(X_train, y_train, X_test, k)\nprint(predictions)  # Output will depend on the dataset provided\n```\n\nThis solution includes all necessary parts: defining the Euclidean distance function, finding the k-nearest neighbors for each test point, and handling the tie-breaking condition by selecting the smallest class label. Additionally, it checks if `k` is a valid input before proceeding with the classification."}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define machine epsilon for numerical stability\n    epsilon = np.finfo(y_pred.dtype).eps\n    y_pred += epsilon\n    \n    # Compute the loss\n    loss = -np.sum(y * np.log(y_pred))\n    \n    # Return the result rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = [[0, 1], [1, 0]]\n# y_pred = [[0.25, 0.75], [0.8, 0.2]]\n# print(cross_entropy_loss(y, y_pred))  # Should output the appropriate loss value\n```\n\nThis function takes the one-hot encoded true labels `y` and the predicted probabilities `y_pred` as input, computes the unnormalized categorical cross-entropy loss, and returns the result rounded to four decimal places. It ensures numerical stability by adding machine epsilon to `y_pred` before taking the logarithm."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"Apply the ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Apply the sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef initialize_parameters(layer_dims: list[int]) -> dict[str, np.ndarray]:\n    \"\"\"Initialize the parameters for a neural network.\n\n    Parameters\n    ----------\n    layer_dims : list[int]\n        List of integers defining the dimensions of each layer.\n\n    Returns\n    -------\n    dict[str, np.ndarray]\n        A dictionary containing initialized parameters W1, b1, ..., WL, bL.\n    \"\"\"\n    np.random.seed(3)\n    parameters = {}\n    L = len(layer_dims)  # number of layers in the network\n    \n    for l in range(1, L):\n        parameters[f'W{l}'] = np.random.randn(layer_dims[l], layer_dims[l - 1]) * 0.01\n        parameters[f'b{l}'] = np.zeros((layer_dims[l], 1))\n        \n    return parameters\n\ndef linear_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray) -> tuple[np.ndarray, dict[str, np.ndarray]]:\n    \"\"\"Compute the linear part of the forward propagation.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activation from the previous layer of shape (size of previous layer, number of examples).\n    W : np.ndarray\n        Weights matrix of shape (size of current layer, size of previous layer).\n    b : np.ndarray\n        Bias vector of shape (size of current layer, 1).\n\n    Returns\n    -------\n    tuple[np.ndarray, dict[str, np.ndarray]]\n        The linear activation Z and a cache dictionary.\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    cache = (A_prev, W, b)\n    \n    return Z, cache\n\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str) -> tuple[np.ndarray, dict[str, np.ndarray]]:\n    \"\"\"Perform the forward propagation for one layer.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activation from the previous layer (or input data) of shape (size of previous layer, number of examples).\n    W : np.ndarray\n        Weights matrix of shape (size of current layer, size of previous layer).\n    b : np.ndarray\n        Bias vector of shape (size of current layer, 1).\n    activation : str\n        Activation function to use: 'sigmoid' or 'relu'.\n\n    Returns\n    -------\n    tuple[np.ndarray, dict[str, np.ndarray]]\n        The activated output and a cache dictionary.\n    \"\"\"\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A = sigmoid(Z)\n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A = relu(Z)\n    \n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    \n    return A, cache\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[np.ndarray, list[dict[str, np.ndarray]]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[np.ndarray, list[dict[str, np.ndarray]]]\n        The final activation AL rounded to 4 decimal places and converted to a regular Python list.\n        The shape is (1, m). And the list of caches.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], activation=\"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters[f'WL'], parameters[f'bL'], activation=\"sigmoid\")\n    caches.append(cache)\n    \n    # Convert AL to a regular Python list and round to 4 decimal places.\n    AL_list = np.round(AL, 4).tolist()\n    \n    return AL_list, caches\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is within a small range to avoid log(0)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n\n    # Number of samples\n    m = A2.shape[1] if A2.ndim == 2 else A2.shape[0]\n\n    # Compute the cost\n    cost = -1/m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n\n    return round(float(cost), 6)\n\n# Example usage:\n# A2 = np.array([[0.7, 0.9, 0.3, 0.5]])\n# Y = np.array([[1, 1, 0, 0]])\n# print(compute_cost(A2, Y))  # This should print the cost rounded to 6 decimal places.\n```\n\nThis script defines the `compute_cost` function which calculates the binary cross-entropy cost between the predicted probabilities `A2` and the true labels `Y`. It ensures numerical stability by clipping the values of `A2` to avoid taking the logarithm of zero. The result is then rounded to six decimal places as required."}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array for convenience\n    Q = np.array(Q, dtype=np.float64)\n    n = len(Q)\n    \n    # Find the index of the greedy action (first occurrence in case of tie)\n    greedy_index = np.argmax(Q)\n    \n    # Calculate the base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Calculate the probability for the greedy action\n    greedy_prob = 1 - epsilon + base_prob\n    \n    # Initialize the probabilities array with the base probability\n    probs = np.full(n, base_prob, dtype=np.float64)\n    \n    # Set the probability for the greedy action\n    probs[greedy_index] = greedy_prob\n    \n    # Round to 4 decimal places and ensure the sum is 1 within a small tolerance\n    probs = np.round(probs, 4)\n    \n    # If rounding causes the sum to drift away from 1, correct it\n    if not np.isclose(probs.sum(), 1.0, atol=1e-12):\n        # Determine the discrepancy\n        discrepancy = probs.sum() - 1.0\n        \n        # Adjust the greedy probability to correct the discrepancy\n        # This ensures the sum remains exactly 1\n        probs[greedy_index] -= discrepancy\n    \n    return list(probs)\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis solution correctly implements the \u03b5-soft exploration policy by calculating the probabilities for each action based on the given Q-values and the exploration parameter \u03b5. It ensures that all probabilities sum to 1 within a specified tolerance and rounds the probabilities to 4 decimal places."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Initialize the list to hold the final majority vote result\n    final_predictions = []\n\n    # Get the number of samples (columns)\n    num_samples = len(predictions[0])\n\n    # Iterate through each sample's predictions\n    for col_index in range(num_samples):\n        # Collect votes from all trees for the current sample\n        votes = [predictions[row_index][col_index] for row_index in range(len(predictions))]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label(s) with the maximum votes\n        max_count = max(vote_counts.values())\n        winning_classes = [cls for cls, count in vote_counts.items() if count == max_count]\n        \n        # Break ties by choosing the smallest label\n        final_prediction = min(winning_classes)\n        \n        # Append the final prediction for this sample to the result list\n        final_predictions.append(final_prediction)\n\n    return final_predictions\n\n# Example usage:\n\n# Numeric labels\npredictions_numeric = [\n    [0, 1, 1, 2],\n    [1, 1, 2, 2],\n    [0, 1, 1, 2]\n]\nprint(aggregate_random_forest_votes(predictions_numeric))\n# Expected output: [0, 1, 1, 2]\n\n# String labels\npredictions_string = [\n    ['cat', 'dog', 'bird'],\n    ['dog', 'dog', 'cat'],\n    ['bird', 'cat', 'dog']\n]\nprint(aggregate_random_forest_votes(predictions_string))\n# Expected output: ['bird', 'cat', 'dog']\n\n# Floating-point labels\npredictions_float = [\n    [0.5, 0.2, 0.7],\n    [0.6, 0.2, 0.8],\n    [0.4, 0.2, 0.7]\n]\nprint(aggregate_random_forest_votes(predictions_float))\n# Expected output: [0.5, 0.2, 0.7]\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to NumPy array if it's not already\n    z_array = np.asarray(z)\n    \n    # Compute the softplus using the numerically stable logaddexp\n    sp_values = np.logaddexp(0.0, z_array)\n    \n    # Round to 4 decimal places\n    sp_rounded = np.round(sp_values, 4)\n    \n    # Convert back to Python list if the input was a list or ndarray, else return float\n    if isinstance(z, (list, np.ndarray)):\n        return sp_rounded.tolist()\n    else:\n        return float(sp_rounded)\n\n# Example usage:\nz = np.array([-1000, 0, 3])\noutput = softplus(z)\nprint(output)  # Expected: [0.0, 0.6931, 3.0486]\n```\n\n### Explanation:\n- **Conversion**: The input `z` is first converted to a NumPy array using `np.asarray`. This handles both scalar and array-like inputs seamlessly.\n- **Numerical Stability**: Instead of directly computing `np.log(1 + np.exp(z))`, we use `np.logaddexp(0.0, z)` to prevent numerical overflow or underflow.\n- **Rounding**: The results are rounded to four decimal places using `np.round`.\n- **Output Handling**: If the input was a list or NumPy array, the output is converted to a pure Python list using `tolist()`. Otherwise, a single `float` is returned for scalar inputs."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Extract the true expected values from the bandit\n    true_values = bandit.get('arm_evs', [])\n    \n    # Extract the estimated values from the policy\n    estimates = policy.get('ev_estimates', {})\n    \n    # Check if the policy has no estimates\n    if not estimates:\n        return np.nan\n    \n    # Sort the keys of the estimates to match the order of true_values\n    sorted_indices = sorted(estimates.keys())\n    \n    # Compute the squared errors\n    squared_errors = [(estimates[i] - true_values[i]) ** 2 for i in sorted_indices]\n    \n    # Calculate the mean of the squared errors\n    mean_squared_error = np.mean(squared_errors)\n    \n    # Return the mean squared error rounded to 4 decimal places\n    return round(mean_squared_error, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    \n    # Step 1: Build vocabulary including \"<UNK>\"\n    vocabulary = {\"<UNK>\"}  # Start with the unknown token\n    for sentence in corpus:\n        for word in sentence.split():\n            vocabulary.add(word)\n    vocab_size = len(vocabulary)\n\n    # Step 2: Build N-gram frequency tables\n    ngram_freqs = [defaultdict(int) for _ in range(N+1)]\n    for sentence in corpus:\n        tokens = [\"<s>\"] * (N-1) + sentence.split() + [\"</s>\"]\n        for i in range(len(tokens) - N + 1):\n            context = tuple(tokens[i:i+N])\n            ngram_freqs[len(context)-1][context] += 1\n\n    # Step 3: Tokenize the target sentence and add \"<UNK>\" for unseen words\n    sequence_tokens = []\n    for word in sequence.split():\n        if word in vocabulary:\n            sequence_tokens.append(word)\n        else:\n            sequence_tokens.append(\"<UNK>\")\n    sequence_tokens = [\"<s>\"] * (N-1) + sequence_tokens + [\"</s>\"]\n\n    # Step 4: Compute the smoothed log-probability of the sequence\n    if len(sequence_tokens) < N:\n        return 0.0  # No N-grams exist\n\n    total_log_prob = 0.0\n    for i in range(len(sequence_tokens) - N + 1):\n        context = tuple(sequence_tokens[i:i+N])\n        context_length = len(context) - 1\n        count_context = ngram_freqs[context_length].get(context[:-1], 0)\n        count_context_wi = ngram_freqs[context_length][context]\n\n        prob = (count_context_wi + K) / (count_context + K * vocab_size)\n        total_log_prob += math.log(prob)\n\n    return round(total_log_prob, 4)\n\n# Example usage:\n# corpus = [\"I love programming\", \"programming is fun\", \"I enjoy learning\"]\n# sequence = \"I love learning\"\n# N = 2\n# print(additive_ngram_log_prob(corpus, sequence, N))\n```\n\n### Explanation:\n1. **Vocabulary Construction**: We first create a set containing all unique words from the training corpus and explicitly include the `<UNK>` token.\n2. **N-gram Frequency Tables**: We construct frequency counters for 1-gram, 2-gram, ..., N-gram by iterating over each sentence in the corpus and tokenizing it with boundary tokens (`<s>` and `</s>`).\n3. **Target Sentence Handling**: The target sentence is tokenized, and any word not found in the vocabulary is replaced with `<UNK>`. Boundary tokens are added to handle cases where the sentence length is less than N.\n4. **Log-Probability Calculation**: For each N-gram in the target sentence, we compute its smoothed probability using the provided formula and accumulate the log-probabilities. If the sentence length is less than N, we return 0.0.\n5. **Rounding**: The final log-probability is rounded to four decimal places before returning."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    np.random.seed(0)\n    \n    # Initialize W and H with small random values\n    W = np.random.rand(N, K) * 0.1\n    H = np.random.rand(K, M) * 0.1\n    \n    prev_loss = np.inf\n    for _ in range(max_iter):\n        # Fix H and solve for W\n        for i in range(N):\n            A = H.T @ H + alpha * np.eye(K)\n            b = H.T @ X[i].T\n            W[i] = np.linalg.solve(A, b)\n        \n        # Fix W and solve for H\n        for j in range(M):\n            A = W.T @ W + alpha * np.eye(K)\n            b = W.T @ X[:, j]\n            H[:, j] = np.linalg.solve(A, b)\n        \n        # Compute the current reconstruction\n        X_hat = W @ H\n        \n        # Compute the regularized Frobenius reconstruction loss\n        loss = np.linalg.norm(X - X_hat, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        \n        # Check for convergence\n        if np.abs(prev_loss - loss) < tol:\n            break\n        prev_loss = loss\n    \n    # Reconstruct the final matrix\n    X_hat = W @ H\n    return np.round(X_hat, 4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# K = 2\n# result = als_factorization(X, K)\n# print(result)\n```\n\nThis script defines the `als_factorization` function which performs regularized Alternating Least Squares (ALS) matrix factorization. The function initializes the factor matrices \\( W \\) and \\( H \\) with small random values and iteratively updates them by solving regularized least squares problems. The process continues until the specified tolerance is reached or the maximum number of iterations is exceeded. The final reconstructed matrix is rounded to four decimal places and returned as a Python list of lists."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, _ = X.shape\n    centroids = select_initial_centroids(X, K)\n    \n    for _ in range(max_iter):\n        cluster_assignments = assign_points_to_clusters(X, centroids)\n        new_centroids = update_centroids(X, cluster_assignments, K)\n        \n        converged = np.allclose(centroids, new_centroids, atol=1e-4)\n        centroids = new_centroids.copy()\n        \n        if converged:\n            break\n    \n    return [list(map(round, centroid, [4]*len(centroid))) for centroid in sorted(centroids, key=lambda x: (x[0], x))]\n\ndef select_initial_centroids(X: np.ndarray, K: int) -> np.ndarray:\n    m, _ = X.shape\n    centroids = np.zeros((K, X.shape[1]))\n    centroids[0] = X[np.random.choice(range(m))]\n    for i in range(1, K):\n        D2 = np.array([min(np.linalg.norm(x - c)**2) for x, c in zip(X, centroids[:i])])\n        probs = D2 / D2.sum()\n        cum_probs = probs.cumsum()\n        r = np.random.rand()\n        for j, cum_prob in enumerate(cum_probs):\n            if r <= cum_prob:\n                centroids[i] = X[j]\n                break\n    return centroids\n\ndef assign_points_to_clusters(X: np.ndarray, centroids: np.ndarray) -> np.ndarray:\n    m, _ = X.shape\n    cluster_assignments = np.zeros(m)\n    for i, x in enumerate(X):\n        distances = np.linalg.norm(x - centroids, axis=1)\n        cluster_assignments[i] = np.argmin(distances)\n    return cluster_assignments.astype(int)\n\ndef update_centroids(X: np.ndarray, cluster_assignments: np.ndarray, K: int) -> np.ndarray:\n    _, n = X.shape\n    new_centroids = np.zeros((K, n))\n    for k in range(K):\n        points_in_cluster = X[cluster_assignments == k]\n        if len(points_in_cluster) > 0:\n            new_centroids[k] = np.mean(points_in_cluster, axis=0)\n        else:\n            new_centroids[k] = centroids[k]  # Keep the centroid unchanged if the cluster is empty\n    return new_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.]])\n# centroids = kmeans(X, 3, random_state=42)\n# print(centroids)\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It ensures reproducibility by setting the random seeds, initializes centroids using the K-Means++ procedure, performs Lloyd's iterations, and returns the final centroids rounded to four decimal places and sorted in ascending order by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encode the input text into a fixed-length list of integer token ids.\n    \n    Parameters:\n    - text: The raw text string to encode.\n    - time_steps: The desired fixed length of the output list.\n    - vocabulary: A dictionary mapping characters to integer ids.\n    \n    Returns:\n    A list of integer ids representing the encoded text, padded or truncated to `time_steps`.\n    \"\"\"\n    # Convert each character in the text to its corresponding integer id, using 0 for unknown chars\n    encoded = [vocabulary.get(c, 0) for c in text]\n    \n    # Ensure the encoded list has the correct length\n    if len(encoded) < time_steps:\n        # Pad the encoded list with zeros if it's shorter than `time_steps`\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        # Truncate the encoded list if it's longer than `time_steps`\n        encoded = encoded[:time_steps]\n    \n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decode a list of integer ids back into a human-readable string.\n    \n    Parameters:\n    - indices: A list or array of integer ids.\n    - inverse_vocab: A dictionary mapping integer ids to characters.\n    \n    Returns:\n    A string corresponding to the decoded integer ids, excluding padding tokens (id 0).\n    \"\"\"\n    # Filter out padding tokens (id 0) and map the remaining ids to characters\n    return ''.join(inverse_vocab[i] for i in indices if i != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input text, runs it through the model, decodes the output, and returns the result.\n    \n    Parameters:\n    - model: The trained model that performs the prediction.\n    - input_vocabulary: A dictionary mapping input characters to integer ids.\n    - inv_output_vocabulary: A dictionary mapping output integer ids to characters.\n    - text: The raw text string to process.\n    \n    Returns:\n    The decoded prediction string from the model.\n    \"\"\"\n    # Step 1: Encode the input text into a fixed-length sequence of integer ids\n    encoded_text = np.array(string_to_int(text, TIME_STEPS, input_vocabulary)).reshape((1, TIME_STEPS))\n    \n    # Step 2: Run the encoded text through the model\n    predictions = model.predict(encoded_text)\n    \n    # Step 3: Apply argmax over the last axis to get the predicted class ids\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    \n    # Step 4: Decode the predicted ids back into a human-readable string\n    decoded_prediction = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_prediction\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Define example vocabularies\n    example_input_vocabulary = {chr(i): i for i in range(128)}  # Basic ASCII mapping\n    example_inv_output_vocabulary = {i: chr(i) for i in range(128)}\n    \n    # Mock-up a model with a dummy predict method\n    class DummyModel:\n        def predict(self, x):\n            # Simple dummy behavior: return the input with random noise added\n            return np.random.rand(*x.shape, len(example_inv_output_vocabulary))\n    \n    dummy_model = DummyModel()\n    \n    # Example text\n    example_text = \"Hello, World!\"\n    \n    # Run the example\n    result = run_example(dummy_model, example_input_vocabulary, example_inv_output_vocabulary, example_text)\n    print(f\"Decoded Prediction: {result}\")\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # Ensure EXAMPLES is defined if examples is None\n    if examples is None:\n        if not hasattr(run_examples, 'EXAMPLES'):\n            raise ValueError(\"Global constant `EXAMPLES` must be defined when no examples are provided.\")\n        examples = run_examples.EXAMPLES\n\n    predictions = []\n\n    for example in examples:\n        # Call the helper function which returns a list of characters\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the characters into a single string\n        predicted_string = ''.join(predicted_chars)\n        \n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        \n        # Append the predicted string to the list\n        predictions.append(predicted_string)\n\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Define a simple global EXAMPLES for demonstration purposes\n    run_examples.EXAMPLES = [\"hello\", \"world\", \"python\"]\n\n    def mock_model(input_str):\n        # Simulate a simple prediction model by reversing the input string\n        return input_str[::-1]\n\n    # Dummy vocabulary for compatibility\n    input_vocabulary = {'h': 0, 'e': 1, 'l': 2, 'o': 3, 'w': 4, 'r': 5, 'd': 6, 'p': 7, 'y': 8, 't': 9}\n    inv_output_vocabulary = {0: 'h', 1: 'e', 2: 'l', 3: 'o', 4: 'w', 5: 'r', 6: 'd', 7: 'p', 8: 'y', 9: 't'}\n\n    def run_example(model, input_vocabulary, inv_output_vocabulary, example):\n        # This is a placeholder for the actual implementation of run_example.\n        # It should return a list of characters representing the model's output.\n        # For demonstration purposes, we use the mock_model here.\n        predicted_string = model(example)\n        return [char for char in predicted_string]\n\n    # Run the examples\n    predictions = run_examples(mock_model, input_vocabulary, inv_output_vocabulary)\n    print(\"Predictions:\", predictions)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    \n    m, _ = X.shape  # Number of samples\n    eps = 1e-20\n    \n    # Compute predictions\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Apply epsilon correction to avoid log(0) or log(1)\n    p = np.clip(p, eps, 1 - eps)\n    \n    # Compute loss\n    loss = -1/m * (np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)))\n    rounded_loss = round(loss, 4)\n    \n    # Compute gradient\n    gradient = 1/m * np.dot(X.T, (p - y))\n    rounded_gradient = np.round(gradient, 4).tolist()\n    \n    return rounded_loss, rounded_gradient\n\n# Example usage:\n# X = np.array([[1, 2], [1, 3], [1, 4]], dtype=float)\n# y = np.array([0, 1, 1], dtype=float).reshape(-1, 1)\n# w = np.array([0.1, 0.2], dtype=float)\n# print(logistic_loss_and_gradient(X, y, w))\n```\n\nThis script defines the `logistic_loss_and_gradient` function which computes the average binary cross-entropy loss and its gradient for logistic regression as per the problem statement. It includes the necessary numerical stability checks by applying a small constant (`eps`) to avoid taking the log of zero or one. The results are rounded to four decimal places and the gradient is converted into a nested Python list."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\r\nfrom typing import List\r\n\r\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> List[int]:\r\n    \"\"\"\r\n    Train AdaBoost with decision stumps and predict labels for X_test.\r\n    \r\n    Args:\r\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\r\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\r\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\r\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\r\n\r\n    Returns:\r\n        A Python list of length k, each element being either -1 or 1,\r\n        the predicted class for the corresponding row in `X_test`.\r\n    \"\"\"\r\n    m, n = X_train.shape\r\n    k = X_test.shape[0]\r\n    n_clf = max(1, n_clf)  # Ensure at least one classifier\r\n\r\n    # Initialize weights\r\n    w = np.full(m, 1 / m)\r\n    \r\n    # Create empty lists to store classifiers and their weights\r\n    classifiers = []\r\n    classifier_weights = []\r\n\r\n    # Function to train a decision stump\r\n    def train_decision_stump(X, y, w):\r\n        best_error = float('inf')\r\n        best_feature = None\r\n        best_threshold = None\r\n        best_sign = None\r\n        \r\n        for feature in range(n):\r\n            thresholds, _ = np.meshgrid(np.unique(X[:, feature]), y)\r\n            for threshold, label in zip(thresholds.flatten(), _.flatten()):\r\n                pred = np.where(X[:, feature] > threshold, 1, -1)\r\n                errors = (pred != label).astype(int)\r\n                weighted_error = np.sum(w * errors)\r\n\r\n                if weighted_error < best_error:\r\n                    best_error = weighted_error\r\n                    best_feature = feature\r\n                    best_threshold = threshold\r\n                    best_sign = 1 if weighted_error < 0.5 else -1\r\n\r\n                # Swap to check the other direction\r\n                errors = (np.where(X[:, feature] <= threshold, 1, -1) != label).astype(int)\r\n                weighted_error = np.sum(w * errors)\r\n\r\n                if weighted_error < best_error:\r\n                    best_error = weighted_error\r\n                    best_feature = feature\r\n                    best_threshold = threshold\r\n                    best_sign = -1\r\n                    \r\n        return best_feature, best_threshold, best_sign, best_error\r\n\r\n    for _ in range(n_clf):\r\n        feature, threshold, sign, weighted_err = train_decision_stump(X_train, y_train, w)\r\n        stump = lambda X: np.where(X[:, feature] > threshold, 1, -1) * sign\r\n        classifiers.append(stump)\r\n        epsilon_t = weighted_err / np.sum(w)\r\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\r\n        classifier_weights.append(alpha_t)\r\n        w *= np.exp(-alpha_t * y_train * np.array([stump(x) for x in X_train]))\r\n        w /= np.sum(w)\r\n\r\n    def predict_single(x):\r\n        score = sum(alpha * clf(x) for clf, alpha in zip(classifiers, classifier_weights))\r\n        return np.sign(score).item()\r\n\r\n    predictions = [predict_single(sample) for sample in X_test]\r\n    return predictions\r\n\r\n# Example usage and verification\r\nif __name__ == \"__main__\":\r\n    from sklearn.datasets import make_classification\r\n    import random\r\n\r\n    # Generate synthetic dataset\r\n    X_train, y_train = make_classification(n_samples=100, n_features=20, n_informative=2, n_redundant=10, n_classes=2, n_clusters_per_class=1, flip_y=0.03, weights=[0.7, 0.3], random_state=42)\r\n    y_train[y_train == 0] = -1  # Convert to -1 and 1\r\n\r\n    # Create test set\r\n    X_test, y_test = make_classification(n_samples=20, n_features=20, n_informative=2, n_redundant=10, n_classes=2, n_clusters_per_class=1, flip_y=0.03, weights=[0.7, 0.3], random_state=84)\r\n    y_test[y_test == 0] = -1  # Convert to -1 and 1\r\n\r\n    # Define number of classifiers\r\n    n_clf = random.randint(1, 10)\r\n\r\n    # Predict using AdaBoost with Decision Stumps\r\n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=n_clf)\r\n\r\n    # Print results for verification\r\n    print(f\"First 5 Predicted Labels: {predictions[:5]}\")\r\n    print(f\"First 5 True Labels: {list(y_test)[:5]}\")\r\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    num_classes = len(classes)\n    num_samples, num_features = X.shape\n\n    # Mean of each class\n    means_per_class = {cls: X[y == cls].mean(axis=0) for cls in classes}\n    overall_mean = X.mean(axis=0)\n\n    # Within-class scatter matrix\n    S_W = np.zeros((num_features, num_features))\n    for cls in classes:\n        X_cls = X[y == cls]\n        deviations = X_cls - means_per_class[cls]\n        S_W += deviations.T.dot(deviations)\n\n    # Between-class scatter matrix\n    S_B = np.zeros((num_features, num_features))\n    for cls in classes:\n        N_c = X[y == cls].shape[0]\n        deviation = means_per_class[cls] - overall_mean\n        S_B += N_c * (deviation[:, np.newaxis]).dot(deviation[:, np.newaxis].T)\n\n    # Pseudo-inverse of S_W\n    pinv_S_W = np.linalg.pinv(S_W)\n\n    # Matrix A for eigen-decomposition\n    A = pinv_S_W.dot(S_B)\n\n    # Eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Sort eigenvalues in descending order and get corresponding eigenvectors\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Fix the sign of eigenvectors\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Select top n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n\n    # Project the data\n    projected_data = X.dot(W)\n    \n    # Round and convert to list of lists\n    rounded_projected_data = np.round(projected_data, 4).tolist()\n\n    return rounded_projected_data\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\n    y = np.array([0,0,0,0,1,1,1,1])\n    n_components = 1\n    print(multi_class_lda(X, y, n_components))\n```\n\nThis script provides a complete implementation of multi-class Linear Discriminant Analysis (LDA), including the computation of within and between-class scatter matrices, solving the generalized eigenvalue problem, fixing the sign of eigenvectors, and projecting the data onto the selected eigenvectors."}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    \n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    if n == 1 and grid[0][0] == '.':\n        return 0\n\n    # Directions for fire spread and agent movement\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    \n    # Queue for BFS, storing (time, x, y)\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])  # (time, x, y)\n    \n    # Visited set for agent\n    visited = set((0, 0))\n    \n    # Add all initial fire positions to the fire queue\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                grid[i][j] = '#'  # Mark as burned\n\n    # Spread the fire across the grid\n    time = 0\n    while fire_queue:\n        new_fire_queue = deque()\n        for _ in range(len(fire_queue)):\n            x, y = fire_queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':\n                    grid[nx][ny] = 'F'\n                    new_fire_queue.append((nx, ny))\n        fire_queue = new_fire_queue\n        time += 1\n\n    # BFS for the agent to find the shortest path\n    while agent_queue:\n        t, x, y = agent_queue.popleft()\n        \n        if x == n - 1 and y == n - 1:\n            return t\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != 'F':\n                visited.add((nx, ny))\n                agent_queue.append((t + 1, nx, ny))\n                \n    return -1\n```\n\nThis solution involves two main steps:\n1. Spreading the fire across the grid using BFS until all possible fire spread stops.\n2. Using BFS again for the agent to find the shortest path from the starting point to the end point, ensuring the agent does not step into any burning cells.\n\nThe BFS for fire spreading ensures that the fire map is up-to-date before the agent starts moving. The BFS for the agent ensures that the shortest path is found efficiently."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n\n    # Helper function to compute distances based on the specified metric\n    def compute_distance(xi, xj, metric):\n        if metric == 'euclidean':\n            return distance.euclidean(xi, xj)\n        elif metric == 'manhattan':\n            return distance.cityblock(xi, xj)\n        elif metric == 'cosine':\n            return distance.cosine(xi, xj)\n        else:\n            return distance.euclidean(xi, xj)  # Fallback to Euclidean\n\n    predictions = []\n    for test_sample in X_test:\n        neighbor_distances = []\n        \n        # Calculate distances from the test sample to all training samples\n        for train_sample, label in zip(X_train, y_train):\n            dist = compute_distance(test_sample, train_sample, metric)\n            neighbor_distances.append((dist, label))\n        \n        # Sort the distances and select the top-k neighbors\n        neighbor_distances.sort()\n        top_k_neighbors = neighbor_distances[:k]\n        \n        # Perform majority vote; in case of a tie, choose the smallest label\n        label_votes = {label: 0 for _, label in top_k_neighbors}\n        for _, label in top_k_neighbors:\n            label_votes[label] += 1\n        \n        predicted_label = min(label_votes, key=lambda label: (-label_votes[label], label))\n        predictions.append(predicted_label)\n    \n    return np.array(predictions)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data for testing\n    X_train = np.array([[0, 0], [1, 1], [2, 2], [3, 3]])\n    y_train = np.array([0, 1, 0, 1])\n    X_test = np.array([[0.5, 0.5], [2.5, 2.5]])\n    k = 3\n    \n    print(knn_predict(X_train, y_train, X_test, k=k, metric='euclidean'))\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbors algorithm according to the given specifications. It includes handling for different distance metrics and resolves ties by choosing the smallest label. The example usage at the bottom demonstrates how to use the function with sample data."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(vec1, vec2):\n    \"\"\"Compute the Euclidean distance between two vectors.\"\"\"\n    return np.sqrt(np.sum((vec1 - vec2) ** 2))\n\ndef manhattan_distance(vec1, vec2):\n    \"\"\"Compute the Manhattan distance between two vectors.\"\"\"\n    return np.sum(np.abs(vec1 - vec2))\n\ndef cosine_distance(vec1, vec2, epsilon=1e-12):\n    \"\"\"Compute the Cosine distance between two vectors.\"\"\"\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return 1 - (dot_product / (norm_vec1 * norm_vec2 + epsilon))\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    predictions = []\n    \n    for test_sample in X_test:\n        distances = []\n        \n        for i, train_sample in enumerate(X):\n            if metric == 'euclidean':\n                dist = euclidean_distance(test_sample, train_sample)\n            elif metric == 'manhattan':\n                dist = manhattan_distance(test_sample, train_sample)\n            elif metric == 'cosine':\n                dist = cosine_distance(test_sample, train_sample)\n            else:\n                raise ValueError(\"Unsupported distance metric.\")\n            \n            distances.append((dist, y[i]))\n        \n        # Sort by distance\n        sorted_distances = sorted(distances, key=lambda x: x[0])\n        k_nearest_labels = [label for _, label in sorted_distances[:k]]\n        \n        # Majority vote with tie-breaking by smallest label\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        predictions.append(min([label for label in unique_labels if label == most_common_label]))\n\n    return predictions.tolist()\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 2], [4, 5]])\n# print(knn_predict(X_train, y_train, X_test, k=2, metric='euclidean'))\n```\n\nThis code defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm from scratch. It uses helper functions to compute the Euclidean, Manhattan, and Cosine distances between vectors. The function takes a training dataset, labels, a test dataset, the number of neighbors \\( k \\), and the distance metric as inputs and returns the predicted labels for the test dataset."}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array if it's not already\n    state = np.array(state)\n    \n    # First linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Third linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Return the action as a list rounded to 4 decimal places\n    return list(np.round(action, 4))\n\n# Example usage:\n# weights = {\n#     'W1': np.array([[0.1, 0.2], [0.3, 0.4]]),\n#     'b1': np.array([0.1, 0.2]),\n#     'W2': np.array([[0.3, 0.4], [0.5, 0.6]]),\n#     'b2': np.array([0.3, 0.4]),\n#     'W3': np.array([[0.5, 0.6], [0.7, 0.8]]),\n#     'b3': np.array([0.5, 0.6])\n# }\n# state = [1.0, 2.0]\n# print(actor_forward(state, weights))\n```\n\nThis script defines the `actor_forward` function which implements the forward pass of the described neural network architecture using NumPy. It processes the input state through the network and returns the resulting action vector, rounding each component to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\"\"\"\n    \n    m, n = X.shape\n    \n    # Step 1: Add intercept column if needed\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    n += fit_intercept\n    \n    # Initialize parameters\n    w = np.zeros(n)\n    \n    for iteration in range(max_iters):\n        # Compute residuals after excluding intercept from L1 penalty\n        if fit_intercept:\n            residuals = y - np.dot(X[:, 1:], w[1:])\n            w[0] = np.mean(residuals)  # Update intercept\n        else:\n            residuals = y\n        \n        # Coordinate loop over each weight (excluding intercept)\n        for j in range(1, n) if fit_intercept else range(n):\n            # Step 2: Set w_j to 0 temporarily to compute partial residual\n            w[j] = 0\n            r_j = residuals + np.dot(X[:, j], w[j])\n            \n            # Soft-thresholding operator\n            def soft_threshold(a, tau):\n                return np.sign(a) * max(abs(a) - tau, 0)\n            \n            # Update weight\n            w[j] = soft_threshold(np.dot(X[:, j], r_j), lambda_param) / np.sum(X[:, j] ** 2)\n    \n    # Return weights and bias, rounded to 4 decimal places\n    return [round(x, 4) for x in w[1:]], round(w[0], 4) if fit_intercept else 0.0\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([2, 3, 4, 5])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis implementation follows the specified guidelines and uses only NumPy to perform Lasso regression via coordinate descent. The function initializes parameters, iteratively updates weights using the soft-thresholding operator, and returns the final intercept and weight vector, both rounded to four decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays for convenience\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if len(x) != len(y):\n        return -1\n    \n    # Calculate the number of differing elements\n    differing_elements = np.sum(x != y)\n    \n    # Compute the normalized Hamming distance\n    distance = differing_elements / len(x)\n    \n    # Return the result rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        ([1, 2, 3], [1, 2, 4], 0.3333),  # Vectors partially match\n        ([1, 1, 1], [0, 0, 0], 1.0000),   # All elements differ\n        ([1, 2], [1, 2, 3], -1),          # Different lengths\n        ([7, 8, 9], [7, 8, 9], 0.0000),   # Identical vectors\n    ]\n    \n    all_passed = True\n    for i, (x, y, expected) in enumerate(test_cases):\n        result = hamming_distance(x, y)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n```\n\nThis script defines the `hamming_distance` function according to the problem specifications and includes example test cases to verify its correctness."}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n\n    n = np.arange(N)\n    scaled_n = 2 * np.pi * n / (N - 1)\n\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(scaled_n)\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(scaled_n)\n    elif window == \"blackman_harris\":\n        a = np.array([0.35875, 0.48829, 0.14128, 0.01168])\n        w = a[0] - a[1] * np.cos(scaled_n) + a[2] * np.cos(2 * scaled_n) - a[3] * np.cos(3 * scaled_n)\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized cosine window.\")\n        w = np.sum(np.array(coefficients)[np.newaxis, :] * np.cos(np.arange(len(coefficients))[np.newaxis, :, np.newaxis] * scaled_n[:, np.newaxis]), axis=1)\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n\n    return list(np.round(w, 4))\n\n# Example usage:\n# print(generate_window(\"hamming\", 10))\n# print(generate_window(\"hann\", 10))\n# print(generate_window(\"blackman_harris\", 10))\n# print(generate_window(\"generalized_cosine\", 10, [0.3333, 0.5, 0.1667]))\n```\n\nThis script defines the `generate_window` function, which generates window coefficients for specified window types. It handles various edge cases, such as invalid `N` values and unsupported window types, and ensures that the output is rounded to four decimal places."}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert input lists to numpy arrays for convenience\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term (bias) to the feature matrices\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Check if all labels are identical\n    if len(np.unique(y_train)) == 1:\n        return [y_train[0]] * X_test.shape[0]\n\n    # Map the given labels to {0, 1}\n    label_map = {np.min(y_train): 0, np.max(y_train): 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n\n    # Initialize weights\n    n_features = X_train.shape[1]\n    weights = np.zeros(n_features)\n\n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        indices = np.arange(len(y_train))\n        np.random.shuffle(indices)\n        X_train = X_train[indices]\n        y_train_mapped = y_train_mapped[indices]\n\n        for start in range(0, len(y_train), batch_size):\n            end = min(start + batch_size, len(y_train))\n            X_batch = X_train[start:end]\n            y_batch = y_train_mapped[start:end]\n\n            z = np.dot(X_batch, weights)\n            h = 1 / (1 + np.exp(-z))\n            gradient = np.dot(X_batch.T, (h - y_batch)) / len(y_batch)\n            weights -= learning_rate * gradient\n\n    # Make predictions on the test set\n    z = np.dot(X_test, weights)\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions_mapped = (probabilities >= 0.5).astype(int)\n\n    # Map predictions back to original labels\n    inverse_label_map = {0: np.min(y_train), 1: np.max(y_train)}\n    predictions = [inverse_label_map[pred] for pred in predictions_mapped]\n\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data\n    X_train = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8]]\n    y_train = [-1, -1, 1, 1]\n    X_test = [[0.2, 0.3], [0.6, 0.7]]\n\n    # Train and predict\n    predictions = logistic_regression_train_predict(X_train, y_train, X_test)\n    print(\"Predictions:\", predictions)\n```\n\nThis script implements a binary Logistic Regression classifier using mini-batch Gradient Descent. It handles the addition of an intercept term, maps arbitrary numeric labels to {0,1} for internal processing, and returns predictions mapped back to the original label set. Additionally, it checks for the special case where all training labels are identical and skips unnecessary computations."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Implements the AdaBoost algorithm using decision stumps as weak learners.\n    \n    Args:\n        X_train: A list of lists containing the training data features.\n        y_train: A list of integers containing the training data labels (0 or 1).\n        X_test: A list of lists containing the test data features.\n        n_estimators: An integer specifying the number of decision stumps to train.\n\n    Returns:\n        A list of integers representing the predicted class labels for X_test.\n    \"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train, dtype=np.float64)\n    y_train = np.array(y_train, dtype=np.int8)\n    X_test = np.array(X_test, dtype=np.float64)\n    \n    # Initialize weights\n    sample_weights = np.full(X_train.shape[0], 1.0 / X_train.shape[0])\n    predictions = np.zeros(X_test.shape[0])\n    \n    for _ in range(n_estimators):\n        # Train a decision stump\n        best_stump, best_error = None, None\n        for feature_idx in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.where(\n                        X_train[:, feature_idx] * polarity < polarity * threshold, \n                        polarity, \n                        -polarity\n                    )\n                    \n                    errors = np.where(predictions != y_train, 1, 0)\n                    weighted_error = np.sum(sample_weights * errors)\n                    \n                    if best_error is None or weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = {\n                            'feature_idx': feature_idx,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n                    elif weighted_error == best_error:\n                        if (\n                            (best_stump['feature_idx'] > feature_idx) or\n                            (best_stump['feature_idx'] == feature_idx and best_stump['threshold'] > threshold) or\n                            (best_stump['feature_idx'] == feature_idx and best_stump['threshold'] == threshold and best_stump['polarity'] < polarity)\n                        ):\n                            best_stump = {\n                                'feature_idx': feature_idx,\n                                'threshold': threshold,\n                                'polarity': polarity\n                            }\n\n        # Calculate alpha for the best stump\n        epsilon = 1e-10\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + epsilon))\n\n        # Predict on the training data using the best stump\n        predictions = np.where(\n            X_train[:, best_stump['feature_idx']] * best_stump['polarity'] < best_stump['polarity'] * best_stump['threshold'],\n            best_stump['polarity'],\n            -best_stump['polarity']\n        )\n\n        # Update sample weights\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n        # If the best error is zero, stop the training\n        if best_error == 0:\n            break\n    \n    # Make predictions on the test data\n    for i in range(len(X_test)):\n        prediction = 0\n        for t in range(n_estimators):\n            stump = best_stumps[t]\n            if (X_test[i][stump['feature_idx']] * stump['polarity'] < stump['polarity'] * stump['threshold']):\n                prediction += stump['alpha'] * stump['polarity']\n            else:\n                prediction += stump['alpha'] * (-stump['polarity'])\n        \n        predictions[i] = 1 if prediction >= 0 else 0\n\n    return list(predictions.astype(int))\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains `n_estimators` decision stumps, updating the sample weights after each round according to the AdaBoost rules. Finally, it produces predictions for the test set by aggregating the weighted votes of the weak learners and converting the aggregated sign back to class labels {0, 1}."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    \n    # Check for valid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    \n    # Define parameters for PSO\n    inertia_weight = 0.5\n    cognitive_weight = 1.5\n    social_weight = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    # Initialize the random number generator\n    rng = np.random.default_rng(seed)\n    \n    # Initialize particles' positions and velocities randomly within bounds\n    pos = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    vel = rng.uniform(-1, 1, (num_particles, n_dims))\n\n    # Calculate initial fitness values\n    fitness = np.sum(pos ** 2, axis=1)\n    p_best_pos = pos.copy()\n    p_best_fitness = fitness.copy()\n\n    # Determine the global best position\n    g_best_index = np.argmin(fitness)\n    g_best_pos = p_best_pos[g_best_index].copy()\n    g_best_fitness = p_best_fitness[g_best_index]\n\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            r1, r2 = rng.uniform(0, 1, 2)\n            vel[i] = (inertia_weight * vel[i] +\n                      cognitive_weight * r1 * (p_best_pos[i] - pos[i]) +\n                      social_weight * r2 * (g_best_pos - pos[i]))\n\n            # Update position\n            pos[i] += vel[i]\n            pos[i] = np.clip(pos[i], lower_bound, upper_bound)\n\n            # Evaluate new position\n            fitness[i] = np.sum(pos[i] ** 2)\n            if fitness[i] < p_best_fitness[i]:\n                p_best_pos[i] = pos[i].copy()\n                p_best_fitness[i] = fitness[i]\n                if fitness[i] < g_best_fitness:\n                    g_best_pos = p_best_pos[i].copy()\n                    g_best_fitness = p_best_fitness[i]\n\n    return round(g_best_fitness, 4)\n\n# Example usage:\n# result = particle_swarm_optimisation(n_dims=3, num_particles=30, num_iterations=100, seed=42)\n# print(result)\n```\n\nThis script implements the Particle Swarm Optimization algorithm to minimize the Sphere function. It checks for valid input, initializes particles' positions and velocities, and iteratively updates their positions and velocities to find the global minimum. The best objective value found is returned, rounded to four decimal places. If any input parameter is non-positive, the function returns `-1`."}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n\ndef knn_predict(X_train: list[list[float]], \n                y_train: list, \n                X_test: list[list[float]], \n                k: int = 5, \n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    \n    # Determine k based on rules\n    k = min(len(y_train), k) if k > 0 else len(y_train)\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, train_point), index) \n                     for index, train_point in enumerate(X_train)]\n        \n        # Sort by distance and select the first k\n        k_nearest_indices = sorted(distances)[:k]\n        \n        # Extract the labels/values of the k nearest neighbors\n        k_nearest_labels = [y_train[index] for _, index in k_nearest_indices]\n        \n        if task == \"classification\":\n            # Return the most common label among the k nearest neighbours\n            most_common = Counter(k_nearest_labels).most_common(1)[0][0]\n            predictions.append(most_common)\n        elif task == \"regression\":\n            # Return the average of the k nearest neighbours' values, rounded\n            average_value = round(np.mean(k_nearest_labels), 4)\n            predictions.append(average_value)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n    \n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data for testing\n    X_train = [[1, 2], [2, 3], [3, 4], [6, 7], [7, 8], [8, 9]]\n    y_train_classification = ['a', 'b', 'a', 'b', 'b', 'c']\n    y_train_regression = [1.0, 2.0, 2.0, 3.0, 3.0, 4.0]\n\n    X_test = [[1, 2], [6, 7]]\n\n    print(\"Classification Predictions:\", knn_predict(X_train, y_train_classification, X_test, k=3, task=\"classification\"))\n    print(\"Regression Predictions:\", knn_predict(X_train, y_train_regression, X_test, k=3, task=\"regression\"))\n```\n\n### Explanation:\n- **Euclidean Distance Calculation**: A helper function `euclidean_distance` calculates the distance between two points.\n- **Main Function**: The `knn_predict` function implements the k-NN algorithm with both classification and regression tasks.\n  - It calculates the Euclidean distance between each test point and all training points.\n  - It sorts these distances and selects the top `k` nearest neighbors.\n  - Depending on the task (`classification` or `regression`), it either finds the most frequent label or averages the target values of the neighbors.\n- **Edge Cases**: If `k` is set to 0 or exceeds the number of training samples, it implicitly uses all samples.\n- **Output**: The function returns predictions for each test sample in the same order they were provided."}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    \n    class Node:\n        def __init__(self, left=None, right=None, feature_index=None, threshold=None, value=None):\n            self.left = left\n            self.right = right\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.value = value\n\n    def gini_impurity(y):\n        total = len(y)\n        counts = np.bincount(y)\n        return 1.0 - np.sum((counts / total) ** 2)\n\n    def best_split(X, y):\n        best_gini_gain = -1.0\n        feature_index = None\n        threshold = None\n\n        n_samples, n_features = X.shape\n        gini_parent = gini_impurity(y)\n\n        for i in range(n_features):\n            sorted_indices = np.argsort(X[:, i])\n            sorted_vals = X[sorted_indices, i]\n            sorted_y = y[sorted_indices]\n\n            unique_values = np.unique(sorted_vals)\n\n            for j in range(1, len(unique_values)):\n                if sorted_vals[j] == sorted_vals[j-1]:\n                    continue\n\n                midpoint = (unique_values[j] + unique_values[j-1]) / 2.0\n                left_indices = X[:, i] <= midpoint\n                right_indices = X[:, i] > midpoint\n\n                gini_left = gini_impurity(y[left_indices])\n                gini_right = gini_impurity(y[right_indices])\n\n                weight_left = np.sum(left_indices) / n_samples\n                weight_right = np.sum(right_indices) / n_samples\n\n                gini_gain = gini_parent - (weight_left * gini_left + weight_right * gini_right)\n\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    feature_index = i\n                    threshold = midpoint\n\n        if feature_index is None or threshold is None:\n            return None, None, gini_parent\n\n        return feature_index, threshold, best_gini_gain\n\n    def build_tree(X, y, current_depth=0):\n        n_samples, n_features = X.shape\n\n        # Check stopping conditions\n        if n_samples == 0:\n            return Node(value=np.bincount(y).argmax())\n        if len(np.unique(y)) == 1:\n            return Node(value=y[0])\n        if max_depth is not None and current_depth >= max_depth:\n            return Node(value=np.bincount(y).argmax())\n\n        feature_index, threshold, _ = best_split(X, y)\n\n        if feature_index is None or threshold is None:\n            return Node(value=np.bincount(y).argmax())\n\n        left_indices = X[:, feature_index] <= threshold\n        right_indices = X[:, feature_index] > threshold\n\n        left_child = build_tree(X[left_indices], y[left_indices], current_depth + 1)\n        right_child = build_tree(X[right_indices], y[right_indices], current_depth + 1)\n\n        return Node(feature_index=feature_index, threshold=threshold, left=left_child, right=right_child)\n\n    def predict_single(sample, node):\n        if node.value is not None:\n            return node.value\n\n        if sample[node.feature_index] <= node.threshold:\n            return predict_single(sample, node.left)\n        else:\n            return predict_single(sample, node.right)\n\n    root = build_tree(X_train, y_train)\n    predictions = [predict_single(x, root) for x in X_test]\n\n    return predictions\n\n# Example usage:\n# X_train = np.array([[...], [...], ...])\n# y_train = np.array([...])\n# X_test = np.array([[...], [...], ...])\n# predicted_labels = decision_tree_predict(X_train, y_train, X_test, max_depth=5)\n# print(predicted_labels)\n```\n\nThis script defines a function `decision_tree_predict` which builds a CART decision tree using the Gini impurity measure and recursive binary splitting, and then predicts the class labels for the given test samples. The tree is built by recursively finding the best split for each node until the stopping conditions are met. The predictions are made by traversing the tree for each test sample."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    \n    def gini_impurity(labels):\n        classes, counts = np.unique(labels, return_counts=True)\n        proportions = counts / len(labels)\n        return 1.0 - np.sum(proportions ** 2)\n\n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples, n_features = X.shape\n    best_feature, best_threshold, best_gini = -1, None, float('inf')\n    G_whole_dataset = gini_impurity(y)\n\n    if len(np.unique(y)) == 1:\n        return (-1, None, round(G_whole_dataset, 4))\n\n    for feature_idx in range(n_features):\n        thresholds = np.unique(X[:, feature_idx])\n        for threshold in thresholds[:-1]:  # Skip the last threshold as it would result in an empty right branch\n            left_indices = X[:, feature_idx] <= threshold\n            right_indices = X[:, feature_idx] > threshold\n\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue  # Skip if any child node is empty\n\n            n_left, n_right = np.sum(left_indices), np.sum(right_indices)\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n\n            G_split = (n_left / n_samples) * G_left + (n_right / n_samples) * G_right\n\n            if G_split < best_gini - 1e-12:\n                best_gini = G_split\n                best_feature = feature_idx\n                best_threshold = threshold\n            elif abs(G_split - best_gini) < 1e-12:\n                if feature_idx < best_feature or (feature_idx == best_feature and threshold < best_threshold):\n                    best_gini = G_split\n                    best_feature = feature_idx\n                    best_threshold = threshold\n\n    if best_gini == float('inf'):\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature, round(best_threshold, 4), round(best_gini, 4))\n\n# Example usage:\nX = [[2.1, 3.5], [4.6, 5.8], [2.4, 3.9], [4.8, 5.2]]\ny = [0, 1, 0, 1]\nprint(best_gini_split(X, y))  # Example output: (0, 2.25, 0.5)\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    \n    def validate(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1 or len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        return True\n\n    def euclidean(vec1, vec2):\n        if not validate(vec1, vec2):\n            return -1\n        return round(np.sqrt(np.sum((np.array(vec1) - np.array(vec2)) ** 2)), 4)\n\n    def manhattan(vec1, vec2):\n        if not validate(vec1, vec2):\n            return -1\n        return round(np.sum(np.abs(np.array(vec1) - np.array(vec2))), 4)\n\n    def chebyshev(vec1, vec2):\n        if not validate(vec1, vec2):\n            return -1\n        return round(np.max(np.abs(np.array(vec1) - np.array(vec2))), 4)\n\n    def cosine(vec1, vec2):\n        if not validate(vec1, vec2):\n            return -1\n        x = np.array(vec1)\n        y = np.array(vec2)\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - (dot_product / (norm_x * norm_y)), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine,\n    }\n\n    if name not in metrics:\n        return lambda x, y: -1\n    return metrics[name]\n\n# Example usage:\nprint(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\nprint(metric('manhattan')([1, 2, 3], [4, 5, 6]))  # \u279e 9.0\nprint(metric('chebyshev')([1, 2, 3], [4, 5, 6]))  # \u279e 3.0\nprint(metric('cosine')([1, 2, 3], [-4, -5, -6]))  # \u279e 1.0\nprint(metric('unknown')([1, 2, 3], [4, 5, 6]))    # \u279e -1\nprint(metric('manhattan')([], [4, 5, 6]))         # \u279e -1\n```\n\nThis solution defines the `metric` function which returns a callable based on the specified distance metric name. Each callable validates the inputs and calculates the distance according to the specified metric, rounding the result to four decimal places. If the inputs are invalid or the metric name is unsupported, the callable returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: True if the action space is multi-dimensional.\n        cont_action: True if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple (n_actions_per_dim, action_ids, action_dim) where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (numpy.inf for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or None if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    \n    if cont_action:\n        # Continuous action space\n        if md_action:\n            n_actions_per_dim = [np.inf] * len(env.action_space.shape)\n        else:\n            n_actions_per_dim = [np.inf]\n    else:\n        # Discrete action space\n        if md_action:\n            n_actions_per_dim = [sub_space.n for sub_space in env.action_space.spaces]\n        else:\n            n_actions_per_dim = [env.action_space.n]\n\n    action_dim = len(n_actions_per_dim)\n\n    if any(np.isinf(n) for n in n_actions_per_dim):\n        # If any dimension is continuous, action_ids is None\n        action_ids = None\n    else:\n        # Calculate all discrete actions using cartesian product\n        action_ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*action_ranges))\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example usage:\n# Assuming we have an environment class EnvMockup that mimics OpenAI Gym\nclass EnvMockup:\n    def __init__(self, action_space_type: str, num_dims: int):\n        if action_space_type == 'continuous':\n            self.action_space = self._make_continuous(num_dims)\n        elif action_space_type == 'discrete':\n            self.action_space = self._make_discrete(num_dims)\n        else:\n            raise ValueError(\"Unknown action space type\")\n\n    @staticmethod\n    def _make_continuous(num_dims):\n        from gym.spaces.box import Box\n        return Box(low=-np.inf, high=np.inf, shape=(num_dims,), dtype=np.float32)\n\n    @staticmethod\n    def _make_discrete(num_dims):\n        from gym.spaces.discrete import Discrete\n        from gym.spaces.product import Product\n        from gym.spaces.tuple import Tuple\n        if num_dims == 1:\n            return Discrete(5)  # Example with 5 discrete actions\n        else:\n            return Tuple(tuple(Discrete(5) for _ in range(num_dims)))  # Example with 5^num_dims discrete actions\n\n# Test cases\nprint(action_stats(EnvMockup('discrete', 1), True, False))  # Single discrete action space\nprint(action_stats(EnvMockup('discrete', 2), True, False))  # Multi-dimensional discrete action space\nprint(action_stats(EnvMockup('continuous', 1), True, True)) # Single continuous action space\nprint(action_stats(EnvMockup('continuous', 2), True, True)) # Multi-dimensional continuous action space\n```\n\nThis script defines the `action_stats` function which analyzes the action space of a given RL environment according to the problem description provided. It also includes an example mock-up environment to demonstrate how the function can be used."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize \u03b2 with zeros\n    T = phi[0].shape[1]  # Number of topics\n    beta = [[0.0] * T for _ in range(V)]\n\n    # Count word occurrences per topic\n    for d, doc_phi in enumerate(phi):\n        for n, word in enumerate(corpus[d]):\n            for t in range(T):\n                beta[word][t] += doc_phi[n, t]\n\n    # Normalize each column of \u03b2 to sum to 1\n    for t in range(T):\n        col_sum = sum(beta[v][t] for v in range(V))\n        if col_sum > 0:  # Avoid division by zero\n            for v in range(V):\n                beta[v][t] /= col_sum\n\n    # Round to 4 decimal places\n    return [[round(entry, 4) for entry in row] for row in beta]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data for testing\n    phi = [\n        np.array([[0.8, 0.2], [0.3, 0.7]]),  # Document 1\n        np.array([[0.6, 0.4]])               # Document 2\n    ]\n    corpus = [[0, 1], [0]]  # Document 1: words 0 and 1; Document 2: word 0\n    V = 2  # Vocabulary size\n    print(update_beta(phi, corpus, V))\n```\n\n### Explanation:\n1. **Initialization**: We initialize the word-topic matrix `beta` with zeros. Each row corresponds to a word in the vocabulary, and each column corresponds to a topic.\n2. **Counting Contributions**: For each document `d`, and for each token `n` in document `d`, we add the contribution of `doc_phi[n, t]` to `beta[word][t]`.\n3. **Normalization**: For each topic `t`, we normalize its corresponding column so that it sums to 1.\n4. **Rounding**: Finally, we round all entries in `beta` to 4 decimal places.\n\nThis function ensures that the output is a list of lists where each column sums to 1, and all values are rounded to 4 decimal places."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_total_cost(X, medoids, k):\n    \"\"\"Calculate the total clustering cost given the current medoids.\"\"\"\n    n_samples = X.shape[0]\n    total_cost = 0\n    for i in range(n_samples):\n        # Find the nearest medoid for sample X[i]\n        min_dist = np.min([np.linalg.norm(X[i] - m)**2 for m in medoids])\n        total_cost += min_dist\n    return total_cost\n\ndef find_closest_medoid(sample, medoids):\n    \"\"\"Find the index of the closest medoid to the given sample.\"\"\"\n    min_idx = np.argmin([np.linalg.norm(sample - m)**2 for m in medoids])\n    return min_idx\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    n_samples = X.shape[0]\n    # Step 1: Initialize the medoids as the first k samples of X\n    medoids = X[:k].tolist()\n    current_medoid_indices = list(range(k))\n    \n    # Step 2: Minimize the total clustering cost\n    while True:\n        best_swap = None\n        best_reduction = 0\n        improved = False\n        \n        for medoid_idx in current_medoid_indices:\n            for non_medoid_idx in range(n_samples):\n                if non_medoid_idx not in current_medoid_indices:\n                    # Swap medoid_idx with non_medoid_idx\n                    new_medoid_indices = current_medoid_indices[:]\n                    new_medoid_indices[current_medoid_indices.index(medoid_idx)] = non_medoid_idx\n                    \n                    # Calculate the new total cost\n                    new_medoids = [X[idx] for idx in new_medoid_indices]\n                    new_cost = calculate_total_cost(X, new_medoids, k)\n                    \n                    # Calculate the previous total cost\n                    prev_medoids = [X[idx] for idx in current_medoid_indices]\n                    prev_cost = calculate_total_cost(X, prev_medoids, k)\n                    \n                    # Check if this swap improves the cost\n                    if new_cost < prev_cost:\n                        improvement = prev_cost - new_cost\n                        if improvement > best_reduction:\n                            best_reduction = improvement\n                            best_swap = (medoid_idx, non_medoid_idx)\n                            improved = True\n        \n        if not improved:\n            break\n        \n        # Perform the best swap found\n        medoid_idx, non_medoid_idx = best_swap\n        current_medoid_indices[current_medoid_indices.index(medoid_idx)] = non_medoid_idx\n        medoids = [X[idx] for idx in current_medoid_indices]\n    \n    # Step 3: Assign each sample to the nearest medoid\n    labels = []\n    for i in range(n_samples):\n        closest_medoid_idx = find_closest_medoid(X[i], medoids)\n        labels.append(current_medoid_indices.index(closest_medoid_idx))\n    \n    return labels\n\n# Example usage:\n# X = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\n# k = 2\n# print(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\nThis script implements the Partitioning Around Medoids (PAM) clustering algorithm as described. It initializes the medoids, iteratively tries to reduce the total clustering cost by swapping medoids with non-medoids, and finally assigns each sample to the nearest medoid."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    # Input validation\n    if not isinstance(n_iterations, int) or n_iterations < 1:\n        return -1\n    \n    if len(np.array(x_train).shape) == 1:\n        x_train = np.array(x_train).reshape(-1, 1)\n    if len(np.array(x_test).shape) == 1:\n        x_test = np.array(x_test).reshape(-1, 1)\n\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    # Polynomial feature transformation\n    poly = np.vectorize(lambda x: 1 + x if x == 0 else x)\n    x_train = np.array([[feature ** i for i in range(1, degree + 1)] for feature in x_train.reshape(-1, )])\n    x_test = np.array([[feature ** i for i in range(1, degree + 1)] for feature in x_test.reshape(-1, )]).reshape(-1, degree)\n    \n    # Standard-score (z-score) normalization\n    means = np.mean(x_train, axis=0)\n    stds = np.std(x_train, axis=0)\n    x_train = (x_train - means) / stds\n    x_test = (x_test - means) / stds\n    \n    # Add bias term\n    x_train = np.hstack([np.ones((x_train.shape[0], 1)), x_train])\n    x_test = np.hstack([np.ones((x_test.shape[0], 1)), x_test])\n\n    # Initialize weights\n    num_features = x_train.shape[1]\n    weights = np.random.randn(num_features)\n    \n    # Gradient Descent\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train, weights)\n        errors = predictions - y_train\n        \n        grad_mse = 2 * np.dot(x_train.T, errors) / len(y_train)\n        \n        # Elastic Net regularization\n        grad_l1 = np.sign(weights)\n        grad_l2 = 2 * reg_factor * l1_ratio * weights\n        grad = grad_mse + grad_l2 + reg_factor * (l1_ratio * grad_l1)\n        \n        # Avoid regularizing the bias term (weights[0])\n        grad[0] = grad_mse[0]\n        \n        weights -= learning_rate * grad\n    \n    # Make predictions on test data\n    test_predictions = np.dot(x_test, weights)\n    return np.round(test_predictions, 4).tolist()\n\n# Example usage:\n# predictions = elastic_net_regression([[1], [2], [3]], [2, 3, 5], [[1], [2]], degree=2, reg_factor=0.1, l1_ratio=0.5, n_iterations=1000, learning_rate=0.01)\n# print(predictions)\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute the sigmoid of the predicted values\n    prob = 1 / (1 + np.exp(-predicted))\n\n    # Compute the gradient\n    grad = -actual * prob / (1 - prob)\n    grad_rounded = [round(val, 6) for val in grad]\n\n    # Compute the Hessian\n    hess = prob / (1 - prob)**2 * prob\n    hess_rounded = [round(val, 6) for val in hess]\n\n    # Ensure probabilities are rounded correctly\n    prob_rounded = [round(val, 6) for val in prob]\n\n    return (grad_rounded, hess_rounded, prob_rounded)\n\n# Example usage:\n# actual = [1, -1, 1]\n# predicted = [0.4, -0.6, 0.8]\n# print(logistic_components(actual, predicted))\n```\n\nThis script defines the `logistic_components` function which performs the necessary computations for the gradient, Hessian, and sigmoid probabilities. It ensures all inputs are converted to NumPy arrays for efficient vectorized operations, computes the required values using the logistic (sigmoid) function, rounds the output to six decimal places, and converts the final results back into Python lists."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def hand_score(hand):\n        value = sum(hand)\n        aces = hand.count(1)\n        \n        # Check if usable ace can be used\n        if aces > 0 and value + 10 <= 21:\n            return value + 10\n        return value\n\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n\n    # Check for player bust\n    if player_score > 21:\n        return -1.0\n    \n    # Check for dealer bust\n    if dealer_score > 21:\n        return 1.0\n    \n    # Check for natural blackjack\n    if len(player) == 2 and 1 in player and 10 in player:\n        if player_score > dealer_score:\n            return 1.5\n        else:\n            return 0.0\n\n    # Compare scores\n    if player_score > dealer_score:\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0\n\n# Example usage:\nprint(blackjack_outcome([1, 10], [7, 7]))  # Natural blackjack, player wins\nprint(blackjack_outcome([10, 8], [10, 9]))  # Player busts\nprint(blackjack_outcome([1, 10], [1, 10]))  # Both have natural blackjack, draw\nprint(blackjack_outcome([10, 6], [1, 10]))  # Dealer has natural blackjack, dealer wins\nprint(blackjack_outcome([7, 8], [1, 10]))  # Player wins, no natural blackjack\n```\n\nThis script defines the `blackjack_outcome` function which evaluates the outcome of a Blackjack round based on the provided rules. It calculates the scores for both the player and the dealer, checks for busts and natural blackjacks, and returns the appropriate reward."}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate element-wise squared logarithmic error.\n\n    Parameters:\n    -----------\n    actual : list, tuple, or np.ndarray\n        Sequence of true values.\n    predicted : list, tuple, or np.ndarray\n        Sequence of predicted values.\n\n    Returns:\n    --------\n    np.ndarray\n        Element-wise squared logarithmic errors.\n    \"\"\"\n    np_actual = np.array(actual)\n    np_predicted = np.array(predicted)\n\n    if np.any(np_actual < 0) or np.any(np_predicted < 0):\n        return -1\n\n    if len(np_actual) != len(np_predicted):\n        return -1\n\n    log_actual = np.log1p(np_actual)\n    log_predicted = np.log1p(np_predicted)\n    \n    return np.square(log_actual - log_predicted)\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters:\n    -----------\n    actual : list, tuple, or np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list, tuple, or np.ndarray\n        Sequence of predicted values. Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns:\n    --------\n    float\n        The MSLE rounded to 4 decimals. If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    sl_errors = squared_log_error(actual, predicted)\n    \n    if sl_errors == -1:\n        return -1\n    \n    sl_mean = np.mean(sl_errors)\n    return round(sl_mean, 4)\n\n\n# Example usage:\n# actual = [1, 2, 3, 4]\n# predicted = [2, 3, 4, 5]\n# print(mean_squared_log_error(actual, predicted))  # Output: 0.0714\n\n# Test cases:\nprint(mean_squared_log_error([0, 1, 2, 3], [0, 1, 2, 3]))  # Expected output: 0.0\nprint(mean_squared_log_error([1, 2, 3, 4], [2, 3, 4, 5]))  # Expected output: 0.0714\nprint(mean_squared_log_error([1, 2, 3, 4], [-1, 2, 3, 4])) # Expected output: -1\nprint(mean_squared_log_error([1, 2, 3, 4], [1, 2, 3]))     # Expected output: -1\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a NumPy array for convenience\n    z_array = np.array(z, dtype=float)\n    \n    # Initialize an output array of the same shape as z_array\n    sigmoid_result = np.empty_like(z_array, dtype=float)\n    \n    # Apply the sigmoid function in a numerically stable way\n    positive_z = z_array >= 0\n    negative_z = z_array < 0\n    \n    # For non-negative z, use the standard sigmoid formula\n    sigmoid_result[positive_z] = 1 / (1 + np.exp(-z_array[positive_z]))\n    \n    # For negative z, use the equivalent but numerically stable version\n    sigmoid_result[negative_z] = np.exp(z_array[negative_z]) / (1 + np.exp(z_array[negative_z]))\n    \n    # Round each element to 4 decimal places\n    sigmoid_result_rounded = np.round(sigmoid_result, 4)\n    \n    # Handle the case where the input is a single scalar\n    if z_array.size == 1:\n        return float(sigmoid_result_rounded)\n    \n    # Convert the result back to a Python list if the input was a list\n    return sigmoid_result_rounded.tolist()\n\n# Example usage:\n# Single scalar\nprint(sigmoid(1))  # Should print 0.7311\n\n# List of numbers\nprint(sigmoid([1, -1, 2, -2]))  # Should print [0.7311, 0.2689, 0.8808, 0.1192]\n\n# NumPy array\nprint(sigmoid(np.array([[1, -1], [2, -2]])))  # Should print [[0.7311, 0.2689], [0.8808, 0.1192]]\n```\n\nThis implementation ensures numerical stability by handling the cases where `z` is positive and negative separately, using appropriate transformations to avoid overflow or underflow issues."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (int, float, np.number)):\n        # If z is a scalar (integer or float)\n        return [z if z >= 0 else a * z]\n    elif isinstance(z, list):\n        # If z is a list (possibly nested)\n        return [leaky_relu(x, a) for x in z]\n    elif isinstance(z, np.ndarray):\n        # If z is a numpy array, apply the activation using numpy's vectorized operation\n        result = np.where(z >= 0, z, a * z)\n        # Convert the result to a Python list maintaining the original shape\n        return result.tolist()\n    else:\n        raise TypeError(\"Unsupported type for input 'z'. It must be a scalar, list, or numpy.ndarray.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test with a scalar\n    print(leaky_relu(-5))  # Expected output: [-0.05]\n    # Test with a flat list\n    print(leaky_relu([-1, 2, -3, 4]))  # Expected output: [[-0.01, 2, -0.03, 4]]\n    # Test with a nested list\n    print(leaky_relu([[[-1, 2], [-3, 4]], [[-5, 6], [-7, 8]]]))\n    # Test with a numpy array\n    print(leaky_relu(np.array([[-1, 2], [-3, 4]])))\n```\n\nThis solution handles the input `z` being a scalar, a list (which can be nested), or a `numpy.ndarray`. For each case, the appropriate transformation based on the Leaky ReLU function definition is applied."}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    sample_weights = np.full(n_samples, 1/n_samples)\n    weak_learners = []\n\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_clf = None\n\n        for feature_index in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    errors = []\n                    predictions = (y_train * polarity) * ((X_train[:, feature_index] <= threshold) == polarity)\n\n                    error = np.sum(sample_weights * (predictions < 0))\n                    if error > 0.5:\n                        error = 1 - error\n                    if error < best_error:\n                        best_error = error\n                        best_clf = (feature_index, threshold, polarity)\n\n        # Calculate classifier weight\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        weak_learners.append((best_clf, alpha))\n\n        # Update sample weights\n        predictions = (y_train * best_clf[2]) * ((X_train[:, best_clf[0]] <= best_clf[1]) == best_clf[2])\n        incorrect_indices = predictions < 0\n        sample_weights *= np.exp(-alpha * predictions)\n        Z_t = np.sum(sample_weights)\n        sample_weights /= Z_t\n\n    def predict_sample(x):\n        prediction_sum = 0\n        for clf, alpha in weak_learners:\n            prediction = (clf[2] * ((x[clf[0]] <= clf[1]) == clf[2]))\n            prediction_sum += alpha * prediction\n        return 1 if prediction_sum >= 0 else -1\n\n    predictions = [predict_sample(sample) for sample in X_test]\n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[2, 3], [4, 5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=2)\n# print(predictions)  # Output: List of predictions [-1, -1]\n```\n\nThis script defines the `adaboost_predict` function which trains an AdaBoost ensemble of decision stumps on the provided training data and predicts labels for the test data. The function returns a list of integers, each being either -1 or 1, representing the predicted class labels for the test samples."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Step 1: Calculate the total number of elements for the 2D representation\n    d0, d1 = shape[0], int(np.prod(shape[1:]))\n\n    # Step 2: Create a 2D matrix A with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(d0, d1)\n\n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, s, VT = np.linalg.svd(A, full_matrices=False)\n\n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == (d0, d1):\n        Q = U\n    else:\n        Q = VT.T\n\n    # Step 5: Reshape Q back to the requested tensor shape and multiply by scale\n    Q_reshaped = (scale * Q).reshape(shape)\n\n    return Q_reshaped.tolist()\n\n# Example usage:\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n\n# Verify the orthogonality condition\nflat = np.array(result).reshape(shape[0], -1)\nif shape[0] <= flat.shape[1]:\n    orthogonality_check = np.allclose(flat @ flat.T, scale**2 * np.eye(shape[0]), atol=1e-6)\nelse:\n    orthogonality_check = np.allclose(flat.T @ flat, scale**2 * np.eye(flat.shape[1]), atol=1e-6)\n\nprint(\"Orthogonality condition satisfied:\", orthogonality_check)\n```\n\nThis script defines the `orthogonal` function that initializes a tensor with an orthogonal matrix according to the specified algorithm. It also includes a check to ensure the orthogonality condition is met within the specified tolerance."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state list to numpy array for easier computation\n    s = np.array(state)\n    \n    # Compute z\u2081 = ReLU(s \u00b7 W\u2081 + b\u2081) where W\u2081=1 and b\u2081=0\n    z1 = np.maximum(0, np.sum(s))\n    \n    # Compute z\u2082 = ReLU(z\u2081 \u00b7 W\u2082 + b\u2082) where W\u2082=1 and b\u2082=0\n    z2 = np.maximum(0, 4 * z1)\n    \n    # Compute z\u2083 = ReLU(z\u2082 \u00b7 W\u2083 + b\u2083) where W\u2083=1 and b\u2083=0\n    z3 = np.maximum(0, 4 * z2)\n    \n    # Compute logits = z\u2083 \u00b7 W\u2090 + b\u2090 where W\u2090=1 and b\u2090=0\n    logits = 4 * z3\n    \n    # Compute action probabilities using softmax on logits\n    # Since all logits are identical, each probability is 1/3\n    action_probs = [1/3, 1/3, 1/3]\n    \n    # Compute state_value = z\u2083 \u00b7 W_c + b_c where W_c=1 and b_c=0\n    state_value = 4 * z3\n    \n    # Round results to 4 decimal places\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value[0], 4)\n    \n    return action_probs_rounded, state_value_rounded\n\n# Example usage:\nstate = [0.1, -0.2, 0.3]\naction_probs, state_value = actor_critic_forward(state)\nprint(f\"Action Probs: {action_probs}, State Value: {state_value}\")\n```\n\nThis script implements the specified feed-forward Actor-Critic network using the given constraints. The network computes the action probabilities and state value based on the input state vector, rounding both to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Tuple\n\ndef relu(x: np.ndarray) -> np.ndarray:\n    return np.maximum(0, x)\n\ndef softmax(x: np.ndarray) -> np.ndarray:\n    exp_x = np.exp(x - np.max(x))  # for numerical stability\n    return exp_x / np.sum(exp_x)\n\ndef actor_critic_forward(state: List[float], params: dict) -> Tuple[List[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    \n    # Ensure state is a numpy array\n    state = np.array(state, dtype=np.float64)\n    \n    # Shared layers\n    x = state\n    for i in range(1, 4):  # From layer 1 to 3\n        W_key = f'W{i}'\n        b_key = f'b{i}'\n        x = relu(x @ params[W_key] + params[b_key])\n    \n    # Actor head\n    actor_out = x @ params['Wa'] + params['ba']\n    action_probs = softmax(actor_out)\n    \n    # Critic head\n    state_value = x @ params['Wc'] + params['bc']\n\n    # Rounding the outputs\n    action_probs = [round(prob, 4) if 0 < prob < 1 else round(prob, 1) for prob in action_probs]\n    state_value = round(state_value, 4) if 0 < state_value < 1 else round(state_value, 1)\n    \n    return action_probs, state_value\n\n# Example usage:\n# state = [1.0, 2.0, 3.0]\n# params = {\n#     'W1': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],\n#     'b1': [0.1, 0.2],\n#     'W2': [0.7, 0.8, 0.9, 1.0],\n#     'b2': [0.7, 0.8],\n#     'W3': [1.1, 1.2, 1.3],\n#     'b3': [1.1, 1.2],\n#     'Wa': [1.4, 1.5, 1.6],\n#     'ba': [1.4, 1.5],\n#     'Wc': [1.7, 1.8],\n#     'bc': [1.7]\n# }\n# print(actor_critic_forward(state, params))\n```\n\nThis script defines the `actor_critic_forward` function which implements the forward pass for an Actor-Critic network using only NumPy operations. It processes the input state through three shared fully-connected layers with ReLU activation, splits the output to compute both the action probabilities (via a soft-max function) and the state value, and finally rounds the results to the specified precision."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert input weight vector to NumPy array for convenience\n    w = np.array(w, dtype=np.float64)\n    \n    if gradient:\n        # Compute gradient \u2207R(w)\n        grad_l1 = l1_ratio * np.sign(w)\n        grad_l2 = (1 - l1_ratio) * w\n        result = alpha * (grad_l1 + grad_l2)\n        return [round(num, 4) for num in result.tolist()]\n    else:\n        # Compute penalty R(w)\n        penalty_l1 = l1_ratio * np.sum(np.abs(w))\n        penalty_l2 = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        result = alpha * (penalty_l1 + penalty_l2)\n        return round(result, 4)\n\n# Check function with provided data points\nweights = [-1.5, 2.3, 0.0, 4.1]\nalpha_val = 0.5\nl1_ratio_val = 0.8\n\n# Calculate penalty\npenalty_value = elastic_net_regularization(weights, alpha_val, l1_ratio_val)\nprint(\"Penalty:\", penalty_value)\n\n# Calculate gradient\ngradient_value = elastic_net_regularization(weights, alpha_val, l1_ratio_val, gradient=True)\nprint(\"Gradient:\", gradient_value)\n```\n\nThis code defines the `elastic_net_regularization` function that computes either the penalty or the gradient of the Elastic-Net regularization based on the input parameters. The function ensures that all numerical results are rounded to four decimal places as required."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    \n    # Handle special cases where the parameter is not trainable\n    if param_name.lower() in [\"x\", \"y\"]:\n        return None\n    \n    # Redirect \"Ba\" and \"Bx\" to their lower-case variants\n    param_name_redirected = param_name[:2].lower() + param_name[2:] if param_name[:2] in [\"Ba\", \"Bx\"] else param_name\n    \n    params = model.parameters\n    \n    # Get the parameter to check\n    param = params[param_name_redirected]\n    \n    # Create an empty array for storing the numerical gradient\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over every element of the chosen parameter\n    for i in np.ndindex(param.shape):\n        # Save the original value\n        original_value = deepcopy(param[i])\n        \n        # Perturb the parameter by +\u03b5\n        param[i] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            X_t = X[:, :, t]\n            prediction = model.forward(X_t)\n            predictions_plus.append(prediction)\n        loss_plus = loss_func(predictions_plus)\n        \n        # Perturb the parameter by \u2013\u03b5\n        param[i] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            X_t = X[:, :, t]\n            prediction = model.forward(X_t)\n            predictions_minus.append(prediction)\n        loss_minus = loss_func(predictions_minus)\n        \n        # Reset the parameter to its original value\n        param[i] = original_value\n        \n        # Approximate the partial derivative using the centered finite-difference formula\n        grads[i] = (loss_plus - loss_minus) / (2 * epsilon)\n    \n    # Return the transposed numerical gradient\n    return grads.T\n\n\n# Example usage:\nclass DummyModel:\n    def __init__(self):\n        self.parameters = {\n            'W': np.array([[0.1, 0.2], [0.3, 0.4]], dtype=np.float64),\n            'U': np.array([[0.5, 0.6], [0.7, 0.8]], dtype=np.float64),\n            'b': np.array([0.9, 1.0], dtype=np.float64)\n        }\n    \n    def forward(self, X):\n        return np.dot(self.parameters['W'], X) + self.parameters['b']\n    \n    def flush_gradients(self):\n        pass\n\ndef dummy_loss(predictions):\n    return sum(np.sum(pred**2) for pred in predictions)\n\n# Create a sample model and data\nmodel = DummyModel()\nn_t = 2\nbatch_size, input_dim = 3, 2\nX = np.random.rand(batch_size, input_dim, n_t).astype(np.float64)\nparam_name = 'W'\n\n# Perform gradient check\nnumerical_grad = grad_check_RNN(model, dummy_loss, param_name, n_t, X)\n\nprint(\"Numerical Gradient:\\n\", numerical_grad)\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> List[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, _ = X_train.shape\n    k = X_test.shape[0]\n    # Start with equal weights for all training samples\n    w = np.full(m, 1 / m)\n    # Initialize classifiers and alpha values\n    classifiers = []\n    alpha = []\n\n    for _ in range(n_clf):\n        # Find the best decision stump\n        min_error = np.inf\n        for i in range(X_train.shape[1]):\n            for thresh in np.unique(X_train[:, i]):\n                # Create a decision stump\n                pred = np.where(X_train[:, i] > thresh, 1, -1)\n                errors = (pred != y_train) * w\n                stump_error = np.sum(errors)\n\n                if stump_error > 0.5:\n                    stump_error = 1 - stump_error\n                    pred = -pred\n\n                if stump_error < min_error:\n                    min_error = stump_error\n                    best_split_index = i\n                    best_threshold = thresh\n                    best_pred = pred.copy()\n\n        # Calculate alpha_t\n        epsilon_t = min_error\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        classifiers.append((best_split_index, best_threshold))\n        alpha.append(alpha_t)\n\n        # Update sample weights\n        w *= np.exp(-alpha_t * y_train * best_pred)\n        w /= np.sum(w)  # Normalize\n\n    def predict_single(x):\n        \"\"\"Predict the label for a single sample using all trained classifiers.\"\"\"\n        sum_exp = np.array([alpha[c] * ((x[classifiers[c][0]] > classifiers[c][1]) * 2 - 1) for c in range(len(classifiers))])\n        return 1 if np.sum(sum_exp) >= 0 else -1\n\n    return [predict_single(X_test[i]) for i in range(k)]\n\n# Example usage:\n# X_train, y_train, X_test can be defined as per the problem statement.\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=5)\n# print(predictions)\n```\n\nThis solution defines the `adaboost_predict` function which implements the AdaBoost algorithm using decision stumps as weak learners. It trains on the provided `X_train` and `y_train` data, then predicts labels for the `X_test` data, returning them as a list of `-1` or `1`. The number of classifiers is controlled by the `n_clf` parameter, which defaults to `5` if not specified."}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Compute fan_in and fan_out\n    fan_in, fan_out = shape[:2]\n    receptive_field_size = np.prod(shape[2:]) if len(shape) > 2 else 1\n    fan_in *= receptive_field_size\n    fan_out *= receptive_field_size\n\n    # Calculate the standard deviation\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n\n    # Generate the array with the specified shape and standard deviation\n    result = np.random.normal(loc=0.0, scale=stddev, size=shape)\n    \n    return result\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    # Define a test shape for a convolutional kernel\n    test_shape = (8, 4, 3, 3)  # out_channels=8, in_channels=4, kernel_size=(3, 3)\n\n    # Generate the initialized weights\n    weights = glorot_normal(test_shape)\n\n    # Verify the shape and data type\n    assert weights.shape == test_shape, \"The generated array does not match the requested shape.\"\n    assert weights.dtype == np.float, \"The data type is not float.\"\n\n    # Calculate and print sample statistics\n    sample_mean = np.mean(weights)\n    sample_stddev = np.std(weights)\n    theoretical_stddev = np.sqrt(2 / (test_shape[1] * test_shape[2] * test_shape[3] + test_shape[0] * test_shape[2] * test_shape[3]))\n\n    print(f\"Sample Mean: {sample_mean:.6f}\")\n    print(f\"Sample Standard Deviation: {sample_stddev:.6f}\")\n    print(f\"Theoretical Standard Deviation: {theoretical_stddev:.6f}\")\n\n    # Check if the sample statistics are within a reasonable range\n    assert abs(sample_mean) < 1e-5, \"The sample mean is too far from 0.\"\n    assert abs(sample_stddev - theoretical_stddev) < 1e-1, \"The sample standard deviation is too far from the theoretical value.\"\n```"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Initialize the adjacency list with empty lists for each vertex in V\n    G = [[] for _ in V]\n    \n    # Create a dictionary to map each vertex to its index in V for quick lookup\n    vertex_index = {vertex: i for i, vertex in enumerate(V)}\n    \n    # Process each edge and update the adjacency list accordingly\n    for u, v in E:\n        if u in vertex_index and v in vertex_index:\n            i, j = vertex_index[u], vertex_index[v]\n            # Add vertices to each other's adjacency list only if they are not already present\n            if j not in G[i]:\n                G[i].append(j)\n            if i not in G[j]:\n                G[j].append(j)\n    \n    # Sort each adjacency list based on the order of appearance in V\n    G = [sorted(G[i], key=lambda x: V[x]) for i in range(len(V))]\n    \n    return G\n\n# Helper function to print adjacency list for verification\ndef print_adj_list(V, G):\n    for vertex, neighbors in zip(V, G):\n        print(f\"{vertex}: {', '.join(str(V[neighbor]) for neighbor in neighbors)}\")\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    V = ['A', 'B', 'C', 'D']\n    E = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('C', 'D')]\n    G = build_adj_list(V, E)\n    print(\"Adjacency List:\")\n    print_adj_list(V, G)\n\n    # Test cases\n    def check():\n        test_V = ['A', 'B', 'C', 'D']\n        test_E = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('C', 'D')]\n        expected_output = [[1, 2], [0, 2], [0, 1, 3], [2]]\n        actual_output = build_adj_list(test_V, test_E)\n        assert actual_output == expected_output, f\"Expected {expected_output}, but got {actual_output}\"\n        print(\"Test passed!\")\n\n    check()\n```\n\nThis solution defines the `build_adj_list` function which constructs the adjacency list for the given undirected graph defined by `V` and `E`. It ensures that each vertex's adjacency list contains unique neighbors and is sorted according to their order of appearance in `V`. The helper function `print_adj_list` is used for printing the adjacency list for verification purposes. The script also includes a test case to verify the correctness of the implementation."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": np.inf\n    }\n\n    # Concatenate features and corresponding labels with weights for sorting\n    feature_label_weight = np.expand_dims(y, axis=1)  # Shape: (n_samples, 1)\n    for feature_idx in range(n_features):\n        feature_vector = X[:, feature_idx]  # Select the feature column\n        current_feature = np.expand_dims(feature_vector, axis=1)  # Shape: (n_samples, 1)\n        f_y_w = np.concatenate((current_feature, feature_label_weight, \n                                np.expand_dims(sample_weights, axis=1)), axis=1)\n\n        # Sort f_y_w by first column i.e. the feature values\n        sorted_f_y_w = f_y_w[np.argsort(f_y_w[:, 0])]\n\n        # Calculate the cumulative sum of weights where labels are -1 or 1\n        pos_weights = np.cumsum(sorted_f_y_w[:, 2] * (sorted_f_y_w[:, 1] == 1))\n        neg_weights = np.cumsum(sorted_f_y_w[:, 2] * (sorted_f_y_w[:, 1] == -1))\n\n        # Initialize errors for +1 and -1 polarities\n        pos_error = pos_weights[-1]  # All -1 predictions error\n        neg_error = neg_weights[-1]  # All -1 predictions error\n        min_error = min(pos_error, neg_error)\n        min_polarity = 1 if pos_error <= neg_error else -1\n\n        for row_idx in range(1, n_samples):\n            if sorted_f_y_w[row_idx, 0] != sorted_f_y_w[row_idx - 1, 0]:\n                # Update errors if the current feature value is different from previous one\n                pos_error += sorted_f_y_w[row_idx - 1, 2] * (sorted_f_y_w[row_idx - 1, 1] == -1)\n                neg_error += sorted_f_y_w[row_idx - 1, 2] * (sorted_f_y_w[row_idx - 1, 1] == 1)\n                current_error = min(pos_error, neg_error)\n                if current_error < min_error:\n                    min_error = current_error\n                    min_polarity = 1 if pos_error <= neg_error else -1\n                    best_threshold = (sorted_f_y_w[row_idx, 0] + sorted_f_y_w[row_idx - 1, 0]) / 2\n        \n        # After the loop, check if this feature has a better stump\n        if min_error / np.sum(sample_weights) < best_stump[\"weighted_error\"]:\n            best_stump[\"feature_index\"] = feature_idx\n            best_stump[\"threshold\"] = np.round(best_threshold, 4)\n            best_stump[\"polarity\"] = min_polarity\n            best_stump[\"weighted_error\"] = round(min_error / np.sum(sample_weights), 4)\n\n    return best_stump\n\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, -1, 1, -1])\n# sample_weights = np.array([0.1, 0.2, 0.3, 0.4])\n# print(train_decision_stump(X, y, sample_weights))\n```\n\nThis code defines the function `train_decision_stump` which finds the optimal decision stump based on the given parameters. It iterates through each feature, sorts the data points by the feature values, and calculates the weighted classification error for each potential threshold and polarity. The stump with the minimum weighted error is selected and returned as a dictionary."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = -sum((count / total_count) * math.log2(count / total_count) \n                         for count in label_counts.values() if count > 0)\n    return entropy_value\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature, dtype=float)\n    target = np.array(target, dtype=int)\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target)\n    \n    # If all targets are the same, no split is possible\n    if parent_entropy == 0.0:\n        return (None, 0.0)\n\n    # Sort feature and target by feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n\n    # Find unique points where feature values change\n    unique_feature = np.unique(sorted_feature)\n    potential_thresholds = (unique_feature[:-1] + unique_feature[1:]) / 2\n\n    best_threshold = None\n    max_info_gain = 0.0\n\n    for threshold in potential_thresholds:\n        left_labels = sorted_target[sorted_feature < threshold]\n        right_labels = sorted_target[sorted_feature >= threshold]\n\n        # Calculate entropies of left and right nodes\n        left_entropy = entropy(left_labels) if left_labels.size > 0 else 0.0\n        right_entropy = entropy(right_labels) if right_labels.size > 0 else 0.0\n\n        # Calculate information gain\n        info_gain = parent_entropy - (\n            left_labels.size / len(target) * left_entropy +\n            right_labels.size / len(target) * right_entropy\n        )\n\n        # Update best threshold and max info gain if this is better\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = threshold\n\n    # Return the smallest threshold if multiple have the same gain\n    if best_threshold is not None:\n        best_threshold = round(best_threshold, 4)\n\n    return (best_threshold, round(max_info_gain, 4))\n\n# Example usage:\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = [0, 1, 0, 0, 1, 1, 1, 0, 1]\n\nprint(best_split(feature, target))\n```\n\nThis script defines the `best_split` function that finds the optimal split threshold based on the information gain for a given feature and target labels. It ensures that the threshold is chosen correctly, handling cases where no valid split can be made. The function also rounds the results to four decimal places as required."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    # Retrieve the initializer from the global namespace\n    initializer = globals().get(name)\n    \n    # Check if the retrieved object is callable\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    try:\n        init_fn = get_initializer(name)\n        output = init_fn(shape)\n        print(output)\n    except ValueError as e:\n        print(e)\n```\n\n### Explanation:\n1. **Initializers**: The functions `zeros_init`, `ones_init`, and `random_uniform_init` are defined as per the problem statement.\n2. **get_initializer**: This function retrieves the initializer from the global namespace using `globals().get(name)`. It then checks if the retrieved object is callable using `callable(initializer)`. If it is, it returns the initializer; otherwise, it raises a `ValueError` with the specified message.\n3. **Example Usage**: The script demonstrates how to use `get_initializer` to retrieve and use an initializer function. It checks for exceptions and prints the appropriate message or output."}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    H_out = ((H - p_h) // s_h) + 1\n    W_out = ((W - p_w) // s_w) + 1\n    \n    # Initialize output arrays\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X, dtype=float)\n    \n    # Forward Pass\n    for n in range(N):\n        for c in range(C):\n            for h_out in range(H_out):\n                for w_out in range(W_out):\n                    start_h = h_out * s_h\n                    end_h = start_h + p_h\n                    start_w = w_out * s_w\n                    end_w = start_w + p_w\n                    \n                    region = X[n, c, start_h:end_h, start_w:end_w]\n                    pooled_output[n, c, h_out, w_out] = np.mean(region)\n                    \n    # Backward Pass\n    for n in range(N):\n        for c in range(C):\n            for h_out in range(H_out):\n                for w_out in range(W_out):\n                    start_h = h_out * s_h\n                    end_h = start_h + p_h\n                    start_w = w_out * s_w\n                    end_w = start_w + p_w\n                    \n                    pool_region_size = p_h * p_w\n                    grad_per_element = accum_grad[n, c, h_out, w_out] / pool_region_size\n                    grad_input[n, c, start_h:end_h, start_w:end_w] += grad_per_element\n\n    # Rounding and converting to lists\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    \n    return pooled_output_rounded, grad_input_rounded\n\n# Example usage:\n# X = np.random.rand(1, 1, 4, 4)\n# pool_shape = (2, 2)\n# stride = (2, 2)\n# accum_grad = np.ones((1, 1, 2, 2))\n\n# output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n# print(\"Pooled Output:\", output)\n# print(\"Gradient Input:\", grad_input)\n```"}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\n\n# Example usage:\n# tree_a = Node(feature=0, threshold=0.5, left=Leaf(value=[0.0]), right=Leaf(value=[1.0]))\n# tree_b = Node(feature=0, threshold=0.5, left=Leaf(value=[0.0]), right=Leaf(value=[1.0]))\n# print(compare_trees(tree_a, tree_b))  # This should print: True\n```\n\nThis code defines the necessary classes and implements the `compare_trees` function which recursively checks if two decision trees are equivalent based on the specified criteria. The function handles both `Node` and `Leaf` comparisons, ensuring that the structure and values of the trees match up to the specified tolerances."}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]], \n                           parent2: list[list[int | float]], \n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert input lists to NumPy arrays for easier manipulation\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n\n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n\n    # Get the number of rows and columns\n    num_rows, num_cols = np_parent1.shape\n\n    # Ensure the cutoff is within bounds\n    cutoff = max(0, min(cutoff, num_cols - 1))\n\n    # Perform the crossover using NumPy advanced indexing\n    child1 = np.hstack([\n        np_parent1[:, :cutoff],  # Columns before cutoff from parent1\n        np_parent2[:, cutoff:]   # Columns from cutoff onwards from parent2\n    ])\n    \n    child2 = np.hstack([\n        np_parent2[:, :cutoff],  # Columns before cutoff from parent2\n        np_parent1[:, cutoff:]   # Columns from cutoff onwards from parent1\n    ])\n\n    # Convert the result back to ordinary Python lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n\n    return (child1_list, child2_list)\n\n# Example usage:\nif __name__ == \"__main__\":\n    parent1 = [[1, 2, 3], [4, 5, 6]]\n    parent2 = [[7, 8, 9], [10, 11, 12]]\n    cutoff = 1\n    children = single_point_crossover(parent1, parent2, cutoff)\n    print(\"Child 1:\", children[0])\n    print(\"Child 2:\", children[1])\n```\n\nThis script defines the `single_point_crossover` function, validates the input matrices, and performs the crossover operation, returning the resulting children as Python lists. The example usage demonstrates how to call the function with two sample parent matrices and a specified cutoff point."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    V2I = G['_V2I']\n    adj = {label: [] for label in V2I}\n\n    for i, edges in enumerate(G['_G']):\n        source_label = list(V2I.keys())[i]\n        for edge in edges:\n            target_label, weight = edge[1], edge[2]\n            adj[source_label].append((target_label, weight))\n            \n            if not is_directed and source_label < target_label:\n                # Ensure that undirected edges appear in both directions\n                if target_label not in adj:\n                    adj[target_label] = []\n                adj[target_label].append((source_label, weight))\n\n    # Handle vertices with no incident edges\n    for label in V2I:\n        if label not in adj:\n            adj[label] = []\n\n    # Sort neighbour lists lexicographically\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n\n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 1.0), ('A', 'C', 2.5)],\n#         [('B', 'C', 3.0)],\n#         []\n#     ]\n# }\n# print(to_networkx(G))\n# Output should be:\n# {'A': [('B', 1.0), ('C', 2.5)], 'B': [('A', 1.0), ('C', 3.0)], 'C': [('A', 2.5), ('B', 3.0)]}\n```\n\nThis function takes a custom graph dictionary `G` and converts it into a plain adjacency dictionary `adj` with the specified properties. It handles both directed and undirected graphs appropriately and ensures that neighbor lists are sorted lexicographically. Vertices with no incident edges are included with an empty list."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already\n    x = np.asarray(x)\n    # Check if all elements are equal to their integer cast and if they are either 0 or 1\n    return np.all((x == x.astype(int)) & (np.isin(x, [0, 1])))\n\n# Test cases to check if the function works correctly\ntest_cases = [\n    (np.array([0, 1, 0, 1]), True),\n    (np.array([0., 1., 0., 1.]), True),  # Floats representing binary values\n    (np.array([True, False, True]), True),  # Boolean values\n    (np.array([0, 1, 2, 1]), False),  # Contains 2, which is not binary\n    (np.array([[0, 1], [1, 0]]), True),  # 2D array with binary values\n    (np.array([[0, 1, 2], [1, 0, 1]]), False)  # 2D array with a non-binary value\n]\n\n# A helper function to test the solution\ndef test_is_binary():\n    all_passed = True\n    for i, (input_array, expected) in enumerate(test_cases):\n        result = is_binary(input_array)\n        if result != expected:\n            print(f\"Test case {i+1} Failed: input({input_array}) output({result}), expected({expected})\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Run the test function\ntest_is_binary()\n```\n\nThis code defines the `is_binary` function and tests it against several cases to ensure its correctness."}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    \n    def pad_sentence(sentence: str, N: int) -> List[str]:\n        \"\"\"Pad the sentence with <bol> and <eol> tokens.\"\"\"\n        tokens = sentence.split()\n        return ['<bol>'] * (N - 1) + tokens + ['<eol>']\n\n    # Pad all sentences in the corpus\n    padded_corpus = [pad_sentence(sentence, N) for sentence in corpus]\n\n    # Count N-grams and their prefixes\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    \n    for sentence in padded_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            \n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Initialize log-probability with positive infinity\n    log_prob = float('inf')\n    \n    # Pad the query sentence\n    padded_query = pad_sentence(query, N)\n    \n    # Calculate log-probability for the query\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i+N])\n        prefix = tuple(padded_query[i:i+N-1])\n\n        if prefix not in prefix_counts or ngram not in ngram_counts:\n            return float('-inf')\n\n        ngram_count = ngram_counts[ngram]\n        prefix_count = prefix_counts[prefix]\n        \n        # MLE probability\n        prob = ngram_count / prefix_count\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 2\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis script defines the `ngram_log_prob` function, which calculates the total log-probability of a query sentence under an N-gram MLE model. It handles padding, counting, and probability calculations as specified in the task description."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.spatial.distance import pdist, squareform\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    \n    n = X.shape[0]\n    \n    # Step 1: Build the weighted adjacency matrix W\n    pairwise_distances = pdist(X, metric='euclidean')\n    affinity = 1 / (1 + pairwise_distances)\n    W = np.zeros((n, n))\n    np.fill_diagonal(W, 0)  # Ensure the diagonal is zero\n    triu_indices = np.triu_indices(n, k=1)\n    W[triu_indices] = affinity\n    W += W.T  # Make W symmetric\n    \n    # Step 2: Compute the unnormalized graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, sorted_indices]\n    \n    # Step 4: Run k-means on the rows of E\n    def kmeans(data, k, max_iters=100):\n        n = data.shape[0]\n        centroids = data[:k].copy()  # Use the first k rows as initial centroids\n        for _ in range(max_iters):\n            # Assign clusters\n            labels = np.argmin(((data[:, None] - centroids)**2).sum(-1), axis=1)\n            \n            new_centroids = np.array([data[labels == i].mean(axis=0) if len(data[labels == i]) > 0 else np.random.randn(data.shape[1]) for i in range(k)])\n            if np.all(centroids == new_centroids):\n                break\n            centroids = new_centroids\n        return labels.tolist()\n    \n    labels = kmeans(E, k)\n    \n    return labels\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [4, 2], [4, 4], [4, 0]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, following the steps outlined in the task description. It builds the weighted adjacency matrix, computes the graph Laplacian, extracts the top k eigenvectors, and uses k-means clustering on these eigenvectors to produce the final cluster labels."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    debug_str = (\n        f\"{'------------------------- DEBUG -------------------------'\\n}\"\n        f\"Mine (prev) [{prev_label}]:'\\n{prev_mine}'\\n\"\n        f\"Theirs (prev) [{prev_label}]:'\\n{golds[prev_label]}'\\n\"\n        f\"Mine [{curr_label}]:'\\n{curr_mine}'\\n\"\n        f\"Theirs [{curr_label}]:'\\n{golds[curr_label]}{warn_str}'\\n\"\n        f\"{'----------------------- END DEBUG -----------------------'}\"\n    )\n    \n    # Remove extra quotes added for formatting clarity\n    debug_str = debug_str.replace(\"'\", \"\")\n    \n    return debug_str\n\n# Example usage:\nif __name__ == \"__main__\":\n    params = [(\"1\", \"test1\"), (\"2\", \"test2\")]\n    golds = {\"test1\": \"0\", \"test2\": \"3\"}\n    ix = 1\n    warn_str = \"\\nWarning: Values do not match.\"\n    print(err_fmt(params, golds, ix, warn_str))\n```\n\nThis script defines the `err_fmt` function as specified, ensuring all elements align precisely per the task's requirements. It also includes an example usage demonstrating how the function operates."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu=0.0,\n    V=None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    \n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        \n    M = X.shape[1]\n    \n    # Broadcast mu if necessary\n    if isinstance(mu, (float, int)):\n        mu = np.full(M, mu, dtype=float)\n    \n    # Handle V based on input type\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple, np.ndarray)):\n        if len(np.array(V).shape) == 1:\n            V = np.diag(V)\n        elif V.shape == (M, M):\n            V = V\n        else:\n            raise ValueError(\"V must be a scalar, 1D iterable of length M, or 2D array of shape (M, M)\")\n    else:\n        raise ValueError(\"Invalid type for V.\")\n    \n    # Convert V to precision matrix\n    V_inv = np.linalg.inv(V)\n    \n    # Compute posterior precision matrix\n    XTX = X.T @ X\n    Sigma_b_inv = V_inv + XTX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    \n    # Compute posterior mean\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    return [round(coeff, 4) for coeff in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 4, 5])\n# print(bayesian_posterior_mean(X, y, fit_intercept=False))\n```\n\nThis script defines the `bayesian_posterior_mean` function according to the problem description. It handles various types of inputs for the prior parameters and computes the posterior mean of the regression coefficients using the provided formulas. The function also rounds each coefficient to four decimal places before returning the result."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Get the limit frequencies in Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters + 2 equally-spaced points in the Mel scale\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert back to Hz\n    freqs = mel_to_hz(mels)\n\n    # Compute the center frequencies of the DFT bins\n    dft_bin_cents = np.arange(N // 2 + 1) * fs / N\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Fill the filterbank matrix\n    for i in range(n_filters):\n        # Left and right slopes of the trapezoid\n        left_slope = (dft_bin_cents - freqs[i]) / (freqs[i + 1] - freqs[i])\n        right_slope = (freqs[i + 2] - dft_bin_cents) / (freqs[i + 2] - freqs[i + 1])\n\n        # Keep only positive slopes\n        filterbank[i] = np.maximum(0, np.minimum(left_slope, right_slope))\n\n    # Normalize the filters\n    if normalize:\n        for i in range(n_filters):\n            area = 2 / (freqs[i + 2] - freqs[i])\n            filterbank[i] *= area\n\n    # Round to 4 decimal places and convert to list\n    return [[round(x, 4) for x in row] for row in filterbank]\n\n# Example usage:\n# fb = mel_filterbank(N=1024, n_filters=20, fs=44100, min_freq=0, max_freq=None, normalize=True)\n# print(fb)\n```\n\nThis script defines the `mel_filterbank` function according to the specifications provided. It computes the Mel filterbank transformation matrix using the described steps and returns it as a plain Python list with each element rounded to four decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n\n    # Coefficients for the Blackman-Harris window\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n\n    # Generate the window\n    n = np.arange(window_len)\n    N = window_len - 1 if symmetric else window_len\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + \\\n             a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n\n    # Round the result to 4 decimal places\n    return [round(val, 4) for val in window]\n\n# Example usage:\nprint(blackman_harris(5, symmetric=True))\nprint(blackman_harris(5, symmetric=False))\n```\n\n### Explanation:\n- The function `blackman_harris` takes two parameters: `window_len` (the desired number of samples in the window) and `symmetric` (a boolean indicating whether to generate a symmetric or periodic window).\n- If `window_len` is less than or equal to zero, it returns an empty list.\n- If `window_len` is one, it returns `[1.0]`.\n- Otherwise, it calculates the Blackman\u2013Harris window using the given coefficients and the appropriate form (symmetric or periodic) based on the `symmetric` parameter.\n- The window values are then rounded to four decimal places and returned as a Python list."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    \n    def digamma(x):\n        # Shift small values to a larger base point\n        if x < 6:\n            return digamma(x + 1) - 1 / x\n        else:\n            # Asymptotic expansion for larger values\n            return math.log(x) - 1/(2*x) - 1/(12*x**2) + 1/(120*x**4) - 1/(252*x**6)\n    \n    # Extract parameters for the d-th sample\n    gamma_d = np.array(gamma[d])\n    sum_gamma_d = np.sum(gamma_d)\n    \n    # Compute the digamma values\n    psi_gamma_dt = digamma(gamma_d[t])\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    \n    # Calculate the expected log value\n    result = psi_gamma_dt - psi_sum_gamma_d\n    \n    # Return the result rounded to 4 decimal places\n    return round(result, 4)\n\n# Example usage:\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))\n```\n\nThis script defines the `expected_log_dirichlet` function, which computes the expected value of the logarithm of the \\(t\\)-th component of a Dirichlet-distributed random variable for the given \\(d\\)-th sample. It uses a custom implementation of the digamma function based on the recursive shift and asymptotic expansion techniques described in the problem statement."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]], \n            golds: Dict[str, str], \n            ix: int, \n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    \n    # Get previous and current items\n    prev_ix = max(ix - 1, 0)\n    curr_ix = ix\n    \n    prev_pred, prev_label = params[prev_ix]\n    curr_pred, curr_label = params[curr_ix]\n    curr_gold = golds.get(curr_label, \"\")\n    prev_gold = golds.get(prev_label, \"\")\n    \n    # Format the debug report\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_pred}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return report\n\n# Example usage:\nif __name__ == \"__main__\":\n    params = [\n        (\"prediction_0\", \"label_0\"),\n        (\"prediction_1\", \"label_1\"),\n        (\"prediction_2\", \"label_2\")\n    ]\n    golds = {\n        \"label_0\": \"gold_0\",\n        \"label_1\": \"gold_1\",\n        \"label_2\": \"gold_2\"\n    }\n    ix = 1\n    warn_str = \" (WARNING: mismatch)\"\n    \n    print(err_fmt(params, golds, ix, warn_str))\n```\n\nThis script defines the `err_fmt` function as described in the problem statement. It constructs a detailed, readable error report by comparing the prediction from the current and previous indices in the `params` list to the expected values from the `golds` dictionary. The function also optionally appends a warning message provided in the `warn_str` argument."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    m, n = X_train.shape\n    D = np.full(m, 1/m)\n    classifiers = []\n    \n    for _ in range(n_estimators):\n        best_f_err = float(\"inf\")\n        \n        for j in range(n):  # loop over all features\n            # Sort data by feature j and get the corresponding labels\n            sorted_idx = np.argsort(X_train[:, j])\n            sorted_y = y_train[sorted_idx]\n            \n            # Compute the cumulative sum of weights for +1 and -1 labels\n            pos = np.cumsum(D[sorted_idx] * (sorted_y == 1))\n            neg = np.cumsum(D[sorted_idx] * (sorted_y == -1))\n            \n            # Initialize the minimal error rate and the best threshold\n            f_err = min(pos[-1], neg[0])\n            best_t = None\n            \n            # Find the best threshold for feature j\n            for i in range(1, m):\n                if sorted_y[i] != sorted_y[i-1]:\n                    current_err = min(pos[i-1] + neg[m-i], pos[-1] - pos[i-1] + neg[-1] - neg[m-i])\n                    if current_err < f_err:\n                        f_err = current_err\n                        best_t = (X_train[sorted_idx[i], j] + X_train[sorted_idx[i-1], j]) / 2\n            # Determine the polarity based on the minimum error\n            p = 1 if pos[0] < neg[-1] else -1\n            \n            if f_err < best_f_err:\n                best_f_err = f_err\n                best_t_f = best_t\n                best_j_f = j\n                best_p_f = p\n        \n        # Calculate alpha for this round\n        alpha_m = 0.5 * math.log((1 - best_f_err) / best_f_err)\n        \n        # Update the classifiers list\n        classifiers.append((best_j_f, best_t_f, best_p_f, alpha_m))\n        \n        # Update the distribution D\n        h_m = np.array([best_p_f * (X_train[:, best_j_f] > best_t_f).astype(int) for _ in range(m)]).T\n        D *= np.exp(-alpha_m * y_train * h_m)\n        D /= np.sum(D)\n    \n    # Make predictions on the test set\n    predictions = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        j, t, p, alpha = clf\n        h_m = p * (X_test[:, j] > t).astype(int)\n        predictions += alpha * h_m\n    \n    return list(np.sign(predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [5, 6]])\n# print(adaboost_predict(X_train, y_train, X_test, n_estimators=2))\n```\n\nThis solution implements the AdaBoost algorithm from scratch using decision stumps as weak learners. The `adaboost_predict` function trains the model on the training data and then predicts the labels for the test data. The training process involves iteratively selecting the best decision stump based on the weighted classification error and updating the weight distribution for the next iteration. The final predictions are made by combining the predictions of all the weak learners."}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    \n    if N <= 0 or fs <= 0:\n        return []\n\n    df = fs / N  # Frequency resolution\n\n    if positive_only:\n        num_bins = N // 2 + 1\n        freqs = [round(k * df, 4) for k in range(num_bins)]\n    else:\n        num_bins = N\n        freqs = [round((k - (N - 1) / 2) * df, 4) for k in range(num_bins)]\n\n    return freqs\n\n# Example usage:\nprint(dft_bins(8, 10000, True))  # Non-negative frequencies\nprint(dft_bins(8, 10000, False)) # Full list of frequencies\n```\n\nThis code defines the `dft_bins` function which calculates the center frequencies of each DFT bin based on the given parameters. It handles both the positive-only and full-frequency cases, and ensures that the output is rounded to four decimal places. If `N` or `fs` is non-positive, it returns an empty list as specified."}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays in case they aren't\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Check which samples have at least one OOB prediction\n    has_oob_predictions = np.any(oob_mask, axis=1)\n    \n    if not np.any(has_oob_predictions):\n        return -1.0\n    \n    # Filter down to only those samples with at least one OOB prediction\n    filtered_y_true = y_true[has_oob_predictions]\n    filtered_predictions = predictions[has_oob_predictions]\n    filtered_oob_mask = oob_mask[has_oob_predictions]\n\n    # Calculate mean of OOB predictions for these samples\n    oob_means = np.average(filtered_predictions, axis=1, weights=filtered_oob_mask, returned=True)[0]\n\n    # Compute squared errors\n    squared_errors = (oob_means - filtered_y_true) ** 2\n\n    # Return the mean of the squared errors, rounded to 4 decimal places\n    return round(np.mean(squared_errors), 4)\n\n# Example usage:\ny_true = [2.5, 3.6, 5.0, 7.1, 8.2]\npredictions = [\n    [2.4, 2.6, 0.0, 7.0, 8.0],\n    [2.5, 3.5, 0.0, 7.5, 8.5],\n    [2.7, 3.7, 5.0, 7.2, 8.1],\n    [0.0, 3.8, 5.1, 7.3, 0.0],\n    [0.0, 3.9, 5.2, 0.0, 8.3]\n]\noob_mask = [\n    [True, False, False, False, False],\n    [False, True, False, False, False],\n    [False, False, True, False, False],\n    [False, False, False, True, False],\n    [False, False, False, False, True]\n]\n\nprint(oob_mse(y_true, predictions, oob_mask))\n```\n\n### Explanation of the Code:\n1. **Input Conversion**: All inputs are converted to NumPy arrays for ease of manipulation and computation.\n2. **Filtering Samples with OOB Predictions**: The first step is to identify samples that have at least one OOB prediction using `np.any(oob_mask, axis=1)`. If no such samples exist, the function returns `-1.0`.\n3. **Calculating OOB Means**: For each sample with OOB predictions, calculate the mean of the OOB predictions using `np.average`, weighting by the `oob_mask` (which indicates OOB predictions).\n4. **Squared Errors Calculation**: Compute the squared error between the true value and the calculated OOB mean for each relevant sample.\n5. **Mean Squared Error (MSE)**: Finally, compute the mean of these squared errors and return it rounded to 4 decimal places.\n\nThis solution ensures that the OOB-MSE is accurately computed based on the given constraints and requirements."}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    \n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    total_transactions = len(transactions)\n    \n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    frequent_item_order = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Step 3: Create a global ordering of the remaining items\n    def sort_transaction(transaction):\n        return [item for item in transaction if item in frequent_items]\n    \n    ordered_transactions = [sort_transaction(t) for t in transactions]\n    ordered_transactions = [[frequent_item_order.index(item) for item in transaction] \n                            for transaction in ordered_transactions]\n\n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    for transaction in ordered_transactions:\n        current_node = root\n        for item_index in transaction:\n            item = frequent_item_order[item_index]\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node[\"children\"][item][\"support\"] += 1\n            current_node = current_node[\"children\"][item]\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'c', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e'],\n    ['b', 'c', 'd'],\n    ['a', 'c', 'e']\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold. It follows the steps outlined in the problem description:\n\n1. Computes the support for every item.\n2. Filters out items with support below the `min_support` threshold.\n3. Orders the remaining items by decreasing support, breaking ties alphabetically.\n4. Builds the FP-Tree by iterating over the transactions, updating the tree structure based on the ordered items.\n\nThe resulting FP-Tree is returned as a nested dictionary."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    if isinstance(X, list):\n        X = np.array(X, dtype=float)\n    if isinstance(Y, list):\n        Y = np.array(Y, dtype=float)\n\n    # Set Y = X if Y is None\n    if Y is None:\n        Y = X\n    \n    # Get shapes of X and Y\n    N, C_X = X.shape\n    M, C_Y = Y.shape\n    \n    # Check if the number of columns are different, return -1 if so\n    if C_X != C_Y:\n        return -1\n    \n    # Compute the kernel matrix using broadcasting and dot product\n    kernel_matrix = np.dot(X, Y.T) + c0\n    \n    # Round the result to 4 decimal places and convert to list of lists\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix_rounded\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nprint(linear_kernel(X, Y, c0=1))  # Expected output: [[17.0, 31.0], [39.0, 67.0]]\n\nX = [[1, 2], [3, 4]]\nprint(linear_kernel(X))  # Expected output: [[5.0, 11.0], [11.0, 25.0]]\n\nX = []\nprint(linear_kernel(X))  # Expected output: []\n\nX = [[1, 2], [3, 4]]\nY = [[5, 6, 7], [7, 8, 9]]\nprint(linear_kernel(X, Y))  # Expected output: -1\n```\n\nThis solution converts the input lists to NumPy arrays, checks the shapes of `X` and `Y`, and then computes the linear kernel matrix using NumPy's efficient dot product functionality. The result is rounded to four decimal places before being converted back into a list of lists."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    \n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update biased second moment estimate\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    \n    # Compute the bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - np.power(beta1, t))\n    \n    # Compute the bias-corrected second moment estimate\n    v_hat_t = v_t / (1 - np.power(beta2, t))\n    \n    # If the gradient is exactly zero, do not update the parameter\n    if np.allclose(grad, 0):\n        updated_param = param\n    else:\n        # Perform the Adam update rule\n        updated_param = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Round the results to 8 decimal places and convert to lists\n    new_m = [round(x, 8) for x in m_t.flatten()]\n    new_v = [round(x, 8) for x in v_t.flatten()]\n    updated_param_list = [round(x, 8) for x in updated_param.flatten()]\n    \n    return (updated_param_list, new_m, new_v)\n\n# Example usage:\n# param = np.array([0.5, 0.3])\n# grad = np.array([-0.2, -0.1])\n# t = 1\n# m = np.zeros_like(param)\n# v = np.zeros_like(param)\n# result = adam_update(param, grad, t, m, v)\n# print(result)\n```\n\nThis function implements a single-step Adam optimizer, ensuring that it works correctly with multi-dimensional parameters and returns the updated parameter along with the new moment estimates as required."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_samples, _ = theta_samples.shape\n    num_retain = int(retain_prcnt * num_samples)\n    \n    # Get indices of the best `num_retain` samples based on rewards\n    top_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Select the top samples\n    elite_samples = theta_samples[top_indices]\n\n    # Compute the mean and variance of these top samples.\n    mean = elite_samples.mean(axis=0).round(4).tolist()\n    variance = elite_samples.var(axis=0).round(4).tolist()\n\n    return mean, variance\n\n# Example Usage:\ntheta_samples = np.array([[1.0, 2.0], [2.0, 3.0], [0.5, 1.5], [1.5, 2.5]])\nrewards = [0.1, 0.5, 1.0, 2.0]\nretain_percentage = 0.5\n\nmean_vector, variance_vector = cross_entropy_update(theta_samples, rewards, retain_percentage)\nprint(\"Mean:\", mean_vector)\nprint(\"Variance:\", variance_vector)\n```\n\n### Explanation:\n1. **Sorting Rewards**: The `np.argsort()` function is used to sort the rewards and get the indices of the top `retain_prcnt * N` samples.\n2. **Selecting Top Samples**: We select the top samples based on the sorted indices.\n3. **Compute Mean and Variance**: We compute the mean and variance along axis 0 (i.e., per dimension) of the selected top samples.\n4. **Rounding**: Both the mean and variance values are rounded to four decimal places using `.round(4)`.\n5. **Return Values**: The function returns the mean and variance as Python lists. \n\nThis implementation ensures that the top `retain_prcnt` fraction of parameter vectors is used to compute the new mean and variance needed for the next iteration of the cross-entropy method."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert labels to a list if it's not already\n    labels = list(labels)\n    \n    # If the input is empty, return 0.0\n    if not labels:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # Calculate the entropy\n    ent = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        ent -= probability * math.log2(probability)\n    \n    # Return the entropy rounded to 5 decimal places\n    return round(ent, 5)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(entropy('aaaa'.split()))  # Expected output: 0.0\n    print(entropy('aabb'.split()))  # Expected output: 1.0\n    print(entropy('aaabbbcc'.split()))  # Expected output: 1.58496\n    print(entropy([]))  # Expected output: 0.0\n    print(entropy(['class1', 'class1', 'class2', 'class3', 'class3', 'class3']))  # Expected output: ~1.45914\n```\n\nThis script defines the `entropy` function, which calculates the base-2 Shannon entropy of a given sequence of class labels. It handles special cases such as when the input is empty or when all labels are identical. The function uses the `Counter` class from the `collections` module to count the frequency of each label and then applies the formula for Shannon entropy. The result is rounded to five decimal places before being returned."}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    \n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, in_ch, out_ch = W.shape\n    \n    # Calculate padding dimensions\n    if isinstance(pad, int):\n        pr1, pr2, pc1, pc2 = pad, pad, pad, pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pr1, pr2 = pad[0], pad[0]\n        pc1, pc2 = pad[1], pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        pr1 = pr2 = ((in_rows - 1) * stride + kernel_rows - in_rows) // 2\n        pc1 = pc2 = ((in_cols - 1) * stride + kernel_cols - in_cols) // 2\n    else:\n        raise ValueError(\"Invalid padding specification\")\n    \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    \n    # Compute the output dimensions\n    in_rows += pr1 + pr2\n    in_cols += pc1 + pc2\n    out_rows = (in_rows - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (in_cols - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n    \n    # Create the col matrix\n    col_matrix = np.zeros((n_ex, out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    \n    for index in range(n_ex):\n        col = 0\n        for r in range(0, in_rows - (dilation * (kernel_rows - 1) + 1) + 1, stride):\n            for c in range(0, in_cols - (dilation * (kernel_cols - 1) + 1) + 1, stride):\n                patch = X_padded[index, r:r+kernel_rows*(dilation+1):dilation+1, c:c+kernel_cols*(dilation+1):dilation+1, :]\n                col_matrix[index, col, :] = patch.ravel()\n                col += 1\n                \n    # Reshape weights for matrix multiplication\n    W_reshaped = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    \n    # Perform the convolution using matrix multiplication\n    result = col_matrix @ W_reshaped\n    \n    # Reshape the result to the desired output shape\n    result = result.reshape(n_ex, out_rows, out_cols, out_ch).tolist()\n    \n    return result\n\n# Example usage:\n# X = np.random.rand(10, 32, 32, 3)\n# W = np.random.rand(3, 3, 3, 5)\n# result = conv2D(X, W, stride=1, pad='same', dilation=1)\n# print(result)\n```\n\nThis script implements the 2-D convolution via the im2col method, which converts the 2-D convolution into a matrix multiplication problem. The function handles various padding specifications and supports dilation. The result is returned as a deep Python list using `tolist()`."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    \n    # Step 1: Mean centering\n    data_centered = data - np.mean(data, axis=0)\n    \n    # Step 2: Compute principal directions based on the solver\n    if solver == \"svd\":\n        u, s, v = np.linalg.svd(data_centered, full_matrices=False)\n        directions = v.T\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        _, directions = np.linalg.eigh(cov_matrix)\n        directions = directions[:, ::-1]  # Sort by eigenvalues descending\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    \n    # Step 3: Sort directions by descending order of importance\n    n_features = data_centered.shape[1]\n    n_components = min(n_components, n_features)\n    directions = directions[:, :n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    signs = np.sign(directions[:, 0])  # Use the sign of the first non-zero loading\n    directions *= signs[:, np.newaxis]\n    data_centered = data_centered.dot(directions)\n    \n    # Step 5: Compute explained variance ratio\n    if solver == \"svd\":\n        total_variance = np.sum(s)\n        explained_variance = s[:n_components]\n    elif solver == \"eigen\":\n        total_variance = np.sum(np.diag(cov_matrix))\n        explained_variance = np.diag(cov_matrix)[:n_components]\n    \n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Step 6: Round to 4 decimals and convert to appropriate types\n    scores = np.round(data_centered, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n    \n    return scores, explained_variance_ratio\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data\n    data = np.array([\n        [2.5, 2.4],\n        [0.5, 0.7],\n        [2.2, 2.9],\n        [1.9, 2.2],\n        [3.1, 3.0],\n        [2.3, 2.7],\n        [2, 1.6],\n        [1, 1.1],\n        [1.5, 1.6],\n        [1.1, 0.9]\n    ])\n    \n    n_components = 2\n    solver = \"svd\"\n    \n    scores, explained_variance_ratio = pca_transform(data, n_components, solver)\n    print(\"Scores:\\n\", scores)\n    print(\"Explained Variance Ratio:\\n\", explained_variance_ratio)\n```\n\nThis script implements PCA with both SVD and Eigen-solver methods, ensuring deterministic sign fixing and rounding outputs as specified."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(np.argmax(leaf.value))\n    else:\n        # For regression, return the stored scalar directly\n        return float(leaf.value)\n\n\n# Example usage and verification\n\nimport numpy as np\n\n# Test case for classification\nleaf_class = Leaf([0.1, 0.6, 0.3])\nprint(leaf_predict(leaf_class, True))  # Should print 1, as the second element is the largest\n\n# Test case for regression\nleaf_reg = Leaf(15.7)\nprint(leaf_predict(leaf_reg, False))  # Should print 15.7\n```\n\nThis solution completes the `leaf_predict` function according to the specifications given:\n- It uses `np.argmax` to determine the class index for a classification leaf.\n- It returns the raw scalar value for a regression leaf.\nThe provided examples demonstrate how the function behaves in both scenarios, ensuring correctness."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    n_samples, _ = data.shape\n    if K == 1:\n        return [[float(f\"{x:.4f}\") for x in data.mean(axis=0)]]\n    \n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    prev_centroids = np.zeros_like(centroids)\n    \n    for _ in range(max_iters):\n        # Assign each point to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if len(data[labels == k]) > 0 else centroids[k] \n                                  for k in range(K)])\n        \n        # Check for convergence\n        if np.allclose(new_centroids, prev_centroids, atol=1e-6):\n            break\n        \n        prev_centroids, centroids = centroids, new_centroids\n    \n    # Sort centroids lexicographically\n    centroids = [list(map(lambda x: float(f\"{x:.4f}\"), c)) for c in centroids]\n    centroids.sort(key=lambda x: tuple(x))\n    \n    return centroids\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1, 1],\n                     [1, 2],\n                     [2, 1],\n                     [8, 8],\n                     [9, 8],\n                     [8, 9]])\n    K = 2\n    print(kmeans(data, K))\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized using the first `K` samples from the dataset.\n2. **Iteration**: For up to `max_iters` iterations, the following steps are performed:\n   - Compute the Euclidean distance between each point and each centroid.\n   - Assign each point to the nearest centroid.\n   - Recompute each centroid as the mean of the points assigned to it.\n   - Check for convergence by comparing the new centroids to the previous ones within a tolerance of \\(1 \\times 10^{-6}\\).\n3. **Termination**: If convergence is reached or the maximum number of iterations is reached, the centroids are sorted lexicographically and rounded to four decimal places.\n4. **Special Case**: If `K` is 1, the centroid is simply the mean of the entire dataset.\n\nThis implementation ensures that the algorithm is fully deterministic and easy to test."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input to a NumPy array if it isn't one already\n    if not isinstance(data, np.ndarray):\n        data = np.array(data, dtype=np.float64)\n    \n    # Check if the data is 2D\n    if data.ndim != 2:\n        raise ValueError(\"Input data must be a 2-dimensional array.\")\n\n    # Compute the sum of each row\n    row_sums = np.sum(data, axis=1)\n\n    # Check for any row that sums to 0\n    if np.any(row_sums == 0):\n        return -1\n\n    # Divide each element by its row's sum and round to 4 decimal places\n    stochastic_matrix = np.divide(data, row_sums[:, np.newaxis])\n    stochastic_matrix = np.round(stochastic_matrix, 4)\n\n    # Convert back to a Python list of lists\n    return stochastic_matrix.tolist()\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    example_data = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    result = row_stochastic_matrix(example_data)\n    print(result)\n    \n    # Test case with a row summing to zero\n    zero_sum_row_data = [\n        [0, 0, 0],\n        [1, 2, 3]\n    ]\n    result_with_zero = row_stochastic_matrix(zero_sum_row_data)\n    print(result_with_zero)\n    \n    # Test case with a NumPy array input\n    np_example_data = np.array([\n        [1, 2, 3],\n        [4, 5, 6]\n    ])\n    result_from_numpy = row_stochastic_matrix(np_example_data)\n    print(result_from_numpy)\n```\n\nThis script defines the `row_stochastic_matrix` function, which normalizes a given 2D numeric structure into a row-stochastic matrix according to the problem's requirements. It includes error handling for non-2D inputs and checks for rows that sum to zero. The function returns either the normalized matrix or `-1` if normalization is impossible. Additionally, example usage demonstrates how the function works with both nested lists and NumPy arrays."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_cont_space(space: Space, tuple_space: bool) -> bool:\n        if not tuple_space:\n            return isinstance(space, Box)\n        \n        if isinstance(space, (Tuple, Dict)):\n            return all(isinstance(subspace, Box) for subspace in space.spaces.values() if isinstance(space, Dict) else space.spaces)\n        \n        return False\n\n    cont_action = is_cont_space(env.action_space, tuple_action)\n    cont_obs = is_cont_space(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    env1 = Env(Discrete(5), Box(-1.0, 1.0, (2,)))\n    env2 = Env(Tuple((Box(-1.0, 1.0, (2,)), Box(-1.0, 1.0, (3,)))), Box(-1.0, 1.0, (2,)))\n    env3 = Env(Tuple((Box(-1.0, 1.0, (2,)), Discrete(3))), Tuple((Box(-1.0, 1.0, (2,)), Box(-1.0, 1.0, (3,)))))\n    env4 = Env(Dict(a=Box(-1.0, 1.0, (2,)), b=Box(-1.0, 1.0, (3,))), Box(-1.0, 1.0, (2,)))\n    env5 = Env(Dict(a=Box(-1.0, 1.0, (2,)), b=Discrete(3)), Tuple((Box(-1.0, 1.0, (2,)), Box(-1.0, 1.0, (3,)))))\n\n    print(is_continuous(env1, False, False))  # Expected output: (False, True)\n    print(is_continuous(env2, True, False))   # Expected output: (True, True)\n    print(is_continuous(env3, True, True))    # Expected output: (False, True)\n    print(is_continuous(env4, True, False))   # Expected output: (True, True)\n    print(is_continuous(env5, True, True))    # Expected output: (False, True)\n```\n\nThis solution defines the `is_continuous` function, which checks whether the action and observation spaces of a given environment are continuous based on the provided flags `tuple_action` and `tuple_obs`. The helper function `is_cont_space` handles the recursive checking for composite spaces."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Check if the updates list is non-empty\n    if not updates:\n        raise ValueError(\"The 'updates' list should not be empty.\")\n    \n    # Initialize running prediction with zeros of the same shape as an update\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate updates from each tree\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Post-process based on whether it's regression or classification\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Convert logits to probabilities using softmax\n        exp_shifted = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax_probs = exp_shifted / np.sum(exp_shifted, axis=1, keepdims=True)\n        # Get the class predictions\n        return np.argmax(softmax_probs, axis=1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example for regression\n    updates_reg = [np.array([1, 2, 3]), np.array([0.5, 1.5, 2.5])]\n    learning_rate_reg = 0.1\n    regression_reg = True\n    print(\"Regression Result:\", gradient_boosting_predict(updates_reg, learning_rate_reg, regression_reg))\n\n    # Example for classification with 3 classes\n    updates_clf = [np.array([[1, -1, 0], [0, 1, -1]]), np.array([[-1, 1, 0], [1, -1, 0]])]\n    learning_rate_clf = 0.1\n    regression_clf = False\n    print(\"Classification Result:\", gradient_boosting_predict(updates_clf, learning_rate_clf, regression_clf))\n```\n\nThis script defines the `gradient_boosting_predict` function as per the task description and provides example usage for both regression and classification scenarios."}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    \n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, in_channels, out_channels = W.shape\n    \n    # Calculate padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        p_left = p_right = ((stride * (signal_length - 1) + kernel_width - stride - signal_length) // 2)\n    else:\n        raise ValueError(\"pad must be either an integer, a 2-tuple, or 'same'\")\n        \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Adjust kernel width for dilation\n    effective_kernel_width = (W.shape[0] - 1) * dilation + 1\n    \n    # Compute output length\n    output_length = ((signal_length + p_left + p_right - effective_kernel_width) // stride) + 1\n    \n    # Initialize output volume\n    out_volume = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform cross-correlation\n    for ex in range(n_examples):\n        for oc in range(out_channels):\n            for ol in range(output_length):\n                start_idx = ol * stride\n                end_idx = start_idx + effective_kernel_width\n                \n                if dilation > 0:\n                    dilated_kernel = np.zeros((effective_kernel_width, in_channels))\n                    for i in range(W.shape[0]):\n                        dilated_kernel[i * dilation, :] = W[i, :, oc]\n                else:\n                    dilated_kernel = W[:, :, oc]\n                \n                out_volume[ex, ol, oc] = np.sum(X_padded[ex, start_idx:end_idx][::dilation+1, :] * dilated_kernel)\n    \n    return out_volume.tolist()\n\n# Example usage:\nX = np.random.rand(2, 5, 3)  # 2 examples, signal length 5, 3 input channels\nW = np.random.rand(2, 3, 2)  # Kernel width 2, 3 input channels, 2 output channels\nresult = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\nprint(result)\n```\n\nThis code defines a function `conv1D` that performs 1-D cross-correlation on a batch of 1-D signals with the specified parameters. It supports different types of padding, strides, and dilation. The function returns the result as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert input to numpy array for convenience\n    y = np.asarray(y)\n    \n    # If the array is empty, return 0.0\n    if y.size == 0:\n        return 0.0\n    \n    # Calculate the unique classes and their counts\n    _, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities\n    probabilities = counts / counts.sum()\n    \n    # Calculate Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the result rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [1, 2, 3, 2, 2, 3, 1]\n# print(gini(y))  # Should output the Gini impurity for the given list\n```\n\nThis script defines a function `gini` that computes the Gini impurity for a given list or NumPy array of integer labels. It handles empty inputs correctly and returns the Gini impurity rounded to four decimal places."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    \n    # Check if the input data are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape  # Number of samples and features\n    theta = np.zeros(n)  # Initialize weights\n    b = 0  # Initialize bias\n\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b  # Predictions\n        \n        # Compute gradients\n        dtheta = 2 / m * np.dot(X.T, (y_pred - y))\n        db = 2 / m * np.sum(y_pred - y)\n        \n        # Update rules\n        theta -= learning_rate * dtheta\n        b -= learning_rate * db\n\n    # Return weights and bias rounded to 4 decimal places\n    return [round(x, 4) for x in theta], round(b, 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data points (X and y)\n    X = np.array([[1, 2], [2, 3], [4, 5]])\n    y = np.array([3, 5, 9])\n    params = linear_regression_gd(X, y)\n    print(f\"Weights: {params[0]}, Bias: {params[1]}\")\n```\n\nThis script defines the `linear_regression_gd` function, which implements batch gradient descent to train a multiple linear regression model. It checks for consistent input sizes before proceeding with the optimization. The learned parameters are rounded to four decimal places and returned as a tuple containing the list of weights and the bias."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Check if the matrix is square\n    if len(X) != len(X[0]):\n        return False\n    \n    # Convert the list of lists to a NumPy array for easier manipulation\n    np_array = np.array(X)\n    \n    # Compare the array with its transpose using np.allclose with atol=1e-8\n    return np.allclose(np_array, np_array.T, atol=1e-8)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]))  # Expected: True\n    print(is_symmetric([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Expected: False\n    print(is_symmetric([[1, 2], [3, 4]]))                   # Expected: False\n    print(is_symmetric([[1]]))                              # Expected: True\n```\n\nThis solution first checks if the matrix is square. If it is not, it immediately returns `False`. If the matrix is square, it converts the list of lists into a NumPy array and then compares this array with its transpose using `np.allclose`, which allows for floating-point comparison with a specified absolute tolerance (`atol`). If all corresponding elements in the original matrix and its transpose are close within this tolerance, the function returns `True`; otherwise, it returns `False`."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for gradient boosting.\n\n    Parameters:\n    y (list): List of binary class labels (0 or 1).\n    f (list): List of current prediction scores (floats).\n\n    Returns:\n    list: List of negative gradients for each sample, rounded to 4 decimal places.\n          Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n\n    # Convert labels from {0, 1} to {-1, 1}\n    y_prime = np.array([2 * label - 1 for label in y])\n\n    # Convert predictions to numpy array for element-wise operations\n    f = np.array(f)\n\n    # Calculate the negative gradient\n    negative_gradient = y_prime / (1 + np.exp(y_prime * f))\n\n    # Return the result rounded to 4 decimal places\n    return [round(value, 4) for value in negative_gradient]\n\n# Example usage:\ny = [0, 1, 0, 1]\nf = [0.1, 0.4, -0.2, 0.8]\nprint(logistic_negative_gradient(y, f))\n```\n\nThis script defines the `logistic_negative_gradient` function, which computes the negative gradient of the logistic loss for gradient boosting. It first checks if the input labels are valid (i.e., only contain 0s and 1s). If they are, it proceeds to compute the negative gradient using the provided formula and returns the result rounded to four decimal places. If the labels contain invalid values, it returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array\n    x = np.array(x, dtype=float)\n    \n    if order == 0:\n        # Compute SELU\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # Compute first derivative of SELU\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Compute second derivative of SELU\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n        \n    # Round and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\nprint(selu([-1.0, 0, 1], 0))   # SELU(x)\nprint(selu([-1.0, 0, 1], 1))   # First derivative\nprint(selu([-1.0, 0, 1], 2))   # Second derivative\n```\n\nThis script defines the `selu` function, which computes the SELU activation function and its first and second derivatives based on the provided `order` parameter. The output is rounded to four decimal places and returned as a Python list."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initialize the prediction with the mean of the target values\n    y_pred = np.full_like(y, np.mean(y, keepdims=True))\n    \n    # Pre-sort x and y to avoid sorting in each iteration\n    sorted_indices = np.argsort(x)\n    x_sorted = x[sorted_indices]\n    y_sorted = y[sorted_indices]\n\n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients)\n        residuals = y_sorted - y_pred[sorted_indices]\n\n        # Initialize variables to find the best split\n        min_loss = np.inf\n        best_split_index = 0\n\n        # Iterate over all unique splits\n        for i in range(1, len(x_sorted)):\n            if x_sorted[i] == x_sorted[i-1]:\n                continue\n\n            # Calculate the split point\n            split_point = (x_sorted[i-1] + x_sorted[i]) / 2\n\n            # Calculate the mean of residuals on the left and right of the split\n            mean_left_residual = np.mean(residuals[:i])\n            mean_right_residual = np.mean(residuals[i:])\n\n            # Calculate the total loss for this split\n            loss = np.sum((residuals[:i] - mean_left_residual) ** 2) + \\\n                   np.sum((residuals[i:] - mean_right_residual) ** 2)\n\n            # Update the best split if this one has a lower loss\n            if loss < min_loss:\n                min_loss = loss\n                best_split_index = i\n                best_split_point = split_point\n                best_left_mean = mean_left_residual\n                best_right_mean = mean_right_residual\n\n        # Handle the case where there are no valid splits (all x values are identical)\n        if best_split_index == 0:\n            best_left_mean = np.mean(residuals)\n            best_right_mean = best_left_mean\n\n        # Create the predictions for this stump based on the best split\n        stump_predictions = np.where(x_sorted <= best_split_point, best_left_mean, best_right_mean)\n\n        # Update the overall predictions using the learning rate\n        y_pred[sorted_indices] += learning_rate * stump_predictions\n    \n    # Return the final predictions rounded to 4 decimal places as a list\n    return list(np.round(y_pred, 4))\n\n# Example usage:\n# x = [1, 2, 3, 4, 5]\n# y = [2.5, 3.0, 2.8, 3.2, 3.5]\n# n_estimators = 100\n# learning_rate = 0.1\n# print(gradient_boosting_1d(x, y, n_estimators, learning_rate))\n```\n\nThis script implements a gradient boosting regressor using one-dimensional decision stumps. It iteratively fits a series of stumps to the residual errors, updating predictions at each step using a specified learning rate. The final predictions are returned as a list, rounded to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    \n    # Initialize Eg with zeros if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Compute the running average of the squared gradients\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Compute the next parameter value\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    \n    # Convert to lists and round to 4 decimal places\n    w_next_rounded = [round(val, 4) for val in w_next.flatten().tolist()]\n    Eg_next_rounded = [round(val, 4) for val in Eg_next.flatten().tolist()]\n\n    return w_next_rounded, Eg_next_rounded\n\n# Example usage:\nw_example = np.array([0.1, 0.2, 0.3])\ngrad_example = np.array([0.05, 0.02, 0.01])\nEg_example = None\n\nupdated_params, updated_Eg = rmsprop_update(w_example, grad_example, Eg_example)\nprint(\"Updated Parameters:\", updated_params)\nprint(\"Updated Running Average of Squared Gradients:\", updated_Eg)\n```\n\nThis script defines the `rmsprop_update` function which performs one update step of the RMSprop optimization algorithm. It initializes the running average of squared gradients (`Eg`) if it is `None`, computes the new running average using the given formula, updates the parameters, and returns the updated parameters and running average as Python lists rounded to four decimal places."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x)\n    \n    if not derivative:\n        # Compute ELU activation\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute ELU gradient\n        activation = np.where(x >= 0, 1, x + alpha)\n    \n    # Round to 4 decimal places and convert to list\n    return [round(val, 4) for val in activation]\n\n# Test cases to verify the correctness of the solution\nif __name__ == \"__main__\":\n    test_data = [-2.0, -1.0, 0.0, 1.0, 2.0]\n    print(\"Activation:\", elu(test_data))  # Expected: ELU activations for test_data\n    print(\"Gradient:\", elu(test_data, derivative=True))  # Expected: ELU gradients for test_data\n```\n\nThis Python script defines the `elu` function according to the specifications provided. It handles both the activation computation and its gradient depending on the `derivative` flag. All results are rounded to four decimal places as required."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def analyze_element(elem):\n        if isinstance(elem, (list, tuple, np.ndarray)):\n            return True, len(elem), elem\n        else:\n            return False, 1, [elem]\n    \n    def flatten_and_check_continuous(elements):\n        flat_list = [item for sublist in elements for item in ([sublist] if isinstance(sublist, (list, tuple, np.ndarray)) else [sublist])]\n        return any(isinstance(x, float) and not x.is_integer() for x in flat_list), flat_list\n    \n    def get_unique_values(flattened_list, dim):\n        unique_values = []\n        for i in range(dim):\n            unique_values.append(sorted(set(item[i] for item in flattened_list)))\n        return unique_values\n    \n    # Analyze actions\n    tuple_actions, action_dim, flat_actions = zip(*[analyze_element(action) for action in actions])\n    multidim_actions = any(d > 1 for d in action_dim)\n    tuple_actions = any(tuple_actions)\n    continuous_actions, flat_action_list = flatten_and_check_continuous(flat_actions)\n    n_actions_per_dim = [len(get_unique_values(flat_action_list, d)) for d in action_dim]\n    action_ids = get_unique_values(flat_action_list, max(action_dim))\n    \n    # Analyze observations\n    tuple_observations, obs_dim, flat_observations = zip(*[analyze_element(obs) for obs in observations])\n    multidim_observations = any(d > 1 for d in obs_dim)\n    tuple_observations = any(tuple_observations)\n    continuous_observations, flat_observation_list = flatten_and_check_continuous(flat_observations)\n    n_obs_per_dim = [len(get_unique_values(flat_observation_list, d)) for d in obs_dim]\n    obs_ids = get_unique_values(flat_observation_list, max(obs_dim))\n    \n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': max(action_dim),\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': max(obs_dim),\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis function `env_stats` analyzes both `actions` and `observations` lists to determine their respective properties and returns a comprehensive dictionary with the requested statistics."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> List[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def train_regression_tree(X, y, depth=0):\n        if len(np.unique(y)) == 1 or depth == max_depth:\n            return np.mean(y)\n        \n        best_feature, best_threshold, best_mse = None, None, np.inf\n        \n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds[:-1]:\n                left_mask = X[:, feature] <= threshold\n                left_y, right_y = y[left_mask], y[~left_mask]\n                \n                if len(left_y) > 0 and len(right_y) > 0:\n                    mse_left = mean_squared_error(left_y, np.mean(left_y))\n                    mse_right = mean_squared_error(right_y, np.mean(right_y))\n                    mse = len(left_y) * mse_left + len(right_y) * mse_right\n                    mse /= len(y)\n                    \n                    if mse < best_mse:\n                        best_mse = mse\n                        best_feature = feature\n                        best_threshold = threshold\n        \n        if best_feature is not None:\n            left_mask = X[:, best_feature] <= best_threshold\n            left_y, right_y = y[left_mask], y[~left_mask]\n            \n            left_tree = train_regression_tree(X[left_mask], left_y, depth+1)\n            right_tree = train_regression_tree(X[~left_mask], right_y, depth+1)\n            \n            return lambda x: np.where(x[best_feature] <= best_threshold, left_tree(x), right_tree(x))\n        \n        return np.mean(y)\n    \n    # Initial prediction is the mean of the training targets\n    y_pred = np.full(X_test.shape[0], np.mean(y_train))\n    \n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = train_regression_tree(X_train, residuals)\n        y_pred += learning_rate * np.array([tree(sample.reshape(1, -1)) for sample in X_train])\n    \n    # Final predictions on the test set\n    final_predictions = []\n    for sample in X_test:\n        tree = train_regression_tree(X_train, y_train - y_pred)\n        pred = y_pred + learning_rate * tree(sample.reshape(1, -1))\n        final_predictions.append(round(float(pred), 4))\n    \n    return final_predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 5], [4, 7]])\n# y_train = np.array([2, 3, 5, 7])\n# X_test = np.array([[2, 3], [3, 5]])\n# print(gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=2))\n```\n\nThis script defines a simplified gradient boosting decision tree (GBDT) regressor. It starts by predicting the mean of the training targets, then iteratively fits regression trees to the residuals and updates the prediction accordingly. Each tree's prediction is scaled by the learning rate. Finally, it predicts the test samples using the trained model and rounds the predictions to four decimal places."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the multivariate Gaussian probability density function for each sample in X.\n\n    Parameters:\n    X (np.array): An array of shape (n_samples, n_features) representing the data points.\n    mean (np.array): A 1D array of length n_features representing the mean vector of the distribution.\n    cov (np.array): A 2D array of shape (n_features, n_features) representing the covariance matrix.\n\n    Returns:\n    List[float]: A list where each element is the PDF value for the corresponding sample in X,\n                 rounded to four decimal places.\n    \"\"\"\n\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n\n    n_samples, n_features = X.shape\n    # Ensure mean is a column vector\n    mean = mean.reshape(-1, 1)\n    \n    # Compute the inverse of the covariance matrix\n    try:\n        inv_cov = np.linalg.inv(cov)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"The covariance matrix must be invertible.\")\n\n    # Compute the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n\n    # Initialize the result list\n    pdf_values = []\n\n    for x in X:\n        # Reshape x to be a column vector\n        x = x.reshape(n_features, 1)\n        # Compute (x - mean).T @ inv_cov @ (x - mean)\n        diff = x - mean\n        exponent_factor = -0.5 * diff.T @ inv_cov @ diff\n        # Calculate the PDF\n        coefficient = 1 / math.sqrt((2 * math.pi) ** n_features * abs(det_cov))\n        pdf = coefficient * math.exp(exponent_factor[0][0])\n        # Append the rounded result to the list\n        pdf_values.append(round(pdf, 4))\n\n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# mean = np.array([1.5, 2.5])\n# cov = np.array([[1, 0.5], [0.5, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    \n    # Optionally add an intercept column if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n        \n    M = X.shape[1]\n    \n    # Prepare the prior precision matrix (V^-1)\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = V * np.eye(M)\n    elif V.ndim == 1:\n        V_inv = np.diag(V)\n    else:\n        V_inv = np.array(V, copy=True).T  # Ensure it's a proper matrix\n    \n    # Compute the posterior precision matrix\n    XTX = X.T @ X\n    posterior_precision = np.linalg.inv(np.linalg.inv(V_inv) + XTX)\n    \n    # Compute the posterior mean\n    XTy = X.T @ y\n    posterior_mean = posterior_precision @ np.linalg.inv(V_inv) @ np.asarray(mu) + posterior_precision @ XTy\n    \n    # Predictive mean for new data points\n    predictions = X_new @ posterior_mean\n    \n    # Round to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# X_new = np.array([[1, 1], [2, 2]])\n# result = bayesian_linear_regression_pred(X, y, X_new, mu=0.0, sigma=1.0, V=None, fit_intercept=False)\n# print(result)  # Example output: [2.9999, 4.9999]\n```\n\nThis code defines the function `bayesian_linear_regression_pred` which performs Bayesian linear regression as specified. It handles the addition of an intercept term, prepares the prior precision matrix based on the given `V`, computes the posterior mean and precision, and finally predicts the means for new data points, rounding each prediction to 4 decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\n    \n    Parameters:\n    actual (list of float): The actual values.\n    predicted (list of float): The predicted values.\n    \n    Returns:\n    float: The RMSLE value rounded to four decimal places.\n           If validation fails, returns -1.\n    \"\"\"\n    \n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all numbers are non-negative\n    for val in actual + predicted:\n        if val < 0:\n            return -1\n    \n    # Compute RMSLE\n    rmsle = np.sqrt(np.mean((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    \n    # Return RMSLE rounded to 4 decimal places\n    return round(rmsle, 4)\n\n# Example usage and verification\ndef check_solution():\n    actual_values = [3.0, 5.0, 8.0]\n    predicted_values = [2.0, 6.0, 7.0]\n    \n    # Expected RMSLE calculation\n    expected_result = round(np.sqrt(np.mean((np.log1p(predicted_values) - np.log1p(actual_values)) ** 2)), 4)\n    \n    calculated_result = root_mean_squared_log_error(actual_values, predicted_values)\n    \n    print(f\"Calculated Result: {calculated_result}, Expected Result: {expected_result}\")\n    assert calculated_result == expected_result, \"The calculated result does not match the expected result.\"\n    print(\"Solution is correct!\")\n\ncheck_solution()\n```\n\nThis code defines a function `root_mean_squared_log_error` that checks if both input lists have the same length and contain only non-negative numbers. If the checks pass, it proceeds to compute the RMSLE and returns the result rounded to four decimal places. It also includes an example call to verify the correctness of the function using an assertion."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n\n    if not symmetric:\n        window_len += 1\n\n    n = np.arange(window_len)\n    window = 0.5 * (1 - np.cos(2 * np.pi * n / (window_len - 1)))\n\n    if not symmetric:\n        window = window[:-1]\n\n    return [round(val, 4) for val in window]\n\n# Example usage and verification function\ndef check_hann():\n    print(hann(5, symmetric=True))  # Should print a symmetric Hann window of length 5\n    print(hann(5, symmetric=False)) # Should print a periodic Hann window of length 5\n\ncheck_hann()\n```\n\nThis script defines the `hann` function which generates a Hann window of the specified length and symmetry. It handles the special cases and rounds the resulting window coefficients to four decimal places. The `check_hann` function demonstrates how to use the `hann` function and prints examples of both symmetric and periodic Hann windows."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # It's a 2D convolutional kernel with shape (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        # For all other tensors: fan_in, fan_out = shape[0], shape[1]\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    \n    return (fan_in, fan_out)\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        ([3, 5]),  # Dense layer\n        ([3, 5, 7]),  # Higher-dimensional tensor\n        ([64, 3, 3, 3]),  # Convolutional kernel\n        ([128, 64, 7, 7]),  # Larger convolutional kernel\n    ]\n\n    for case in test_cases:\n        print(f\"Shape: {case} => Fan-in, Fan-out: {glorot_fan(case)}\")\n```\n\nThis code defines the `glorot_fan` function which takes a shape and computes the `fan_in` and `fan_out` according to the specified rules. It handles both the 4-dimensional convolutional kernel case and other tensor shapes. The function returns these values as floats in a tuple. The example usage at the end demonstrates the function with some test cases."}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]], \n                                y: list[float], \n                                n_estimators: int = 10, \n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special case handling\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initial prediction\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    # Training loop\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Fit OLS linear model (with intercept) on residuals\n        ones_column = np.ones((X.shape[0], 1))\n        X_with_intercept = np.hstack((ones_column, X))\n        weights = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Predict using the weak learner\n        weak_learner_prediction = X_with_intercept @ weights\n        \n        # Update prediction\n        y_pred += learning_rate * weak_learner_prediction\n    \n    # Return predictions rounded to 4 decimal places as a list\n    return [round(val, 4) for val in y_pred]\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4]]\n# y = [2.5, 3.5, 4.5]\n# predictions = gradient_boosting_regressor(X, y, n_estimators=5, learning_rate=0.01)\n# print(predictions)\n```\n\nThis script implements the described Gradient Boosting Regressor using ordinary least squares linear regression as the base learner and squared error as the loss function. It handles special cases where `n_estimators` is less than or equal to zero or `learning_rate` is zero by returning a vector filled with the mean of the target values."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Convert input to numpy array to handle uniform operations\n    x = np.array(x, dtype=float)\n    \n    def _sigmoid(t):\n        return 1 / (1 + np.exp(-t))\n    \n    sigma_x = _sigmoid(x)\n\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    else:  # order == 2\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n\n    # Round results to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Return based on input type\n    if np.isscalar(x):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\n\n# Check function with provided data points\ndef check_function():\n    test_cases = [\n        (0, 0),  # sigmoid(0, 0) should be 0.5\n        ([0, 1, -1], 0),  # sigmoid([0, 1, -1], 0) should be [0.5, ~0.7311, ~0.2689]\n        (np.array([0, 1, -1]), 1),  # sigmoid(np.array([0, 1, -1]), 1) should be [0.25, ~0.197, ~0.197]\n        (2, 3)  # Invalid order, should return -1\n    ]\n    \n    all_passed = True\n    for idx, (input_val, order) in enumerate(test_cases):\n        result = sigmoid(input_val, order)\n        expected = None\n        if order == 0:\n            expected = 0.5 if isinstance(input_val, (int, float)) and input_val == 0 else None\n        elif order == 1 and isinstance(input_val, (list, np.ndarray)):\n            expected = [0.25, 0.197, 0.197]  # Approximate values rounded to 3 decimals for demonstration\n        elif order == 3:\n            expected = -1\n        \n        if result != expected:\n            print(f\"Test Case {idx + 1} Failed: Input {input_val}, Order {order}, Expected {expected}, Got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_function()\n```\n\nThis Python script defines a `sigmoid` function that computes the logistic sigmoid function and its first and second derivatives as specified, and includes a `check_function` to validate its behavior against several test cases."}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Ensure input is a 1-D array of non-negative integers\n    if y.ndim != 1:\n        raise ValueError(\"Input y must be a 1-D array.\")\n    if np.any(y < 0):\n        raise ValueError(\"All elements in y must be non-negative integers.\")\n    \n    # Determine num_classes\n    max_y = np.max(y)\n    if num_classes is None:\n        num_classes = max_y + 1\n    elif num_classes < max_y + 1:\n        return -1\n    \n    # Create one-hot encoding\n    one_hot = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot.tolist()\n\n# Test cases to verify the correctness of the solution\nif __name__ == \"__main__\":\n    test_cases = [\n        (np.array([0, 1, 2, 3]), None, [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]),\n        (np.array([0, 1, 2, 3]), 5, [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]]),\n        (np.array([0, 1, 2, 3]), 4, [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]),\n        (np.array([0, 1, 2, 3]), 3, -1),\n        ([0, 1, 2, 3], 4, [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]),\n    ]\n\n    all_passed = True\n    for idx, (input_y, input_num_classes, expected) in enumerate(test_cases, 1):\n        result = to_categorical(input_y, input_num_classes)\n        if result != expected:\n            print(f\"Test case {idx} failed: expected {expected}, got {result}\")\n            all_passed = False\n\n    if all_passed:\n        print(\"All test cases passed!\")\n```\n\nThis code defines the `to_categorical` function that performs one-hot encoding on a given input vector `y`. It also includes test cases to ensure the function behaves as expected under various scenarios, including automatic determination of the number of classes, handling invalid configurations, and returning the correct one-hot encoding."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def prune_infrequent_subsets(candidates, trans_index):\n        \"\"\"Remove candidates that have an infrequent subset.\"\"\"\n        result = []\n        for candidate in candidates:\n            has_infrequent_subset = False\n            for subset in itertools.combinations(candidate, len(candidate) - 1):\n                if subset not in trans_index or len(trans_index[subset]) < min_support_count:\n                    has_infrequent_subset = True\n                    break\n            if not has_infrequent_subset:\n                result.append(candidate)\n        return result\n\n    def generate_frequent_itemsets(frequent_itemsets, k):\n        \"\"\"Generate new candidate itemsets of size k.\"\"\"\n        candidates = set()\n        for i, itemset1 in enumerate(frequent_itemsets):\n            for j in range(i + 1, len(frequent_itemsets)):\n                itemset2 = frequent_itemsets[j]\n                candidate = tuple(sorted(set(itemset1).union(itemset2)))\n                if len(candidate) == k:\n                    candidates.add(candidate)\n        return candidates\n\n    n_transactions = len(transactions)\n    min_support_count = int(n_transactions * min_sup)\n\n    # Step 1: Find frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item in item_counts:\n                item_counts[item] += 1\n            else:\n                item_counts[item] = 1\n\n    frequent_itemsets = [frozenset((item,)) for item, count in item_counts.items() if count >= min_support_count]\n\n    # Create map from itemset to transactions that contain it\n    trans_index = {frozenset((item,)): [i for i, trans in enumerate(transactions) if item in trans] for item in item_counts}\n\n    # Prune infrequent subsets\n    frequent_itemsets = [tuple(fs) for fs in frequent_itemsets if not prune_infrequent_subsets([fs], trans_index)]\n\n    # Generate further frequent itemsets using breadth-first search\n    k = 2\n    while frequent_itemsets:\n        # Generate new candidates of size k\n        candidates = generate_frequent_itemsets(frequent_itemsets, k)\n        \n        # Count frequency of each candidate\n        candidate_counts = {candidate: 0 for candidate in candidates}\n        for transaction in transactions:\n            transaction_set = frozenset(transaction)\n            for candidate in candidates:\n                if transaction_set.issuperset(candidate):\n                    candidate_counts[candidate] += 1\n\n        # Filter out infrequent candidates and update frequent itemsets\n        frequent_itemsets = [candidate for candidate, count in candidate_counts.items() if count >= min_support_count]\n        frequent_itemsets = prune_infrequent_subsets(frequent_itemsets, trans_index)\n\n        # Add current frequent itemsets to result and proceed to next level\n        results.extend(frequent_itemsets)\n        k += 1\n\n    # Sort results by length and lexicographically within each length\n    results.sort(key=lambda x: (len(x), x))\n    return results\n\n# Example usage:\ntransactions = [\n    [1, 2, 5],\n    [2, 4],\n    [2, 3],\n    [1, 2, 4],\n    [1, 3],\n    [2, 3],\n    [1, 3],\n    [1, 2, 3, 5],\n    [1, 2, 3]\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis solution implements the Apriori algorithm to find all frequent itemsets in the given transactions, following the specified steps and constraints. The function first finds frequent 1-itemsets, then uses breadth-first search to generate larger frequent itemsets, pruning infrequent subsets along the way. The final result is a list of tuples representing the frequent itemsets, sorted by length and lexicographically within each length."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a numpy array for efficient computation\n    prediction_array = np.array(predictions)\n    \n    # Calculate the mean along the first axis (ensemble of predictors) to get averaged probabilities\n    avg_probs = np.mean(prediction_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_avg_probs = np.round(avg_probs, decimals=4).tolist()\n    \n    # Determine the predicted class as the one with the highest probability per sample\n    predicted_classes = [np.argmax(sample) for sample in rounded_avg_probs]\n    \n    return rounded_avg_probs, predicted_classes\n\n# Check function to validate the solution using provided data points\ndef check_aggregate_predictions():\n    test_predictions = [\n        [[0.1, 0.7, 0.2], [0.05, 0.9, 0.05]],\n        [[0.15, 0.65, 0.2], [0.1, 0.85, 0.05]],\n        [[0.05, 0.8, 0.15], [0.07, 0.88, 0.05]]\n    ]\n    expected_output = ([[0.0967, 0.7167, 0.1867], [0.0767, 0.8867, 0.0367]], [1, 1])\n    \n    output = aggregate_predictions(test_predictions)\n    assert output == expected_output, f\"Expected {expected_output}, but got {output}\"\n    print(\"Solution is correct!\")\n\ncheck_aggregate_predictions()\n```\n\nThis script defines the required function and validates its correctness through a simple test case."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]], \n               Y: list[list[int | float]] | None = None, \n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    \n    # If Y is None, compute the kernel matrix for X with itself\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Check for matching feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    C = X.shape[1]\n    \n    # Validate and determine sigma values\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, (list, np.ndarray)) and len(sigma) == C:\n        sigma = np.array(sigma)\n        if np.any(sigma <= 0):\n            return -1\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    def rbf(x, y, sig):\n        return np.exp(-0.5 * np.sum(((x - y) / sig) ** 2))\n    \n    N = X.shape[0]\n    M = Y.shape[0]\n    K = np.zeros((N, M))\n    \n    for i in range(N):\n        for j in range(M):\n            K[i, j] = rbf(X[i], Y[j], sigma)\n    \n    # Round the kernel matrix to 4 decimal places and convert to list\n    K_rounded = np.round(K, 4).tolist()\n    \n    return K_rounded\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function according to the specified requirements. It validates the inputs, computes the RBF kernel matrix, and returns the result rounded to four decimal places. If any of the input validations fail, it returns `-1`."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Compute the Shannon entropy of the given labels.\"\"\"\n    unique_labels, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return -np.sum(probabilities * np.log2(probabilities + np.finfo(float).eps))\n\ndef decision_stump(X, y):\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    parent_entropy = entropy(y)\n\n    if parent_entropy == 0 or len(np.unique(y)) == 1:\n        majority_label = np.bincount(y).argmax()\n        return (-1, None, majority_label, majority_label)\n\n    best_feature_index, best_threshold, max_gain = -1, None, -1\n    left_majority_label, right_majority_label = None, None\n\n    for j in range(n_features):\n        thresholds = [(a + b) / 2 for a, b in zip(np.unique(X[:, j])[:-1], np.unique(X[:, j])[1:])]\n\n        for t in thresholds:\n            left_indices = X[:, j] <= t\n            right_indices = ~left_indices\n\n            p_left = np.mean(left_indices)\n            p_right = np.mean(right_indices)\n\n            if p_left == 0 or p_right == 0:\n                continue\n\n            left_labels, right_labels = y[left_indices], y[right_indices]\n            h_left, h_right = entropy(left_labels), entropy(right_labels)\n\n            gain = parent_entropy - p_left * h_left - p_right * h_right\n\n            if gain > max_gain:\n                max_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = np.bincount(left_labels).argmax()\n                right_majority_label = np.bincount(right_labels).argmax()\n\n    if best_feature_index == -1:\n        majority_label = np.bincount(y).argmax()\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\n# X = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\n# y = [0, 1, 1, 0]\n# print(decision_stump(X, y))\n```\n\nThis script implements the `decision_stump` function as described in the task. It calculates the entropy of the parent node, iterates over each feature and potential threshold, computes the information gain for each possible split, and selects the best split according to the specified criteria. If no split improves the information gain, it returns the majority label for both children."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert input to numpy array if it is a list\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Separate the samples based on the condition\n    first_subset = X[(X[:, feature_i] >= threshold).astype(bool)]\n    second_subset = X[(X[:, feature_i] < threshold).astype(bool)]\n\n    # Convert both subsets to regular Python lists\n    first_subset = first_subset.tolist()\n    second_subset = second_subset.tolist()\n\n    # Return the result as a list of two lists\n    return [first_subset, second_subset]\n\n# Example usage:\n\n# Numeric split example\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nprint(divide_on_feature(X_numeric, 0, 3))  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\n# Categorical split example\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nprint(divide_on_feature(X_categorical, 1, \"A\"))  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```\n\nThis solution defines the `divide_on_feature` function which takes in a dataset `X`, a feature index `feature_i`, and a threshold, and returns a list containing two lists. These two lists are the subsets of `X` split according to the specified feature and threshold, maintaining the original order of the samples."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are consistent\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if any(not isinstance(i, list) for i in [actions, rewards, dones]):\n        return -1\n    if len(Q) != len(Q_next) or len(Q) != len(actions) != len(rewards) != len(dones):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the output matrix as a copy of Q\n    y = Q.copy()\n\n    # Iterate over each sample in the batch\n    for i in range(len(y)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        # Update only the action entry corresponding to actions[i]\n        y[i][actions[i]] = target\n    \n    # Round the matrix to 4 decimal places and convert it to a list of lists\n    y_rounded = np.round(y, 4).tolist()\n    \n    return y_rounded\n\n# Example usage:\n# Q = np.array([[0.1, 0.2, 0.7], [0.8, 0.1, 0.1]])\n# Q_next = np.array([[0.3, 0.5, 0.2], [0.1, 0.7, 0.2]])\n# actions = [2, 0]\n# rewards = [1.0, -1.0]\n# dones = [True, False]\n# gamma = 0.9\n# print(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the function `update_q_values` according to the specifications provided. It checks for input consistency, computes the target values correctly based on the DQN update rule, and rounds the final result to four decimal places before returning it as a nested list."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Ensure labels is a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check if there are negative labels\n    if (labels < 0).any():\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    \n    # Check if any label exceeds num_classes\n    if max(labels) >= num_classes:\n        return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    \n    # Convert numpy array to list of lists\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# print(to_categorical([0, 1, 2], 3))\n# print(to_categorical([0, 1, 1, 2], None))\n# print(to_categorical([-1, 0, 1], 3))  # Should return -1 due to negative label\n# print(to_categorical([0, 1, 2], 2))   # Should return -1 due to insufficient num_classes\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of integer labels to one-hot encoded format while adhering to the constraints and requirements outlined in the problem description."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n\n    if n_estimators <= 0:\n        return [round(np.mean(y), 4)] * len(y)\n\n    y_hat = np.mean(y)  # Initial prediction\n    residuals = y - y_hat\n\n    unique_x = np.unique(x)\n    for _ in range(n_estimators):\n        min_sse = np.inf\n        best_split = None\n        best_left_mean = None\n        best_right_mean = None\n\n        for i, t in enumerate(unique_x[:-1]):\n            mask_left = x <= t\n            mask_right = x > t\n\n            if np.sum(mask_left) == 0 or np.sum(mask_right) == 0:\n                continue\n\n            left_residuals = residuals[mask_left]\n            right_residuals = residuals[mask_right]\n\n            left_sse = np.sum((left_residuals - np.mean(left_residuals)) ** 2)\n            right_sse = np.sum((right_residuals - np.mean(right_residuals)) ** 2)\n            sse = left_sse + right_sse\n\n            if sse < min_sse:\n                min_sse = sse\n                best_split = t\n                best_left_mean = np.mean(left_residuals)\n                best_right_mean = np.mean(right_residuals)\n\n        if best_split is None:\n            stump_prediction = np.mean(residuals)\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n\n        y_hat += learning_rate * stump_prediction\n        residuals = y - y_hat\n\n    return np.round(y_hat, 4).tolist()\n\n# Example usage:\n# x_train = [1.0, 2.5, 3.6, 4.0, 5.2, 6.7]\n# y_train = [2.0, 3.5, 4.0, 5.5, 6.0, 7.5]\n# predictions = gradient_boosting_regressor(x_train, y_train, n_estimators=10, learning_rate=0.1)\n# print(predictions)\n```\n\nThis script defines a function `gradient_boosting_regressor` which performs gradient boosting using decision stumps for 1D regression. It initializes predictions with the mean of the target values, iteratively refines them by fitting stumps based on residuals, and returns the final predictions rounded to four decimal places."}
{"task_id": 471, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    \n    num_actions = len(q_table[0])\n    if next_state is not None:\n        # Find the best action for the next state\n        max_action = np.argmax(q_table[next_state])\n        # Compute the expected value for the next state\n        expected_value = (1 - epsilon) * q_table[next_state][max_action]\n        for a in range(num_actions):\n            if a != max_action:\n                expected_value += epsilon / num_actions * q_table[next_state][a]\n    else:\n        # Terminal state, set expected future value to 0\n        expected_value = 0\n    \n    # Compute the TD target\n    target = reward + gamma * expected_value\n    \n    # Update the Q-value for the current state-action pair\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to 4 decimal places\n    for s in range(len(q_table)):\n        for a in range(num_actions):\n            q_table[s][a] = round(q_table[s][a], 4)\n    \n    return q_table\n\n# Example usage:\n# q_table = [[0.0, 0.0], [0.0, 0.0]]\n# new_q_table = expected_sarsa_update(q_table, 0, 0, 1.0, 1, 0.1, 0.5, 0.9)\n# print(new_q_table)\n```\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    num_classes = m // 2  # Since we have two clusters per class\n\n    # Generate training data\n    X_train = []\n    Y_train = []\n    for i in range(m):\n        class_index = i // 2\n        x_train = np.random.uniform((class_index + 0.1) * 10, (class_index + 0.9) * 10, size=n_train)\n        y_train = np.random.uniform(((i % 2) * interval + 0.1) * 10, ((i % 2) * interval + 0.9) * 10, size=n_train)\n        label = (i - 0.5) * 2\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(np.full(n_train, label))\n    \n    X_train = np.vstack(X_train).round(4)\n    Y_train = np.concatenate(Y_train)\n\n    # Generate validation data\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        class_index = i // 2\n        x_val = np.random.uniform((class_index + 0.1) * 10, (class_index + 0.9) * 10, size=n_val)\n        y_val = np.random.uniform(((i % 2) * interval + 0.1) * 10, ((i % 2) * interval + 0.9) * 10, size=n_val)\n        label = (i - 0.5) * 2\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(np.full(n_val, label))\n    \n    X_val = np.vstack(X_val).round(4)\n    Y_val = np.concatenate(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\n# X_train, X_val, Y_train, Y_val = generate_data(m=2, n_train=100, n_val=20, interval=1.0, seed=42)\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    \n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Compute the biased estimates of the first and second moments\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    # Bias-correct the first and second moment estimates\n    m_hat_t = m_t / (1 - b1**t)\n    v_hat_t = v_t / (1 - b2**t)\n\n    # Update the parameters\n    w_new = w - learning_rate * m_hat_t / (np.sqrt(v_hat_t) + eps)\n\n    return w_new, m_t, v_t\n\n# Example usage:\nif __name__ == \"__main__\":\n    w = 1.0\n    grad = 0.1\n    m_prev = 0.0\n    v_prev = 0.0\n    t = 1\n    w_new, m_new, v_new = adam_update(w, grad, m_prev, v_prev, t)\n    print(\"Updated w:\", round(w_new, 9))  # Expected output: \u2248 0.999000001\n```\n\nThis code defines the `adam_update` function which computes the next parameter values using the Adam optimization algorithm. It handles both scalar and NumPy array inputs, ensuring that the shapes of all outputs match the shapes of their corresponding inputs. The example usage demonstrates how to perform one Adam update step."}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    n_arms = len(rewards[0])\n    estimates = [ev_prior] * n_arms\n    counts = [0] * n_arms\n\n    for timestep, timestep_rewards in enumerate(rewards):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(n_arms)\n        else:\n            chosen_arm = np.argmax(estimates)\n\n        reward = timestep_rewards[chosen_arm]\n        counts[chosen_arm] += 1\n        w = 1 / counts[chosen_arm]\n        estimates[chosen_arm] += w * (reward - estimates[chosen_arm])\n\n    return [round(est, 4) for est in estimates]\n\n# Example usage:\n# rewards_matrix = [[1.0, 2.0, 3.0], [1.5, 2.5, 3.5], [1.2, 2.2, 3.2]]\n# print(epsilon_greedy_bandit(rewards_matrix, epsilon=0.1, seed=42))\n```\n\nThis script defines the `epsilon_greedy_bandit` function which simulates one run of the \u03b5-greedy strategy on a stationary multi-armed bandit problem. It initializes the estimated values for each arm and iterates through the rewards matrix, updating the estimates based on the chosen action and received reward. The final estimates are returned rounded to four decimal places. If a `seed` is provided, the random number generator is seeded for reproducibility."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    \n    if len(data) == 0:\n        return []\n\n    num_points = len(data)\n    cluster_labels = [-2] * num_points  # -2: unvisited\n    current_cluster_id = 0\n    cluster_count = 0\n\n    def region_query(point_index):\n        \"\"\"Find all points within eps of point_index.\"\"\"\n        neighbors = []\n        point = data[point_index]\n        for i, neighbor in enumerate(data):\n            if np.linalg.norm(point - neighbor) < eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(neighborhood, point_index, cluster_id):\n        \"\"\"Assign all points in neighborhood to cluster and explore them.\"\"\"\n        cluster_labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighborhood):\n            P = neighborhood[i]\n            if cluster_labels[P] == -2:  # Unvisited\n                cluster_labels[P] = -1  # Mark as visited but noise initially\n                P_neighbors = region_query(P)\n                if len(P_neighbors) >= min_samples:\n                    neighborhood += P_neighbors\n            if cluster_labels[P] == -1:  # Noise point\n                cluster_labels[P] = cluster_id\n            i += 1\n\n    for point_index in range(num_points):\n        if cluster_labels[point_index] == -2:  # If point is unvisited\n            neighborhood = region_query(point_index)\n            if len(neighborhood) < min_samples:\n                cluster_labels[point_index] = -1  # Mark as noise\n            else:\n                current_cluster_id += 1\n                cluster_count += 1\n                expand_cluster(neighborhood, point_index, current_cluster_id)\n\n    return cluster_labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Generate some example data\n    np.random.seed(42)\n    data = np.vstack((np.random.normal(0, 1, (100, 2)),\n                      np.random.normal(5, 1, (100, 2)),\n                      np.random.normal(10, 1, (100, 2))))\n    \n    # Run DBSCAN\n    eps = 1.0\n    min_samples = 5\n    labels = dbscan(data, eps, min_samples)\n    print(labels)\n```\n\nThis script defines a function `dbscan` that performs DBSCAN clustering on a given dataset. It includes helper functions for finding neighbors within a specified radius (`region_query`) and expanding clusters (`expand_cluster`). The script also includes an example usage section demonstrating how to run the DBSCAN function on synthetic data."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype='int')\n    if not num_classes:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('`y` contains out-of-bound labels.')\n    \n    # Initialize the output array with zeros\n    categorical = np.zeros((y.shape[0], num_classes), dtype=int)\n    # Use numpy's advanced indexing to set the appropriate elements to 1\n    categorical[np.arange(len(y)), y] = 1\n    \n    return categorical\n\n# Check function with some test data points\ndef check():\n    test_cases = [\n        (np.array([0, 1, 2, 3]), None, np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])),\n        (np.array([0, 1, 2, 3]), 4, np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])),\n        (np.array([0, 1, 2, 0]), 3, np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]])),\n    ]\n\n    all_passed = True\n    for idx, (input_y, n_classes, expected) in enumerate(test_cases):\n        try:\n            output = to_categorical(input_y, n_classes)\n            if not np.array_equal(output, expected):\n                print(f\"Test case {idx+1} failed. Expected:\\n{expected}\\nBut got:\\n{output}\")\n                all_passed = False\n        except Exception as e:\n            print(f\"Test case {idx+1} raised an exception: {e}\")\n            all_passed = False\n\n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed.\")\n\ncheck()\n```\n\nThis solution defines the `to_categorical` function as required, handling both scenarios when `num_classes` is specified and when it is not. It also includes a `check` function that runs several test cases to ensure the implementation works as expected."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    if len(X_train) == 0:\n        return []\n\n    def mean(values):\n        return sum(values) / len(values)\n\n    def variance_reduction(y_left, y_right, y_total):\n        sserr_total = sum((yi - mean(y_total)) ** 2 for yi in y_total)\n        sserr_left = sum((yi - mean(y_left)) ** 2 for yi in y_left)\n        sserr_right = sum((yi - mean(y_right)) ** 2 for yi in y_right)\n        return sserr_total - (sserr_left + sserr_right)\n\n    def best_split(X, y):\n        best_index, best_value, best_score = None, None, -1\n        for i in range(len(X) - 1):\n            if X[i] == X[i + 1]:\n                continue\n            value = (X[i] + X[i + 1]) / 2\n            left_indices = [idx for idx in range(len(X)) if X[idx] <= value]\n            right_indices = [idx for idx in range(len(X)) if X[idx] > value]\n            y_left = [y[idx] for idx in left_indices]\n            y_right = [y[idx] for idx in right_indices]\n            score = variance_reduction(y_left, y_right, y)\n            if score > best_score:\n                best_index, best_value, best_score = i, value, score\n        return best_index, best_value\n\n    def build_tree(X, y, depth=0):\n        node = {'depth': depth}\n        if len(X) < 2 or depth >= max_depth:\n            node['value'] = mean(y)\n            return node\n\n        index, value = best_split(X, y)\n        if index is None:\n            node['value'] = mean(y)\n            return node\n\n        left_indices = [i for i in range(len(X)) if X[i] <= value]\n        right_indices = [i for i in range(len(X)) if X[i] > value]\n\n        X_left, y_left = [X[i] for i in left_indices], [y[i] for i in left_indices]\n        X_right, y_right = [X[i] for i in right_indices], [y[i] for i in right_indices]\n\n        node['left'] = build_tree(X_left, y_left, depth + 1)\n        node['right'] = build_tree(X_right, y_right, depth + 1)\n        return node\n\n    def predict(node, x):\n        if 'value' in node:\n            return node['value']\n        if x <= node['left']['value']:\n            return predict(node['left'], x)\n        else:\n            return predict(node['right'], x)\n\n    tree = build_tree(X_train, y_train)\n    predictions = [predict(tree, x) for x in X_test]\n    return predictions\n\n# Example usage:\n# X_train = [1, 2, 3, 4, 5]\n# y_train = [2, 3, 4, 5, 6]\n# X_test = [1.5, 2.5, 3.5, 4.5]\n# print(regression_tree_predict(X_train, y_train, X_test, max_depth=2))\n```\n\nThis script defines a function `regression_tree_predict` that builds a binary regression tree using the CART algorithm and uses it to make predictions on a test dataset. The tree is constructed recursively, stopping at the specified maximum depth or when a node contains fewer than two samples. Each leaf node is labeled with the mean of the target values in that node. The function returns predictions for the test data as a list of floats."}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to numpy array if it isn't already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Check if the input is indeed one-dimensional\n    if x.ndim != 1:\n        raise ValueError(\"Input must be a one-dimensional vector.\")\n    \n    # Handle the case where the input vector is empty\n    if x.size == 0:\n        return []\n    \n    # Create a diagonal matrix from the input vector\n    diag_matrix = np.diag(x)\n    \n    # Convert the matrix to a list of lists and return\n    return diag_matrix.tolist()\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [\n        ([], []),\n        ([4], [[4]]),\n        ([1, 2, 3], [[1, 0, 0], [0, 2, 0], [0, 0, 3]]),\n        ((5, 6), [[5, 0], [0, 6]]),\n        (np.array([7]), [[7]])\n    ]\n    \n    all_passed = True\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = make_diagonal(input_data)\n        if result != expected:\n            print(f\"Test Case {i+1}: Failed (Input: {input_data} | Expected: {expected}, Got: {result})\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()\n```\n\nThis Python script defines the `make_diagonal` function as described in the task. It handles inputs that are Python lists, tuples, or one-dimensional NumPy arrays and returns the corresponding diagonal matrix as a list of lists. The `check` function is provided to verify the correctness of the solution against a set of predefined test cases."}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict, deque\n\nclass TreeNode:\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = []\n\n    def has_child(self, name):\n        return any(child.name == name for child in self.children)\n\n    def get_child(self, name):\n        for child in self.children:\n            if child.name == name:\n                return child\n        return None\n\ndef update_fptree(fp_tree, transaction, header_table):\n    if len(transaction) != 0:\n        first_item = transaction[0]\n        if first_item in fp_tree.children:\n            fp_tree.children[first_item].count += 1\n        else:\n            new_node = TreeNode(first_item, 1, fp_tree)\n            fp_tree.children.append(new_node)\n            if header_table[first_item][1] is None:\n                header_table[first_item][1] = new_node\n            else:\n                temp_node = header_table[first_item][1]\n                while temp_node.link is not None:\n                    temp_node = temp_node.link\n                temp_node.link = new_node\n        update_fptree(new_node, transaction[1:], header_table)\n\ndef find_prefix_path(base_ptr, target):\n    cond_paths = {}\n    while base_ptr is not None:\n        prefix_path = []\n        p = base_ptr.parent\n        while p.parent is not None:\n            prefix_path.append(p.name)\n            p = p.parent\n        if len(prefix_path) > 1:\n            cond_paths[frozenset(prefix_path)] = base_ptr.count\n        base_ptr = base_ptr.link\n    return cond_paths\n\ndef fill_header(header_table, freq_items):\n    for item in reversed(freq_items):\n        for node in header_table[item][1:]:\n            cond_patterns = find_prefix_path(node, item)\n            header_table[item][0].append((cond_patterns, node.count))\n\ndef create_fp_tree(transactions, min_support, header_table=None, prefix=None, fp_tree=None):\n    if fp_tree is None:\n        fp_tree = TreeNode(\"Null\", 1, None)\n        prefix = []\n        header_table = defaultdict(lambda: [0, None])\n\n    for tid, transaction in enumerate(transactions):\n        local_header_table = {}\n        for item in transaction:\n            if item in header_table and header_table[item][0] >= min_support:\n                local_header_table[item] = header_table[item][0]\n        if len(local_header_table) > 0:\n            sorted_items = sorted(local_header_table.items(), key=lambda x: (x[1], x[0]), reverse=True)\n            reduced_trans = [item[0] for item in sorted_items]\n            update_fptree(fp_tree, reduced_trans, header_table)\n    return fp_tree, header_table\n\ndef mine_fp_tree(header_table, min_support, prefix, final_frequent_itemsets):\n    bigL = [v[0] for v in sorted(header_table.items(), key=lambda p: p[0])]\n    for base_pat in bigL:\n        new_freq_set = prefix.copy()\n        new_freq_set.append(base_pat)\n        final_frequent_itemsets.append(tuple(sorted(new_freq_set)))\n        cond_pattern_bases = header_table[base_pat][0]\n        cond_header_table = defaultdict(list)\n        for cond_pattern in cond_pattern_bases:\n            for item in cond_pattern:\n                if item not in new_freq_set:\n                    cond_header_table[item].append(cond_pattern[item])\n        if len(cond_header_table) > 0:\n            cond_fp_tree, cond_header_table = create_fp_tree([list(condition.keys()) + [base_pat] for condition in cond_pattern_bases.values()], min_support, cond_header_table, new_freq_set)\n            mine_fp_tree(cond_header_table, min_support, new_freq_set, final_frequent_itemsets)\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\"\"\"\n    header_table = defaultdict(list)\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item][0] += 1\n\n    header_table = {k: v for k, v in header_table.items() if v[0] >= min_sup}\n    for k in header_table:\n        header_table[k] = [header_table[k][0], []]\n\n    fp_tree, _ = create_fp_tree(transactions, min_sup, header_table)\n    final_frequent_itemsets = []\n    mine_fp_tree(header_table, min_sup, [], final_frequent_itemsets)\n    return sorted(final_frequent_itemsets, key=lambda x: (len(x), x))\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm to mine frequent item-sets from a given list of transactions. It constructs an FP-tree and then recursively mines the tree to find all frequent item-sets that meet the specified minimum support threshold. The results are returned as a sorted list of tuples."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\"\"\"\n    \n    if degree < 0:\n        return -1\n    \n    n_samples, n_features = len(X), len(X[0])\n    result = []\n    \n    # Iterate over each sample\n    for sample in X:\n        poly_sample = []\n        \n        # Generate coefficients for the polynomial terms\n        for total_deg in range(degree + 1):\n            for indices in combinations_with_replacement(range(n_features), total_deg):\n                coeff = np.prod([sample[i] for i in indices])\n                poly_sample.append(coeff)\n        \n        result.append(poly_sample)\n    \n    return result\n\n# Example usage:\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the provided degree is negative. If so, it returns `-1` immediately.\n2. **Initialization**: It initializes the number of samples (`n_samples`) and features (`n_features`) from the input matrix `X`.\n3. **Polynomial Generation**: For each sample in `X`, it generates all possible monomials up to the specified degree using nested loops:\n   - The outer loop iterates over the total degree from `0` to `degree`.\n   - The inner loop uses `combinations_with_replacement` to generate all possible index tuples for the current total degree.\n4. **Coefficient Calculation**: For each index tuple, it calculates the coefficient by multiplying the corresponding feature values from the sample.\n5. **Result Construction**: The calculated coefficients are appended to the current sample's polynomial terms, which are then added to the final result list.\n6. **Output**: The function returns the constructed polynomial feature matrix as a list of lists.\n\nThis solution ensures that all monomials of the original features, whose total degree does not exceed `d`, are included in the output matrix, following the specified ordering constraints."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    \n    y = np.array(y, dtype=float)\n    mean_y = np.mean(y)\n    mse_value = np.mean((y - mean_y) ** 2)\n    return round(mse_value, 4)\n\n# Check function with provided data points\ndef check_mse():\n    test_cases = [\n        ([], -1),  # Empty list\n        ([1], 0.0),  # Single element\n        ([1, 2, 3, 4], 1.25),  # Multiple elements\n        (np.array([1, 2, 3, 4]), 1.25),  # NumPy array\n        ([0, 0, 0, 0], 0.0),  # All zeros\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9], 6.6667),  # Larger list\n    ]\n    \n    all_passed = True\n    for i, (input_data, expected_output) in enumerate(test_cases):\n        result = mse(input_data)\n        if result != expected_output:\n            print(f\"Test case {i+1} failed: expected {expected_output}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n        \ncheck_mse()\n```\n\nThis code defines the `mse` function as required and includes a `check_mse` function to verify the correctness of the implementation against several test cases."}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array for uniform processing\n    x = np.array(x, dtype=float)\n    \n    # Compute the affine transformation element-wise\n    y = slope * x + intercept\n    \n    # First derivative (which is constant for affine functions)\n    grad = np.full(x.shape, slope)\n    \n    # Second derivative (which is 0 for affine functions)\n    grad2 = np.zeros(x.shape)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    \n    # Convert back to lists before returning\n    return (y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist())\n\n# Example usage:\n# result = apply_affine([1, 2, 3], slope=2.5, intercept=-1.2)\n# print(result)  # This should print the activation, first, and second derivatives\n```\n\nThis function processes both lists and NumPy arrays correctly, ensuring that the input is always treated as a NumPy array for computation. It then applies the affine transformation and computes its first and second derivatives, rounding the results to four decimal places as specified."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if k <= 0 or k > data.shape[1]:\n        return -1\n\n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0, ddof=1)  # Population standard deviation\n    \n    # Avoid division by zero for features with no variance\n    std_devs[std_devs == 0] = 1\n    standardized_data = (data - means) / std_devs\n\n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n\n    # Step 3 & 4: Perform eigen-decomposition and sort eigenvalues in descending order\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of every eigenvector\n    signs = np.sign(sorted_eigenvectors[np.arange(len(sorted_eigenvectors)), sorted_indices])\n    sorted_eigenvectors *= signs[:, np.newaxis]\n\n    # Step 6: Project the standardized data onto the first k eigenvectors\n    top_k_eigenvectors = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ top_k_eigenvectors\n\n    # Round to 4 decimal places and convert to list\n    result = np.round(projected_data, 4).tolist()\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    data = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]])\n    k = 1\n    print(pca_transform(data, k))\n    \n    k = 2\n    print(pca_transform(data, k))\n    \n    k = 3  # Invalid k, should return -1\n    print(pca_transform(data, k))\n```\n\n### Explanation:\n\n1. **Standardization**: \n   - Calculate the mean and standard deviation for each feature.\n   - Standardize the data by subtracting the mean and dividing by the standard deviation.\n\n2. **Covariance Matrix**:\n   - Compute the sample covariance matrix using `np.cov` with `ddof=1` for Bessel's correction.\n\n3. **Eigen-decomposition**:\n   - Use `np.linalg.eigh` to perform the eigen-decomposition of the covariance matrix.\n   - Sort the eigenvalues and their corresponding eigenvectors in descending order.\n\n4. **Fixing Eigenvector Signs**:\n   - For each eigenvector, adjust the sign so that the element with the largest absolute value is positive.\n\n5. **Projection**:\n   - Project the standardized data onto the first `k` eigenvectors.\n\n6. **Output**:\n   - Round the projected data to 4 decimal places and return it as a nested list.\n\nThe function checks if `k` is within the valid range (`1 \u2264 k \u2264 n_features`). If not, it returns `-1`."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    def find_best_split(feature_values, residuals):\n        best_mse = np.inf\n        best_idx = -1\n        # Sort feature_values and residuals based on feature_values while keeping the pairs together\n        sorted_indices = np.argsort(feature_values)\n        feature_values = feature_values[sorted_indices]\n        residuals = residuals[sorted_indices]\n\n        # Compute MSE for each possible split\n        sum_residuals = np.sum(residuals)\n        left_residual_sum = 0\n        right_residual_count = len(residuals)\n\n        for i in range(len(residuals) - 1):\n            if feature_values[i] == feature_values[i + 1]:\n                continue\n            left_residual_sum += residuals[i]\n            right_residual_count -= 1\n\n            left_mse = left_residual_sum ** 2 / (i + 1) if i + 1 > 0 else 0\n            right_mse = (sum_residuals - left_residual_sum) ** 2 / right_residual_count if right_residual_count > 0 else 0\n\n            current_mse = left_mse + right_mse\n            if current_mse < best_mse:\n                best_mse = current_mse\n                best_idx = i + 1\n\n        if best_idx == -1:\n            return None, None  # No valid split found\n        \n        return (feature_values[best_idx] + feature_values[best_idx - 1]) / 2, best_idx\n\n    def train_single_stump(X_train, y_train, residuals):\n        best_threshold = None\n        best_feature_idx = None\n        best_mse = np.inf\n        best_left_const = None\n        best_right_const = None\n\n        for feature_idx in range(len(X_train[0])):\n            thresholds, split_indices = zip(*[find_best_split(np.array([x[feature_idx] for x in X_train]), residuals) for _ in range(len(X_train))])\n            thresholds = list(thresholds)\n            split_indices = list(split_indices)\n            if all(t is None for t in thresholds):\n                continue\n\n            # Calculate left and right constants\n            left_consts = [np.mean(residuals[:idx+1]) for idx in split_indices if idx != -1]\n            right_consts = [np.mean(residuals[idx+1:]) for idx in split_indices if idx != -1]\n\n            # Find the best threshold based on the lowest MSE\n            for threshold, left_const, right_const, idx in zip(thresholds, left_consts, right_consts, split_indices):\n                if idx == -1:\n                    continue\n                left_mse = np.sum((residuals[:idx+1] - left_const) ** 2)\n                right_mse = np.sum((residuals[idx+1:] - right_const) ** 2)\n                current_mse = left_mse + right_mse\n\n                if current_mse < best_mse:\n                    best_mse = current_mse\n                    best_threshold = threshold\n                    best_left_const = left_const\n                    best_right_const = right_const\n                    best_feature_idx = feature_idx\n\n        if best_feature_idx is None:\n            return None, None, None  # No valid stump found\n\n        return best_feature_idx, best_threshold, (best_left_const, best_right_const)\n\n    # Initial prediction is the mean of y_train\n    F_x = np.full(len(y_train), np.mean(y_train))\n    predictions = []\n\n    for _ in range(n_estimators):\n        residuals = np.array(y_train) - F_x\n        feature_idx, threshold, (left_const, right_const) = train_single_stump(X_train, y_train, residuals)\n\n        if feature_idx is None:\n            break\n\n        h_m = np.where([X_train[i][feature_idx] <= threshold for i in range(len(X_train))], left_const, right_const)\n        F_x += learning_rate * h_m\n\n    # Predict on test data\n    test_F_x = np.full(len(X_test), np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = np.array(y_train) - F_x\n        feature_idx, threshold, (left_const, right_const) = train_single_stump(X_train, y_train, residuals)\n\n        if feature_idx is None:\n            break\n\n        h_m = np.where([X_train[i][feature_idx] <= threshold for i in range(len(X_train))], left_const, right_const)\n        F_x += learning_rate * h_m\n\n        # Apply the learned stump to the test set\n        test_h_m = np.where([X_test[i][feature_idx] <= threshold for i in range(len(X_test))], left_const, right_const)\n        test_F_x += learning_rate * test_h_m\n\n    # Convert the final scores to binary predictions\n    predictions = [1 if score >= 0.5 else 0 for score in test_F_x]\n\n    return predictions\n\n# Example usage:\n# X_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\n# y_train = [0, 1, 1]\n# X_test = [[1.5, 2.5], [2.5, 3.5]]\n# predictions = gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=2, learning_rate=0.1)\n# print(predictions)  # Output should be a list of 0 or 1 integers, e.g., [0, 1]\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    \n    if X.size == 0:\n        return []\n    \n    m, n_v = X.shape\n    n_h = W.shape[1]\n    \n    # Positive Phase\n    h0_prob = sigmoid(X @ W + hbias.reshape(1, -1))\n    pos_grad = X.T @ h0_prob\n    \n    # Negative Phase\n    v_k_prob = X\n    for _ in range(k):\n        h_k_prob = sigmoid(v_k_prob @ W + hbias.reshape(1, -1))\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias.reshape(1, -1))\n    \n    neg_grad = v_k_prob.T @ h_k_prob\n    \n    # Weight update\n    delta_W = learning_rate * (pos_grad - neg_grad) / m\n    W_new = W + delta_W\n    \n    # Convert to list of lists and round to 4 decimal places\n    return [[round(val, 4) for val in row] for row in W_new]\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([[1, 0, 1], [0, 1, 0]])\n    W = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\n    vbias = np.array([0.1, 0.2, 0.3])\n    hbias = np.array([0.4, 0.5, 0.6])\n    learning_rate = 0.1\n    k = 1\n\n    updated_weights = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\n    print(updated_weights)\n```\n\n### Explanation:\n1. **Positive Phase**: Compute the probability of hidden units being active (`h0_prob`) given the visible units (`X`). Calculate the gradient for the positive phase (`pos_grad`).\n2. **Negative Phase**: Perform `k` Gibbs sampling steps to generate new visible and hidden unit probabilities (`v_k_prob` and `h_k_prob`), using the probabilities directly instead of sampling.\n3. **Gradient Calculation**: Compute the negative phase gradient (`neg_grad`).\n4. **Weight Update**: Update the weight matrix `W` using the contrastive divergence update rule.\n5. **Output**: Convert the updated weight matrix to a list of lists, rounding each element to 4 decimal places.\n\nThis implementation ensures that the function handles empty batches correctly by returning an empty list."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays for convenience\n    x = np.array(x)\n    y = np.array(y)\n\n    # Check if the vectors have the same length\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Chebyshev distance\n    dist = np.max(np.abs(x - y))\n    \n    # Return the result rounded to 4 decimal places\n    return round(float(dist), 4)\n\n# Example usage:\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis code defines the `chebyshev` function which calculates the Chebyshev distance between two vectors. It first checks if the vectors have the same length, and if not, it returns `-1`. Otherwise, it computes the maximum absolute difference between corresponding elements of the vectors and returns this value rounded to four decimal places."}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\"\"\"\n    eps = np.finfo(float).eps\n\n    # Clip y_pred to ensure numerical stability\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n\n    # Reconstruction Loss: Binary Cross-Entropy\n    rec_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n\n    # KL Divergence\n    kl_loss = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n\n    # Total loss per sample\n    total_loss_per_sample = rec_loss + kl_loss\n\n    # Mini-batch average of the total loss\n    avg_total_loss = np.mean(total_loss_per_sample)\n\n    # Return the average loss rounded to 6 decimal places\n    return round(avg_total_loss, 6)\n\n# Example usage:\n# y = np.array([[1, 0, 1], [0, 1, 1]])\n# y_pred = np.array([[0.9, 0.1, 0.8], [0.1, 0.95, 0.7]])\n# t_mean = np.array([[0.5, -0.2], [-0.1, 0.3]])\n# t_log_var = np.array([[0.1, 0.2], [0.2, 0.1]])\n\n# print(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\nThis function calculates the VAE loss by computing both the Reconstruction Loss and the KL Divergence, then averaging these losses across the mini-batch and rounding the result to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X, dtype=np.float64)\n    w = np.array(w, dtype=np.float64)\n    V = np.array(V, dtype=np.float64)\n\n    # Calculate linear part of the prediction\n    linear_part = w0 + np.dot(X, w)\n\n    # Calculate interaction part\n    P = np.dot(X, V)  # This is the dot product between X and each factor in V\n    int_part = 0.5 * (np.sum(P ** 2, axis=1) - np.sum(X ** 2, axis=1) @ np.square(V).sum(axis=1))\n\n    # Combine both parts and round to 4 decimal places\n    predictions = np.round(linear_part + int_part, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [\n#     [1, 2, 3],\n#     [4, 5, 6]\n# ]\n# w0 = 0.1\n# w = [0.2, 0.3, 0.4]\n# V = [\n#     [0.1, 0.2],\n#     [0.3, 0.4],\n#     [0.5, 0.6]\n# ]\n# print(fm_predict(X, w0, w, V))\n```\n\nThis solution converts the input lists to NumPy arrays for efficient matrix operations and computes the predictions using the provided formula. It then rounds the final predictions to four decimal places as required."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to NumPy array if it's not already\n    z = np.array(z, dtype=float)\n    \n    # Apply the numerically stable sigmoid formula\n    # For positive z, use 1 / (1 + exp(-z))\n    # For negative z, use exp(z) / (1 + exp(z)) which is equivalent to 1 - 1/(1+exp(z))\n    stable_sigmoid = np.where(\n        z >= 0,\n        1 / (1 + np.exp(-z)),\n        np.exp(z) / (1 + np.exp(z))\n    )\n    \n    # Round the result to 4 decimal places\n    result = np.round(stable_sigmoid, 4)\n    \n    # If the input was a scalar, return a float, otherwise return a list\n    if isinstance(z, np.ndarray) and z.ndim == 0:\n        return result.item()  # convert scalar array to a Python scalar\n    else:\n        return result.tolist()\n\n# Test cases\nprint(sigmoid(-1))          # Expected: 0.2689\nprint(sigmoid(0))           # Expected: 0.5\nprint(sigmoid(1))           # Expected: 0.7311\nprint(sigmoid([-1, 0, 1]))  # Expected: [0.2689, 0.5, 0.7311]\nprint(sigmoid(np.array([[1, 2], [-1, -2]])))  # Expected: [[0.7311, 0.8808], [0.2689, 0.1192]]\n```\n\n### Explanation:\n1. **Input Handling**: The function first converts the input `z` to a NumPy array. This allows us to handle scalars, lists, tuples, and NumPy arrays uniformly.\n2. **Numerical Stability**: The sigmoid function uses a conditional expression (`np.where`) to apply different formulas based on whether `z` is positive or negative. This prevents numerical overflow issues when `|z|` is large.\n   - For \\( z \\geq 0 \\), it uses \\( g(z) = \\frac{1}{1 + e^{-z}} \\).\n   - For \\( z < 0 \\), it uses \\( g(z) = \\frac{e^z}{1 + e^z} \\), which simplifies to \\( 1 - \\frac{1}{1 + e^z} \\).\n3. **Rounding**: After computing the sigmoid, the result is rounded to 4 decimal places using `np.round`.\n4. **Output Handling**: If the input was a scalar, the function returns a float. Otherwise, it returns a nested Python list by converting the NumPy array to a list using `.tolist()`.\n\nThis implementation ensures that the function works correctly for various input types and maintains numerical stability for large values of `z`."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Check if actual is one-hot encoded and convert if necessary\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = np.argmax(actual, axis=1)\n        \n        # Check if predicted is one-hot encoded and convert if necessary\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = np.argmax(predicted, axis=1)\n        \n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Test cases\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # Expected output: 0.6667\n\n# Additional test cases\nactual_1d    = np.array([1, 0, 2])\npredicted_1d = np.array([1, 1, 2])\nprint(accuracy(actual_1d, predicted_1d))  # Expected output: 0.6667\n\nactual_mixed = np.array([[0,1,0], [1,0,0], [0,0,1]])\npredicted_mixed = np.array([1, 0, 2])\nprint(accuracy(actual_mixed, predicted_mixed))  # Expected output: 0.6667\n```\n\nThis script defines the `unhot` decorator, which converts one-hot encoded arrays to their corresponding integer label representations before calling the decorated function. It includes example usage and additional test cases to demonstrate the functionality."}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(x):\n        grad = x * (1 - x)\n        return np.round(grad, 4)\n\n    if isinstance(z, (float, int, np.number)):\n        # Input is a scalar\n        return compute_gradient(float(z))\n    elif isinstance(z, np.ndarray):\n        # Input is a NumPy array\n        return compute_gradient(z)\n    elif isinstance(z, list) and all(isinstance(i, (list, np.ndarray, float, int, np.number)) for i in z):\n        # Input is a nested list/ndarray\n        return [sigmoid_grad(i) for i in z]\n    elif not z:\n        # Input is an empty list\n        return []\n    else:\n        raise ValueError(\"Input must be a scalar, list, or NumPy ndarray of numbers in [0,1]\")\n\n# Test cases\nprint(sigmoid_grad(0.7))  # Scalar test case\nprint(sigmoid_grad([0.2, 0.5, 0.8]))  # 1D list test case\nprint(sigmoid_grad([[0.3, 0.7], [0.1, 0.9]]))  # 2D list test case\nprint(sigmoid_grad(np.array([0.2, 0.5, 0.8])))  # 1D ndarray test case\nprint(sigmoid_grad([]))  # Empty list test case\n```\n\nThis script defines the `sigmoid_grad` function which computes the gradient of the sigmoid function for various input types: scalars, 1-D lists, 2-D lists, and NumPy arrays. It ensures the output retains the same structure as the input and rounds each result to four decimal places. The provided test cases demonstrate the function's capability to handle different input scenarios."}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert input data to numpy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for the grid based on the data's min and max values\n    x1_range = (np.min(X[:, 0]), np.max(X[:, 0]))\n    x2_range = (np.min(X[:, 1]), np.max(X[:, 1]))\n    \n    # Create the 1D arrays for the grid points\n    x1_plot = np.linspace(x1_range[0], x1_range[1], grid_n)\n    x2_plot = np.linspace(x2_range[0], x2_range[1], grid_n)\n    \n    # Create a mesh grid from the 1D arrays\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for classification\n    flat_grid = np.vstack([x1_grid.ravel(), x2_grid.ravel()]).T\n    \n    # Classify each point using the given weights and bias\n    labels_flat = np.sign(np.dot(flat_grid, W) + b)\n    \n    # Reshape the flattened labels back to the grid shape\n    labels_grid = labels_flat.reshape(grid_n, grid_n).tolist()\n    \n    return labels_grid\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data and parameters\n    X = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n    W = [1, -1]\n    b = 0.5\n    grid_n = 100\n    \n    # Generate decision boundary grid\n    result = decision_boundary_grid(X, W, b, grid_n)\n    \n    # Print the result\n    print(result)\n```\n\nThis script defines the function `decision_boundary_grid` which takes in the dataset `X`, the weights `W`, the bias `b`, and an optional grid resolution `grid_n`. It generates a mesh grid over the range of the data points, classifies each point using the provided linear classifier, and returns the predictions as a list of lists."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    \n    # Add a very small constant to avoid division by zero\n    epsilon = 1e-9\n    \n    # Calculate class priors\n    class_0_prior = np.mean(y_train == 0)\n    class_1_prior = np.mean(y_train == 1)\n    \n    # Separate training data by class\n    class_0_data = X_train[y_train == 0]\n    class_1_data = X_train[y_train == 1]\n    \n    # Calculate means and standard deviations for each class\n    class_0_mean = np.mean(class_0_data, axis=0)\n    class_1_mean = np.mean(class_1_data, axis=0)\n    class_0_std = np.std(class_0_data, axis=0) + epsilon\n    class_1_std = np.std(class_1_data, axis=0) + epsilon\n    \n    predictions = []\n    \n    # Iterate over each test sample\n    for sample in X_test:\n        # Calculate the likelihoods for each class\n        class_0_likelihood = np.sum(-((sample - class_0_mean) ** 2) / (2 * class_0_std ** 2)) - np.sum(np.log(class_0_std * np.sqrt(2 * np.pi)))\n        class_1_likelihood = np.sum(-((sample - class_1_mean) ** 2) / (2 * class_1_std ** 2)) - np.sum(np.log(class_1_std * np.sqrt(2 * np.pi)))\n        \n        # Calculate the posteriors for each class\n        class_0_posterior = class_0_prior + class_0_likelihood\n        class_1_posterior = class_1_prior + class_1_likelihood\n        \n        # Predict the class with the higher posterior probability\n        if class_1_posterior > class_0_posterior:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n            \n    return predictions\n\n# Example usage:\n# X_train = np.array([[0.2, 0.6], [0.4, 0.8], [0.3, 0.5], [0.7, 0.9]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[0.1, 0.7], [0.6, 0.7]])\n\n# print(gaussian_naive_bayes(X_train, y_train, X_test))\n```\n\nThis script implements a Gaussian Naive Bayes classifier from scratch following the provided specifications. It calculates the mean and standard deviation for each feature in both classes, computes the likelihoods, and predicts the class with the highest posterior probability for each test sample."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost between the predicted probabilities AL and true labels Y.\n\n    Parameters:\n    - AL: Predicted probabilities as a NumPy array of shape (1, m) or (m,) where m is the number of samples.\n    - Y: True labels as a NumPy array of the same shape as AL.\n\n    Returns:\n    - The binary cross-entropy cost as a float.\n    \"\"\"\n    # Ensure AL and Y are numpy arrays and have the same shape\n    m = AL.shape[1] if AL.ndim > 1 else AL.shape[0]\n    \n    # Clip AL to avoid log(0) and log(1) which are undefined or zero\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Calculate the cost using the binary cross-entropy formula\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    # Ensure the cost is a positive float and round it to 4 decimal places\n    return float(np.round(cost, 4))\n\n# Example usage:\n# AL = np.array([[0.5, 0.9, 0.1, 0.8]])\n# Y = np.array([[1, 0, 1, 0]])\n# print(compute_cost(AL, Y))  # This should print the cost rounded to 4 decimal places.\n```\n\nThis solution defines the `compute_cost` function which calculates the binary cross-entropy cost between the predicted probabilities (`AL`) and the true labels (`Y`). It includes clipping the output probabilities to prevent numerical issues and ensures the returned cost is rounded to 4 decimal places for consistent output formatting."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    \n    if not 0 <= t < len(observations):\n        return []\n\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    O = observations\n    \n    num_states = len(pi)\n\n    # Step 1: Compute the forward probabilities \u03b1\n    alpha = np.zeros((len(O), num_states))\n    for s in range(num_states):\n        alpha[0, s] = pi[s] * B[s, O[0]]\n    \n    for t in range(1, len(O)):\n        for s in range(num_states):\n            alpha[t, s] = B[s, O[t]] * np.sum(alpha[t-1, :] * A[:, s])\n    \n    # Step 2: Compute the backward probabilities \u03b2\n    beta = np.zeros((len(O), num_states))\n    beta[-1, :] = 1.0  # Base case\n    \n    for t in range(len(O) - 2, -1, -1):\n        for s in range(num_state\n"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    \n    def build_neighborhood_matrix(distances, eps):\n        \"\"\"Builds a neighborhood matrix based on the distances matrix.\"\"\"\n        return (distances <= eps).astype(int)\n\n    n_samples = len(data)\n    # Step 1: Compute pairwise Euclidean distances\n    distances = cdist(data, data)\n    \n    # Step 2: Build the neighborhood list for each sample\n    neighborhood = build_neighborhood_matrix(distances, eps)\n    \n    # Step 3: Identify core points\n    core_points_mask = (np.sum(neighborhood, axis=1) >= min_samples)\n    \n    # Initialize labels: -1 for noise, 0 for border/core points not yet part of any cluster\n    labels = np.full(n_samples, -1, dtype=int)\n    \n    current_cluster_label = 0\n    \n    for i in range(n_samples):\n        if labels[i] != -1: # If already labeled, skip\n            continue\n            \n        if not core_points_mask[i]: # If not a core point, it's noise\n            continue\n        \n        current_cluster_label += 1\n        current_cluster = deque([i])\n        \n        while current_cluster:\n            current_point = current_cluster.popleft()\n            if labels[current_point] == 0: # If it's not yet labeled, label it\n                labels[current_point] = current_cluster_label\n                \n                # Add all direct neighbors to the cluster\n                for neighbor in np.where(neighborhood[current_point])[0]:\n                    if labels[neighbor] == -1: # If it's noise, change its label\n                        labels[neighbor] = current_cluster_label\n                    elif labels[neighbor] == 0: # Add to queue if not labeled\n                        current_cluster.append(neighbor)\n    \n    return list(labels)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Generate some example data\n    np.random.seed(42)\n    data1 = np.random.normal(loc=(0, 0), scale=1, size=(100, 2))\n    data2 = np.random.normal(loc=(5, 5), scale=1, size=(100, 2))\n    data3 = np.random.normal(loc=(8, 0), scale=1, size=(100, 2))\n    noise = np.random.normal(loc=(-2, -2), scale=1, size=(20, 2))\n\n    data = np.vstack((data1, data2, data3, noise))\n    \n    labels = dbscan(data, eps=1.5, min_samples=5)\n    print(labels)\n```\n\n### Explanation:\n1. **Compute Pairwise Distances:** We use SciPy\u2019s `cdist` function to compute all pairwise Euclidean distances between points.\n2. **Build Neighborhood Matrix:** For each point, we create a binary matrix indicating whether another point is within the specified radius (\u03b5).\n3. **Identify Core Points:** A point is a core point if it has at least `min_samples` other points within its neighborhood.\n4. **Label Points:** \n   - Iterate over all points; if a point is unvisited and a core point:\n     - Expand a cluster by using Breadth-First Search (BFS) to visit all density-reachable points.\n   - All remaining points are labeled as noise (-1).\n\n### Notes:\n- The algorithm correctly identifies core, border, and noise points.\n- Clusters are numbered sequentially starting from 1.\n- This implementation assumes that the input data is well-behaved and does not contain infinite or NaN values."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\nfrom sklearn.cluster import KMeans\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Perform Gaussian Mixture Modeling using the Expectation-Maximization algorithm on a dataset.\n\n    Parameters:\n    - data: np.ndarray, shape (N, D)\n        Input data consisting of N samples with D features.\n    - k: int\n        Number of Gaussian components.\n    - max_iter: int, default=200\n        Maximum number of EM iterations.\n    - epsilon: float, default=1e-4\n        Tolerance for the change in log-likelihood to declare convergence.\n\n    Returns:\n    - labels: List[int]\n        Predicted component for each sample.\n    \"\"\"\n\n    # Initialization\n    n_samples, _ = data.shape\n    resp = np.zeros((n_samples, k))\n    log_likelihood = []\n    \n    # Initialize means using K-means for better convergence\n    kmeans = KMeans(n_clusters=k, random_state=0).fit(data)\n    means = kmeans.cluster_centers_\n    covariances = [np.cov(data.T) + np.eye(data.shape[1]) * 0.1 for _ in range(k)]\n    weights = np.ones(k) / k\n\n    for iteration in range(max_iter):\n        # E-step\n        weighted_log_prob = np.zeros((n_samples, k))\n        for j in range(k):\n            weighted_log_prob[:, j] = np.log(weights[j]) + multivariate_normal.logpdf(data, mean=means[j], cov=covariances[j])\n        log_prob = scipy.special.logsumexp(weighted_log_prob, axis=1, keepdims=True)\n        with np.errstate(under='ignore'):\n            log_resp = weighted_log_prob - log_prob\n        resp = np.exp(log_resp)\n\n        # M-step\n        norm = resp.sum(axis=0)\n        weights = norm / n_samples\n        for j in range(k):\n            means[j] = (resp[:, j][:, np.newaxis] * data).sum(axis=0) / norm[j]\n            diff = data - means[j]\n            covariances[j] = (resp[:, j][:, np.newaxis][:, :, np.newaxis] * np.einsum('ij,ik->ijk', diff, diff)).sum(axis=0) / norm[j] + np.eye(data.shape[1]) * 0.1\n\n        # Log-likelihood\n        log_likelihood.append(np.sum(log_prob))\n        if len(log_likelihood) > 1 and abs(log_likelihood[-1] - log_likelihood[-2]) < epsilon:\n            break\n\n    # Determine the final labels\n    # Get responsibilities\n    resp = np.zeros((n_samples, k))\n    for j in range(k):\n        resp[:, j] = multivariate_normal.pdf(data, mean=means[j], cov=covariances[j])\n    resp /= resp.sum(axis=1)[:, np.newaxis]\n\n    # Assign the labels\n    labels = resp.argmax(axis=1)\n\n    # Sort clusters by first coordinate of the mean in ascending order\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = [sorted_indices[label] for label in labels]\n\n    return sorted_labels\n\n# Example usage:\n# data = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n# k = 2\n# print(gmm_em(data, k))\n```\n\nThis script implements the Gaussian Mixture Model via the Expectation-Maximization algorithm. It includes initialization using K-means for better starting points, and ensures determinism by sorting the components by the first coordinate of their mean in ascending order at the end. The returned labels are then re-labeled to match this new ordering, ensuring consistent results across runs with the same input."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\r\nfrom scipy.spatial.distance import pdist, squareform\r\nfrom scipy.linalg import eigh\r\n\r\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\r\n    \"\"\"Perform spectral clustering on the given dataset.\r\n\r\n    Args:\r\n        data: A NumPy array of shape (N, d) containing N samples with d features.\r\n        n_cluster: The number of clusters to form.\r\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\r\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\r\n\r\n    Returns:\r\n        A list of length N where the i-th element is an integer label identifying the\r\n        cluster assignment of the i-th sample (labels are 0-based).\r\n    \"\"\"\r\n    \r\n    if n_cluster == 1:\r\n        return [0] * len(data)\r\n\r\n    # Step 1: Build fully-connected similarity graph\r\n    sq_dists = squareform(pdist(data))\r\n    similarities = np.exp(-gamma * sq_dists)\r\n\r\n    # Step 2: Construct the Laplacian matrix\r\n    degrees = np.diag(np.sum(similarities, axis=0))\r\n    laplacian = degrees - similarities\r\n    \r\n    if method == 'normalized':\r\n        inv_degrees = np.diag(1.0 / np.sqrt(np.sum(similarities, axis=0)))\r\n        laplacian = inv_degrees @ laplacian @ inv_degrees\r\n\r\n    # Step 3: Compute the eigenvectors for the smallest eigenvalues\r\n    eigenvalues, eigenvectors = eigh(laplacian, eigvals=(0, n_cluster-1))\r\n    idx = eigenvalues.argsort()\r\n    eigen_subset = eigenvectors[:, idx]\r\n\r\n    if method == 'normalized':\r\n        row_norm = np.linalg.norm(eigen_subset, axis=1, keepdims=True)\r\n        eigen_subset = eigen_subset / row_norm\r\n\r\n    # Step 4: Run K-means clustering on the eigenvectors\r\n    centroids = eigen_subset[:n_cluster]\r\n    labels = np.argmin(np.linalg.norm(eigen_subset[:, None] - centroids, axis=2), axis=1)\r\n\r\n    # Relabel clusters to ensure consistent labeling\r\n    label_to_new_label = {old_label: new_label for new_label, old_label in enumerate(sorted(set(labels)))}\r\n    labels = [label_to_new_label[label] for label in labels]\r\n\r\n    return labels\r\n\r\n# Example usage\r\nif __name__ == \"__main__\":\r\n    # Sample data\r\n    data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\r\n    n_clusters = 2\r\n    result = spectral_clustering(data, n_clusters)\r\n    print(result)\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, _ = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Step 2: Compute the Gram matrix\n    G = np.dot(X_data, X_data.T)\n\n    no_update = False\n    iter_count = 0\n\n    while iter_count < max_iter and not no_update:\n        no_update = True\n        iter_count += 1\n\n        for i in range(N):\n            # Step 3: Compute the sum of alphas times Yj times G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            \n            # Check the perceptron update condition\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n\n    # Recover the weight vector\n    w = np.dot((alpha * y_data), X_data).round(4).tolist()\n    b = round(b, 4)\n\n    return w, b\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data\n    X = np.array([[1, 2], [2, 3], [3, 3], [2, 1]])\n    y = np.array([1, 1, -1, -1])\n\n    # Train the dual-form perceptron\n    w, b = perceptron_dual_train(X, y, eta=1.0, max_iter=1000)\n    print(f\"Learned Weight Vector: {w}\")\n    print(f\"Bias Term: {b}\")\n```\n\nThis script implements the dual-form perceptron learning algorithm as specified. It computes the Gram matrix, iterates over the dataset to update the alphas and the bias term, and finally recovers the weight vector by summing the products of alphas, labels, and feature vectors. The results are rounded to four decimal places before being returned."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple\n\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label  # Feature index to inspect\n        self.x = x          # Value for classification edges\n        self.s = s          # Split point for regression\n        self.y = y          # Predicted value (in leaves)\n        self.child = child  # List of children\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str) -> int | float:\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    \n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to the second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    \n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample regression tree:\n    # Root: label=0, s=5.5; Left: y=3; Right: label=1, s=7; Left: y=6; Right: y=8\n    right_right = Node(y=8)\n    right_left = Node(y=6)\n    right = Node(label=1, s=7, child=[right_left, right_right])\n    left = Node(y=3)\n    root = Node(label=0, s=5.5, child=[left, right])\n\n    # Test cases\n    print(predict_sample(root, [4, 6], 'regression'))  # Expected output: 3\n    print(predict_sample(root, [6, 2], 'regression'))  # Expected output: 8\n\n    # Sample classification tree:\n    # Root: label=0; Left: x=2, y=0; Right: x=3, y=1\n    right = Node(x=3, y=1)\n    left = Node(x=2, y=0)\n    root_class = Node(label=0, child=[left, right])\n\n    print(predict_sample(root_class, [2], 'classification'))  # Expected output: 0\n    print(predict_sample(root_class, [1], 'classification'))  # Expected output: 1\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Tuple\n\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a given set of labels.\"\"\"\n    unique_labels = np.unique(labels)\n    ent = 0.0\n    for label in unique_labels:\n        p = np.mean(labels == label)\n        if p > 0.0:\n            ent -= p * np.log2(p)\n    return ent\n\ndef conditional_entropy(feature: np.ndarray, labels: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy H(y|A) for a given feature and labels.\"\"\"\n    unique_values = np.unique(feature)\n    ent = 0.0\n    total_count = len(feature)\n    for value in unique_values:\n        subset = labels[feature == value]\n        prob = len(subset) / total_count\n        ent += prob * entropy(subset)\n    return ent\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> Tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n    num_features = X.shape[1]\n    overall_entropy = entropy(y)\n    max_info_gain = -1.0\n    best_feature_index = -1\n\n    for feature_idx in range(num_features):\n        feature = X[:, feature_idx]\n        cond_ent = conditional_entropy(feature, y)\n        info_gain = overall_entropy - cond_ent\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = feature_idx\n\n    return (best_feature_index, round(max_info_gain, 6))\n\n# Example usage:\n# X = np.array([[0, 1, 1], [1, 0, 0], [0, 0, 1]])\n# y = np.array([0, 1, 0])\n# print(choose_best_feature(X, y))\n```\n\nThis code defines the necessary functions to calculate the entropy of the labels, the conditional entropy of the labels given a feature, and finally, the information gain for each feature. It then selects the feature with the highest information gain and returns its index along with the corresponding rounded information gain."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    n_samples = data.shape[0]\n    if epsilon == 0:\n        return []\n\n    # Constants\n    height_limit = math.ceil(math.log2(sample_size))\n    c_n = lambda n: 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n if n > 1 else 0  # Euler\u2013Mascheroni constant\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n\n    def isolation_tree(X):\n        n_nodes = X.shape[0]\n        path_length = np.zeros(n_nodes)\n\n        def grow_tree(node_indices):\n            if len(node_indices) <= 1 or depth >= height_limit:\n                return\n            depth += 1\n            indices = X[node_indices]\n            feature_id = np.random.randint(indices.shape[1])\n            feature_min, feature_max = np.min(indices[:, feature_id]), np.max(indices[:, feature_id])\n            threshold = np.random.uniform(feature_min, feature_max)\n            left_indices = node_indices[(indices[:, feature_id] <= threshold)]\n            right_indices = node_indices[(indices[:, feature_id] > threshold)]\n            grow_tree(left_indices)\n            grow_tree(right_indices)\n\n            if len(node_indices) > 1:\n                path_length[node_indices] += 1\n            else:\n                path_length[node_indices] = c_n(len(node_indices))\n\n        depth = 0\n        grow_tree(np.arange(n_nodes))\n        return path_length\n\n    avg_path_length = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sampled_data = data\n        else:\n            sampled_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n            sampled_data = data[sampled_indices]\n        path_lengths = isolation_tree(sampled_data)\n        avg_path_length += path_lengths\n\n    avg_path_length /= n_trees\n    anomaly_scores = np.power(2, -(avg_path_length / phi))\n\n    # Detect outliers based on the given epsilon\n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = np.where(anomaly_scores > threshold)[0]\n\n    return sorted(outliers.tolist())\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [3, 4], [10, 10], [11, 11]])\n# print(detect_outliers(data, n_trees=10, sample_size=5, epsilon=0.2))\n```\n\nThis code defines the `detect_outliers` function according to the specifications provided. It builds a set of random isolation trees, computes the average path lengths for each observation, converts these to anomaly scores, and identifies outliers based on the given epsilon."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Performs MaxEnt classification using Generalized Iterative Scaling.\"\"\"\n    \n    num_train_samples, num_features = X_train.shape\n    unique_labels = set(y_train)\n    \n    # Step 1: Build empirical distributions\n    label_count = defaultdict(int)\n    feature_label_count = defaultdict(int)\n    \n    for label in y_train:\n        label_count[label] += 1\n    \n    for i, (features, label) in enumerate(zip(X_train, y_train)):\n        for feature_index, feature_value in enumerate(features):\n            if feature_value != 0:  # Assuming feature is represented by non-zero values\n                feature_label_key = (feature_index, feature_value, label)\n                feature_label_count[feature_label_key] += 1\n\n    total_count = sum(label_count.values())\n    empirical_p_yx = {k: v / total_count for k, v in feature_label_count.items()}\n    empirical_p_x = {label: count / total_count for label, count in label_count.items()}\n\n    # Initialize weights\n    weights = defaultdict(float)\n    \n    # Generalized Iterative Scaling (GIS)\n    for iteration in range(n_iter):\n        max_update = 0.0\n        updates = {}\n\n        for feature_index in range(num_features):\n            for feature_value in range(1, 2):  # Assuming binary features for simplicity\n                for label in unique_labels:\n                    fyx = feature_label_count.get((feature_index, feature_value, label), 0)\n                    px = label_count[label] / num_train_samples\n                    pyx = empirical_p_yx.get((feature_index, feature_value, label), 0)\n                    expected_fyx = px * math.log(pyx / empirical_p_x[label])\n\n                    update = fyx - expected_fyx\n                    updates[(feature_index, feature_value, label)] = update\n                    max_update = max(max_update, abs(update))\n\n        # Update weights\n        for key, update in updates.items():\n            weights[key] += update\n        \n        if max_update < epsilon:\n            break\n    \n    # Prediction\n    predictions = []\n    for x_test in X_test:\n        log_probabilities = {label: 0.0 for label in unique_labels}\n        \n        for feature_index, feature_value in enumerate(x_test):\n            if feature_value != 0:  # Feature is present\n                for label in unique_labels:\n                    weight_key = (feature_index, feature_value, label)\n                    if weight_key in weights:\n                        log_probabilities[label] += weights[weight_key]\n        \n        # Compute normalizing constant Z(x)\n        z_x = sum(math.exp(log_prob) for log_prob in log_probabilities.values())\n        \n        # Compute P(y|x) = exp(log(P(y|x))) / Z(x)\n        predicted_label = max(log_probabilities, key=lambda label: math.exp(log_probabilities[label]) / z_x)\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 0], [0, 1], [1, 1]])\n# y_train = np.array([0, 1, 0])\n# X_test = np.array([[1, 0], [0, 1]])\n# print(maxent_predict(X_train, y_train, X_test))\n```\n\nThis script implements the Maximum Entropy classifier using the Generalized Iterative Scaling (GIS) algorithm. It first builds the empirical distributions of the training data, then iteratively updates the weights until convergence, and finally predicts the labels for the test data based on the learned weights."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Extract unique words from each document\n    all_words = [word for _, words in data for word in set(words)]\n    \n    # Count the frequency of each word across all documents\n    word_count = Counter(all_words)\n    \n    # Count the number of documents each word appears in\n    doc_count = Counter(word for _, words in data for word in set(words))\n    \n    num_docs = len(data)\n    ratios = [(word, round(count / num_docs, 4)) for word, count in doc_count.items()]\n    \n    # Sort words by their document frequency ratio in descending order\n    ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the set of most common words based on cut_off\n    if cut_off is None or cut_off >= len(ratios):\n        result_set = {word for word, _ in ratios}\n    elif cut_off > 0:\n        result_set = {word for word, _ in ratios[:cut_off]}\n    else:\n        result_set = set()\n    \n    return ratios, result_set\n\n# Example usage:\ndocuments = [\n    ('doc1', ['hello', 'world']),\n    ('doc2', ['hello', 'python']),\n    ('doc3', ['python', 'world']),\n    ('doc4', ['hello', 'python', 'world'])\n]\n\nratios, top_words = statistic_key_word(documents, cut_off=2)\nprint(\"Word Ratios:\", ratios)\nprint(\"Top Words:\", top_words)\n```\n\nThis script defines the `statistic_key_word` function, which calculates the document-frequency ratio for each word across a collection of documents and returns the required statistics. The example usage demonstrates how to call this function and print its output."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w using the formula w = X.T @ (alpha * y)\n    w = (X.T @ (alpha * y)).round(4)\n    \n    # If there's only one feature, convert w to a list, otherwise it remains a numpy array\n    if X.shape[1] == 1:\n        w_list = w.item().tolist()  # Convert scalar to list\n    else:\n        w_list = w.tolist()\n\n    # Compute the bias term b using the formula b = mean(y - w.T @ X)\n    b = ((y - (w @ X.T)).round(4)).mean()\n    \n    return (w_list, float(b))\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, 1, -1, -1])\n# alpha = np.array([0.5, 0.5, 0.5, 0.5])\n# print(compute_svm_parameters(X, y, alpha))\n```\n\nThis script defines the `compute_svm_parameters` function which computes the weight vector \\( \\mathbf{w} \\) and bias term \\( b \\) for a linear SVM using the provided training data \\( X \\), labels \\( y \\), and Lagrange multipliers \\( \\alpha \\). The results are rounded to 4 decimal places and returned as specified."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute Local Outlier Factor for each point in the dataset.\"\"\"\n    \n    def euclidean_distance(point1, point2):\n        \"\"\"Compute the Euclidean distance between two points.\"\"\"\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    def compute_pairwise_distances(X):\n        \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n        n = len(X)\n        distance_matrix = np.zeros((n, n))\n        for i in range(n):\n            for j in range(n):\n                distance_matrix[i][j] = euclidean_distance(X[i], X[j])\n        return distance_matrix\n    \n    def find_k_distance_and_neighbours(distance_matrix, k):\n        \"\"\"For each sample p, obtain its k-distance and the index list of those k nearest neighbours N_k(p).\"\"\"\n        n = len(distance_matrix)\n        k_distances = []\n        k_nearest_neighbours = []\n        \n        for i in range(n):\n            distances = [(distance_matrix[i][j], j) for j in range(n) if j != i]\n            sorted_distances = sorted(distances, key=lambda x: x[0])\n            k_dist = [sd[0] for sd in sorted_distances[:k]]\n            k_neigh = [sd[1] for sd in sorted_distances[:k]]\n            \n            k_distances.append(max(k_dist))\n            k_nearest_neighbours.append(k_neigh)\n        \n        return k_distances, k_nearest_neighbours\n    \n    def compute_reachability_distance(distance_matrix, k_distances, k_nearest_neighbours, k):\n        \"\"\"Compute the reachability distance between two points.\"\"\"\n        n = len(distance_matrix)\n        reachability_distances = {}\n        \n        for i in range(n):\n            reachability_distances[i] = {}\n            for j in range(n):\n                if j in k_nearest_neighbours[i]:\n                    reachability_distances[i][j] = max(k_distances[j], distance_matrix[i][j])\n                else:\n                    reachability_distances[i][j] = float('inf')\n        \n        return reachability_distances\n    \n    def compute_local_reachability_density(reachability_distances, k_nearest_neighbours, k):\n        \"\"\"Compute the Local Reachability Density (LRD) of p.\"\"\"\n        n = len(reachability_distances)\n        lrd = {}\n        \n        for i in range(n):\n            denom = sum(reachability_distances[i][j] for j in k_nearest_neighbours[i])\n            lrd[i] = k / denom if denom > 0 else 0\n        \n        return lrd\n    \n    def compute_local_outlier_factor(lrd, k_nearest_neighbours, k):\n        \"\"\"Compute the Local Outlier Factor for each point.\"\"\"\n        n = len(lrd)\n        lof_scores = []\n        \n        for i in range(n):\n            avg_lrd_q = sum(lrd[j] for j in k_nearest_neighbours[i]) / k\n            lof = avg_lrd_q / lrd[i] if lrd[i] > 0 else 0\n            lof_scores.append(lof)\n        \n        return lof_scores\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix.\n    distance_matrix = compute_pairwise_distances(data)\n    \n    # Step 2: For every sample p obtain its k-distance and the index list of those k nearest neighbours N_k(p).\n    k_distances, k_nearest_neighbours = find_k_distance_and_neighbours(distance_matrix, k)\n    \n    # Step 3: Compute the reachability distance between two points.\n    reachability_distances = compute_reachability_distance(distance_matrix, k_distances, k_nearest_neighbours, k)\n    \n    # Step 4: Compute the Local Reachability Density (LRD) of p.\n    lrd = compute_local_reachability_density(reachability_distances, k_nearest_neighbours, k)\n    \n    # Step 5: Compute the Local Outlier Factor.\n    lof_scores = compute_local_outlier_factor(lrd, k_nearest_neighbours, k)\n    \n    # Round all LOF scores to 4 decimals.\n    lof_scores_rounded = np.round(lof_scores, 4)\n    \n    # Find the indices of all samples whose LOF score is strictly larger than epsilon.\n    outlier_indices = sorted([i for i, score in enumerate(lof_scores_rounded) if score > epsilon])\n    \n    return lof_scores_rounded, outlier_indices\n\n# Example usage:\ndata = [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [8, 9],\n    [9, 8],\n    [10, 10]\n]\nk = 2\nepsilon = 1.5\nscores, outliers = local_outlier_factor(data, k, epsilon)\nprint(\"LOF Scores:\", scores)\nprint(\"Outliers:\", outliers)\n```\n\nThis code implements the Local Outlier Factor (LOF) algorithm from scratch. It computes the pair-wise Euclidean distance matrix, finds the k-distance and k-nearest neighbors for each point, calculates the reachability distances, Local Reachability Densities (LRDs), and finally the LOF scores. It also identifies and returns the indices of outliers based on a given epsilon value."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    X_train_all, y_train_all = [], []\n    X_val_all, y_val_all = [], []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        \n        # Generate training data for class c\n        x_train = np.random.uniform(low=base + 1, high=base + 9, size=(n_train, 1))\n        y_train = np.random.uniform(low=base + 1, high=base + 9, size=(n_train, 1))\n        X_train = np.hstack((x_train, y_train)).round(4)\n        y_train_labels = np.full(n_train, c)\n        \n        X_train_all.append(X_train)\n        y_train_all.append(y_train_labels)\n        \n        # Generate validation data for class c\n        x_val = np.random.uniform(low=base + 1, high=base + 9, size=(n_val, 1))\n        y_val = np.random.uniform(low=base + 1, high=base + 9, size=(n_val, 1))\n        X_val = np.hstack((x_val, y_val)).round(4)\n        y_val_labels = np.full(n_val, c)\n        \n        X_val_all.append(X_val)\n        y_val_all.append(y_val_labels)\n    \n    X_train_all = np.vstack(X_train_all)\n    y_train_all = np.concatenate(y_train_all)\n    X_val_all = np.vstack(X_val_all)\n    y_val_all = np.concatenate(y_val_all)\n    \n    return X_train_all, X_val_all, y_train_all, y_val_all\n\n# Example usage:\nif __name__ == \"__main__\":\n    m = 3  # Number of classes\n    n_train = 50  # Number of training samples per class\n    n_val = 20    # Number of validation samples per class\n    seed = 42     # Random seed for reproducibility\n\n    X_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\n    \n    print(\"X_train shape:\", X_train.shape)\n    print(\"X_val shape:\", X_val.shape)\n    print(\"y_train shape:\", y_train.shape)\n    print(\"y_val shape:\", y_val.shape)\n    print(\"First 5 training samples:\\n\", X_train[:5])\n    print(\"First 5 training labels:\\n\", y_train[:5])\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Step 1: Initialization\n    centres = X[:k].tolist()  # Initial centres are the first k points\n    \n    for i in range(k):\n        centres[i] = [round(coord, 4) for coord in centres[i]]\n    \n    labels = [-1] * m\n    for iter_num in range(max_iters):\n        # Step 2: Assignment step\n        new_labels = [-1] * m\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            min_dist = min(distances)\n            new_labels[i] = np.argmin(distances)\n        \n        # Check for convergence\n        if new_labels == labels:\n            break\n            \n        labels = new_labels\n        \n        # Step 3: Update step\n        for c in range(k):\n            points_in_cluster = X[[label == c for label in labels]]\n            if len(points_in_cluster) > 0:\n                centres[c] = np.mean(points_in_cluster, axis=0).round(4).tolist()\n            else:\n                centres[c] = centres[c]  # Keep the centre unchanged if no points are assigned to it\n    \n    return labels, centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# labels, centres = kmeans(X, 2)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\nThis script implements the deterministic K-Means clustering algorithm as described in the problem statement. It initializes the centroids using the first `k` points, performs the assignment and update steps iteratively, and ensures the results are reproducible by rounding the centroid coordinates to four decimal places."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    \n    if learning_rate == 0 or iterations == 0:\n        return [0.0] * X.shape[1], 0.0\n\n    m = X.shape[0]\n    n = X.shape[1]\n    weights = np.zeros(n)\n    bias = 0.0\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        \n        # Compute gradients\n        grad_w = (-2/m) * np.dot(X.T, residuals) + (l1_penalty * np.sign(weights)) + (2*l2_penalty * weights)\n        grad_b = (-2/m) * np.sum(residuals)\n        \n        # Update weights and bias\n        weights -= learning_rate * grad_w\n        bias -= learning_rate * grad_b\n\n    # Round the results to 4 decimal places\n    rounded_weights = [round(weight, 4) for weight in weights]\n    rounded_bias = round(bias, 4)\n\n    return rounded_weights, rounded_bias\n\n# Example usage:\n# X = np.array([[1, 2], [1, 3], [1, 4]])\n# y = np.array([3, 4, 5])\n# learning_rate = 0.01\n# iterations = 1000\n# l1_penalty = 0.1\n# l2_penalty = 0.1\n# result = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\n# print(result)\n```\n\nThis script defines the `elastic_net_regression` function which performs batch gradient descent to fit a linear model with Elastic-Net regularization. It handles the special cases where the learning rate or the number of iterations is zero, and ensures that all returned values are rounded to four decimal places."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert the input to a numpy array and add the bias term\n    x_with_bias = np.array([1] + x)\n    \n    # Iterate over each layer's weights\n    for layer_weights in weights[:-1]:  # Exclude the last layer for now\n        # Compute the dot product of the current input with each neuron's weights\n        # and apply ReLU activation\n        x_with_bias = np.maximum(0, np.dot(np.array(layer_weights), x_with_bias))\n        # Add the bias term for the next layer\n        x_with_bias = np.insert(x_with_bias, 0, 1)\n    \n    # For the last layer, just compute the dot product (linear activation)\n    last_layer_output = np.dot(np.array(weights[-1]), x_with_bias)\n    \n    # Round the result to 4 decimal places\n    if last_layer_output.size == 1:\n        return round(last_layer_output[0], 4)\n    else:\n        return [round(output, 4) for output in last_layer_output]\n\n# Example usage:\nweights_example = [\n    [[0, 0, 0], [0, 0, 0]],  # Layer 0 weights\n    [[0, 0, 0], [0, 0, 0]],  # Layer 1 weights\n    [[0, 0, 0], [0, 0, 0]]   # Output layer weights\n]\ninput_example = [1.5, -0.5]\nprint(neural_net_predict(weights_example, input_example))\n```\n\nThis script defines the `neural_net_predict` function, which performs a forward pass through a given fully-connected ReLU neural network, computing the output for a given input vector. The function handles the addition of bias terms, performs the necessary dot products and activation functions, and rounds the final result to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implements the K-Means clustering algorithm from scratch, returning only the final centroids.\n    \n    Parameters:\n        X (np.ndarray): The dataset as a 2-D NumPy array (n_samples \u00d7 n_features).\n        k (int): The number of clusters.\n        max_iters (int): Maximum number of iterations (default is 100).\n\n    Returns:\n        list[list[float]]: A list of lists representing the final centroids, sorted and rounded.\n    \"\"\"\n    # Step 1: Initialize centroids\n    centroids = X[:k].copy()  # Use the first k samples as initial centroids\n    \n    for _ in range(max_iters):\n        # Step 2: Assign each point to the nearest centroid\n        labels = np.argmin(((X[:, np.newaxis] - centroids[np.newaxis]) ** 2).sum(-1), axis=1)\n        \n        new_centroids = centroids.copy()\n        points_in_cluster = [np.array([X[i] for i in range(X.shape[0]) if labels[i] == j], dtype=float) for j in range(k)]\n        \n        # Step 3: Update centroids (set to mean of members' points)\n        for j in range(k):\n            if len(points_in_cluster[j]) > 0:\n                new_centroids[j] = points_in_cluster[j].mean(axis=0)\n            else:\n                # If a cluster is empty, keep the previous centroid\n                new_centroids[j] = centroids[j]\n                \n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-4):\n            break\n            \n        centroids = new_centroids\n\n    # Sort centroids lexicographically\n    centroids_sorted = sorted(map(tuple, centroids))\n    # Round centroids to 4 decimal places\n    centroids_rounded = [[round(f, 4) for f in c] for c in centroids_sorted]\n\n    return centroids_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample test data\n    X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n    k = 2\n    print(kmeans_centroids(X, k))\n```\n\n### Explanation:\n1. **Initialization:** The initial centroids are set to the first `k` samples in the dataset.\n2. **Assignment Step:** For each sample, compute the squared Euclidean distance to each centroid to determine which centroid is closest.\n3. **Update Step:** Compute the mean of the samples assigned to each centroid to get the new centroid position.\n4. **Convergence Check:** After updating centroids, check if the movement is below `1e-4`. If so, stop iterating.\n5. **Handling Empty Clusters:** If any cluster is empty, the corresponding centroid remains unchanged.\n6. **Sorting and Rounding:** Finally, sort the centroids in ascending lexicographical order and round them to 4 decimal places before returning.\n\n### Testing:\nTo test the implementation, you may use the provided example or create additional test cases with known correct outputs."}

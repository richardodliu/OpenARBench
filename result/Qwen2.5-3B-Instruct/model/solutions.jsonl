{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the weights for ridge regression using the closed-form solution.\n\n    Parameters:\n        data (np.ndarray): The input data array where the last column is the target y,\n                           and the preceding columns are the features X. The shape is (n_samples, n_features+1).\n        alpha (float): The regularization strength (default: 0.0, implying no regularization).\n\n    Returns:\n        list[float]: The coefficients of the fitted model rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    X_b = np.hstack([data, np.ones((n_samples, 1))])\n    try:\n        XTX_plus_alpha_I = np.linalg.inv(np.dot(X_b.T, X_b) + alpha * np.eye(n_features + 1))\n        weights = np.dot(np.dot(XTX_plus_alpha_I, X_b.T), data[:, -1][:, None])\n        weights = np.squeeze(weights)\n    except np.linalg.LinAlgError:\n        return [-1]\n    return [round(weight, 4) for weight in weights]"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0\n    for _ in range(n_iter):\n        for i in range(n_samples):\n            activation = np.sum((alpha[j] * y_train[j] * X_train[i] @ X_train[j] for j in range(n_samples)))\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n        if np.all(alpha >= 0):\n            break\n    w = [np.round((alpha[i] * y_train[i] * X_train[i]).sum() / n_samples, 4) for i in range(n_samples)]\n    return (w, np.round(b, 4))\nX_train = np.array([[1, 2], [2, 1], [-1, 1], [1, -1]])\ny_train = np.array([1, 1, -1, -1])"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity(u):\n        return u\n\n    def log(u):\n        return np.log(u)\n\n    def logit(u):\n        return np.log(u / (1 - u))\n\n    def inv_logit(v):\n        return 1 / (1 + np.exp(-v))\n\n    def deriv_identity(u):\n        return 1\n\n    def deriv_log(u):\n        return 1 / u\n\n    def deriv_logit(v):\n        exp_v = np.exp(v)\n        return exp_v / (1 + exp_v) ** 2\n    links = {'identity': {'link': identity, 'inv_link': inv_logit, 'deriv': deriv_identity}, 'log': {'link': log, 'inv_link': lambda x: np.exp(x), 'deriv': deriv_log}, 'logit': {'link': logit, 'inv_link': inv_logit, 'deriv': deriv_logit}}\n    return links\nlinks = glm_links()"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def grow_tree(node):\n        if len(node) < 3:\n            return node\n        features = np.random.choice(data.shape[1], size=1)[0]\n        values = data[node, features]\n        down_v = np.min(values)\n        up_v = np.max(values)\n        v = np.random.uniform(down_v, up_v)\n        left_indices = node[data[node, features] <= v]\n        right_indices = node[data[node, features] > v]\n        if len(left_indices) >= 3 or len(right_indices) >= 3:\n            node.left = grow_tree(left_indices)\n            node.right = grow_tree(right_indices)\n        else:\n            node.left = left_indices\n            node.right = right_indices\n        return node\n\n    def get_depth(node):\n        if isinstance(node, int):\n            return 0\n        return 1 + max(get_depth(node.left), get_depth(node.right))\n    node_indices = np.arange(data.shape[0])\n    root_node = grow_tree(node_indices)\n    depths = []\n    for sample_index in range(data.shape[0]):\n        depths.append(get_depth(root_node))\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import *\nfrom functools import reduce\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n\n    def generate_all_itemsets(transactions):\n        all_itemsets = set()\n        for transaction in transactions:\n            itemset = frozenset(transaction)\n            for i in range(1, len(transaction) + 1):\n                for subset in combinations(itemset, i):\n                    all_itemsets.add(frozenset(subset))\n        return all_itemsets\n    all_itemsets = generate_all_itemsets(transactions)\n    items_counts = Counter(reduce(lambda x, y: x | y, transactions))\n    min_support_count = math.ceil(minsup * len(transactions))\n\n    def calculate_support_for_itemsets(itemsets):\n        return {itemset: sum((1 for t in transactions if itemset.issubset(t))) for itemset in itemsets}\n    itemsets_support_counts = calculate_support_for_itemsets(all_itemsets)\n    frequent_itemsets = {itemset: support for (itemset, support) in itemsets_support_counts.items() if support >= min_support_count}\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    if k > len(data):\n        raise ValueError('k cannot be greater than the number of samples')\n    if k < 1:\n        raise ValueError('k must be at least 1')\n    centroids = data[np.random.choice(data.shape[0], size=k, replace=False)]\n    centroids = np.round(centroids, decimals=4)\n    prev_centroids = np.zeros_like(centroids)\n    labels = []\n    for iteration in range(max_iter):\n        new_labels = []\n        for (i, sample) in enumerate(data):\n            distances = ((sample - centroids[:, np.newaxis]) ** 2).sum(axis=0)\n            label = np.argmin(distances)\n            new_labels.append(label)\n            if label != prev_centroids[label].round(4):\n                centroids[label] = sample\n                prev_centroids[label] = centroids[label]\n        prev_centroids = np.round(centroids, decimals=4)\n        labels.extend(new_labels)\n        if all((np.allclose(prev_centroids[i], centroids[i]) for i in range(k))):\n            break\n        for i in range(k):\n            if len(data[labels == i]) == 0:\n                centroids[i] = data[np.random.randint(len(data))]\n                centroids[i] = np.round(centroids[i], decimals=4)\n                labels = [i] * len(data)\n    return (list(centroids.tolist()), labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    if k >= data.shape[1]:\n        return []\n    n_items = data.shape[1]\n    if criterion == 'cosine':\n        S = np.zeros((n_items, n_items))\n        mean_std_dict = defaultdict(lambda : [1000000000.0, 1000000000.0])\n        for i in range(n_items):\n            for j in range(i, n_items):\n                inter_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n                if len(inter_users) > 0:\n                    v1 = data[inter_users, i]\n                    v2 = data[inter_users, j]\n                    mean_std_dict[i][1] = np.std(v1)\n                    mean_std_dict[i][0] = np.mean(v1)\n                    mean_std_dict[j][1] = np.std(v2)\n                    mean_std_dict[j][0] = np.mean(v2)\n                    S[i, j] = np.dot(v1 - mean_std_dict[i][0], v2 - mean_std_dict[j][0]) / (np.sqrt(np.sum((v1 - mean_std_dict[i][0]) ** 2)) * np.sqrt(np.sum((v2 - mean_std_dict[j][0]) ** 2)))\n                    S[j, i] = S[i, j]\n        for i in range(n_items):\n            for j in range(i + 1, n_items):\n                if S[i, j] == 0 and S[j, i] != 0:\n                    S[i, j] = S[j, i] = 0\n    elif criterion == 'pearson':\n        S = np.corrcoef(data[:, :n_items], rowvar=False)\n    user_ratings = data[user_ind, :]\n    scores = defaultdict(float)\n    for idx in range(n_items):\n        if user_ratings[idx] == 0:\n            numerator = 0.0\n            denominator = 0.0\n            for jdx in range(n_items):\n                if user_ratings[jdx] != 0 and S[idx, jdx] != 0:\n                    numerator += float(user_ratings[jdx]) * float(S[idx, jdx])\n                    denominator += abs(S[idx, jdx])\n            if denominator == 0:\n                scores[idx] = 0\n            else:\n                scores[idx] = numerator / denominator\n    scores_sorted = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    return [idx for (idx, _) in scores_sorted[:k]]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (rows, cols) = X.shape\n    max_gain = -float('inf')\n    best_feature_idx = None\n    best_threshold = None\n    for col in range(cols):\n        for x in np.unique(X[:, col]):\n            mask = X[:, col] == x\n            if np.sum(mask) < 2:\n                continue\n            I_L = X[mask]\n            I_R = X[~mask]\n            gain_L = _calculate_gain(I_L, g[mask], h[mask], gamma, lam)\n            gain_R = _calculate_gain(I_R, g[~mask], h[~mask], gamma, lam)\n            gain = _calculate_regularised_loss(X) - gain_L - gain_R\n            if gain > max_gain:\n                max_gain = gain\n                best_feature_idx = col\n                best_threshold = x\n    if max_gain > 0:\n        return (best_feature_idx, best_threshold)\n    else:\n        return None\ndef _calculate_regularised_loss(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> float:\n    n = len(X)\n    numerator = np.dot(g, g)\n    denominator = np.dot(h, np.ones(n)) + lam\n    return numerator / denominator - gamma\nX = np.array([[1, 2], [2, 3], [3, 2], [4, 5]])\ng = np.array([1, -1, 1, -1])\nh = np.array([1, 1, 1, 1])\ngamma = 1.0\nlam = 1.0"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    sigmoid_x = [round(num, 4) for num in sigmoid_x]\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    gradient_x = [round(num, 4) for num in gradient_x]\n    return (sigmoid_x, gradient_x)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to `x_train` (each value must be 1 or -1).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble's training error <= epsilon.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or -1) for every value in `x_test`.\n    \"\"\"\n    N = len(x_train)\n    w = [1 / N] * N\n    weighted_sum = defaultdict(int)\n    training_weights = np.array(w)\n\n    def predict_stump(x):\n        midpoint_indices = np.arange(N - 1, dtype=float) / 2 + (N - 2) / 4\n        midpoints = (x_train[midpoint_indices] + x_train[midpoint_indices + 1]) / 2\n        errors = np.where(np.sign(midpoints - x) != y_train[midpoint_indices], 1, 0)\n        return errors\n    n_iterations = 0\n    while True:\n        n_iterations += 1\n        errors = predict_stump(x_train)\n        err = np.sum(training_weights[errors == 1])\n        alpha = 0.5 * math.log((1 - err) / err)\n        w = np.multiply(training_weights, np.exp(alpha * errors))\n        w /= np.sum(w)\n        if err <= epsilon:\n            break\n    predictions = np.sign(np.dot(w, [alpha * pred for (alpha, pred) in zip([alpha] * n_iterations, [y_train[i] for i in range(n_iterations)])]))\n    predictions = [-1 if p < 0 else 1 for p in predictions]\n    return predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, _) = X_train.shape\n    (_, m) = X_test.shape\n    K = compute_kernel_matrix(X_train, X_test, gamma)\n    decision_values = np.dot(alpha, y_train) @ K + b\n    predictions = -1 * np.sign(decision_values)\n    return predictions.tolist()\ndef compute_kernel_matrix(X_train: np.ndarray, X_test: np.ndarray, gamma: float) -> np.ndarray:\n    distances = -2 * np.dot(X_train, X_test.T) + np.sum(X_train ** 2, axis=1).reshape(-1, 1) + np.sum(X_test ** 2, axis=1).reshape(1, -1)\n    kernel_matrix = np.exp(distances / (-2 * gamma))\n    return kernel_matrix"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= min(len(X), len(X[0])):\n        return -1\n    X_np = np.array(X)\n    (U, sigma, Vt) = np.linalg.svd(X_np)\n    sigma_truncated = np.diag(np.append(sigma, [0.0] * (len(X_np) - k)))\n    X_hat = np.dot(U[:, :k] @ sigma_truncated, Vt[:k, :])\n    X_hat_list = [[round(item, 4) for item in row] for row in X_hat]\n    mse = np.mean((np.array(X) - X_hat) ** 2)\n    return (X_hat_list, round(mse, 4))"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: np.array, y_train: np.array, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    sorted_x_train = np.sort(x_train)\n    total_residuals = np.sum((y_train - y_train.mean()) ** 2)\n    best_rss = total_residuals\n    best_s = None\n    best_c1 = None\n    best_c2 = None\n    for i in range(1, len(sorted_x_train)):\n        s = (sorted_x_train[i - 1] + sorted_x_train[i]) / 2\n        c1 = np.mean(y_train[sorted_x_train <= s])\n        c2 = np.mean(y_train[sorted_x_train > s])\n        rss_after_split = ((y_train[sorted_x_train <= s] - c1) ** 2).sum() + ((y_train[sorted_x_train > s] - c2) ** 2).sum()\n        if rss_after_split < best_rss:\n            best_rss = rss_after_split\n            best_s = s\n            best_c1 = c1\n            best_c2 = c2\n    if best_rss >= epsilon:\n        return y_train.mean()\n    y_pred_query = best_c1 if x_query <= best_s else best_c2\n    return round(y_pred_query, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a numpy array with given shape filled with binary values (0.0 or 1.0)\n    according to the specified sparsity.\n\n    :param shape: Shape of the array.\n    :param sparsity: Probability of generating a 1.0 value; should be in [0, 1].\n    :param seed: Seed for numpy's random generator to ensure reproducible results.\n    :return: A numpy array with dtype=float containing 0.0 and 1.0 values.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    mask = np.random.rand(*shape) < sparsity\n    return mask.astype(np.float32)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        raise ValueError('Input data must be a NumPy array.')\n    num_samples = data.shape[0]\n    partition_index = num_samples // 2 if num_samples % 2 == 1 else num_samples // 2 - 1\n    (_, partition_index) = np.partition(data[:, d], partition_index)[:partition_index + 1]\n    pivot_index = np.argwhere(data == partition_index).squeeze(1)[0]\n    left_indices = data[:pivot_index + 1, d] < data[pivot_index, d].astype(float)\n    right_indices = data[pivot_index + 1:, d] >= data[pivot_index, d].astype(float)\n    left_indices = np.argsort(np.where(left_indices, pivot_index - np.arange(pivot_index + 1), np.nan))\n    right_indices = np.argsort(np.where(right_indices, pivot_index + np.arange(len(data) - pivot_index - 1), np.nan))\n    left_indices = left_indices[left_indices != np.inf]\n    right_indices = right_indices[right_indices != -np.inf]\n    return (pivot_index, left_indices.tolist(), right_indices.tolist())"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"\n    Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal should be 1D.'\n    assert frame_width > 0, 'Frame width must be positive.'\n    assert stride >= 1, 'Stride must be positive.'\n    assert len(x) >= frame_width, 'Signal length must be greater than or equal to frame width.'\n    shape = (len(x) - frame_width + 1, frame_width)\n    strides = x.strides * 2\n    framed_signal = as_strided(x, shape=shape, strides=strides)\n    if not writeable:\n        framed_signal.flags.writeable = False\n    return framed_signal"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | np.ndarray) -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or X.ndim != 2:\n        return False\n    if not all(((0 <= x <= 1).all() for x in X)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (num_samples, num_features) = X.shape\n    w = np.zeros(num_features)\n    s = np.zeros(num_features)\n    grad = None\n    iters = 0\n    while iters < max_iter:\n        if num_samples <= batch_size:\n            batch_indices = np.arange(num_samples)\n        else:\n            batch_indices = np.random.choice(num_samples, batch_size, replace=False)\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        predictions = X_batch @ w\n        grad = 1 / num_samples * (X_batch.T @ (predictions - y_batch))\n        s = rho * s + (1 - rho) * grad ** 2\n        w -= eta * grad / (np.sqrt(s) + eps_station)\n        iters += 1\n        if grad is not None and np.linalg.norm(grad) < epsilon:\n            break\n    return [round(elem, 4) for elem in w]\nX = np.random.rand(100, 5)\ny = X @ np.array([1, 2, 3, 4, 5]) + np.random.randn(100)"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Implement the SoftPlus activation function and its derivative.\n\n    :param x: A scalar, list, or NumPy array of real numbers\n    :param deriv: Whether to compute the derivative of the SoftPlus function\n    :return: The processed values as a list, or a single float if the input was a scalar\n    \"\"\"\n    x = np.array(x)\n\n    def log1px(x):\n        return np.where(x < 709, np.log1p(np.exp(x)), x - 1 / (1 + np.exp(-np.abs(x))))\n\n    def softplus_func(x):\n        return log1px(x)\n\n    def softplus_derivative(x):\n        return np.reciprocal(1 + np.exp(-x))\n    if deriv:\n        return softplus_derivative(x).round(4)\n    else:\n        return softplus_func(x).round(4)"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N == 1:\n        gram_counts = Counter((word for word in corpus))\n    else:\n        grams = zip(*[corpus[i:] for i in range(N)])\n        gram_counts = Counter(grams)\n    if 0 in gram_counts.values():\n        return float('-inf')\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        gram = tuple(sequence[i:i + N])\n        if gram_counts[gram] == 0:\n            return float('-inf')\n        log_prob = np.log2(gram_counts[gram] / gram_counts[tuple(sequence[i:i + N - 1])])\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n    \n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (m, n) = (len(X), len(X[0]))\n    num_features = degree + 1\n    X = np.column_stack((np.ones(m), X))\n    w = np.zeros(num_features)\n    for i in range(n_iterations):\n        predictions = X.dot(w)\n        w[0] = np.mean(y - predictions)\n        for j in range(1, num_features):\n            rho = X[:, j].dot(y - predictions)\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / X[:, j].dot(X[:, j])\n            if i == 0 or np.max(np.abs(w - w_old)) < tol:\n                break\n            w_old = w.copy()\n    return [round(w[i], 4) for i in range(num_features)]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef backward_beta(A: List[List[float]], B: List[List[float]], obs: List[int], t: int) -> List[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for a given time index t in a Hidden Markov Model (HMM).\n    \n    :param A: Transition probability matrix of shape (N, N), where N is the number of states.\n    :param B: Emission probability matrix of shape (N, M), where M is the number of possible observations.\n    :param obs: List of observation indices representing the sequence of observations.\n    :param t: Integer time index (0 <= t < T).\n    :return: A list of backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    beta_t = [0] * N\n    for i in range(N):\n        beta_t[i] = A[i][0] * B[i][obs[t]]\n    for k in range(t - 1, -1, -1):\n        t_k = k + 1\n        for j in range(N):\n            alpha_sum = sum([A[i][j] * B[j][obs[t_k]] * beta_t[i] for i in range(N)])\n            beta_t[j] = alpha_sum\n    return [round(x, 4) for x in beta_t]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    N = len(A)\n    if not obs or not A or (not B) or (not pi):\n        return 0.0\n    T = len(obs)\n    beta = [[0.0 for _ in range(N)] for _ in range(T)]\n    for j in range(N):\n        beta[T - 1][j] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t][i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n    prob = sum((pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N)))\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef forward_algorithm(S: List[float], A: List[List[float]], B: List[List[float]], observations: List[int]) -> float:\n    \"\"\"\n    Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (List[float]): Initial state probabilities.\n        A (List[List[float]]): State\u2013transition probabilities.\n        B (List[List[float]]): Emission probabilities.\n        observations (List[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or -1 on invalid input.\n    \"\"\"\n    num_states = len(A)\n    num_observations = len(observations)\n    if len(S) != num_states:\n        return -1\n    for row in A:\n        if len(row) != num_states:\n            return -1\n    if any((len(col) != num_observations for col in zip(*A))):\n        return -1\n    for row in B:\n        if len(row) != num_observations:\n            return -1\n    if num_observations == 0:\n        return -1\n    T = np.zeros((num_states, num_observations))\n    alpha = np.zeros((num_states, num_observations))\n    for s in range(num_states):\n        T[s, 0] = S[s] * B[s][observations[0]]\n        if T[s, 0] == 0:\n            return -1\n        alpha[s, 0] = T[s, 0]\n    for t in range(1, num_observations):\n        for s in range(num_states):\n            for s_prev in range(num_states):\n                T[s, t] += T[s_prev, t - 1] * A[s_prev][s]\n                alpha[s, t] = T[s, t] * B[s][observations[t]]\n            if alpha[s, t] == 0:\n                return -1\n    total_likelihood = sum(alpha[:, -1])\n    return round(total_likelihood, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.2, 0.8]]\nobservations = [1, 0]"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef sorted_tuple(item):\n    \"\"\"Sort items in each item-set.\"\"\"\n    return tuple(sorted(item))\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    root = defaultdict(int)\n    for (item, _) in frequent_items.items():\n        root[item] += 1\n\n    def build_fptree(frequent_items, parent):\n        fptree = defaultdict(int)\n        for (item, count) in frequent_items.items():\n            fptree[item] += count\n            fptree[parent] += count\n        return fptree\n\n    def split_tree(fptree):\n        for (item, count) in fptree.items():\n            if count == 0:\n                continue\n            yield ((item, count), split_tree(copy.deepcopy(fptree) - {item}))\n\n    def find_prefix_path(fptree, path):\n        current = fptree\n        for (item, count) in path:\n            while item not in current:\n                current = current[path]\n            current = current[item]\n        return current\n\n    def mine_conditional_trees(fptree, parent, prefix):\n        path = find_prefix_path(fptree, prefix)\n        cond_fptrees = {}\n        for (item, count) in split_tree(path):\n            (child_fptree, remaining) = build_fptree(frequent_items, item)\n            if remaining:\n                cond_fptrees[item] = mine_conditional_trees(child_fptree, item, prefix + [item])\n        return cond_fptrees\n    fptree = build_fptree(frequent_items, '')\n    cond_fptrees = mine_conditional_trees(fptree, '', [])\n    final_frequent_itemsets = []\n\n    def collect_sets(fptree, prefix, depth):\n        if depth > 0:\n            for (item, count) in fptree.items():\n                if count == 0:\n                    continue\n                collect_sets(cond_fptrees[item], prefix + [item], depth - 1)\n        else:\n            final_frequent_itemsets.append(prefix)\n    collect_sets(fptree, [], len(frequent_items))\n    final_frequent_itemsets.sort(key=sorted_tuple)\n    return final_frequent_itemsets\ntransactions = [['milk', 'bread', 'eggs'], ['bread', 'butter'], ['milk', 'bread', 'butter', 'eggs'], ['bread'], ['milk', 'eggs'], ['butter']]\nmin_support = 2"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > len(X_train):\n        return [-1]\n    distances = []\n    for test_sample in X_test:\n        dist_sum = 0\n        for train_sample in X_train:\n            dist_sum += sum(((test_sample[i] - train_sample[i]) ** 2 for i in range(len(train_sample))))\n        distances.append((dist_sum, y_train[dist_sum.index(min(dist_sum))]))\n    distances.sort()\n    nearest_neighbors = [dist[1] for dist in distances[:k]]\n    from collections import Counter\n    result_vote = Counter(nearest_neighbors).most_common()\n    if len(result_vote) > 0:\n        return [result_vote[0][0]]\n    else:\n        return [-1]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred += epsilon\n    if y.shape != y_pred.shape:\n        raise ValueError('The shapes of y and y_pred must match.')\n    if np.any(y_pred < 0) or np.any(y_pred > 1):\n        raise ValueError('Probabilities must be between 0 and 1.')\n    (n_samples, n_classes) = y.shape\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss / n_samples, 4)\ny_pred = [[0.2, 0.1, 0.7], [0.6, 0.2, 0.2], [0.1, 0.3, 0.6]]"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU...ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1...WL and b1...bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X.copy()\n    for (i, (current_weight, current_bias)) in enumerate(parameters.items(), 1):\n        Z = np.dot(parameters[f'W{i}'], A) + parameters[f'b{i}']\n        if i < len(parameters):\n            A = np.maximum(0, Z)\n        else:\n            A = 1 / (1 + np.exp(-Z))\n        caches.append((current_weight, Z))\n    return np.round(A, decimals=4).tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2_clipped = np.clip(A2, 1e-15, 1 - 1e-15)\n    cost = -1 / A2.shape[0] * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"\n    Return the epsilon-soft (\u03b5-soft or \u03b5-greedy) probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a single state.\n    epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the epsilon-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(Q, np.ndarray):\n        Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / n\n    probabilities = [1 - epsilon + epsilon / n]\n    for _ in range(n - 1):\n        probabilities.append(epsilon / n)\n    total = sum(probabilities)\n    probabilities = [(p - total + 1) * epsilon / n for p in probabilities]\n    return [round(p, 4) for p in probabilities]"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    vote_counts = {class_label: [0] * num_samples for class_label in set(predictions[0])}\n    for sample_predictions in predictions:\n        for i in range(num_samples):\n            class_label = sample_predictions[i]\n            vote_counts[class_label][i] += 1\n    aggregated_predictions = []\n    for i in range(num_samples):\n        class_labels_with_votes = [(class_label, count) for (class_label, count) in vote_counts.items() if count[i] > 0]\n        if not class_labels_with_votes:\n            raise ValueError('No valid votes found for sample at index {}'.format(i))\n        sorted_class_labels_with_votes = sorted(class_labels_with_votes, key=lambda x: (x[1], x[0]))\n        aggregated_predictions.append(sorted_class_labels_with_votes[0][0])\n    return aggregated_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.array(z)\n    softplus_z = np.logaddexp(0, z)\n    softplus_z_rounded = np.round(softplus_z, 4)\n    if z.ndim > 0:\n        return softplus_z_rounded.tolist()\n    else:\n        return float(softplus_z_rounded)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not policy.get('ev_estimates'):\n        return np.nan\n    true_arms = bandit['arm_evs']\n    est_arms = policy['ev_estimates']\n    sorted_indices = sorted(est_arms.keys())\n    sum_squared_errors = sum(((true_arms[index] - est_arms[index]) ** 2 for index in sorted_indices))\n    mse_value = sum_squared_errors / len(sorted_indices)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = Counter()\n    bigrams = defaultdict(Counter)\n    trigrams = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        if len(tokens) < N:\n            continue\n        vocab.update(tokens)\n        for i in range(len(tokens) - N + 1):\n            grams = tuple(tokens[i:i + N])\n            bigrams[grams[:-1]][grams[-1]] += 1\n            if i + 2 < len(tokens):\n                trigrams[grams[:-2]][grams[-1]] += 1\n    vocab['<UNK>'] = 0\n    for token in set(vocab.keys()):\n        if token not in bigrams[()]:\n            bigrams[()].update([(token, 1)])\n            vocab[token] = 1\n        else:\n            vocab[token] = bigrams[()].get(token, 0) + 1\n    for grams in trigrams:\n        for token in grams:\n            if token not in bigrams[grams]:\n                bigrams[grams].update([(token, 1)])\n                vocab[token] = bigrams[()].get(token, 0) + 1\n            else:\n                vocab[token] = bigrams[grams].get(token, 0) + 1\n    vocab_list = list(vocab.items())\n    bigrams_list = [list(bigrams[gram].items()) for gram in bigrams]\n    trigrams_list = [list(trigrams[gram].items()) for gram in trigrams]\n    sentence_tokens = sequence.split()\n    sentence_length = min(len(sentence_tokens), N)\n    total_likelihood = 0.0\n    for n in range(1, sentence_length + 1):\n        for (grams, count) in zip([sentence_tokens[:n], sentence_tokens[n - 1:-1], sentence_tokens[n - 2:n]], [bigrams_list, trigrams_list, bigrams_list]):\n            prob_sum = K\n            for (gram, freq) in grams:\n                context_freq = freq[gram] + K if gram == '<UNK>' else freq[gram] + vocab[gram]\n                prob_sum += math.log((context_freq + K) / (vocab[gram] + K * len(vocab))) if context_freq > 0 else 0\n            total_likelihood += prob_sum\n    return round(total_likelihood, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def squared_loss(W, H):\n        return np.linalg.norm(X - np.dot(W, H)) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n    for _ in range(max_iter):\n        WH = np.dot(W, H.T)\n        W_new = np.linalg.solve(np.dot(W, H) + alpha * np.eye(K), WH.T)\n        HW = np.dot(W.T, H)\n        H_new = np.linalg.solve(np.dot(H, W.T) + alpha * np.eye(M), HW)\n        W = W_new\n        H = H_new\n        loss = squared_loss(W, H)\n        if abs(loss - prev_loss) < tol:\n            break\n        prev_loss = loss\n    X_recon = np.around(np.dot(W, H), decimals=4).tolist()\n    return X_recon\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nK = 2\ntol = 0.0001\nmax_iter = 200"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    indices = np.arange(X.shape[0])\n    np.random.shuffle(indices)\n    centroids = []\n    centroids.append(X[indices[0]])\n    for i in range(1, K):\n        distances = sum(np.linalg.norm(X - centroids[-1], axis=1) ** 2)\n        probabilities = distances / distances.sum()\n        probabilities /= probabilities.sum()\n        centroids.append(X[np.random.choice(indices, p=probabilities)])\n    centroids = np.array(centroids)\n    old_centroids = np.zeros_like(centroids)\n    for _ in range(max_iter):\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=-1)\n        assignments = np.argmin(distances, axis=1)\n        for j in range(K):\n            points_in_cluster = X[assignments == j]\n            if len(points_in_cluster) > 0:\n                centroids[j] = np.mean(points_in_cluster, axis=0)\n        if (centroids == old_centroids).all():\n            break\n        old_centroids = centroids.copy()\n    sorted_centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x[1]))\n    return [[round(d, 4) for d in row] for row in sorted_centroids]\nX = np.random.rand(100, 2)\nK = 3"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\nvocabulary = {' ': 0, 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9}\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string to a fixed-length list of integer token IDs.\n    \n    Args:\n        text (str): Raw text string.\n        time_steps (int): Fixed sequence length.\n        vocabulary (dict[str, int]): Mapping from characters to their respective IDs.\n    \n    Returns:\n        list[int]: List of integer token IDs with fixed length.\n    \"\"\"\n    text = text[:time_steps]\n    result = [vocabulary[char] if char in vocabulary else 0 for char in text] + [0] * max(0, time_steps - len(result))\n    return result\ndef int_to_string(indices: list[int], inverse_vocabulary: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer IDs back to a text string.\n    \n    Args:\n        indices (list[int]): List of integer token IDs.\n        inverse_vocabulary (dict[int, str]): Mapping from IDs to characters.\n    \n    Returns:\n        str: Decoded string without padding tokens.\n    \"\"\"\n    return ''.join((inverse_vocabulary[idx] for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes, predicts and decodes a raw text string.\n    \n    Args:\n        model: A model that takes a batch of sequences as input and outputs predictions.\n        input_vocabulary (dict[str, int]): Mapping from characters to their respective IDs.\n        inv_output_vocabulary (dict[int, str]): Mapping from IDs to characters.\n        text (str): Raw text string used as input.\n    \n    Returns:\n        str: Decoded prediction string.\n    \"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    data = np.array([encoded_text])\n    data = np.expand_dims(data, axis=1)\n    data = np.expand_dims(data, axis=-1)\n    data = data.astype('int32')\n    predictions = model.predict(data)\n    indices = np.argmax(predictions[0], axis=-1)\n    decoded_prediction = int_to_string(indices, inv_output_vocabulary)\n    return decoded_prediction"}
{"task_id": 113, "completion_id": 0, "solution": ""}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    if len(y.shape) == 1:\n        y = y[:, np.newaxis]\n    if len(w.shape) == 1:\n        w = w[:, np.newaxis]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    y = np.clip(y, 0, 1)\n    m = y.size\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    return (round(loss, 4), gradient.tolist())\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 0, 1])\nw = np.array([0.5, 0.5])"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef find_best_stump(X, y):\n    \"\"\"Find the best decision stump to classify the given dataset\"\"\"\n    best_stump = {}\n    min_error = float('inf')\n    for i in range(X.shape[1]):\n        thresholds = np.sort(np.unique(X[:, i]))\n        for j in range(1, len(thresholds)):\n            threshold = (thresholds[j - 1] + thresholds[j]) / 2\n            y_pred = ((X[:, i] <= threshold) * 2 - 1) * y\n            error = np.mean(y_pred != y)\n            if error < min_error:\n                min_error = error\n                best_stump['feature_index'] = i\n                best_stump['threshold'] = threshold\n                best_stump['error'] = error\n    return (best_stump, min_error)\ndef decision_stump_predict(stump, X):\n    \"\"\"Predict the label based on the decision stump classifier.\"\"\"\n    y_pred = np.sign(np.sum(X[:, stump['feature_index']] >= stump['threshold']) * stump['error'] - stump['error'])\n    return y_pred\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    weak_classifiers = []\n    for _ in range(n_clf):\n        weighted_y = weights * y_train\n        (best_stump, error) = find_best_stump(X_train, weighted_y)\n        if error == 0:\n            alpha_t = 0\n        else:\n            alpha_t = 0.5 * np.log((1 - error) / error)\n        weak_classifiers.append((best_stump, alpha_t))\n        predictions = decision_stump_predict(best_stump, X_train)\n        weights *= np.exp(-alpha_t * (y_train * predictions))\n        weights /= np.sum(weights)\n    y_preds = np.zeros(X_test.shape[0])\n    for weak_classifier in weak_classifiers:\n        y_preds += weak_classifier[1] * decision_stump_predict(weak_classifier[0], X_test)\n    y_preds = np.sign(y_preds)\n    return y_preds.tolist()\nX_train = np.array([[1, 2], [2, -1], [3, 1], [4, -2], [5, 3]])\ny_train = np.array([1, 1, 1, -1, 1])\nX_test = np.array([[2, 0], [5, 2], [-1, 1]])"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (m, d) = X.shape\n    mu = np.mean(X, axis=0)\n    class_means = {}\n    for i in range(m):\n        yi = y[i]\n        if yi in class_means:\n            class_means[yi] += X[i]\n        else:\n            class_means[yi] = X[i]\n    class_means = {yi: cm / len(y[y == yi]) for (yi, cm) in class_means.items()}\n    sw = np.zeros((d, d))\n    for (xi, yi) in zip(X, y):\n        diff = x - mu\n        diff = diff.reshape(-1, 1)\n        sw += np.dot((xi - class_means[yi]).reshape(1, -1), (xi - class_means[yi]).reshape(-1, 1).T)\n    sb = np.zeros((d, d))\n    N = np.sum([len(y[y == yi]) for yi in class_means])\n    for yi in class_means:\n        diff = class_means[yi] - mu\n        sb += np.dot(len(y[y == yi]) * diff.reshape(-1, 1), diff.reshape(1, -1).T)\n    sw_inv = np.linalg.pinv(sw)\n    A = np.dot(sw_inv, sb)\n    (evals, evecs) = np.linalg.eigh(A)\n    idx = np.argsort(evals)[::-1]\n    evecs = evecs[:, idx]\n    evals = evals[idx]\n    for vec in evecs.T:\n        if vec[0] < 0:\n            evecs[:, 0] *= -1\n    if n_components > 0:\n        evecs = evecs[:, :n_components]\n    projected_data = np.dot(X - mu, evecs)\n    return [[round(num, 4) for num in row] for row in projected_data]\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque, defaultdict\ndef escape_fire_maze(grid: list[str]) -> int:\n\n    def simulate_fire_spread():\n        n = len(grid)\n        visited = [[False] * n for _ in range(n)]\n        queue = deque()\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 'F':\n                    queue.append((i, j))\n                    visited[i][j] = True\n        steps = 0\n        directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        while queue and steps < n:\n            for _ in range(len(queue)):\n                (x, y) = queue.popleft()\n                if grid[x][y] == 'F':\n                    grid[x][y] = '#'\n                for (dx, dy) in directions:\n                    (nx, ny) = (x + dx, y + dy)\n                    if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (grid[nx][ny] == '.'):\n                        visited[nx][ny] = True\n                        queue.append((nx, ny))\n            steps += 1\n        return steps\n\n    def bfs(start_x, start_y):\n        n = len(grid)\n        visited = [[False] * n for _ in range(n)]\n        queue = deque([(start_x, start_y, 0)])\n        while queue:\n            (x, y, step) = queue.popleft()\n            if x == n - 1 and y == n - 1:\n                return step\n            visited[x][y] = True\n            for (dx, dy) in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]):\n                    if grid[nx][ny] != '#' and grid[nx][ny] != 'F':\n                        visited[nx][ny] = True\n                        queue.append((nx, ny, step + 1))\n        return -1\n    n = len(grid)\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    fire_cells = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == 'F']\n    if any(fire_cells):\n        min_steps = simulate_fire_spread()\n        if min_steps >= n:\n            return -1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                grid[i][j] = '#'\n    result = bfs(0, 0)\n    return result"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implements the k-Nearest Neighbors (k-NN) classifier\n    for predicting class labels based on the given training data.\n\n    Parameters:\n    X_train (np.ndarray): Training features.\n    y_train (np.ndarray): Training labels.\n    X_test (np.ndarray): Test features.\n    k (int): Number of neighbors to consider.\n    metric (str): Distance metric type. One of {'euclidean', 'manhattan', 'cosine'} or 'unknown'.\n    \n    Returns:\n    np.ndarray: Predicted labels for the test set.\n    \"\"\"\n    if metric == 'unknown':\n        metric = 'euclidean'\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        raise ValueError(f\"Invalid metric '{metric}'. Must be one of 'euclidean', 'manhattan', 'cosine'.\")\n    X_train = np.asarray(X_train)\n    y_train = np.asarray(y_train)\n    X_test = np.asarray(X_test)\n    distances = np.linalg.norm(X_test[:, np.newaxis] - X_train, axis=-1)\n    closest_indices = np.argsort(distances, axis=1)[:, :k]\n    k_nearest_labels = y_train[closest_indices]\n    predictions = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=1, arr=k_nearest_labels)\n    return predictions\nX_train = np.array([[1, 2], [2, 3], [3, 1]])\ny_train = np.array([0, 1, 0])\nX_test = np.array([[1.5, 2.5], [4, 5]])\npredictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    if k > len(X):\n        k = len(X)\n    distances = []\n    for (i, test_sample) in enumerate(X_test):\n        distances_for_test_sample = []\n        for (j, train_sample) in enumerate(X):\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((test_sample - train_sample) ** 2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(test_sample - train_sample))\n            else:\n                norm_x = np.linalg.norm(train_sample)\n                norm_y = np.linalg.norm(X[:, None] - test_sample)\n                cos_sim = (train_sample.dot(test_sample) + np.finfo(float).eps) / (norm_x * norm_y)\n                dist = 1 - cos_sim\n            distances_for_test_sample.append((dist, y[j]))\n        sorted_distances = sorted(distances_for_test_sample)[:k]\n        distances.append(sorted_distances)\n    predictions = []\n    for d in distances:\n        labels = [label for (_, label) in d]\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        predicted_label = unique_labels[np.argmax(counts)]\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n    \n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n    \n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n    \n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    if state.shape[0] != weights['W1'].shape[0]:\n        raise ValueError('State dimension does not match expected input for W1')\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    h1_relu = np.maximum(h1, 0)\n    h2 = np.dot(h1_relu, weights['W2']) + weights['b2']\n    h2_relu = np.maximum(h2, 0)\n    action = np.dot(h2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    return [round(value, 4) for value in action_tanh]"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    b = np.zeros(n)\n    if fit_intercept:\n        for i in range(m):\n            y[i] -= np.mean(y)\n        X = np.hstack((np.ones((m, 1)), X))\n    for _ in range(max_iters):\n        residuals = y - b - X.dot(b[1:])\n        b[1:] += np.sign(b[1:]) * np.maximum(np.abs(residuals) - lambda_param * np.sum(X, axis=0)[1:] / m, 0.0) / np.sum(X[:, 1:] ** 2, axis=0)\n    bias = b[0]\n    weights = b[1:].tolist()\n    return [round(num, 4) for num in weights + [bias]]"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"\n    Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        return -1\n    if x.shape[0] != y.shape[0]:\n        return -1\n    hamming = np.sum(x != y)\n    normalized_hamming = hamming / len(x)\n    return round(normalized_hamming, 4)\nx = [1, 0, 1, 0, 0, 1]\ny = [1, 0, 1, 1, 0, 0]"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine-series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if coefficients is not None:\n        if len(coefficients) != N - 1:\n            raise ValueError(\"Length of 'coefficients' must match N-1\")\n        return [sum((coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(N - 1))) for n in range(N)]\n    else:\n        if N <= 0:\n            raise ValueError('N must be a positive integer')\n        if window == 'hamming':\n            return [0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n        elif window == 'hann':\n            return [0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n        elif window == 'blackman_harris':\n            (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n            return [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n        elif window == 'generalized_cosine':\n            if coefficients is None or len(coefficients) != N - 1:\n                raise ValueError(\"Coefficients must be provided for 'generalized_cosine' and have length N-1\")\n            return [sum((coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(N - 1))) for n in range(N)]\n        else:\n            raise ValueError(f\"Unknown window type '{window}'\")"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef compute_loss(X, y, w, b):\n    \"\"\"Calculate the negative log-likelihood loss.\"\"\"\n    m = X.shape[0]\n    y_pred = sigmoid(np.dot(X, w) + b)\n    log_lik = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    return log_lik / m\ndef compute_gradient(X, y, w, b):\n    \"\"\"Calculate the gradients of the negative log-likelihood loss.\"\"\"\n    (m, n) = X.shape\n    y_pred = sigmoid(np.dot(X, w) + b)\n    grad_w = 1 / m * np.dot(X.T, y_pred - y)\n    grad_b = 1 / m * np.sum(y_pred - y)\n    return (grad_w, grad_b)\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train_intercept = np.hstack((np.ones((X_train.shape[0], 1)), np.array(X_train)))\n    X_test_intercept = np.hstack((np.ones((X_test.shape[0], 1)), np.array(X_test)))\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('Training labels must be exactly two distinct values')\n    y_train_pos = (y_train == unique_labels[1]).astype(int)\n    y_train_neg = (y_train == unique_labels[0]).astype(int)\n    m = X_train_intercept.shape[0]\n    w = np.zeros(X_train_intercept.shape[1])\n    b = 0\n    losses = []\n    for _ in range(epochs):\n        idx = np.random.choice(m, batch_size, replace=False)\n        X_batch = X_train_intercept[idx]\n        y_batch = np.array([y_train_neg[idx], y_train_pos[idx]])\n        (grad_w, grad_b) = compute_gradient(X_batch, y_batch, w, b)\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n        loss = compute_loss(X_batch, y_batch, w, b)\n        losses.append(loss)\n        if len(set(losses[-10:])) == 1:\n            break\n    y_pred_probs = sigmoid(np.dot(X_test_intercept, w) + b)\n    y_pred = (y_pred_probs >= 0.5).astype(int)\n    y_train_unique = np.unique(y_train)\n    y_train_mapping = dict(zip(y_train_unique, [0, 1]))\n    y_test_mapping = dict(zip(y_train_unique, [-1, 1]))\n    y_pred_mapped = [y_test_mapping[y_train_unique[p]] for p in y_pred]\n    return y_pred_mapped\nX_train = [[1, 1], [2, 2], [3, 3], [4, 4]]\ny_train = [0, 1, 0, 1]\nX_test = [[2.3, 2.3], [3.1, 3.1], [4.2, 4.2]]"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    This function implements AdaBoost with decision stumps on the provided training data.\n    It returns predictions for the given test set based on the trained model.\n    \"\"\"\n    (m, d) = np.shape(X_train)\n    initial_weights = np.full(m, 1 / m)\n    N = np.ones(m)\n    y_train = np.array(y_train)\n    models_predictions = np.zeros((m, n_estimators))\n    for t in range(n_estimators):\n        best_error = float('inf')\n        feature_indices = np.arange(d)\n        thresholds = [i for i in range(d)]\n        best_feature = (-1, -1, -1)\n        for f in feature_indices:\n            for th in thresholds:\n                predictions = np.array([1 if x[f] < th else -1 for x in X_train])\n                errors = initial_weights[y_train != predictions]\n                error = sum(errors)\n                if error > 0.5:\n                    continue\n                error = (1 - error) / (1 + error)\n                if error < best_error:\n                    best_error = error\n                    best_feature = (f, th, 1 if predictions[y_train == -1][0] == 1 else -1)\n        eta = 0.5 * np.log((1 - best_error) / max(error, 1e-10))\n        predictions = np.array([1 if x[best_feature[0]] < best_feature[1] else -1 for x in X_train])\n        models_predictions[:, t] = predictions * y_train\n        N *= np.exp(-eta * models_predictions[:, t] * y_train)\n        N /= np.sum(N)\n        if best_error == 0:\n            break\n    test_predictions = []\n    for x in X_test:\n        prediction = 0\n        for i in range(n_estimators):\n            prediction += N[i] * models_predictions[i, i] * best_feature[2]\n        if prediction > 0:\n            test_predictions.append(1)\n        else:\n            test_predictions.append(0)\n    return test_predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    np.random.seed(seed)\n    bounds = np.linspace(-1, 1, n_dims)\n    positions = np.random.uniform(low=bounds, high=bounds, size=(num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    p_best_pos = positions.copy()\n    g_best_pos = positions[np.argmin(positions.sum(axis=1))]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for (i, pos) in enumerate(positions):\n            cost = np.sum(pos ** 2)\n            if cost < np.sum(p_best_pos[i] ** 2):\n                p_best_pos[i] = pos.copy()\n            if cost < np.sum(g_best_pos ** 2):\n                g_best_pos = pos.copy()\n            (r1, r2) = np.random.rand(2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (p_best_pos[i] - pos) + c2 * r2 * (g_best_pos - pos)\n            positions[i] += velocities[i]\n        positions = np.clip(positions, bounds[:, None], None)\n    return round(np.min(positions.sum(axis=1)), 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    if k <= 0 or k > len(X_train):\n        k = len(X_train)\n    distances = np.sqrt(((X_train_np - np.tile(np.array(X_test), (len(X_train), 1, 1))) ** 2).sum(axis=2))\n    top_k_indices = np.argpartition(distances, k)[:k]\n    k_neighbors_targets = y_train_np[top_k_indices]\n    if task == 'classification':\n        predictions = [Counter(k_neighbors_targets[:, i]).most_common(1)[0][0] for i in range(len(X_test))]\n    elif task == 'regression':\n        predictions = [round(np.mean(k_neighbors_targets[:, i]), 4) for i in range(len(X_test))]\n    else:\n        raise ValueError(\"task must be 'classification' or 'regression'\")\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef gini(p):\n    \"\"\"Compute the Gini impurity for a binary classification.\"\"\"\n    return p * (1 - p) + (1 - p) * (1 - (1 - p))\ndef infogain(parent_gini, left_child_gini, right_child_gini):\n    \"\"\"Calculate information gain given the parent's Gini impurity and children's.\"\"\"\n    return parent_gini - (left_child_gini * len(left_child_gini) / len(y_train) + right_child_gini * len(right_child_gini) / len(y_train))\ndef find_best_split(X_train, y_train, n_features):\n    \"\"\"Find the best split point for a given dataset.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    parent_gini = gini(np.bincount(y_train).astype('float') / len(y_train))\n    best_infogain = 0\n    best_criteria = None\n    best_left = None\n    best_right = None\n    (best_idx, best_val) = (None, None)\n    for (feat, _) in enumerate(X_train.T):\n        X_sorted = np.sort(X_train[:, feat])\n        for idx in range(1, len(X_sorted)):\n            val = (X_sorted[idx - 1] + X_sorted[idx]) / 2\n            thresholds = [val]\n            if idx < len(X_sorted) - 1:\n                thresholds.append(X_sorted[idx + 1])\n            for threshold in thresholds:\n                left_child = y_train[X_train[:, feat] < threshold]\n                right_child = y_train[X_train[:, feat] >= threshold]\n                left_count = np.bincount(left_child, minlength=2)[1]\n                right_count = np.bincount(right_child, minlength=2)[1]\n                parent_count = np.bincount(y_train, minlength=2)[1]\n                weight = len(left_child) / len(y_train)\n                left_gini = gini(left_count / weight)\n                right_gini = gini(right_count / weight)\n                candidate_infogain = infogain(parent_gini, left_gini, right_gini)\n                if candidate_infogain > best_infogain:\n                    best_infogain = candidate_infogain\n                    best_idx = idx\n                    best_val = val\n                    best_left = left_child\n                    best_right = right_child\n    return {'best_idx': best_idx, 'best_val': best_val, 'best_gain': best_infogain, 'best_left': best_left, 'best_right': best_right}\ndef predict(x, node):\n    \"\"\"Predict a single sample using the tree.\"\"\"\n    if node['is_leaf']:\n        return node['value']\n    if x[node['feat']] < node['threshold']:\n        return predict(x, node['left'])\n    return predict(x, node['right'])\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def unique_counts(y):\n        \"\"\"Count occurrences of each unique item in y.\"\"\"\n        return np.unique(y, return_counts=True)\n    root_node = build_tree(find_best_split(X_train, y_train, 2), max_depth)\n    predictions = [predict(x, root_node) for x in X_test]\n    return predictions\nX_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny_train = np.array([0, 0, 1, 1])\nX_test = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\npredictions = decision_tree_predict(X_train, y_train, X_test, max_depth=2)"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import mode\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimize the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def gini_impurity(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        size = float(counts.sum())\n        gini = 1 - sum((counts / size) ** 2)\n        return gini\n    best_gini = gini_impurity(y)\n    (best_feature, best_threshold, best_split) = (-1, None, None)\n    for feature_index in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_index])\n        unique_values = np.unique(X[sorted_indices, feature_index])\n        if len(unique_values) == 1:\n            continue\n        left_ginis = []\n        right_ginis = []\n        for threshold in sorted(unique_values):\n            left_mask = X[sorted_indices, feature_index] <= threshold\n            right_mask = ~left_mask\n            n_left = left_mask.sum()\n            n_right = ~left_mask.sum()\n            if n_left == 0 or n_right == 0:\n                continue\n            left_y = y[sorted_indices][left_mask]\n            right_y = y[sorted_indices][right_mask]\n            left_ginis.append(gini_impurity(left_y))\n            right_ginis.append(gini_impurity(right_y))\n        for (left_gini, right_gini) in zip(left_ginis, right_ginis):\n            combined_gini = n_left / (n_left + n_right) * left_gini + n_right / (n_left + n_right) * right_gini\n            if combined_gini < best_gini:\n                best_gini = combined_gini\n                best_feature = feature_index\n                best_threshold = threshold\n                best_split = combined_gini\n    if best_feature != -1:\n        best_threshold = np.round(best_threshold, 4)\n        best_gini = np.round(best_split, 4)\n        return (best_feature, best_threshold, best_gini)\n    else:\n        return (-1, None, np.round(gini_impurity(y), 4))\nX = [[1.0, 2.0], [1.0, 3.5], [4.0, 2.0]]\ny = [0, 0, 1]"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n\n    def euclidean(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        x = np.array(x)\n        y = np.array(y)\n        if len(x) != len(y) or any((not isinstance(e, (int, float)) for e in x + y)):\n            return -1\n        dist = np.sqrt(np.sum((x - y) ** 2))\n        return round(dist, 4)\n\n    def manhattan(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        x = np.array(x)\n        y = np.array(y)\n        if len(x) != len(y) or any((not isinstance(e, (int, float)) for e in x + y)):\n            return -1\n        dist = np.sum(np.abs(x - y))\n        return round(dist, 4)\n\n    def chebyshev(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        x = np.array(x)\n        y = np.array(y)\n        if len(x) != len(y) or any((not isinstance(e, (int, float)) for e in x + y)):\n            return -1\n        dist = np.max(np.abs(x - y))\n        return round(dist, 4)\n\n    def cosine(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        x = np.array(x)\n        y = np.array(y)\n        if len(x) != len(y) or any((not isinstance(e, (int, float)) for e in x + y)) or x == 0 or (y == 0):\n            return -1\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        cosine_sim = dot_product / (norm_x * norm_y)\n        cosine_dist = 1 - cosine_sim\n        return round(cosine_dist, 4)\n    if name == 'euclidean':\n        return euclidean\n    elif name == 'manhattan':\n        return manhattan\n    elif name == 'chebyshev':\n        return chebyshev\n    elif name == 'cosine':\n        return cosine\n    else:\n        return -1"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action and (not cont_action):\n        n_dimensions = len(env.action_space.shape)\n        n_actions_per_dim = [env.action_space[i].n if isinstance(env.action_space[i], np.ndarray) else env.action_space.shape[i] for i in range(n_dimensions)]\n        action_ids = list(product(*[range(env.action_space[i].n) if isinstance(env.action_space[i], np.ndarray) else range(env.action_space.shape[i]) for i in range(n_dimensions)]))\n    elif md_action and cont_action:\n        n_dimensions = len(env.action_space.shape)\n        n_actions_per_dim = [np.inf] * n_dimensions\n        action_ids = None\n    else:\n        n_actions_per_dim = []\n        if md_action:\n            action_ids = []\n            for subspace in env.action_space.spaces:\n                n_actions = subspace.n if isinstance(subspace, np.ndarray) else subspace.shape[0]\n                n_actions_per_dim.append(n_actions)\n                action_ids.append(list(range(n_actions)))\n        else:\n            n_actions_per_dim = [env.action_space.n if isinstance(env.action_space, np.ndarray) else env.action_space.shape[0]]\n            if isinstance(env.action_space, np.ndarray):\n                action_ids = list(range(env.action_space.n))\n            else:\n                action_ids = list(range(env.action_space.shape[0]))\n        action_dim = len(n_actions_per_dim)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = [[0.0 for _ in range(V)] for _ in range(len(phi[0]))]\n    for n in range(len(phi[0])):\n        topic_counts = [0.0 for _ in range(V)]\n        for d in range(len(corpus)):\n            if corpus[d][0] in range(V):\n                topic_counts[corpus[d][0]] += phi[d][n]\n        for v in range(V):\n            beta[n][v] = topic_counts[v] / len(corpus)\n    for n in range(len(beta)):\n        total = sum(beta[n])\n        for v in range(V):\n            beta[n][v] /= total\n    return [[round(val, 4) for val in row] for row in beta]"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 ... k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    old_cost = cost = get_cost(X, medoids)\n    while True:\n        best_swap = None\n        best_cost_improvement = float('-inf')\n        for i in range(k):\n            for j in range(i + 1, len(medoids)):\n                new_medoids = np.copy(medoids)\n                (medoids[i], medoids[j]) = (medoids[j], medoids[i])\n                new_cost = get_cost(X, medoids)\n                if new_cost < cost:\n                    cost = new_cost\n                    best_cost_improvement = new_cost - cost\n                    best_swap = ((i, j), (-best_cost_improvement, new_cost))\n        if best_cost_improvement <= 0:\n            break\n        (medoids, cost) = best_swap[1]\n    cluster_labels = [np.argmin(get_cost(X, [medoids[i]])) for i in range(len(medoids))]\n    return cluster_labels\ndef get_cost(X: np.ndarray, medoids: np.ndarray) -> float:\n    \"\"\"Calculate the total cost for the given medoids\"\"\"\n    total_cost = 0\n    for x in X:\n        min_distance = float('inf')\n        closest_medoid_index = -1\n        for (i, medoid) in enumerate(medoids):\n            distance = np.linalg.norm(x - medoid)\n            if distance < min_distance:\n                min_distance = distance\n                closest_medoid_index = i\n        total_cost += min_distance\n    return total_cost\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2\ncluster_labels = pam_clustering(X, k)"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if x_train.shape[0] != y_train.shape[0] or not (isinstance(x_train, np.ndarray) and isinstance(y_train, np.ndarray)):\n        return -1\n    if n_iterations < 1 or reg_factor <= 0 or l1_ratio < 0 or (l1_ratio > 1):\n        return -1\n    X_train = np.array(x_train)\n    y_train = np.array(y_train).reshape(-1, 1)\n    ones = np.ones((X_train.shape[0], 1))\n    X_train = np.hstack([ones, X_train])\n    X_test = np.array(x_test)\n    if degree > 1:\n        for i in range(X_train.shape[1]):\n            X_train[:, i] **= np.arange(degree) + 1\n        for i in range(X_test.shape[1]):\n            X_test[:, i] **= np.arange(degree) + 1\n    means = X_train.mean(axis=0)\n    stds = X_train.std(axis=0)\n    X_train = (X_train - means) / stds\n    X_test = (X_test - means) / stds\n    weights = np.zeros((X_train.shape[1], 1))\n    for _ in range(n_iterations):\n        y_pred = X_train @ weights\n        residuals = y_train - y_pred\n        gradients = X_train.T @ residuals\n        lambda_reg = reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio))\n        weights -= learning_rate * (gradients + lambda_reg)\n    y_pred_test = X_test @ weights\n    predictions = np.round(y_pred_test, 4)\n    return predictions.tolist()\nx_train = [[1, 2], [2, 3], [3, 4]]\ny_train = [1, 2, 3]\nx_test = [[4, 5], [5, 6]]"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if not np.isin(actual, [-1, 1]).all():\n        raise ValueError('Actual values must be -1 or 1.')\n    sigma = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigma * (1 - sigma)\n    hessian = sigma * (1 - sigma)\n    gradient_rounded = np.round(gradient, decimals=6).tolist()\n    hessian_rounded = np.round(hessian, decimals=6).tolist()\n    sigma_rounded = np.round(sigma, decimals=6).tolist()\n    return (gradient_rounded, hessian_rounded, sigma_rounded)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def evaluate_score(hand):\n        score = sum(hand)\n        if 1 in hand and score <= 21:\n            while score > 21 and 1 in hand:\n                score -= 10\n                hand.remove(1)\n                hand.append(1)\n        return score\n    player_score = evaluate_score(player)\n    dealer_score = evaluate_score(dealer)\n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    if player_score == dealer_score:\n        return 0\n    elif player_score == 21 and dealer_score != 21:\n        return 1.5\n    elif player_score == 21:\n        return 1\n    else:\n        return 1 if player_score > dealer_score else -1"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        raise ValueError('All values must be non-negative.')\n    safe_actual = np.maximum(actual, 0)\n    safe_predicted = np.maximum(predicted, 0)\n    log_errors = np.log1p(safe_actual) - np.log1p(safe_predicted)\n    squared_errors = log_errors ** 2\n    return squared_errors\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    else:\n        squared_errors = squared_log_error(np.array(actual), np.array(predicted))\n        mse = np.mean(squared_errors)\n        return round(mse, 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def sigmoid_elementwise(x):\n        x_positive = np.where(x >= 0, 1 / (1 + np.exp(-x)), 1 - 1 / (1 + np.exp(x)))\n        return x_positive\n    if isinstance(z, (int, float)):\n        return round(sigmoid_elementwise(z), 4)\n    elif isinstance(z, (list, np.ndarray)):\n        z_array = np.array(z)\n        result_array = sigmoid_elementwise(z_array)\n        return round(result_array.tolist(), 4)\n    else:\n        raise TypeError('Input must be a number, int, float, list, or numpy array.')"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return max(z, a * z)\n    elif isinstance(z, (list, tuple)):\n        return [leaky_relu(sub_z, a) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        return leaky_relu(list(z), a)\n    else:\n        raise ValueError(\"Input 'z' must be a scalar, a list/tuple, or a numpy.ndarray\")\nz = np.array([1.5, -0.4, 2.3])"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    w = np.ones(n_samples) / n_samples\n    y_pred = np.zeros(X_test.shape[0])\n    for _ in range(n_clf):\n        best_error = np.inf\n        best_stump = None\n        for feature_index in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_index])\n            for t in thresholds:\n                polarity = 1\n                stump_predictions = np.sign(X_train[:, feature_index] < t)\n                if polarity == 1:\n                    stump_predictions = stump_predictions == polarity\n                else:\n                    stump_predictions = stump_predictions != polarity\n                error = np.sum(w[stump_predictions == False]) / np.sum(w)\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature_index, t, polarity)\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        stump_predictions = np.sign((X_train[:, best_stump[0]] < best_stump[1]) * best_stump[2])\n        w = w * np.exp(-y_train * alpha * stump_predictions)\n        w /= np.sum(w)\n        y_pred += alpha * np.sign((X_test[:, best_stump[0]] < best_stump[1]) * best_stump[2])\n    return np.sign(y_pred).astype(int).tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(size=shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=True)\n    k = min(shape[0], shape[1])\n    Q = U if U.shape == A.shape else Vt\n    Q = Q[:shape[0], :shape[1]]\n    result = Q * scale\n    flat = result.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        np.testing.assert_allclose(flat @ flat.T, scale ** 2 * np.eye(shape[0]), atol=1e-06)\n    else:\n        np.testing.assert_allclose(flat.T @ flat, scale ** 2 * np.eye(shape[1]), atol=1e-06)\n    return result.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state_array = np.array(state)\n    weights = 1.0\n    biases = 0.0\n    z1 = np.maximum(0, state_array @ weights + biases)\n    z2 = np.maximum(0, z1 @ weights + biases)\n    z3 = np.maximum(0, z2 @ weights + biases)\n    logits = z3 @ weights + biases\n    action_probs = np.exp(logits) / np.sum(np.exp(logits), axis=0)\n    state_value = (z3 @ weights + biases)[0]\n    return ([round(p, 4) for p in action_probs], round(state_value, 4))"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state_np = np.array(state)\n    state_flattened = state_np.flatten()\n    layer1_out = state_flattened.dot(params['W1'][0]) + params['b1'][0]\n    layer1_out_relu = np.maximum(layer1_out, 0)\n    layer2_out = layer1_out_relu.dot(params['W2'][0]) + params['b2'][0]\n    layer2_out_relu = np.maximum(layer2_out, 0)\n    layer3_out = layer2_out_relu.dot(params['W3'][0]) + params['b3'][0]\n    layer3_out_relu = np.maximum(layer3_out, 0)\n    actor_output = layer3_out_relu.dot(params['Wa'][0]) + params['ba'][0]\n    exp_values = np.exp(actor_output - np.max(actor_output))\n    probabilities = exp_values / np.sum(exp_values)\n    critic_output = layer3_out_relu.dot(params['Wc'][0]) + params['bc'][0]\n    critic_value = round(critic_output[0], 4)\n    return ([round(prob, 4) if prob != 0 else round(prob, 1) for prob in probabilities], critic_value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_array = np.array(w)\n    norm_squared = np.sum(w_array ** 2)\n    penalty = alpha * (l1_ratio * np.linalg.norm(w_array) + (1 - l1_ratio) * norm_squared)\n    if not gradient:\n        return round(penalty, 4)\n    else:\n        gradient_vector = alpha * (l1_ratio * np.sign(w_array) + (1 - l1_ratio) * w_array)\n        return [round(elem, 4) for elem in gradient_vector]"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name not in model.parameters:\n        raise KeyError(f'Model does not have a parameter named {param_name}')\n    if param_name in ['X', 'y']:\n        return None\n    params = deepcopy(model.parameters)\n    param_key = param_name.lower()\n\n    def perturb_param_and_loss(param_name, value):\n        perturbed_params = deepcopy(params)\n        perturbed_params[param_name] = value + epsilon\n        model.parameters = perturbed_params\n        predictions = []\n        for t in range(n_t):\n            predictions.append(model.forward(X[:, :, t]))\n        loss_perturbed = loss_func(predictions)\n        perturbed_params = deepcopy(params)\n        perturbed_params[param_name] = value - epsilon\n        model.parameters = perturbed_params\n        predictions = []\n        for t in range(n_t):\n            predictions.append(model.forward(X[:, :, t]))\n        loss_perturbed_neg = loss_func(predictions)\n        approx_grad = (loss_perturbed - loss_perturbed_neg) / (2 * epsilon)\n        return approx_grad\n    current_value = params[param_key]\n    num_grad = perturb_param_and_loss(param_key, current_value)\n    return num_grad.T\nX = np.random.rand(2, 3, 10)\nn_t = 10"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    w = np.full(m, 1 / m)\n    n_features = X_train.shape[1]\n    models = []\n    biases = []\n    for t in range(n_clf):\n        best_feature_idx = np.argmax([find_best_split(X_train, y_train[:, None], i)[1] for i in range(n_features)])\n        (threshold, _, _, _, _) = find_best_split(X_train, y_train[:, None], best_feature_idx)\n        model = DecisionStump(threshold, y_train[best_feature_idx])\n        y_pred = model.predict(X_train)\n        e = np.sum(w[y_pred != y_train]) / m\n        w[y_pred != y_train] *= np.power(3, -2 * e)\n        w[y_pred == y_train] *= np.power(3, 2 * e)\n        w /= np.linalg.norm(w)\n        models.append(model)\n        biases.append(2 * t - 1)\n    predictions = []\n    for x in X_test:\n        weight_sum = np.sum([np.sign(biases[t] * models[t].predict(x)) * np.log((1 + w[t]) / (w[t] + 1)) for (t, w) in enumerate(w)])\n        predictions.append(np.sign(weight_sum))\n    return predictions\nclass DecisionStump:\n\n    def __init__(self, threshold, value):\n        self.threshold = threshold\n        self.value = value\n        self.feature_index = None\n\n    def fit(self, train_data, train_labels):\n        self.feature_index = np.argmax([find_best_split(train_data, train_labels[:, None], i)[1] for i in range(train_data.shape[1])])\n        self.threshold = find_best_split(train_data, train_labels[:, None], self.feature_index)[0]\n\n    def predict(self, x):\n        if x[self.feature_index] < self.threshold:\n            return self.value\n        else:\n            return -self.value\ndef find_best_split(X, y, feature_index):\n    thresholds = np.unique(X[:, feature_index])\n    best_error = float('inf')\n    best_threshold = None\n    best_left_y = None\n    best_right_y = None\n    for threshold in thresholds:\n        left_y = y[X[:, feature_index] < threshold]\n        right_y = y[X[:, feature_index] >= threshold]\n        left_error = np.mean(left_y == -1)\n        right_error = np.mean(right_y == -1)\n        error = np.mean(np.concatenate((left_y, right_y)))\n        if error < best_error:\n            best_error = error\n            best_threshold = threshold\n            best_left_y = left_y\n            best_right_y = right_y\n    return (best_threshold, best_left_y, best_right_y, best_error, best_error - 0.5)"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[0]\n    fan_out = shape[-1]\n    for dim in shape[1:-1]:\n        fan_in *= dim\n    receptive_field_size = 1\n    for dim in shape[1:]:\n        receptive_field_size *= dim\n    fan_out *= receptive_field_size\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=stddev, size=shape).astype(np.float32)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import *\nfrom collections import defaultdict\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    neighbors = defaultdict(list)\n    for (u, v) in E:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    adj_list = [sorted(neighbors[vertex]) for vertex in V]\n    return adj_list\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('C', 'A'), ('C', 'D'), ('D', 'A')]\nadj_list = build_adj_list(V, E)"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.optimize import minimize\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n, d) = X.shape\n\n    def classification_error(params):\n        (feature_idx, threshold, polarity) = params\n        predictions = X[:, feature_idx] < threshold if polarity == 1 else X[:, feature_idx] >= threshold\n        return np.sum(sample_weights * (predictions != y))\n    min_error = float('inf')\n    best_params = None\n    for feature_idx in range(d):\n        feature_values = np.unique(X[:, feature_idx])\n        for threshold in feature_values:\n            for polarity in [-1, 1]:\n                res = minimize(classification_error, [feature_idx, threshold, polarity], args=(), method='Nelder-Mead')\n                current_error = res.fun\n                if current_error < min_error:\n                    min_error = current_error\n                    best_params = [feature_idx, round(threshold, 4), polarity]\n    return {'feature_index': best_params[0], 'threshold': best_params[1], 'polarity': best_params[2], 'weighted_error': round(min_error, 4)}"}
{"task_id": 273, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if len(np.unique(feature)) == 1 or len(set(target)) == 1:\n        return (None, 0.0)\n    feature = np.sort(feature)\n    n = len(feature)\n    total_entropy = calculate_entropy(target)\n    max_gain = -math.inf\n    best_threshold = None\n    for i in range(1, n):\n        left_indices = feature[:i]\n        right_indices = feature[i:]\n        left_class_counts = Counter(target[left_indices])\n        right_class_counts = Counter(target[right_indices])\n        if not left_class_counts or not right_class_counts:\n            continue\n        left_entropy = calculate_entropy(list(left_class_counts.values()))\n        right_entropy = calculate_entropy(list(right_class_counts.values()))\n        gain = total_entropy - len(left_indices) / n * left_entropy - len(right_indices) / n * right_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = feature[i - 1]\n    return (round(best_threshold, 4), round(max_gain, 4))\ndef calculate_entropy(probs):\n    return -sum((p * math.log(p, 2) for p in probs if p != 0))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    potential_initializers = [obj for (obj_name, obj) in globals().items() if isinstance(obj, type) and issubclass(obj, Callable) and (obj.__name__ == name)]\n    if not potential_initializers:\n        raise ValueError(f'Invalid initialization function.')\n    return potential_initializers[0]()"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    Args:\n        X (np.ndarray): Input feature map of shape (N, C, H, W).\n        pool_shape (tuple[int, int]): Pooling window size (p_h, p_w).\n        stride (tuple[int, int]): Stride (s_h, s_w).\n        accum_grad (np.ndarray): Gradient from the next layer of shape identical to forward output.\n\n    Returns:\n        tuple[list, list]: Pooled output rounded to the nearest 4th decimal and converted to Python lists,\n                          and grad_input rounded to the nearest 4th decimal and converted to Python lists.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    assert H - p_h >= 0, 'Pooling window width exceeds input height'\n    assert W - p_w >= 0, 'Pooling window height exceeds input width'\n    pooled_H = (H - p_h) // s_h + 1\n    pooled_W = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, pooled_H, pooled_W))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for ph in range(pooled_H):\n                for pw in range(pooled_W):\n                    h_start = ph * s_h\n                    h_end = h_start + p_h\n                    w_start = pw * s_w\n                    w_end = w_start + p_w\n                    patch = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, ph, pw] = np.mean(patch)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, ph, pw] / (p_h * p_w)\n    pooled_output_rounded = [round(x, 4) for sublist in pooled_output for x in sublist for lst in sublist for x in lst]\n    grad_input_rounded = [round(x, 4) for sublist in grad_input for x in sublist for lst in sublist for x in lst]\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    elif isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        if np.issubdtype(type(tree_a.value), np.number) ^ np.issubdtype(type(tree_b.value), np.number):\n            return False\n        else:\n            return np.allclose(tree_a.value, tree_b.value, rtol=1e-08, atol=1e-08)\n    else:\n        return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    if len(parent1) != len(parent2) or any((len(row1) != len(row2) for (row1, row2) in zip(parent1, parent2))):\n        return -1\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    child1 = []\n    child2 = []\n    for i in range(len(parent1_np)):\n        if i < cutoff:\n            child1.append(parent1_np[i].tolist())\n            child2.append(parent2_np[i].tolist())\n        else:\n            child1.append(parent2_np[i].tolist())\n            child2.append(parent1_np[i].tolist())\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    directed = G['is_directed']\n    V2I = G['_V2I']\n    G_ = G['_G']\n    for (i, edges) in enumerate(G_):\n        source_label = list(V2I.keys())[i]\n        for edge in edges:\n            if not directed:\n                adj.setdefault(source_label, []).append((edge[1], edge[2]))\n                adj.setdefault(edge[1], []).append((source_label, edge[2]))\n            else:\n                adj.setdefault(source_label, []).append((edge[1], edge[2]))\n    return {k: list(sorted(adj[k])) for k in sorted(adj)}"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    binary_mask = np.isin(x, [0, 1], assume_sorted=False)\n    return np.all(binary_mask)"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    token_counts = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        for i in range(len(tokens)):\n            token_counts[tuple(tokens[i:i + N])] += 1\n    total_word_count = sum(token_counts.values())\n\n    def get_ngram_probability(ngram):\n        prefix = ngram[:-1]\n        if len(prefix) < N - 1:\n            return 0\n        count_prefix = token_counts.get(prefix, 0)\n        if count_prefix == 0:\n            return 0\n        return math.log(token_counts[ngram] / count_prefix)\n    padded_query = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n    if len(padded_query) < N:\n        return float('-inf')\n    log_prob = 0\n    for i in range(N - 1, len(padded_query)):\n        ngram = tuple(padded_query[i - N + 1:i + 1])\n        log_prob += get_ngram_probability(ngram)\n    return round(log_prob, 4) if math.isfinite(log_prob) else float('-inf')"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n            W[j, i] = W[i, j]\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = eigenvalues.argsort()[:k]\n    E = eigenvectors[:, idx].real\n\n    def euclidean_distance(v1, v2):\n        return np.sqrt(np.sum((v1 - v2) ** 2))\n\n    def init_centroids(k, E):\n        return np.random.choice(E, size=k, replace=False)\n\n    def kmeans(X, centroids, max_iter=100):\n        old_labels = -np.ones(X.shape[0], dtype=int)\n        new_labels = np.zeros_like(old_labels)\n        for _ in range(max_iter):\n            distances = np.array([np.min([euclidean_distance(x, c) for c in centroids], axis=0) for x in X])\n            new_labels = np.argmin(distances, axis=1)\n            if np.all(new_labels == old_labels):\n                break\n            old_labels = np.copy(new_labels)\n            centroids = np.array([X[new_labels == i].mean(axis=0) for i in range(k)])\n        return (new_labels, centroids)\n    centroids = init_centroids(k, E)\n    (labels, centroids) = kmeans(E, centroids)\n    return labels.tolist()\nX = np.array([[1, 2], [2, 3], [3, 1], [10, 12], [11, 13], [12, 14]])\nk = 2"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_mine, curr_mine) = (params[max(0, ix - 1)][0], params[ix][0])\n    (prev_label, curr_label) = (params[max(0, ix - 1)][1], params[ix][1])\n    debug_info = f\"{'-' * 25}\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMy output [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}{'-' * 23}\"\n    return debug_info"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    X = np.concatenate((np.ones((X.shape[0], 1)) if fit_intercept else np.eye(X.shape[1]), X), axis=1)\n    V_inv = np.linalg.inv(V)\n    XTX_inv = np.linalg.inv(X.T @ X + V_inv)\n    b_mu = (VTX_inv @ (V_inv * mu + X.T @ y)).round(4).tolist()\n    return b_mu"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    max_freq = fs / 2 if max_freq is None else min(max_freq, fs / 2)\n    mels = 2595 * np.log10(1 + np.linspace(min_freq, max_freq, n_filters + 2) / 700)\n    freqs = 700 * (10 ** (mels / 2595) - 1)\n    bins = np.arange(N // 2 + 1)\n    filterbank_matrix = []\n    for i in range(n_filters):\n        (f1, f2) = (freqs[i], freqs[i + 1])\n        h = bins - (f1 + f2) / 2\n        h[h < 0] = 0\n        l_slope = (f2 - f1) / (f2 + f1)\n        r_slope = (f2 - f1) / (f1 + f2)\n        slope_min = np.minimum(l_slope, r_slope)\n        if normalize:\n            area = (f2 - f1) / 2\n            slope_min /= area\n        filterbank_matrix.append(slope_min.tolist())\n    return [round(num, 4) for sublist in filterbank_matrix for num in sublist]\nN = 1024\nn_filters = 20\nfs = 44100\nmin_freq = 0\nmax_freq = 10000"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    a1_adj = a1 * (1.5 - 2.0 * a3)\n    a2_adj = a2 * (1.5 - 2.0 * a3)\n    if symmetric:\n        window_len += 1\n        window = [a0 - a1_adj * np.cos(2.0 * np.pi * k / (window_len - 1)) + a2_adj * np.cos(4.0 * np.pi * k / (window_len - 1)) - a3 * np.cos(6.0 * np.pi * k / (window_len - 1)) for k in range(window_len)]\n        window[-1] = window[0]\n    else:\n        window = [a0 - a1_adj * np.cos(2.0 * np.pi * k / window_len) + a2_adj * np.cos(4.0 * np.pi * k / window_len) - a3 * np.cos(6.0 * np.pi * k / window_len) for k in range(window_len)]\n    return [round(item, 4) for item in window]"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"\n    Compute the digamma function for a given value x.\n    Uses recursion for small values and asymptotic expansion for large values of x.\n    \"\"\"\n    if x < 8.0:\n        return x - 1.0 / x - 1.0 / (6.0 * x) + 1.0 / (12.0 * x ** 3) - 1.0 / (12.0 * x ** 5)\n    else:\n        return math.lgamma(x) - (x - 0.5) * math.log(x + 0.5)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\"\"\"\n    total = sum(gamma[d])\n    first_term = digamma(gamma[d, t])\n    second_term = digamma(total)\n    result = round(first_term - second_term, 4)\n    return result"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import *\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n    \n    See the task description for the exact required format.\n    \n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n    \n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_idx = max(ix - 1, 0)\n    (prev_label, prev_prediction) = params[prev_idx]\n    prev_gold = golds.get(prev_label, 'Unknown')\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds.get(curr_label, 'Unknown')\n    dash_line = '-' * 55 + '\\n'\n    header = dash_line + ' DEBUG ' + dash_line\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n'\n    curr_block = f'Mine [{curr_label}]:\\n{curr_prediction}\\nTheirs [{curr_label}]:\\n{curr_gold}\\n{warn_str}'\n    return header + prev_block + curr_block + dash_line + ' END DEBUG ' + dash_line\nparams = [('This is mine', 'mine'), ('This is theirs', 'theirs'), ('This is my prediction', 'mine')]\nix = 2"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    n_samples = len(y_train)\n    weights = np.full(n_samples, 1 / n_samples)\n    w_sum = n_samples\n    h = [np.zeros(X_train.shape[1])] * n_estimators\n    alpha = [0] * n_estimators\n    for m in range(n_estimators):\n        w_sum = np.sum(weights)\n        best_error = float('inf')\n        best_h = None\n        for j in range(X_train.shape[1]):\n            for i in range(n_samples):\n                t_left = X_train[i, j] - y_train[i] * h[m - 1][j]\n                t_right = X_train[i, j] + y_train[i] * h[m - 1][j]\n                weights_left = weights[i] if y_train[i] * (X_train[i, j] - t_left) > 0 else 0\n                weights_right = weights[i] if y_train[i] * (X_train[i, j] - t_right) > 0 else 0\n                temp_weights = weights_left + weights_right\n                error = weights_left / w_sum + weights_right / w_sum if temp_weights != 0 else 0\n                if error < best_error:\n                    best_error = error\n                    best_h = (j, t_left, t_right)\n        alpha[m] = 0.5 * math.log((1 - best_error) / best_error)\n        for i in range(n_samples):\n            if y_train[i] * (X_train[i, best_h[0]] - best_h[1]) > 0:\n                weights[i] = weights[i] * math.exp(-alpha[m])\n            else:\n                weights[i] = weights[i] * math.exp(alpha[m])\n        w_sum = sum(weights)\n        weights = [w / w_sum for w in weights]\n        h[m] = best_h\n    predictions = []\n    for x in X_test:\n        weighted_sum = 0\n        for m in range(n_estimators):\n            weighted_sum += alpha[m] * (np.sign(x[h[m][0]] - h[m][1]) * y_train[h[m][0]])\n        y_pred = np.sign(weighted_sum)\n        predictions.append(y_pred)\n    return predictions"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        frequencies = [i * delta_f for i in range(int(np.ceil(N / 2)))]\n    else:\n        frequencies = [(i - int(N / 2)) * delta_f if i != 0 else 0 for i in range(N)]\n    return [round(freq, 4) for freq in frequencies]"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    n_samples = len(y_true)\n    flat_predictions = predictions.flatten()\n    flat_y_true = y_true.flatten()\n    oob_indices = np.where(oob_mask.any(axis=1))[0]\n    if len(oob_indices) == 0:\n        return -1\n    oob_errors = [(flat_predictions[oob_indices[i]] - flat_y_true[i]) ** 2 for i in range(len(oob_indices))]\n    oob_mse = sum(oob_errors) / len(oob_indices)\n    return round(oob_mse, 4)\ny_true = [3, -0.5, 2, 7]"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    fp_tree = {'support': 0, 'children': {}}\n    for (item, _) in sorted_items:\n        current_node = fp_tree\n        for sub_item in item.split(','):\n            if sub_item not in current_node['children']:\n                current_node['children'][sub_item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][sub_item]\n            current_node['support'] += 1\n    return fp_tree\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'peanut butter'], ['beer', 'diaper', 'milk'], ['bread', 'diaper', 'milk'], ['bread', 'milk', 'diaper', 'peanut butter']]\nmin_support = 2"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef linear_kernel(X: list[list[Union[int, float]]] | np.ndarray, Y: list[list[Union[int, float]]] | np.ndarray | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if Y is None:\n        Y = X\n    if len(X[0]) != len(Y[0]):\n        return -1\n    X_np = np.array(X)\n    Y_np = np.array(Y)\n    dot_products = np.dot(X_np, Y_np.T)\n    kernel_matrix = dot_products + c0\n    rounded_kernel_matrix = [[round(num, 4) for num in row] for row in kernel_matrix]\n    return rounded_kernel_matrix\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    grad = np.array(grad)\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return ([round(num, 8) for num in updated_param], [round(num, 8) for num in m_hat], [round(num, 8) for num in v_hat])\nparam = np.random.randn(5)\ngrad = np.random.randn(5)\nt = 1\nm = np.zeros_like(param)\nv = np.zeros_like(param)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: np.ndarray, retain_prcnt: float) -> tuple[list, list]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : np.ndarray\n        1-D array of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    n_samples = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * n_samples)\n    sorted_indices = np.argsort(rewards)[::-1]\n    retained_theta_samples = theta_samples[sorted_indices[:num_retain]]\n    mean = np.round(np.mean(retained_theta_samples, axis=0), 4)\n    variances = np.round(np.var(retained_theta_samples, axis=0), 4)\n    return (mean.tolist(), variances.tolist())\ntheta_samples = np.random.rand(5, 2)\nrewards = np.array([1.2345, 2.3456, 3.4567, 4.5678, 0.5432])\nretain_prcnt = 0.7"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels_array = np.array(labels)\n    if labels_array.size == 0:\n        return 0.0\n    freqs = Counter(labels_array)\n    total_count = len(labels_array)\n    entropies = [-freq / total_count * math.log2(freq / total_count) for (label, freq) in freqs.items()]\n    entropy_value = sum(entropies)\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if isinstance(pad, int):\n        pad_top = pad\n        pad_left = pad\n        pad_bottom = pad\n        pad_right = pad\n    elif isinstance(pad, tuple):\n        pad_top = pad[0]\n        pad_left = pad[1]\n        pad_bottom = pad[2]\n        pad_right = pad[3]\n    elif pad == 'same':\n        pad_top = get_same_padding(int(W.shape[0]), stride)\n        pad_left = get_same_padding(int(W.shape[1]), stride)\n    else:\n        return None\n    X = add_padding(X, (pad_top, pad_bottom), (pad_left, pad_right), dilation)\n    dilated_kernel_rows = W.shape[0] * (dilation + 1) - dilation\n    dilated_kernel_cols = W.shape[1] * (dilation + 1) - dilation\n    W_dilated = expand_dilation(W, dilation)\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W_dilated.shape\n    out_rows = int((in_rows + 2 * pad_top - kernel_rows) / stride) + 1\n    out_cols = int((in_cols + 2 * pad_left - kernel_cols) / stride) + 1\n    out_shape = (n_ex, out_rows, out_cols, out_ch)\n    Y = np.zeros(out_shape)\n    for ex in range(n_ex):\n        for ch_out in range(out_ch):\n            W_k = W_dilated[:, :, :, ch_out]\n            for r in range(out_rows):\n                for c in range(out_cols):\n                    col = im2col(X[ex, r * stride:(r + 1) * stride, c * stride:(c + 1) * stride, :], kernel_rows, kernel_cols, stride, pad_left, pad_top, dilation)\n                    Y[ex, r, c, ch_out] = np.dot(col, W_k.reshape(-1, W_k.shape[-1]))\n    return Y.tolist()\ndef get_same_padding(kernel_size: int, stride: int):\n    \"\"\"Compute the same padding for a given kernel size and stride.\"\"\"\n    calculated_padding = (kernel_size - 1) * (1 - 0.5) / (1 - 1 / stride)\n    return max(0, np.ceil(calculated_padding).astype(np.int))\ndef add_padding(X: 'np.ndarray', pad_top_bottom: tuple, pad_left_right: tuple, dilation: int=0):\n    \"\"\"Add padding to the input array.\"\"\"\n    X_dilated = X\n    if dilation != 0:\n        X_dilated = expand_dilation(X, dilation)\n    (pad_top, pad_bottom) = pad_top_bottom\n    (pad_left, pad_right) = pad_left_right\n    padded_X = np.pad(X_dilated, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    return padded_X\ndef im2col(X: 'np.ndarray', kernel_rows: int, kernel_cols: int, stride: int, pad_left, pad_top, dilation: int=0):\n    \"\"\"Convert the input image into a column.\"\"\"\n    (pad_height, pad_width) = (pad_top * (dilation + 1), pad_left * (dilation + 1))\n    output_cols = (X.shape[1] + 2 * pad_height - kernel_rows) // stride + 1\n    output_rows = (X.shape[2] + 2 * pad_width - kernel_cols) // stride + 1\n    col = np.zeros((output_cols * output_rows, kernel_rows * kernel_cols))\n    r_idx = 0\n    for r in range(output_rows):\n        for c in range(output_cols):\n            sub_X = X[:, r * stride:r * stride + kernel_rows, c * stride:c * stride + kernel_cols]\n            if dilation > 0:\n                sub_X = expand_dilation(sub_X, dilation)\n            col[r_idx] = sub_X.flatten()\n            r_idx += 1\n    return col\ndef expand_dilation(X: 'np.ndarray', dilation: int):\n    \"\"\"Expand the input array based on the dilation factor.\"\"\"\n    expanded_X = np.ones((X.shape[0], X.shape[1] * (dilation + 1), X.shape[2] * (dilation + 1)))\n    for i in range(X.shape[0]):\n        for j in range(dilation + 1):\n            for k in range(dilation + 1):\n                if j * (dilation + 1) + i < X.shape[1]:\n                    expanded_X[i, j * (dilation + 1):j * (dilation + 1) + X.shape[1], k * (dilation + 1):k * (dilation + 1) + X.shape[2]] = X[i, j:i + 1, k:k + 1]\n    return expanded_X\nX = np.random.rand(1, 6, 6, 3)\nW = np.random.rand(3, 3, 3, 16)\nY = conv2D(X, W, 1, 'valid')"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - np.mean(data, axis=0)\n    std_data = data_centered / np.std(data_centered, axis=0)\n\n    def _eigen_decomposition(std_data):\n        cov_matrix = np.cov(std_data, rowvar=False)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        return (eigenvectors[:, ::-1], eigenvalues[::-1])\n\n    def _svd_decomposition(std_data):\n        (U, s, Vt) = np.linalg.svd(std_data, full_matrices=False)\n        return (Vt[:, ::-1], s[::-1])\n    if solver == 'svd':\n        (W, s) = _svd_decomposition(std_data)\n    elif solver == 'eigen':\n        (W, s) = _eigen_decomposition(std_data)\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'\")\n    if n_components > W.shape[1]:\n        W_subset = W\n        explained_variance_subset = s\n    else:\n        W_subset = W[:, :n_components]\n        explained_variance_subset = s[:n_components]\n    for i in range(len(W_subset)):\n        if W_subset[i][0] < 0:\n            W_subset[i] *= -1\n            W_subset[:, i] *= -1\n    scores = np.dot(std_data, W_subset.T)\n    rounded_scores = np.round(scores, 4)\n    list_of_lists_scores = rounded_scores.tolist()\n    explained_variance_ratio = [v / np.sum(s) for v in explained_variance_subset]\n    return (list_of_lists_scores, explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(np.array(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    if data.ndim < 2:\n        raise ValueError('Data must have at least two dimensions.')\n    (n_samples, n_features) = data.shape\n    centroids = data[np.random.choice(n_samples, K, replace=False)]\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        centroids_moved = np.any(np.abs(new_centroids - centroids) > 1e-06)\n        centroids = new_centroids if centroids_moved else centroids\n        if not centroids_moved:\n            break\n    centroids_rounded = np.round(centroids, 4).tolist()\n    centroids_sorted = sorted(centroids_rounded)\n    return centroids_sorted\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_array = np.array(data)\n    if np.any(data_array.sum(axis=1) == 0):\n        return -1\n    normalized_matrix = data_array / data_array.sum(axis=1, keepdims=True)\n    rounded_matrix = np.round(normalized_matrix, 4).tolist()\n    return rounded_matrix"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def _get_spaces(space):\n        if isinstance(space, Tuple):\n            return space.spaces\n        elif isinstance(space, Dict):\n            return space.spaces.values()\n        else:\n            return [space]\n\n    def _is_box(space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple):\n            for sub_space in space.spaces:\n                if not _is_box(sub_space):\n                    return False\n            return True\n        elif isinstance(space, Dict):\n            for (_, sub_space) in space.spaces.items():\n                if not _is_box(sub_space):\n                    return False\n            return True\n        elif isinstance(space, Box):\n            return True\n        else:\n            return False\n    cont_action = _is_box(env.action_space) if not tuple_action else all((_is_box(sub_space) for sub_space in _get_spaces(env.action_space)))\n    cont_obs = _is_box(env.observation_space) if not tuple_obs else all((_is_box(sub_space) for sub_space in _get_spaces(env.observation_space)))\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred)\n        probabilities /= probabilities.sum(axis=1, keepdims=True)\n        predicted_labels = np.argmax(probabilities, axis=1)\n        return predicted_labels"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: int | tuple[int, int] | str, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n             padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                  neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    X_list = X.tolist()\n    W_list = W.tolist()\n    output = []\n    for x_example in X_list:\n        if isinstance(pad, str):\n            pad = 'same' if pad == 'same' else None\n        elif isinstance(pad, tuple):\n            pad = tuple(pad)\n        if pad == 'same':\n            (kernel_width, _, _) = W_list[0].shape\n            l_in = x_example.shape[0]\n            out_len = np.ceil(l_in / float(stride)).astype(int)\n            total_pad = max(0, (out_len - 1) * stride + kernel_width - l_in)\n            pad = (np.floor(total_pad / 2), total_pad - np.floor(total_pad / 2))\n        if not isinstance(pad, tuple) or len(pad) != 2:\n            raise ValueError(\"Padding must be an int, a 2-tuple, or the string 'same'\")\n        padded_x = np.pad(x_example, pad, mode='constant')\n        output_example = []\n        for w_row in W_list:\n            effective_kernel = (w_row.shape[0] - 1) * (dilation + 1) + 1\n            k_size = (effective_kernel, 1)\n            for i in range(padded_x.shape[0] - k_size[0] + 1):\n                window = padded_x[i:i + k_size[0], 0][:, np.newaxis]\n                output_example.append(np.sum(window * w_row, axis=(0, 1)))\n        output.append(output_example)\n    return [item.tolist() for sublist in output for item in sublist]\nX = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nW = np.array([[[1, 0], [0, 1]], [[-1, 0], [0, 1]]])\noutput = conv1D(X, W, stride=1, pad='same')"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty,\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if len(y) == 0:\n        return 0.0\n    N = len(y)\n    (unique_labels, label_counts) = np.unique(y, return_counts=True)\n    probabilities = label_counts / N\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    if len(X) != len(y):\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0\n    weights_list = []\n    for iteration in range(n_iterations):\n        y_pred = X @ theta + b\n        dw = 1 / m * X.T @ (y_pred - y)\n        db = 1 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n        weights_list.append(theta.copy())\n        if np.linalg.norm(dw) < 1e-05 and np.linalg.norm(db) < 1e-05:\n            break\n    theta_rounded = [round(num, 4) for num in theta]\n    b_rounded = round(b, 4)\n    return (weights_list, b_rounded)\nX = np.array([[1, 2], [1, 4], [1, 0], [1, 0], [1, 4]])\ny = np.array([1, 3, 1, 5, 8])"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient (residuals) for the logistic (binomial deviance) loss.\n    The residuals used to update the model are given by the formula:\n    \n    g_i = y'_i / (1 + exp(-y'_i * f_i))\n    \n    Where y'_i = 2*y_i - 1\n    \n    If y contains values other than 0 or 1, the function returns -1.\n    \"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if not np.all((y == 0) | (y == 1)):\n        return [-1]\n    y_prime = 2 * y - 1\n    g = y_prime / (1 + np.exp(-y_prime * f))\n    g_rounded = np.round(g, decimals=4).tolist()\n    return g_rounded\ny = [1, 2, 3]\nf = [0.1, -0.2, 0.3]"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n    \n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n    \n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n\n    def elu(x, alpha=alpha):\n        return np.where(x > 0, x, alpha * (np.exp(x) - 1))\n\n    def selu(x):\n        return scale * elu(x)\n\n    def elu_derivative(x, alpha=alpha):\n        return np.where(x > 0, 1, alpha * np.exp(x))\n\n    def elu_double_derivative(x, alpha=alpha):\n        return np.where(x > 0, 0, -alpha * np.exp(x))\n    if order == 0:\n        return [round(val, 4) for val in selu(np.array(x)).tolist()]\n    elif order == 1:\n        return [round(val, 4) for val in elu_derivative(np.array(x)).tolist()]\n    elif order == 2:\n        return [round(val, 4) for val in elu_double_derivative(np.array(x)).tolist()]\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    if len(set(x)) == len(x):\n        mean_residual = np.mean(y)\n        y_pred = np.full(len(y), mean_residual)\n    else:\n        sorted_indices = np.argsort(x)\n        y_sorted = np.array(y)[sorted_indices]\n        y_pred = np.full(len(y), np.mean(y))\n        for _ in range(n_estimators):\n            residuals = y_sorted - y_pred\n            best_residual = np.inf\n            best_split_point = None\n            for i in range(1, len(sorted_indices)):\n                left_residual_mean = np.mean(residuals[:i])\n                right_residual_mean = np.mean(residuals[i:])\n                left_prediction = np.full(i, left_residual_mean)\n                right_prediction = np.full(len(y_sorted) - i, right_residual_mean)\n                ssr = np.sum((residuals[:i] - left_prediction) ** 2) + np.sum((residuals[i:] - right_prediction) ** 2)\n                if ssr < best_residual:\n                    best_residual = ssr\n                    best_split_point = x[sorted_indices[i - 1]]\n            if best_split_point is None:\n                best_split_point = np.mean(x)\n            y_pred = y_pred + learning_rate * np.where(x <= best_split_point, left_prediction, right_prediction)\n    return [round(y_pred[i], 4) for i in range(len(y))]\nx = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0]\ny = [1, 2, 3, 5, 7, 9]"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    epsilon = 1e-08\n    Eg_sqrt = np.sqrt(Eg_new + epsilon)\n    w_next = w - learning_rate * grad / Eg_sqrt\n    w_next_list = [round(val, 4) for val in w_next]\n    Eg_list = [round(val, 4) for val in Eg_sqrt]\n    return (w_next_list, Eg_list)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x: np.array, alpha: float=0.1, derivative: bool=False) -> list:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        y = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        y = np.where(x >= 0, 1, alpha + np.where(x >= 0, 0, alpha * np.exp(x)))\n    return [round(value, 4) for value in y]"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    stats_dict = {}\n    stats_dict['tuple_actions'] = any((isinstance(a, (list, tuple, np.ndarray)) for a in actions))\n    stats_dict['tuple_observations'] = any((isinstance(o, (list, tuple, np.ndarray)) for o in observations))\n    stats_dict['multidim_actions'] = any((len(a) > 1 for a in actions))\n    stats_dict['multidim_observations'] = any((len(o) > 1 for o in observations))\n\n    def is_continuous(val):\n        try:\n            return not val.is_integer()\n        except AttributeError:\n            return False\n    flat_actions = [item for sublist in actions for item in sublist]\n    flat_observations = [item for sublist in observations for item in sublist]\n    stats_dict['continuous_actions'] = any((is_continuous(item) for item in flat_actions))\n    stats_dict['continuous_observations'] = any((is_continuous(item) for item in flat_observations))\n\n    def compute_n_unique(values):\n        if isinstance(values, np.ndarray):\n            values = values.flatten().tolist()\n        unique_values = set(values)\n        n_unique = len(unique_values)\n        if isinstance(values[0], (float, int)):\n            return [n_unique]\n        else:\n            return [[n_unique] * len(values)]\n    stats_dict['n_actions_per_dim'] = compute_n_unique(actions)\n    stats_dict['n_obs_per_dim'] = compute_n_unique(observations)\n    if stats_dict['multidim_actions']:\n        stats_dict['action_dim'] = max((len(list(sub)) for sub in actions))\n    else:\n        stats_dict['action_dim'] = 1\n    if stats_dict['multidim_observations']:\n        stats_dict['obs_dim'] = max((len(list(sub)) for sub in observations))\n    else:\n        stats_dict['obs_dim'] = 1\n    if stats_dict['multidim_actions']:\n        stats_dict['action_ids'] = [sorted([round(item, 2) for item in sub]) for sub in actions]\n    else:\n        stats_dict['action_ids'] = [[]]\n    if stats_dict['multidim_observations']:\n        stats_dict['obs_ids'] = [sorted([round(item, 2) for item in sub]) for sub in observations]\n    else:\n        stats_dict['obs_ids'] = [[]]\n    return stats_dict\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree's prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    predictions = np.full_like(y_train, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = -2 * learning_rate * (y_train - predictions)\n        new_predictions = residuals\n        predictions += learning_rate * new_predictions\n    predictions_rounded = [round(x, 4) for x in predictions]\n    return predictions_rounded"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n    \n    Parameters:\n    X (np.array): An array of shape (n_samples, n_features) containing the samples.\n    mean (np.array): The mean vector of the distribution (length n_features).\n    cov (np.array): The covariance matrix of shape (n_features, n_features), assumed to be positive-definite.\n    \n    Returns:\n    list: A list of PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    X = X.reshape((X.shape[0], 1))\n    mean = np.array(mean).reshape((-1, 1))\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    epsilon = 1e-10 * np.max(np.abs(det_cov))\n    adjusted_det_cov = det_cov + epsilon\n    inv_cov = np.linalg.inv(cov)\n    diff = X - mean\n    exponent = np.sum(diff.dot(inv_cov) * diff, axis=1) / -2\n    pdf_values = np.exp(exponent) / np.sqrt((2 * np.pi) ** n_features * adjusted_det_cov)\n    rounded_pdf_values = [round(val, 4) for val in pdf_values]\n    return rounded_pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    (N, M) = X.shape\n    if isinstance(mu, float):\n        mu = np.full(M, mu)\n    else:\n        mu = np.asarray(mu)\n    if isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    elif isinstance(V, np.ndarray) and V.shape == (M, M):\n        pass\n    else:\n        raise ValueError('V must be a scalar, a 1D array, or a symmetric positive-definite 2D array')\n    I = np.eye(M)\n    V_inv = np.linalg.inv(V)\n    S_posterior = np.linalg.inv(V_inv + X.T @ X)\n    mu_posterior = S_posterior @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_posterior\n    y_pred_rounded = [round(item, 4) for item in y_pred]\n    return y_pred_rounded\nN = 100\nM = 5\nX = np.random.rand(N, M)\nX_new = np.random.rand(10, M)\ny = np.dot(X, np.random.randn(M)) + np.random.normal(0, 2, size=N)"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Calculate the Root Mean Squared Logarithmic Error (RMSLE) for given actual and predicted values.\n    \n    Parameters:\n    actual (list[float]): A list of non-negative actual values.\n    predicted (list[float]): A list of non-negative predicted values.\n    \n    Returns:\n    float: The RMSLE rounded to four decimal places.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((val < 0 for val in actual + predicted)):\n        return -1\n    rmsle = np.sqrt(((np.log(1 + np.array(predicted)) - np.log(1 + np.array(actual))) ** 2).mean())\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if symmetric:\n        hann_window = [0.5 - 0.5 * math.cos(2 * math.pi * i / (window_len - 1)) for i in range(window_len)]\n    else:\n        hann_window = [0.5 - 0.5 * math.cos(2 * math.pi * i / window_len) for i in range(window_len + 1)]\n        hann_window = hann_window[:-1]\n    return [round(num, 4) for num in hann_window]"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout\n            is `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 4 and len(set(shape)) == 1:\n        fan_in = shape[1] * shape[3]\n        receptive_field_size = shape[2] * shape[3]\n        fan_out = shape[0] * receptive_field_size\n        return (fan_in, fan_out)\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n        return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_array = np.array(X, dtype=float)\n    y_array = np.array(y, dtype=float)\n    mean_y = np.mean(y_array)\n    predictions = [mean_y] * len(y)\n    if n_estimators <= 0 or learning_rate <= 0:\n        return [mean_y] * len(y)\n    for t in range(1, n_estimators + 1):\n        residuals = y_array - predictions[-1]\n        w = np.linalg.inv(X_array.T @ X_array) @ X_array.T @ residuals\n        weak_learner_preds = X_array @ w\n        new_prediction = predictions[-1] + learning_rate * weak_learner_preds\n        predictions.append(new_prediction)\n    predictions_rounded = [round(pred, 4) for pred in predictions]\n    return predictions_rounded"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.array(x)\n    if x.size == 1:\n        x = [x]\n    s = 1 / (1 + np.exp(-x))\n    if order == 0:\n        return np.round(s, 4).tolist()\n    elif order == 1:\n        return np.round(s * (1 - s), 4).tolist()\n    elif order == 2:\n        return np.round(s * (1 - s) * (1 - 2 * s), 4).tolist()\n    else:\n        return -1"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if num_classes < len(np.unique(y)):\n        return -1\n    one_hot_y = np.eye(num_classes)[y]\n    return one_hot_y.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def get_support(itemset, transactions):\n        return sum([1 for t in transactions if itemset.issubset(t)]) / len(transactions)\n\n    def prune(itemset, freq_set):\n        return all((get_support(subset, freq_set) >= min_sup for subset in itertools.chain(*[itertools.combinations(itemset, r) for r in range(1, len(itemset))])))\n    items = set(itertools.chain(*transactions))\n    freq_set = set()\n    candidates = [{item} for item in items]\n    while candidates:\n        freq_candidates = []\n        for candidate in candidates:\n            if prune(candidate, freq_set):\n                freq_candidates.append(candidate)\n                freq_set.add(tuple(sorted(candidate)))\n        yield from freq_set\n        candidates = [frequent.union(item) for frequent in freq_set for item in items if not frequent.issubset(item) and prune(frequent.union(item), freq_set)]\n        candidates = list(set(map(tuple, freq_candidates)))\ntransactions = [[1, 2, 3], [2, 3, 4], [1, 2, 4], [2, 3], [1, 2], [1, 3], [1, 4]]\nmin_sup = 0.5"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Aggregate per-tree class probability predictions in a random forest.\n    \n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to estimators,\n                     the second to samples, and the third to class probabilities. Each innermost list should\n                     form a valid probability distribution summing to 1.0.\n                     \n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged class probabilities \n               rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index for each sample obtained via arg-max\n               on the averaged probabilities.\n    \"\"\"\n    prob_matrix = np.array(predictions)\n    prob_matrix_t = prob_matrix.T\n    avg_prob_matrix = prob_matrix_t.mean(axis=0)\n    avg_prob_matrix = np.round(avg_prob_matrix, 4)\n    pred_labels = np.argmax(avg_prob_matrix, axis=1)\n    return (avg_prob_matrix.tolist(), pred_labels.tolist())"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task description.\n    It must return -1 on invalid input, otherwise a nested list containing the\n    kernel matrix rounded to four decimal places.\n    \"\"\"\n    if sigma <= 0:\n        return -1\n    if isinstance(sigma, list):\n        if len(sigma) != len(X[0]):\n            return -1\n    else:\n        sigma = [sigma] * len(X[0])\n    if Y is not None and X.shape[1] != Y.shape[1]:\n        return -1\n    (n, m) = (len(X), len(Y) if Y is not None else n)\n    K = np.zeros((n, m))\n    for (i, xi) in enumerate(X):\n        for (j, yj) in enumerate(Y or X):\n            dist = sum(((xi[k] - yj[k]) ** 2 / ss[k] for (k, ss) in enumerate(sigma)))\n            K[i, j] = np.exp(-0.5 * dist)\n    return [[round(num, 4) for num in row] for row in K]\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximizes the decrease of entropy (information gain) and\n    return a summarizing tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n\n    def entropy(y):\n        (unique, counts) = np.unique(y, return_counts=True)\n        prob = counts / len(y)\n        return -np.sum(prob * np.log2(prob))\n\n    def calculate_gain(parent_entropy, p_left, p_right):\n        return parent_entropy - p_left * entropy(y[:int(p_left * len(y))]) - p_right * entropy(y[int(p_right * len(y)):])\n\n    def get_majority_label(samples):\n        (_, counts) = np.unique(samples, return_counts=True)\n        idx = np.argmax(counts)\n        return idx\n\n    def find_best_split(X, y):\n        (n_samples, n_features) = X.shape\n        max_gain = -np.inf\n        best_feature_index = -1\n        best_threshold = None\n        for feature_index in range(n_features):\n            sorted_features = sorted(set(X[:, feature_index]))\n            for i in range(len(sorted_features) - 1):\n                threshold = round((sorted_features[i] + sorted_features[i + 1]) / 2, 4)\n                left_mask = X[:, feature_index] <= threshold\n                right_mask = ~left_mask\n                left_y = y[left_mask]\n                right_y = y[right_mask]\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n                parent_entropy = entropy(y)\n                p_left = sum(left_mask) / len(y)\n                p_right = sum(right_mask) / len(y)\n                current_gain = calculate_gain(parent_entropy, p_left, p_right)\n                if current_gain > max_gain:\n                    max_gain = current_gain\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    left_majority_label = get_majority_label(left_y)\n                    right_majority_label = get_majority_label(right_y)\n        return (best_feature_index, round(best_threshold, 4), left_majority_label, right_majority_label) if max_gain >= 0 else (-1, None, get_majority_label(y), get_majority_label(y))\n    (y_unique, y_counts) = np.unique(y, return_counts=True)\n    majority_label = y_unique[np.argmax(y_counts)]\n    if len(np.unique(y)) == 1:\n        return (-1, None, majority_label, majority_label)\n    return find_best_split(X, y)\nX = [[3.5, 2.8, 6], [1.2, 3.7, 9], [4.3, 5.2, 5], [2.6, 1.6, 4]]\ny = [1, 1, 0, 0]"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"\n    Split the data set X into two subsets based on a feature column and threshold.\n\n    Parameters:\n        X (np.ndarray | List[list]): 2-D iterable (list or ndarray).\n        feature_i (int): Index of the feature to split on.\n        threshold: Value for the splitting threshold.\n\n    Returns:\n        List[list]: A list of length two containing the two resulting subsets.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if len(X.shape) != 2:\n        raise ValueError('Input X must be a 2-dimensional array.')\n    X_subset1 = []\n    X_subset2 = []\n    indices = np.arange(len(X))\n    for index in indices:\n        if isinstance(threshold, (int, float)):\n            if X[index, feature_i] >= threshold:\n                X_subset1.append(list(X[index]))\n            else:\n                X_subset2.append(list(X[index]))\n        elif X[index, feature_i] == threshold:\n            X_subset1.append(list(X[index]))\n        else:\n            X_subset2.append(list(X[index]))\n    return [list(map(np.array, X_subset1)).tolist(), list(map(np.array, X_subset2)).tolist()]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if not isinstance(Q, np.ndarray) or not isinstance(Q_next, np.ndarray):\n        return -1\n    if len(Q) != len(Q_next):\n        return -1\n    if not all((isinstance(x, int) and x >= 0 and (x < Q.shape[1]) for x in actions)):\n        return -1\n    if not all((isinstance(x, (int, float)) for x in rewards)):\n        return -1\n    if not all((isinstance(x, bool) for x in dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q = Q.copy()\n    Q_next = Q_next.copy()\n    y = Q.copy()\n    for (i, act) in enumerate(actions):\n        if dones[i]:\n            y[i][act] = rewards[i]\n        else:\n            y[i][act] = rewards[i] + gamma * np.max(Q_next[i])\n    y = np.round(y, 4).tolist()\n    return y\nQ = np.random.rand(5, 3)\nQ_next = np.random.rand(5, 3)\nactions = list(np.random.randint(0, 3, 5))\nrewards = rewards.tolist()\ndones = [False, True, False, False, False]\ngamma = 0.9"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels_np = np.array(labels, dtype=int)\n    if not np.all(labels_np >= 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels_np) + 1\n    if num_classes < num_classes:\n        return -1\n    one_hot_labels = np.eye(num_classes)[labels_np]\n    result = [list(row) for row in one_hot_labels]\n    return result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if not x or not y or len(x) != len(y):\n        raise ValueError(\"Input lists 'x' and 'y' must have the same length.\")\n    if n_estimators <= 0:\n        return [np.mean(y)] * len(x)\n    m = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    pred = np.full(m, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - pred\n        if np.allclose(residuals, 0):\n            break\n        unique_x = np.unique(x)\n        min_sse = np.inf\n        t_optimal = None\n        v_left = v_right = np.mean(residuals)\n        for split_val in unique_x[:-1]:\n            left_mask = x <= split_val\n            right_mask = x > split_val\n            if np.any(left_mask) and np.any(right_mask):\n                left_residuals = residuals[left_mask]\n                right_residuals = residuals[right_mask]\n                sse_left = np.sum(left_residuals ** 2)\n                sse_right = np.sum(right_residuals ** 2)\n                if sse_left + sse_right < min_sse:\n                    min_sse = sse_left + sse_right\n                    t_optimal = split_val\n                    v_left = np.mean(left_residuals)\n                    v_right = np.mean(right_residuals)\n        pred += learning_rate * (v_left * left_mask.astype(bool) + v_right * right_mask.astype(bool))\n    return np.round(pred, 4).tolist()\nx = [1, 2, 3, 4, 5]\ny = [1.2, 2.3, 3.4, 4.5, 5.6]"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        expected_next_q = 0\n    else:\n        possible_actions = [q for q in q_table[next_state] if q > -0.01]\n        if not possible_actions:\n            expected_next_q = 0\n        else:\n            probabilities = [(1 - epsilon) / len(possible_actions)] * len(possible_actions)\n            epsilon_part = epsilon / len(possible_actions)\n            greedy_action_index = possible_actions.index(max(possible_actions))\n            probabilities[greedy_action_index] += epsilon_part\n            all_rewards = []\n            for (i, action) in enumerate(possible_actions):\n                all_rewards.append(action + gamma * q_table[next_state][i])\n            expected_next_q = np.dot(all_rewards, probabilities)\n    target = reward + gamma * expected_next_q\n    new_q_value = q_table[state][action] + lr * (target - q_table[state][action])\n    new_q_value = max(new_q_value, -0.01)\n    q_table[state][action] = round(new_q_value, 4)\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n\n    def point_gen(m, interval):\n        for i in range(m):\n            low_x = (np.floor(i / 2) + 0.1) * 10\n            high_x = (np.floor(i / 2) + 0.9) * 10\n            low_y = (i % 2 * interval + 0.1) * 10\n            high_y = (i % 2 * interval + 0.9) * 10\n            yield [(np.random.uniform(low_x, high_x), np.random.uniform(low_y, high_y))]\n    rng = np.random.RandomState(seed)\n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n    for i in range(m):\n        train_points = list(point_gen(i + 1, interval))\n        val_points = list(point_gen(i + 1, interval))\n        X_train.extend(np.round(np.array(train_points), 4))\n        X_val.extend(np.round(np.array(val_points), 4))\n        Y_train.extend([i - 0.5] * len(train_points))\n        Y_val.extend([i - 0.5] * len(val_points))\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad * grad\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    num_arms = len(rewards[0])\n    pulls = np.zeros(num_arms)\n    values = np.ones(num_arms) * ev_prior\n    np.random.seed(seed)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            i = np.random.randint(num_arms)\n        else:\n            i = np.argmax(values)\n        reward = rewards[t][i]\n        pulls[i] += 1\n        values[i] += (reward - values[i]) / pulls[i]\n    return [round(val, 4) for val in values]\nrewards = [[0.1, -0.1, 0.05], [0.05, -0.1, 0.05], [-0.1, 0.2, 0.1]]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n\n    def is_core_point(i):\n        count = 0\n        for j in range(n_samples):\n            if i != j and all(np.linalg.norm(data[i] - data[j]) <= eps):\n                count += 1\n        return count >= min_samples\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n        stack = [i]\n        while stack:\n            current = stack.pop()\n            if labels[current] == -1:\n                labels[current] = i\n                cluster_size = 0\n                for j in range(n_samples):\n                    if all(np.linalg.norm(data[current] - data[j]) <= eps):\n                        if labels[j] == -1:\n                            stack.append(j)\n                            labels[j] = i\n                        cluster_size += 1\n                if cluster_size >= min_samples:\n                    continue\n    return labels\ndata = np.array([[1, 2], [2, 6], [3, 1], [8, 9], [8, 7], [8, 5], [9, 8], [10, 11], [10, 12], [10, 10]])\neps = 2.5\nmin_samples = 2\nlabels = dbscan(data, eps, min_samples)"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels out of range. All labels must be in the range [0, num_classes).')\n    n_samples = len(y)\n    n_labels = num_classes\n    one_hot_matrix = np.zeros((n_samples, n_labels), dtype=np.int32)\n    one_hot_matrix[np.arange(n_samples), y] = 1\n    return one_hot_matrix"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) == 0:\n        return []\n\n    def compute_sse(left_indices, right_indices):\n        left_y = np.array(y_train)[left_indices]\n        right_y = np.array(y_train)[right_indices]\n        return np.sum(np.square(left_y - np.mean(left_y))) + np.sum(np.square(right_y - np.mean(right_y)))\n\n    def find_best_split(X, y, depth=0):\n        if len(X) <= 2 or depth >= max_depth:\n            return {'indices': range(len(X)), 'y': np.array(y)}\n        best_sse = float('inf')\n        best_split_idx = None\n        sorted_indices = sorted(range(len(X)), key=lambda i: X[i])\n        for idx in range(1, len(sorted_indices)):\n            (left_indices, right_indices) = (sorted_indices[:idx], sorted_indices[idx:])\n            left_X = np.array(X)[left_indices]\n            right_X = np.array(X)[right_indices]\n            left_y = np.array(y)[left_indices]\n            right_y = np.array(y)[right_indices]\n            sse = compute_sse(left_indices, right_indices)\n            if sse < best_sse:\n                best_sse = sse\n                best_split_idx = idx\n        if best_split_idx is None:\n            return {'indices': range(len(X)), 'y': np.array(y)}\n        left_split_node = find_best_split(left_X, left_y, depth + 1)\n        right_split_node = find_best_split(right_X, right_y, depth + 1)\n        return {'split_point': X[sorted_indices[best_split_idx]], 'left': left_split_node, 'right': right_split_node, 'leaf_value': np.mean(y)}\n    root = find_best_split(X_train, y_train)\n\n    def traverse(node, x_test):\n        if node['leaf_value'] != None:\n            return [node['leaf_value'] for _ in range(len(x_test))]\n        elif x_test[0] <= node['split_point']:\n            return traverse(node['left'], x_test)\n        else:\n            return traverse(node['right'], x_test)\n    return traverse(root, X_test)\nX_train = [1, 2, 3, 4, 5]\ny_train = [1.2, 2.3, 3.4, 4.5, 5.6]\nX_test = [0.5, 3.5, 6.5]"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | np.ndarray) -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    if not isinstance(x, np.ndarray):\n        raise TypeError('Input must be a list, tuple, or numpy array.')\n    if len(x.shape) != 1:\n        raise ValueError('Input must be a one-dimensional array.')\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def load_transactions_to_counter(transactions):\n        \"\"\"Load transactions into a Counter of item counts.\"\"\"\n        item_counts = Counter()\n        for transaction in transactions:\n            item_counts.update(transaction)\n        return item_counts\n\n    def construct_tree(item_counts, min_support):\n        \"\"\"Create an FP-Tree with item counts and minimum support.\"\"\"\n        frequent_items = {item: freq for (item, freq) in item_counts.items() if freq >= min_support}\n        return _construct_tree(frequent_items)\n\n    def _construct_tree(items, depth=0):\n        \"\"\"Helper function to recursively build the FP-Tree.\"\"\"\n        if not items:\n            return None\n        (item, freq) = max(items.items(), key=lambda x: x[1])\n        del items[item]\n        tree = {'item': item, 'freq': freq, 'children': [], 'pattern_base': []}\n        for (child_item, _) in items.items():\n            tree['pattern_base'].append((child_item, freq))\n            tree['children'].append(_construct_tree({child_item: freq}, depth + 1))\n        return tree\n\n    def count_paths(tree, prefix=None):\n        \"\"\"Count paths from root to leaf nodes.\"\"\"\n        if prefix is None:\n            prefix = []\n        if tree['item'] is not None:\n            pattern = tuple(sorted(prefix + [tree['item']]))\n            yield pattern\n            if tree['children']:\n                for path in count_paths(tree['children'][0], prefix + [tree['item']]):\n                    yield path\n        if tree['children']:\n            for child in tree['children']:\n                yield from count_paths(child)\n\n    def mine_frequent_sets(tree, min_support, prefix_count):\n        \"\"\"Recursively mine frequent sets from the constructed FP-Tree.\"\"\"\n        if tree['item'] is not None:\n            if tree['freq'] >= min_support:\n                for subset in itertools.combinations(tree['pattern_base'], len(tree['pattern_base'])):\n                    yield tuple(sorted(subset))\n            for child in tree['children']:\n                yield from mine_frequent_sets(child, min_support, prefix_count)\n        if tree['children']:\n            for child in tree['children']:\n                yield from mine_frequent_sets(child, min_support, prefix_count + 1)\n    item_counts = load_transactions_to_counter(transactions)\n    tree = construct_tree(item_counts, min_support)\n    patterns = []\n    for pattern in count_paths(tree):\n        if len(pattern) > 1:\n            patterns.append(pattern)\n    return sorted((sorted(t) for t in patterns))\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_support = 3"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    X_array = np.array(X)\n    indices_combinations = list(combinations_with_replacement(range(n_features), degree + 1))\n    result = []\n    for sample in X_array:\n        row = [1]\n        for combination in indices_combinations:\n            product = 1\n            for idx in combination:\n                product *= sample[idx]\n            row.append(product)\n        result.append(row)\n    return result"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1.0\n    y = np.array(y)\n    mean_y = np.mean(y)\n    sum_squared_diff = np.sum((y - mean_y) ** 2)\n    mse_value = sum_squared_diff / len(y)\n    return round(mse_value, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = [x]\n    y = [slope * xi + intercept for xi in x]\n    grad = [slope] * len(x)\n    grad2 = [0] * len(x)\n    return [[round(yi, 4) for yi in y], [round(gradi, 4) for gradi in grad], [round(grad2i, 4) for grad2i in grad2]]"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)\n    standardized_data = (data - mean) / std\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(min(k, n_features)):\n        max_abs_idx = np.argmax(np.abs(eigen_vectors[:, i]))\n        if eigen_vectors[max_abs_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n    projected_data = np.dot(standardized_data, eigen_vectors[:, :k])\n    return [[round(val, 4) for val in row] for row in projected_data]\ndata = np.array([[1, 2], [2, 3], [3, 4]])\nk = 1"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    y_mean = np.mean(y_train)\n    F = lambda x: y_mean\n    for _ in range(n_estimators):\n        residuals = y_train - F(X_train).reshape(-1)\n        (thresholds, left_residuals, right_residuals) = ([], [], [])\n        for i in range(len(X_train[0])):\n            threshold_values = [X_train[j][i] for j in range(len(X_train)) if y_train[j] == 1]\n            thresholds.append(np.median(threshold_values))\n            left_mask = X_train[:, i] <= thresholds[-1]\n            left_residuals.extend(residuals[left_mask])\n            right_residuals.extend(residuals[np.logical_not(left_mask)])\n        eta = learning_rate\n        c_left = np.sum(left_residuals) / len(left_residuals)\n        c_right = np.sum(right_residuals) / len(right_residuals)\n        F = lambda x: y_mean + eta * (c_left if x[0] <= thresholds[0] else c_right)\n    y_pred = [(F(x) > 0.5) * 1 for x in X_test]\n    return y_pred"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    X = X.reshape(-1, X.shape[-1])\n    (n_visible, n_hidden) = W.shape\n    n_samples = X.shape[0]\n    h0_prob = np.zeros((n_samples, n_hidden))\n    hk_prob = np.zeros((n_samples, n_hidden))\n    v0 = X\n    prob_h_given_v = 1 / (1 + np.exp(-(np.dot(v0, W.T) + hbias)))\n    h0_prob.fill(prob_h_given_v.mean(axis=0))\n    for _ in range(k):\n        prob_v_given_h = 1 / (1 + np.exp(-(np.dot(h0_prob, W) + vbias)))\n        h1_prob = 1 / (1 + np.exp(-(np.dot(prob_v_given_h, W.T) + hbias)))\n        h0_prob.fill(h1_prob.mean(axis=0))\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(prob_v_given_h.T, h0_prob)\n    W_new = W + learning_rate * ((pos_grad - neg_grad) / n_samples)\n    W_new_rounded = [[round(val, 4) for val in row] for row in W_new]\n    return W_new_rounded"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if len(x_array) != len(y_array):\n        return -1\n    difference = np.abs(x_array - y_array)\n    max_difference = np.max(difference)\n    return round(max_difference, 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -y * np.log(y_pred_clipped) - (1 - y) * np.log(1 - y_pred_clipped)\n    reconstruction_loss = np.mean(reconstruction_loss, axis=0)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    kl_divergence = np.mean(kl_divergence)\n    vae_loss = reconstruction_loss + kl_divergence\n    return round(vae_loss, 6)\ny = np.random.randint(2, size=(32, 10))\ny_pred = np.random.rand(32, 10)\nlatent_dim = 2\nt_mean = np.random.randn(32, latent_dim)\nt_log_var = np.zeros((32, latent_dim))"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    assert len(w) == len(X[0]), 'Length of w does not match number of columns in X.'\n    n_features = len(X[0])\n    assert V[0].shape[0] == n_features, 'Shape of V does not match number of columns in X.'\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    predictions = []\n    for (i, v_i) in enumerate(X_np):\n        part1 = w0 + np.dot(v_i, w)\n        part2 = 0.5 * np.sum(v_i[np.newaxis, :] @ V_np ** 2, axis=-1) - np.sum(v_i[np.newaxis, :] * V_np ** 2, axis=-1) / 2\n        predictions.append(round(part1 + part2, 4))\n    return predictions\nX = [[1.0, 2.0], [3.0, 4.0]]\nw0 = 0.0\nw = [-1.0, 1.0]\nV = [[-0.5, 0.5], [0.5, -0.5]]\npredictions = fm_predict(X, w0, w, V)"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    s = 1 / (1 + np.exp(-z))\n    return np.round(s, decimals=4).tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = np.argmax(actual, axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = np.argmax(predicted, axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(z, (float, int, list, np.ndarray)):\n        raise ValueError('Input must be a single value, a list, or a NumPy array.')\n    if isinstance(z, (list, np.ndarray)):\n        if not all((isinstance(i, (float, int)) and 0 <= i <= 1 for i in z)):\n            raise ValueError('All elements of the list or array must be within the range [0,1].')\n        grad = np.around(z * (1 - z), decimals=4)\n        return grad.tolist() if isinstance(z, list) else grad\n    else:\n        grad = np.around(z * (1 - z), decimals=4)\n        return grad"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with -1 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    X_array = np.array(X)\n    (x1_min, x1_max) = (X_array[:, 0].min(), X_array[:, 0].max())\n    (x2_min, x2_max) = (X_array[:, 1].min(), X_array[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (xx1, xx2) = np.meshgrid(x1_plot, x2_plot)\n    predictions = np.sign(np.dot(xx1.flatten(), W[0]) + np.dot(xx2.flatten(), W[1]) + b)\n    grid_predictions = predictions.reshape(grid_n, grid_n)\n    return grid_predictions.tolist()\nX = [[-1.5, 1.5], [0.0, 0.5], [2.0, -1.0]]\nW = [2.0, 1.0]\nb = -3.0\ngrid_n = 100"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels (each entry is 0 or 1).\n        X_test: 2-D NumPy array of shape (m_samples, n_features) containing the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    class_prior = np.array([np.sum(y_train == i) / float(n_samples) for i in [0, 1]])\n    means = {0: {}, 1: {}}\n    stds = {0: {}, 1: {}}\n    for class_idx in [0, 1]:\n        means[class_idx] = X_train[y_train == class_idx].mean(axis=0)\n        stds[class_idx] = X_train[y_train == class_idx].std(axis=0) + 1e-09\n    predictions = []\n    for test_sample in X_test:\n        prob_0 = np.log(class_prior[0])\n        prob_1 = np.log(class_prior[1])\n        for feature_index in range(n_features):\n            prob_0 += np.log(1 / np.sqrt(2 * np.pi * stds[0][feature_index])) - 0.5 * ((test_sample[feature_index] - means[0][feature_index]) ** 2 / stds[0][feature_index] ** 2)\n            prob_1 += np.log(1 / np.sqrt(2 * np.pi * stds[1][feature_index])) - 0.5 * ((test_sample[feature_index] - means[1][feature_index]) ** 2 / stds[1][feature_index] ** 2)\n        if prob_0 > prob_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross entropy cost\n    \n    Parameters:\n    AL (np.ndarray): The probability vectors for each class for all samples\n    Y (np.ndarray): True labels for each sample\n    \n    Returns:\n    float: The computed cost as a scalar value\n    \"\"\"\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -np.mean(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return -cost"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    alpha = np.zeros((N, len(observations)))\n    for i in range(N):\n        alpha[i, 0] = pi[i] * B[i, observations[0]]\n    for t in range(1, len(observations)):\n        for j in range(N):\n            for i in range(N):\n                alpha[j, t] += alpha[i, t - 1] * A[i, j]\n            alpha[j, t] *= B[j, observations[t]]\n    beta = np.zeros((N, len(observations)))\n    for t in range(len(observations) - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[i, t] += B[i, observations[t + 1]] * A[i, j] * beta[j, t + 1]\n    beta_sum = np.sum(beta[:, -1])\n    beta /= beta_sum\n    gamma = []\n    for i in range(N):\n        gamma_temp = alpha[i, -1] * beta[i, -1]\n        gamma.append(round(gamma_temp, 4))\n    if t == len(observations):\n        return gamma\n    else:\n        return []\nobservations = [0, 1, 0]"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    (n_samples, _) = data.shape\n    labels = [-1] * n_samples\n    dist_matrix = np.sqrt(((data[:, np.newaxis] - data) ** 2).sum(axis=2))\n    neighborhood_matrix = (dist_matrix < eps).astype(int)\n    core_points_indices = []\n    for i in range(n_samples):\n        if np.sum(neighborhood_matrix[i]) >= min_samples:\n            core_points_indices.append(i)\n            labels[i] = 1\n\n    def bfs(point_index):\n        q = deque([point_index])\n        while q:\n            current_point = q.popleft()\n            for neighbor_index in range(n_samples):\n                if neighbor_index != current_point and neighborhood_matrix[current_point, neighbor_index] == 1 and (labels[neighbor_index] == -1) and (np.sum(neighborhood_matrix[neighbor_index]) >= min_samples):\n                    labels[neighbor_index] = labels[current_point]\n                    q.append(neighbor_index)\n    for core_point_index in core_points_indices:\n        bfs(core_point_index)\n    return labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fit a Gaussian Mixture Model (GMM) using the Expectation-Maximization algorithm and return the cluster labels.\n    \n    Parameters:\n        data (np.ndarray): A 2D NumPy array of shape (N, D) where N is the number of samples and D is the number of features.\n        k (int): The number of Gaussian components in the GMM.\n        max_iter (int): The maximum number of iterations for EM algorithm.\n        epsilon (float): The tolerance threshold for convergence of the difference between old and new responsibilities.\n        \n    Returns:\n        labels (list[int]): A list of labels indicating the cluster assignment of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    means = data[np.random.choice(N, size=k, replace=False)]\n    covs = np.array([np.eye(D) for _ in range(k)])\n    w = np.ones(k) / k\n    np.random.seed(0)\n    for iteration in range(max_iter):\n        responsibilities = compute_responsibilities(data, means, covs, w)\n        (means, covs, w) = update_parameters(data, responsibilities, means, covs, w)\n        if np.max(np.abs(responsibilities - prev_responsibilities)) < epsilon:\n            break\n        prev_responsibilities = responsibilities.copy()\n    labels = responsibilities.argmax(axis=1)\n    sorted_labels = sorted(range(len(means)), key=lambda i: means[i][0])\n    labeled_means = [means[i] for i in sorted_labels]\n    labeled_w = w[sorted_labels].tolist()\n    final_labels = [labeled_means.index((mean,)) for (mean, label) in zip(labeled_means, labels)]\n    return final_labels\ndef compute_responsibilities(data, means, covs, w):\n    responsibilities = np.zeros((data.shape[0], len(means)))\n    for (i, mean_i, cov_i, w_i) in zip(range(len(means)), means, covs, w):\n        responsibilities[:, i] = w_i * multivariate_normal(data, mean_i, cov_i).pdf(data)\n    responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n    return responsibilities\ndef update_parameters(data, responsibilities, means, covs, w):\n    (N, D) = data.shape\n    neww = responsibilities.mean(axis=0)\n    newcovs = []\n    for i in range(len(means)):\n        weighted_diff = responsibilities[:, i][:, np.newaxis] * (data - means[i][:, np.newaxis]).T\n        weighted_diff = weighted_diff.T\n        newcovs.append(np.cov(data.T, aweights=responsibilities[:, i], bias=True))\n    return (np.array(neww), np.array(newcovs), np.array(neww))"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n    \n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n        \n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if gamma < 0:\n        raise ValueError('Gamma must be non-negative.')\n    dists = -gamma * np.sum(data[:, np.newaxis, :] ** 2 + data[np.newaxis, :, :] ** 2 - 2 * np.dot(data, data.T), axis=2)\n    sim_matrix = np.exp(dists)\n    Dinv_sqrt = np.diag(1 / np.sqrt(np.diag(sim_matrix)))\n    W = np.dot(np.dot(Dinv_sqrt, sim_matrix), Dinv_sqrt)\n    if method == 'normalized':\n        L = Dinv_sqrt.dot(W).dot(Dinv_sqrt)\n    else:\n        L = W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    idx = eigvals.argsort()[:-(n_cluster + 1):-1]\n    eigvecs = eigvecs[:, idx]\n    kmeans = KMeans(n_clusters=n_cluster, init=data[0:n_cluster])\n    kmeans.fit(eigvecs)\n    labels = kmeans.labels_\n    label_dict = {}\n    for (i, label) in enumerate(labels):\n        if label not in label_dict:\n            label_dict[label] = len(label_dict)\n    new_labels = [label_dict[label] for label in labels]\n    return new_labels\nclass KMeans:\n\n    def __init__(self, n_clusters, init='random'):\n        self.n_clusters = n_clusters\n        self.init = init\n        self.centroids = None\n\n    def fit(self, X):\n        self.centroids = X[:self.n_clusters].copy()\n\n    def predict(self, X):\n        return [np.argmin([np.linalg.norm(x - c) ** 2 for c in self.centroids]) for x in X]\ndata = np.random.rand(100, 2)\nn_clusters = 3"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels -1 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, _) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        for i in range(N):\n            g = np.sum((alpha[j] * y_data[j] * G[j, i] for j in range(N)))\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n        updated = False\n        for i in range(N):\n            g = np.sum((alpha[j] * y_data[j] * G[j, i] for j in range(N)))\n            if y_data[i] * (g + b) <= 0:\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.dot(alpha, y_data) * X_data\n    w = [round(num, 4) for sublist in w for num in sublist]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str) -> int | float:\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        label = root.label\n        value = features[label]\n        for child in root.child:\n            if child.x == value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        label = root.label\n        value = features[label]\n        if value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.metrics import entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (_, target_entropy) = np.unique(y, return_counts=True)\n    target_prob = target_entropy / n_samples\n    target_entropy = entropy(target_prob, base=2)\n    max_info_gain = -float('inf')\n    best_feature_index = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        feature_info_gain = 0\n        for val in unique_values:\n            subset_indices = np.where(feature_values == val)[0]\n            if len(subset_indices) == 0:\n                continue\n            subset_y = y[subset_indices]\n            subset_target_entropy = entropy(np.bincount(subset_y, minlength=len(unique_values)), base=2)\n            feature_info_gain += len(subset_indices) / n_samples * subset_target_entropy\n        info_gain = target_entropy - feature_info_gain\n        info_gain_rounded = round(info_gain, 6)\n        if info_gain_rounded > max_info_gain:\n            max_info_gain = info_gain_rounded\n            best_feature_index = feature_idx\n    return (best_feature_index, max_info_gain)"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    if epsilon <= 0 or epsilon >= 1:\n        raise ValueError('epsilon must be between 0 and 1')\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    max_paths = np.zeros(n_samples)\n    for _ in range(n_trees):\n        selected_indices = np.random.choice(n_samples, sample_size, replace=False)\n        tree = []\n        current_node = 0\n        while True:\n            feature_idx = np.random.choice(n_features)\n            min_val = data[selected_indices, feature_idx].min()\n            max_val = data[selected_indices, feature_idx].max()\n            threshold = np.random.uniform(min_val, max_val)\n            left_indices = selected_indices[data[selected_indices, feature_idx] < threshold]\n            right_indices = selected_indices[data[selected_indices, feature_idx] >= threshold]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                break\n            current_node += 1\n            tree.append((feature_idx, threshold, (left_indices, right_indices)))\n        for i in range(n_samples):\n            current_index = i\n            depth = 0\n            while True:\n                for node in tree:\n                    if current_index in node[1][0]:\n                        current_index = node[1][0].pop()\n                    elif current_index in node[1][1]:\n                        current_index = node[1][1].pop()\n                    else:\n                        continue\n                    depth += 1\n                    if len(node[1][0]) == 0 or len(node[1][1]) == 0:\n                        break\n            if len(tree) > 0:\n                max_paths[i] = depth\n    phi = 2 * math.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n    anomaly_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        anomaly_scores[i] = 2 ** (-max_paths[i] / phi)\n    sorted_indices = np.argsort(anomaly_scores)\n    cutoff = int(len(sorted_indices) * epsilon)\n    outliers = sorted_indices[-cutoff:]\n    return outliers.tolist()"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Implements Maximum Entropy classifier using Generalized Iterative Scaling (GIS).\n\n    Parameters:\n        X_train (np.ndarray): Training features.\n        y_train (np.ndarray): Training labels.\n        X_test (np.ndarray): Test features.\n        epsilon (float): Convergence threshold.\n        n_iter (int): Maximum number of iterations.\n\n    Returns:\n        list[int]: Predicted labels for each row in X_test.\n    \"\"\"\n    weights = np.zeros(X_train.shape[1])\n    train_counts = np.zeros((len(set(y_train)), X_train.shape[1]))\n    for (i, y) in enumerate(y_train):\n        train_counts[y, :] += X_train[i]\n    train_probs = train_counts.T / np.sum(train_counts, axis=1)\n    train_probs = train_probs.T\n    for _ in range(n_iter):\n        new_weights = np.zeros(weights.shape)\n        for (i, y) in enumerate(y_train):\n            for j in range(X_train.shape[1]):\n                if X_train[i, j] == 1:\n                    new_weights[j] += math.log(train_probs[y, j])\n        for j in range(X_train.shape[1]):\n            if X_train[:, j].sum() > 0:\n                new_weights[j] -= math.log(np.sum(train_probs * X_train[:, j]))\n        abs_updates = np.abs(new_weights - weights)\n        if abs_updates.max() < epsilon:\n            break\n        weights = new_weights\n    predictions = []\n    for test_sample in X_test:\n        log_probabilities = np.dot(test_sample, weights)\n        probabilities = np.exp(log_probabilities)\n        predictions.append(np.argmax(probabilities))\n    return predictions"}
{"task_id": 569, "completion_id": 0, "solution": "from typing import *\nimport collections\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n    \n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the cut_off\n    most frequent words. When cut_off is None all words are placed in the set.\n    Every ratio must be rounded to four decimal places.\n    \n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              (`label`, `words`) where `label` is ignored and `words` is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or None\n                 to include every word.\n                 \n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    all_words = [word for (doc_label, doc_words) in data for word in doc_words]\n    word_counts = collections.Counter(all_words)\n    sorted_words = sorted(word_counts.items(), key=lambda item: -item[1])\n    top_k = []\n    for (word, count) in sorted_words:\n        if cut_off is not None and len(top_k) >= cut_off:\n            break\n        ratio = count / sum(word_counts.values())\n        top_k.append((word, round(ratio, 4)))\n    return (top_k, {word for (word, _) in top_k})"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        w = [np.dot(alpha * y, X)]\n    else:\n        w = alpha[:, None] * y[:, None] * X.T\n    w = np.sum(w, axis=0)\n    b = 1 / len(y) * np.sum(y - np.dot(X, w))\n    w_rounded = np.round(w, decimals=4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Computes the Local Outlier Factor (LOF) for each sample in the data set.\n    \n    :param data: numpy.ndarray, a 2D array where each row represents a sample and each column a feature.\n    :param k: int, the number of neighbors to consider for calculating LOF.\n    :param epsilon: float, the threshold value for outlier detection. Defaults to 1.5.\n    :return: (list_of_scores, list_of_outlier_indices)\n        list_of_scores: A list of LOF scores rounded to four decimal places.\n        list_of_outlier_indices: A list of indices of samples whose LOF score is strictly greater than epsilon.\n    \"\"\"\n    n = data.shape[0]\n    dist_matrix = pairwise_distance(data)\n    k_dist_list = []\n    k_index_list = []\n    for i in range(n):\n        (_, indices) = dist_matrix[i].argsort()\n        k_dist_list.append(dist_matrix[i][indices[k]])\n        k_index_list.append(indices[:k])\n    reach_distances = []\n    for (p_idx, k_dist) in enumerate(k_dist_list):\n        distances = k_dist + dist_matrix[p_idx][k_index_list[p_idx]]\n        max_distance = np.max(np.array([k_dist, distances]))\n        reach_distances.append(max_distance)\n    lrd_values = np.divide(k, reach_distances)\n    lof_values = np.sum(lrd_values[k_index_list], axis=1) / k / lrd_values\n    round_lof_values = np.around(lof_values, decimals=4)\n    list_of_scores = round_lof_values.tolist()\n    outlier_indices = [idx for (idx, lof) in enumerate(round_lof_values) if lof > epsilon]\n    return (list_of_scores, outlier_indices)\ndata = np.random.rand(100, 2)\ndef pairwise_distance(X):\n    X_squared = np.sum(X ** 2, axis=1, keepdims=True)\n    Y_squared = np.sum(np.square(X.T), axis=0, keepdims=True)\n    dist_matrix = X_squared + Y_squared.T - 2 * np.dot(X, X.T)\n    return np.sqrt(np.clip(dist_matrix, 0, np.inf))"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility. If None the global random state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        X_train_batch = np.random.uniform(base + 1, base + 9, size=(n_train, 2))\n        y_train_batch = np.full(n_train, fill_value=c)\n        X_val_batch = np.random.uniform(base + 1, base + 9, size=(n_val, 2))\n        y_val_batch = np.full(n_val, fill_value=c)\n        X_train_batch = np.round(X_train_batch, 4)\n        X_val_batch = np.round(X_val_batch, 4)\n        X_train.append(X_train_batch)\n        X_val.append(X_val_batch)\n        y_train.append(y_train_batch)\n        y_val.append(y_val_batch)\n    X_train = np.vstack(X_train)\n    X_val = np.vstack(X_val)\n    y_train = np.hstack(y_train)\n    y_val = np.hstack(y_val)\n    return (X_train, X_val, y_train, y_val)\nm = 2\nn_train = 50\nn_val = 25\nseed = 42"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    if k > X.shape[0]:\n        raise ValueError('k cannot be greater than the number of points in X')\n    indices = np.random.permutation(k)[:k]\n    centroids = X[indices].copy()\n    labels = [-1] * X.shape[0]\n    for iter_ in range(max_iters):\n        new_labels = []\n        for point in X:\n            distances = np.linalg.norm(point[:, None] - centroids, axis=2)\n            min_distance_idx = np.argmin(distances)\n            new_labels.append(min_distance_idx)\n        if labels == new_labels:\n            break\n        for i in range(k):\n            points = [point for (j, point) in enumerate(X) if labels[j] == i]\n            if not points:\n                continue\n            centroid = np.mean(points, axis=0)\n            centroid = np.round(centroid, 4)\n            centroids[i] = centroid\n        labels = new_labels\n    return (labels, [list(map(float, centroid)) for centroid in centroids])\nX = np.array([[1.2, 3.4], [1.5, 3.6], [2.1, 3.8], [2.5, 4.0], [3.0, 4.2]])\nk = 2\nmax_iters = 10"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    This function performs batch gradient descent for the given number of\n    iterations and returns the learned weight vector and bias. All returned\n    values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float. Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return [[0.0] * X.shape[1], 0.0]\n    (m, n) = X.shape\n    weights = [0.0] * n\n    bias = 0.0\n    for _ in range(iterations):\n        y_hat = X.dot(np.array(weights)) + bias\n        residuals = y - y_hat\n        gradient_weights = 2 * X.T.dot(residuals) - l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = 2 * residuals.sum()\n        weights = weights - learning_rate / m * gradient_weights\n        bias = bias - learning_rate / m * gradient_bias\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[np.ndarray]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    This function takes in a list of weight matrices and a feature vector, computes the output \n    of the neural network, and returns the prediction rounded to four decimals.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    prev_output = np.array(x).reshape(-1, 1)\n    for W in weights:\n        current_input = prev_output\n        for neuron_weights in W:\n            weighted_sum = np.dot(current_input, neuron_weights[1:]) + neuron_weights[0]\n            relu_output = np.maximum(0, weighted_sum)\n            current_input = relu_output\n        output = np.dot(relu_output, weights[-1][-1])\n        prev_output = output\n    return round(float(output), 4)\nweights = [[[0.157, -0.0481, 0.3816, -0.4679, 0.0877, -0.4656, 0.0816, -0.0652, 0.0133, -0.3602], [0.1919, -0.3827, -0.1884, 0.0521, 0.4346, 0.2739, 0.1842, 0.3002, -0.1205, -0.0345]], [[0.4961, 0.4172, -0.1538, -0.3934, 0.0923, 0.0699, 0.2575, 0.076, 0.2158, -0.1158], [-0.0046, 0.1857, 0.2035, 0.3141, -0.3961, 0.3031, 0.0633, -0.3641, 0.1236, -0.2362], [0.0116, -0.1027, -0.1535, 0.3737, -0.1266, -0.0544, -0.1384, -0.4815, 0.0431, -0.277]], [[0.0292, 0.2818, 0.3854, -0.118, -0.3449, -0.2167, 0.1177, 0.3219, -0.3041, -0.3455]]]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: np.ndarray, k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    This function performs the K-Means clustering algorithm from scratch,\n    returning the centroids only after convergence.\n    \n    Parameters:\n    - X (np.ndarray): A 2D array containing features.\n    - k (int): The number of clusters.\n    - max_iters (int): Maximum number of iterations.\n    \n    Returns:\n    - list[list[float]]: Sorted, rounded centroids.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k]\n    for _ in range(max_iters):\n        assignments = []\n        new_centroids = []\n        for x in X:\n            distances = np.linalg.norm(x[:, None] - centroids, axis=2)\n            closest_centroid_index = np.argmin(distances)\n            assignments.append(closest_centroid_index)\n        for i in range(k):\n            indices_of_points_in_cluster_i = np.where(np.array(assignments) == i)[0]\n            points_in_cluster_i = X[indices_of_points_in_cluster_i]\n            if len(points_in_cluster_i) > 0:\n                new_centroid = np.mean(points_in_cluster_i, axis=0)\n            else:\n                new_centroid = centroids[i]\n            new_centroids.append(new_centroid)\n        new_centroids = np.array(new_centroids)\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        else:\n            centroids = new_centroids\n    sorted_centroids = sorted(centroids)\n    sorted_rounded_centroids = [[round(num, 4) for num in centroid] for centroid in sorted_centroids]\n    return sorted_rounded_centroids\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\nk = 2"}

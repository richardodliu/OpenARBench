{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the dot product between a matrix and a vector, returning the result vector.\n    Returns -1 if the matrix and vector dimensions do not allow for this operation.\n    \n    :param a: A list of lists of integers or floats, representing a matrix.\n    :param b: A list of integers or floats, representing a vector.\n    :return: A list of integers or floats, representing the resulting vector after dot product,\n             or -1 if the operation cannot be performed due to dimension mismatch.\n    \"\"\"\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "from typing import List\ndef transpose_matrix(a: List[List[int | float]]) -> List[List[int | float]]:\n    \"\"\"\n    Computes the transpose of a given matrix.\n    \n    Args:\n        a (List[List[int | float]]): The input matrix as a list of lists, where each inner list represents a row of the matrix.\n    \n    Returns:\n        List[List[int | float]]: The transposed matrix.\n    \"\"\"\n    return [list(i) for i in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes a given 2D matrix `a` into a new shape specified by `new_shape`.\n    \n    Parameters:\n        a (list[list[int | float]]): The original matrix to reshape.\n        new_shape (tuple[int, int]): The desired shape of the reshaped matrix.\n        \n    Returns:\n        list[list[int | float]]: The reshaped matrix as a Python list or [] if reshaping is not possible.\n    \"\"\"\n    arr = np.array(a)\n    if arr.size != new_shape[0] * new_shape[1]:\n        return []\n    else:\n        try:\n            reshaped_arr = arr.reshape(new_shape)\n            return reshaped_arr.tolist()\n        except ValueError:\n            return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculates the mean of each row or column in a given matrix.\n    \n    Args:\n    - matrix (list[list[float]]): A two-dimensional list representing the matrix.\n    - mode (str): Either 'row' or 'column', indicating the direction of calculation.\n    \n    Returns:\n    - list[float]: A list containing the calculated means.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return []\n    if mode == 'row':\n        transposed = list(zip(*matrix))\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        return [sum(column) / len(column) for column in list(zip(*matrix))]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the matrix by the scalar value provided.\n    \n    :param matrix: A 2D list representing the matrix.\n    :param scalar: An integer or floating-point number to multiply the matrix elements.\n    :return: The resulting matrix after multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculates the eigenvalues of a given 2x2 matrix and returns them sorted from highest to lowest.\n    \n    :param matrix: A 2x2 matrix represented as a list of lists.\n    :return: A list containing the eigenvalues sorted from highest to lowest.\n    \"\"\"\n    matrix_np = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(matrix_np)\n    sorted_eigenvalues = sorted(eigenvalues, reverse=True)\n    return sorted_eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transform matrix A using the operation T^-1 * A * S.\n    \n    Parameters:\n    A (List[List[int | float]]): Input matrix to be transformed.\n    T (List[List[int | float]]): Left transformation matrix.\n    S (List[List[int | float]]): Right transformation matrix.\n    \n    Returns:\n    List[List[int | float]]: Transformed matrix, or -1 if the operation cannot be performed.\n    \"\"\"\n    A_np = np.array(A)\n    T_np = np.array(T)\n    S_np = np.array(S)\n    if A_np.shape[0] != T_np.shape[0] or A_np.shape[1] != S_np.shape[1]:\n        return -1\n    try:\n        inv_T = np.linalg.inv(T_np)\n    except np.linalg.LinAlgError:\n        return -1\n    try:\n        inv_S = np.linalg.inv(S_np)\n    except np.linalg.LinAlgError:\n        return -1\n    transformed_A = np.round(np.dot(inv_T, np.dot(A_np, inv_S)), 4)\n    return transformed_A.tolist()\nA = [[1, 2], [3, 4]]\nT = [[5, 6], [7, 8]]\nS = [[9, 10], [11, 12]]"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculates the inverse of a 2x2 matrix.\n    \n    Args:\n    matrix (list[list[float]]): A 2-dimensional list representing a 2x2 matrix.\n    \n    Returns:\n    list[list[float]]: The inverse of the matrix as a 2-dimensional list. Returns None if the matrix is not invertible.\n    \"\"\"\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_det = 1.0 / det\n    inv_matrix = [[d * inv_det, -b * inv_det], [-c * inv_det, a * inv_det]]\n    return inv_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for __ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "from typing import List\nimport numpy as np\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculates the covariance matrix for a set of vectors.\n    \n    Args:\n    vectors (List[List[float]]): A list of lists where each inner list represents a vector.\n    \n    Returns:\n    List[List[float]]: The covariance matrix as a list of lists.\n    \"\"\"\n    data = np.array(vectors).T\n    cov_matrix = np.cov(data)\n    return cov_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system of linear equations Ax=b using the Jacobi iterative method.\n    \n    Parameters:\n        A (np.ndarray): Coefficient matrix of the system.\n        b (np.ndarray): Right-hand side column vector.\n        n (int): Number of iterations.\n        \n    Returns:\n        list: Approximate solution vector x after n iterations, each value rounded to 4 decimal places.\n    \"\"\"\n    assert A.shape[0] == A.shape[1], 'Matrix A must be square'\n    assert A.shape[0] == b.shape[0], 'Dimensions of A and b do not match.'\n    D = np.diag(np.diag(A))\n    R = A - D\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.linalg.solve(D, b - np.dot(R, x))\n        x = x_new\n    return np.round(x, 4).tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix A using eigenvalue decomposition.\n    \n    Parameters:\n        A (np.ndarray): 2x2 input matrix\n    \n    Returns:\n        tuple: Singular values of A\n    \"\"\"\n    ATA = np.dot(A.T, A)\n    trace = np.trace(ATA)\n    det = np.linalg.det(ATA)\n    discriminant = np.sqrt(trace ** 2 / 4 - det)\n    lambda1 = trace / 2 + discriminant\n    lambda2 = trace / 2 - discriminant\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    return (round(sigma1, 4), round(sigma2, 4))\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 13, "completion_id": 0, "solution": "def submatrix(matrix: list[list[int | float]], row_to_remove: int, col_to_remove: int) -> list[list[int | float]]:\n    \"\"\"\n    Generates a submatrix from the given matrix by removing specified row and column.\n    \"\"\"\n    return [[matrix[row][col] for col in range(len(matrix[0])) if col != col_to_remove] for row in range(len(matrix)) if row != row_to_remove]\ndef determinant_2x2(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Computes the determinant of a 2x2 matrix.\n    \"\"\"\n    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\ndef determinant_nxn(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Recursive function to calculate the determinant for nxn matrix (n >= 2).\n    \"\"\"\n    if len(matrix) == 2:\n        return determinant_2x2(matrix)\n    det = 0\n    for col in range(len(matrix)):\n        sign = (-1) ** col\n        sub_mat = submatrix(matrix, 0, col)\n        det += sign * matrix[0][col] * determinant_nxn(sub_mat)\n    return det\ndef determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculates the determinant of a 4x4 matrix using Laplace's expansion.\n    \"\"\"\n    return determinant_nxn(matrix)"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation method.\n    \n    Args:\n    X (list[list[float]]): A matrix of features (2D list).\n    y (list[float]): A vector of target values (1D list).\n    \n    Returns:\n    list[float]: Coefficients of the linear regression model (rounded to 4 decimal places).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X = np.column_stack([np.ones(len(X)), X])\n    theta = np.linalg.inv(X.T @ X) @ X.T @ y\n    return [round(num, 4) for num in theta]\nX = [[1], [2], [3], [4], [5]]\ny = [1, 2, 3, 4, 5]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Perform linear regression using gradient descent on given features and target values.\n    \n    Parameters:\n    - X: np.ndarray, features matrix with an additional column of ones for the intercept term.\n    - y: np.ndarray, target values.\n    - alpha: float, learning rate for the gradient descent.\n    - iterations: int, number of iterations to perform gradient descent.\n    \n    Returns:\n    A list of coefficients, rounded to the nearest 4th decimal place.\n    \"\"\"\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        hypothesis = np.dot(X, theta)\n        loss = hypothesis - y\n        gradient = np.dot(X.T, loss) / m\n        theta -= alpha * gradient\n    return np.round(theta, decimals=4).tolist()\nX = np.array([[1, 20], [1, 5], [1, 10], [1, 30]])\ny = np.array([100, 20, 90, 110])\nalpha = 0.01\niterations = 1000"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    This function receives a 2D NumPy array 'data' where each row corresponds to a data point\n    and each column to a feature. It returns two lists of lists:\n    the first one containing the standardized form of the data,\n    and the second one containing the min-max normalized version of the same data.\n    Each value in the returned lists is rounded to the nearest fourth decimal place.\n\n    :param data: 2D NumPy array representing the dataset.\n    :return: Tuple of two 2D lists - Standardized and Min-Max Normalized versions of the dataset.\n    \"\"\"\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0)\n    standardized_data = ((data - means) / stds).round(4).tolist()\n    mins = np.min(data, axis=0)\n    maxs = np.max(data, axis=0)\n    normalized_data = ((data - mins) / (maxs - mins)).round(4).tolist()\n    return (standardized_data, normalized_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    Implements the k-means clustering algorithm.\n\n    Parameters:\n        points (list[tuple[float, float]]): A list of points, where each point is a tuple of coordinates (x, y).\n        k (int): The number of clusters to form.\n        initial_centroids (list[tuple[float, float]]): Initial centroids for the clusters.\n        max_iterations (int): Maximum number of iterations before stopping.\n\n    Returns:\n        list[tuple[float, float]]: List of final centroids after the algorithm has run for the specified number of iterations or until convergence.\n    \"\"\"\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        for i in range(k):\n            if len(points[closest_centroids == i]) > 0:\n                centroids[i] = np.mean(points[closest_centroids == i], axis=0)\n    centroids_rounded = np.round(centroids, decimals=4).tolist()\n    return centroids_rounded"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generates train and test indices for K-Fold Cross-Validation.\n\n    Parameters:\n        X (np.ndarray): Feature matrix.\n        y (np.ndarray): Target array.\n        k (int): Number of folds.\n        shuffle (bool): Whether to shuffle the data before splitting into batches.\n        random_seed (int or None): Random seed for reproducibility if shuffling is enabled.\n    \n    Returns:\n        list of tuples: Each tuple contains two elements, where the first element is a list of training indices,\n                        and the second element is a list of test indices for each fold.\n    \"\"\"\n    assert len(X) == len(y), 'The length of X and y must be the same.'\n    indices = np.arange(len(X))\n    if shuffle:\n        rng = np.random.RandomState(random_seed)\n        rng.shuffle(indices)\n    fold_sizes = np.full(k, len(X) // k, dtype=int)\n    fold_sizes[:len(X) % k] += 1\n    current = 0\n    result = []\n    for fold_size in fold_sizes:\n        (start, stop) = (current, current + fold_size)\n        test_indices = indices[start:stop]\n        train_indices = np.concatenate([indices[:start], indices[stop:]])\n        result.append((train_indices.tolist(), test_indices.tolist()))\n        current = stop\n    return result"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform PCA on the given data.\n    \n    Parameters:\n    - data: A 2D numpy array where each row is a data point and each column is a feature.\n    - k: Number of principal components to return\n    \n    Returns:\n    A list of lists containing the top k principal components.\n    \"\"\"\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0, ddof=1)\n    standardized_data = (data - means) / std_devs\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    top_k_eigenvectors = eigenvectors[:, sorted_indices[:k]]\n    rounded_top_k_eigenvectors = np.round(top_k_eigenvectors, decimals=4)\n    return rounded_top_k_eigenvectors.T.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(class_y):\n    \"\"\"\n    Calculate the entropy of a list of class labels.\n    \"\"\"\n    (_, counts) = zip(*Counter(class_y).items())\n    probabilities = [count / len(class_y) for count in counts]\n    entropy_value = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return entropy_value\ndef partition_by(attribute, examples):\n    \"\"\"\n    Partition the examples based on the given attribute.\n    Returns a dictionary where keys are the values of the attribute and values are lists of examples having that value.\n    \"\"\"\n    partitions = {}\n    for example in examples:\n        value = example[attribute]\n        if value not in partitions:\n            partitions[value] = []\n        partitions[value].append(example)\n    return partitions\ndef info_gain(dataset, attr, target_attr):\n    \"\"\"\n    Calculate the information gain of splitting the dataset by the given attribute.\n    \"\"\"\n    total_entropy = entropy([example[target_attr] for example in dataset])\n    partitions = partition_by(attr, dataset)\n    weighted_entropy = sum((len(partition) / len(dataset) * entropy([example[target_attr] for example in partition]) for partition in partitions.values()))\n    return total_entropy - weighted_entropy\ndef choose_best_feature_to_split(dataset, attributes, target_attr):\n    \"\"\"\n    Choose the best feature to split the dataset based on the highest information gain.\n    \"\"\"\n    gains = [(info_gain(dataset, attr, target_attr), attr) for attr in attributes if attr != target_attr]\n    return max(gains)[1]\ndef majority_vote(partitions):\n    \"\"\"\n    For a given set of partitions, return the majority label.\n    \"\"\"\n    labels = [Counter(partition[target_attr]).most_common(1)[0][0] for partition in partitions.values()]\n    return Counter(labels).most_common(1)[0][0]\ndef build_tree(examples, attributes, target_attr):\n    \"\"\"\n    Recursively build a decision tree from the examples.\n    \"\"\"\n    class_counts = Counter((example[target_attr] for example in examples))\n    if len(class_counts) == 1:\n        return class_counts.most_common(1)[0][0]\n    if len(attributes) == 0:\n        return majority_vote(partition_by(target_attr, examples))\n    best_attr = choose_best_feature_to_split(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    partitions = partition_by(best_attr, examples)\n    remaining_attributes = [attr for attr in attributes if attr != best_attr]\n    for (value, subset) in partitions.items():\n        subtree = build_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Build a decision tree from the given examples.\n    \"\"\"\n    return build_tree(examples, attributes, target_attr)\nattributes = ['age', 'income', 'student', 'credit_rating']\nexamples = [{'age': '<=30', 'income': 'high', 'student': 'yes', 'credit_rating': 'fair', 'bought_computer': 'no'}, {'age': '<=30', 'income': 'high', 'student': 'no', 'credit_rating': 'excellent', 'bought_computer': 'no'}, {'age': '31...40', 'income': 'medium', 'student': 'no', 'credit_rating': 'fair', 'bought_computer': 'yes'}, {'age': '>40', 'income': 'low', 'student': 'no', 'credit_rating': 'fair', 'bought_computer': 'yes'}, {'age': '>40', 'income': 'low', 'student': 'yes', 'credit_rating': 'fair', 'bought_computer': 'yes'}]\ntree = learn_decision_tree(examples, attributes, 'bought_computer')"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x1, x2):\n    \"\"\"Linear kernel for dot product.\"\"\"\n    return np.dot(x1, x2)\ndef rbf_kernel(x1, x2, sigma):\n    \"\"\"RBF kernel for similarity measure.\"\"\"\n    distance = np.linalg.norm(x1 - x2) ** 2\n    return np.exp(-distance / (2 * sigma ** 2))\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alphas = np.zeros(n_samples)\n    support_vectors = data\n    support_vector_labels = labels\n    for t in range(1, iterations + 1):\n        eta_t = 1 / (lambda_val * t)\n        prediction = np.zeros(n_samples)\n        for i in range(n_samples):\n            k_sum = 0\n            for j in range(n_samples):\n                if kernel == 'linear':\n                    k_sum += alphas[j] * support_vector_labels[j] * linear_kernel(support_vectors[j], data[i])\n                elif kernel == 'rbf':\n                    k_sum += alphas[j] * support_vector_labels[j] * rbf_kernel(support_vectors[j], data[i], sigma)\n            prediction[i] = k_sum\n        for i in range(n_samples):\n            loss = max(0, 1 - labels[i] * prediction[i])\n            if loss > 0:\n                alphas[i] = (1 - eta_t * lambda_val) * alphas[i] + eta_t * labels[i]\n            else:\n                alphas[i] = (1 - eta_t * lambda_val) * alphas[i]\n    bias = 0\n    for i in range(n_samples):\n        pred = np.sum([alphas[j] * support_vector_labels[j] * rbf_kernel(support_vectors[j], support_vectors[i], sigma) for j in range(n_samples)]) + bias\n        if labels[i] * pred > 1:\n            bias += labels[i] - pred\n    alphas_rounded = np.round(alphas, 4).tolist()\n    bias_rounded = round(bias, 4)\n    return (alphas_rounded, bias_rounded)\ndata = np.array([[1, 2], [2, 3], [3, 4]])\nlabels = np.array([1, -1, 1])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid of the input value z and returns it rounded to 4 decimal points.\n    \n    :param z: A floating point number representing the input to the sigmoid function.\n    :return: The sigmoid value of z rounded to 4 decimal points.\n    \"\"\"\n    sig = 1 / (1 + math.exp(-z))\n    return round(sig, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax of a list of scores.\n    \n    Args:\n    scores (list[float]): A list of numeric scores.\n    \n    Returns:\n    list[float]: A list of softmax values for the input scores, rounded to 4 decimal places.\n    \"\"\"\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predictions = []\n    squared_errors = []\n    for i in range(len(features)):\n        weighted_sum = np.dot(np.array(features[i]), np.array(weights)) + bias\n        prediction = sigmoid(weighted_sum)\n        predictions.append(prediction)\n        error = (labels[i] - prediction) ** 2\n        squared_errors.append(error)\n    predictions = np.round(predictions, 4).tolist()\n    mse = np.mean(squared_errors)\n    mse = round(mse, 4)\n    return (predictions, mse)\nfeatures = [[0.2, 0.3, 0.5], [0.6, 0.7, 0.8], [0.9, 0.1, 0.4]]\nlabels = [1, 0, 1]\nweights = [0.4, 0.5, 0.6]\nbias = 0.2"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    \"\"\"Derivative of the sigmoid function.\"\"\"\n    return x * (1 - x)\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Mean Squared Error loss function.\"\"\"\n    return np.mean((y_true - y_pred) ** 2)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    \"\"\"\n    Trains a single neuron with sigmoid activation using backpropagation.\n    \n    Parameters:\n    features (np.ndarray): Input data (n_samples, n_features).\n    labels (np.ndarray): True binary labels (n_samples, ).\n    initial_weights (np.ndarray): Initial weights.\n    initial_bias (float): Initial bias.\n    learning_rate (float): Learning rate for weight updates.\n    epochs (int): Number of training epochs.\n    \n    Returns:\n    tuple: Final weights, final bias, list of MSE values for each epoch.\n    \"\"\"\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for epoch in range(epochs):\n        predictions = sigmoid(np.dot(features, weights) + bias)\n        error = labels - predictions\n        d_predictions = error * sigmoid_derivative(predictions)\n        weights += learning_rate * np.dot(features.T, d_predictions)\n        bias += learning_rate * np.sum(d_predictions)\n        mse = mean_squared_error(labels, predictions)\n        mse_values.append(round(mse, 4))\n    return (weights.tolist(), round(bias, 4), mse_values)\nfeatures = np.array([[0.5, 0.3], [0.8, 0.6], [0.1, 0.9]])\nlabels = np.array([1, 0, 1])\ninitial_bias = 0.5\nlearning_rate = 0.1\nepochs = 100"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __repr__(self):\n        return f'Value(data={self.data})'\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __radd__(self, other):\n        return self.__add__(other)\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def __rmul__(self, other):\n        return self.__mul__(other)\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to basis C.\n    \n    Parameters:\n        B (list[list[int]]): A list of 3-dimensional vectors representing basis B.\n        C (list[list[int]]): A list of 3-dimensional vectors representing basis C.\n        \n    Returns:\n        list[list[float]]: The transformation matrix P from basis B to C, rounded to 4 decimals.\n    \"\"\"\n    B_matrix = np.array(B)\n    C_matrix = np.array(C)\n    C_to_standard = np.linalg.inv(C_matrix.T)\n    B_to_standard = np.linalg.inv(B_matrix.T)\n    P = C_to_standard @ B_to_standard\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 1], [1, 1, 0], [1, 0, 0]]\nP = transform_basis(B, C)"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the SVD of a 2x2 matrix A.\n    \n    Parameters:\n    - A (np.ndarray): a 2x2 numpy array\n    \n    Returns:\n    - tuple: (U, S, V), where U, S, V are numpy arrays representing the SVD of A\n    \"\"\"\n    ATA = A.T @ A\n    (eigen_vals, eigen_vecs) = np.linalg.eig(ATA)\n    idx = eigen_vals.argsort()[::-1]\n    eigen_vals = eigen_vals[idx]\n    eigen_vecs = eigen_vecs[:, idx]\n    singular_values = np.sqrt(eigen_vals.real)\n    S = np.diag(singular_values)\n    V = eigen_vecs\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 0:\n            U[:, i] = np.dot(A, V[:, i]).real / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    (U, _) = np.linalg.qr(U)\n    U = np.round(U, decimals=4)\n    S = np.round(S, decimals=4)\n    V = np.round(V, decimals=4)\n    U_list = U.tolist()\n    S_list = S.tolist()\n    V_list = V.tolist()\n    return (U_list, S_list, V_list)\nA = np.array([[4, -3], [2, 6]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the samples in two numpy arrays (X and y) while maintaining their corresponding association.\n    \n    Parameters:\n        X (numpy.ndarray): Input feature array.\n        y (numpy.ndarray): Target array corresponding to X.\n        seed (int, optional): Seed value for the random number generator to ensure reproducibility.\n        \n    Returns:\n        tuple: A tuple containing two lists: shuffled features (X) and corresponding targets (y).\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    permutation = np.random.permutation(X.shape[0])\n    shuffled_X = X[permutation]\n    shuffled_y = y[permutation]\n    return (shuffled_X.tolist(), shuffled_y.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of X and optionally y if provided.\n    \n    Parameters:\n        X : numpy.ndarray\n            Input features array.\n        y : numpy.ndarray, optional\n            Target array corresponding to X. Default is None.\n        batch_size : int, optional\n            Size of each batch. Default is 64.\n            \n    Yields:\n        tuple: (numpy.ndarray, numpy.ndarray) or numpy.ndarray\n            Batches of X and y or just X if y is not provided.\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        X_batch = X[i:i + batch_size]\n        if y is not None:\n            y_batch = y[i:i + batch_size]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides a dataset (X) into two lists based on if an element meets the threshold condition for the feature at index feature_i\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        The dataset to be divided.\n    feature_i : int\n        The index of the feature on which to divide the data.\n    threshold : float\n        The threshold value to use for dividing the data.\n    \n    Returns:\n    --------\n    tuple of list\n        A tuple containing two lists of data points. The first list contains elements where the feature is >= threshold,\n        and the second list contains elements where the feature is < threshold.\n    \"\"\"\n    split_func = None\n    if isinstance(threshold, int) or isinstance(threshold, float):\n        split_func = lambda row: row[feature_i] >= threshold\n    else:\n        split_func = lambda row: row[feature_i] == threshold\n    X_1 = []\n    X_2 = []\n    for row in X:\n        if split_func(row):\n            X_1.append(row.tolist())\n        else:\n            X_2.append(row.tolist())\n    return (X_1, X_2)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for a given dataset up to a specified degree.\n    \n    Parameters:\n    X (numpy.ndarray): Input data of shape (n_samples, n_features).\n    degree (int): Degree of the polynomial features.\n    \n    Returns:\n    numpy.ndarray: Generated polynomial features of shape (n_samples, n_output_features).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_output_features = int((degree + 1) * (degree + 2) / 2)\n    indices = combinations_with_replacement(range(n_features), degree)\n    P = np.zeros((n_samples, n_output_features))\n    for (i, index) in enumerate(indices):\n        P[:, i] = X[:, index].prod(1)\n    return P.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generates random subsets from the given dataset (X, y).\n\n    Parameters:\n        X (np.ndarray): 2D numpy array containing the features of the dataset.\n        y (np.ndarray): 1D numpy array containing the labels of the dataset.\n        n_subsets (int): Number of subsets to generate.\n        replacements (bool): Whether to sample with replacement or not.\n        seed (int): Random seed for reproducibility.\n\n    Returns:\n        list: A list of tuples of length n_subsets, where each tuple contains two elements:\n              - X_subset: Numpy array of selected features.\n              - y_subset: Numpy array of corresponding labels.\n              Each element of the list is converted to a list using the tolist() method.\n    \"\"\"\n    np.random.seed(seed)\n    subsets = []\n    for _ in range(n_subsets):\n        indices = np.random.choice(len(X), size=len(X), replace=replacements)\n        X_subset = X[indices].tolist()\n        y_subset = y[indices].tolist()\n        subsets.append((X_subset, y_subset))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Convert a 1D numpy array of integers into a one-hot encoded 2D numpy array.\n    \n    Parameters:\n    - x (numpy.ndarray): A 1D numpy array of integer values.\n    - n_col (int, optional): Number of columns for the one-hot encoded output.\n      If None, this will be inferred from the maximum value in x plus one.\n    \n    Returns:\n    - list: The one-hot encoded numpy array converted to a python list.\n    \"\"\"\n    if n_col is None:\n        n_col = np.max(x) + 1\n    X = np.zeros((x.shape[0], n_col))\n    X[np.arange(x.shape[0]), x] = 1\n    return X.tolist()\nx = np.array([1, 2, 3, 0])"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix and returns it as a list.\n    \n    Parameters:\n    - x (numpy.ndarray): A 1D numpy array\n    \n    Returns:\n    - list: A list representing the diagonal matrix\n    \"\"\"\n    if x.ndim != 1:\n        raise ValueError('Input must be a 1-dimensional array.')\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculates the accuracy score between true labels and predicted labels.\n    \n    Parameters:\n        y_true (np.ndarray): 1D numpy array containing the true labels.\n        y_pred (np.ndarray): 1D numpy array containing the predicted labels.\n        \n    Returns:\n        float: The accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length.')\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)\ny_true = np.array([1, 2, 3, 4, 5])\ny_pred = np.array([1, 2, 4, 4, 5])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculates the correlation matrix of X and Y. \n    If Y is not provided, calculates the correlation matrix of X with itself.\n    \n    Args:\n    X (np.ndarray): A 2D numpy array.\n    Y (np.ndarray, optional): A 2D numpy array. Defaults to None.\n    \n    Returns:\n    list: The correlation matrix as a 2D list.\n    \"\"\"\n    if Y is None:\n        corr_matrix = np.corrcoef(X, rowvar=True)\n    else:\n        combined = np.hstack((X, Y))\n        corr_matrix = np.corrcoef(combined, rowvar=True)\n    if Y is not None:\n        num_rows_X = X.shape[1]\n        corr_matrix = corr_matrix[:num_rows_X, -Y.shape[1]:]\n    corr_matrix_rounded = np.round(corr_matrix, 4)\n    return corr_matrix_rounded.tolist()\nX = np.random.rand(5, 3)\nY = np.random.rand(5, 2)"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    AdaBoost fit method.\n    \n    Parameters:\n        X (np.ndarray): Input data, shape (n_samples, n_features)\n        y (np.ndarray): Target values, shape (n_samples,)\n        n_clf (int): Number of classifiers\n    \n    Returns:\n        List of tuples (feature_index, threshold, alpha) describing the classifiers and their weights\n    \"\"\"\n\n    def find_best_threshold_and_error(X, y, w):\n        errors = []\n        thresholds = []\n        for i in range(X.shape[1]):\n            (thresholds_i, error_rates_i) = zip(*[(thr, np.sum(np.where(np.sign(X[:, j] - thr) == y, 0, 1) * w)) for thr in set(X[:, j])])\n            min_idx = np.argmin(error_rates_i)\n            errors.append(error_rates_i[min_idx])\n            thresholds.append(thresholds_i[min_idx])\n        best_feature = np.argmin(errors)\n        best_thr = thresholds[best_feature]\n        error = errors[best_feature]\n        return (best_feature, best_thr, error)\n    (n_samples, n_features) = X.shape\n    classifiers = []\n    w = np.full(n_samples, 1 / n_samples)\n    for _ in range(n_clf):\n        (best_f, best_thr, error) = find_best_threshold_and_error(X, y, w)\n        if error > 0.5:\n            break\n        alpha = 0.5 * np.log((1 - error) / error)\n        classifiers.append((best_f, best_thr, round(alpha, 4)))\n        predictions = np.where(np.sign(X[:, best_f] - best_thr) == y, 1, -1)\n        w *= np.exp(-alpha * predictions * y)\n        w /= w.sum()\n    return classifiers\nX = np.array([[1, 2], [2, 3], [3, 2], [4, 3]])\ny = np.array([1, 1, -1, -1])\nn_clf = 2"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Computes the log-softmax of a 1D numpy array of scores.\n    \n    Args:\n        scores (list): A list of numeric scores.\n        \n    Returns:\n        list: The log-softmax of the input scores, rounded to the nearest 4th decimal.\n    \"\"\"\n    scores_array = np.array(scores)\n    max_score = np.max(scores_array)\n    scores_exp = np.exp(scores_array - max_score)\n    log_sum_exp = np.log(np.sum(scores_exp))\n    log_softmax_values = scores_array - log_sum_exp\n    rounded_log_softmax = np.round(log_softmax_values, decimals=4).tolist()\n    return rounded_log_softmax"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n        self.last_activation_cache = None\n\n    def initialize(self, optimizer=None):\n        input_dim = self.input_shape[0]\n        limit = 1 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, (input_dim, self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        if optimizer is not None:\n            self.optimizer = copy.copy(optimizer)\n            self.W_opt = self.optimizer.initialize_(self.W.shape)\n            self.w0_opt = self.optimizer.initialize_(self.w0.shape)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, acc_grad):\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(acc_grad)\n            grad_w0 = np.sum(acc_grad, axis=0, keepdims=True)\n            if self.optimizer:\n                (self.W, self.W_opt) = self.optimizer.update(self.W, self.W_opt)\n                (self.w0, self.w0_opt) = self.optimizer.update(self.w0, self.w0_opt)\n            self.W -= grad_w\n            self.w0 -= grad_w0\n        return acc_grad.dot(self.W.T)\n\n    def output_shape(self):\n        return (self.n_units,)\nclass Optimizer:\n\n    @staticmethod\n    def initialize_(shape):\n        return np.zeros(shape)\noptimizer = Optimizer()\nX = np.random.rand(5, 10)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int) -> list:\n    \"\"\"\n    Perform a 2D convolution on the input_matrix with the given kernel, padding, and stride.\n    \n    Args:\n    - input_matrix (np.ndarray): The input image or feature map.\n    - kernel (np.ndarray): The convolutional kernel.\n    - padding (int): Padding size for the input matrix.\n    - stride (int): Stride of the convolution.\n    \n    Returns:\n    - list: The output of the convolution operation, rounded to the 4th decimal place.\n    \"\"\"\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = int((input_height + 2 * padding - kernel_height) / stride) + 1\n    output_width = int((input_width + 2 * padding - kernel_width) / stride) + 1\n    padded_input = np.pad(input_matrix, padding, mode='constant')\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, output_height * stride, stride):\n        for j in range(0, output_width * stride, stride):\n            current_slice = padded_input[i:i + kernel_height, j:j + kernel_width]\n            output_matrix[int(i / stride), int(j / stride)] = np.sum(current_slice * kernel)\n    return np.round(output_matrix, 4).tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n    \n    Parameters:\n    z (float): Input number\n    \n    Returns:\n    float: Output value after applying the ReLU function\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Calculate the Ridge Regression loss given feature matrix X, weights w, true labels y_true,\n    and regularization parameter alpha.\n    \n    :param X: A 2D numpy array representing the feature matrix.\n    :param w: A 1D numpy array representing the model's weight vector.\n    :param y_true: A 1D numpy array representing the true target values.\n    :param alpha: A float representing the regularization parameter.\n    :return: The calculated Ridge loss as a float, rounded to 4 decimal places.\n    \"\"\"\n    y_pred = np.dot(X, w)\n    mse = np.mean((y_true - y_pred) ** 2)\n    l2_norm = np.sum(w ** 2)\n    ridge_loss_value = mse + alpha * l2_norm\n    return round(ridge_loss_value, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) function.\n    \n    Parameters:\n    z (float): The input value to the activation function.\n    alpha (float): The slope for negative values of z. Default is 0.01.\n    \n    Returns:\n    float: The output of the Leaky ReLU activation function.\n    \"\"\"\n    if z > 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors x1 and x2.\n    \n    Parameters:\n    - x1: A 1D numpy array representing the first vector.\n    - x2: A 1D numpy array representing the second vector.\n    \n    Returns:\n    - The dot product of x1 and x2, which is the result of the linear kernel.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculates the precision score between true and predicted binary labels.\n\n    :param y_true: A numpy array containing true binary labels (0 or 1)\n    :param y_pred: A numpy array containing predicted binary labels (0 or 1)\n    :return: Precision score as a float value\n    \"\"\"\n    assert y_true.ndim == 1 and y_pred.ndim == 1, 'y_true and y_pred must be 1-D arrays'\n    assert set(np.unique(y_pred)).issubset({0, 1}), 'y_pred must contain only binary values (0 or 1)'\n    assert set(np.unique(y_true)).issubset({0, 1}), 'y_true must contain only binary values (0 or 1)'\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    if tp + fp == 0:\n        return 0.0\n    p = tp / (tp + fp)\n    return p"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error_gradient(X, y, weights):\n    \"\"\"\n    Calculate the gradient of the mean squared error for linear regression.\n    \"\"\"\n    N = len(y)\n    error = X.dot(weights) - y\n    grad = 2 / N * X.T.dot(error)\n    return grad\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent on the given dataset with specified parameters.\n\n    Parameters:\n        X (np.ndarray): Feature matrix.\n        y (np.ndarray): Target vector.\n        weights (np.ndarray): Initial weights.\n        learning_rate (float): Learning rate for weight updates.\n        n_iterations (int): Number of iterations to run gradient descent.\n        batch_size (int): Size of the mini-batch for mini-batch gradient descent (default is 1 for SGD).\n        method (str): Method to use ('batch', 'sgd', or 'mini-batch').\n\n    Returns:\n        np.ndarray: Final weights after optimization, rounded to 4 decimal places.\n    \"\"\"\n    N = len(y)\n    X = np.c_[X, np.ones(N)]\n    for iteration in range(n_iterations):\n        indices = np.random.permutation(N)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        if method == 'batch':\n            grad = mean_squared_error_gradient(X_shuffled, y_shuffled, weights)\n        elif method == 'sgd':\n            for i in range(N):\n                grad = mean_squared_error_gradient(X_shuffled[i:i + 1], y_shuffled[i:i + 1], weights)\n                weights -= learning_rate * grad\n            continue\n        elif method == 'mini-batch' and batch_size > 1:\n            for i in range(0, N, batch_size):\n                grad = mean_squared_error_gradient(X_shuffled[i:i + batch_size], y_shuffled[i:i + batch_size], weights)\n        else:\n            raise ValueError(\"Invalid method. Choose from 'batch', 'sgd', or 'mini-batch'.\")\n        weights -= learning_rate * grad\n    return np.round(weights.tolist(), 4)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 8, 9])\nweights = np.array([0, 0, 0])\nlearning_rate = 0.01\nn_iterations = 1000\nbatch_size = 2\nmethod = 'mini-batch'"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a given matrix into its Reduced Row Echelon Form (RREF).\n\n    Parameters:\n    - matrix (list of lists): A 2D list representing the input matrix.\n\n    Returns:\n    - list of lists: The matrix in RREF converted to a list format.\n    \"\"\"\n    arr = np.array(matrix)\n    (rows, cols) = arr.shape\n    row_index = 0\n    col_index = 0\n    while row_index < rows and col_index < cols:\n        i = row_index\n        while i < rows and (not arr[i][col_index]):\n            i += 1\n        if i == rows:\n            col_index += 1\n            continue\n        if i != row_index:\n            arr[[i, row_index]] = arr[[row_index, i]]\n        pivot = arr[row_index, col_index]\n        arr[row_index] = arr[row_index] / pivot\n        for i in range(rows):\n            if i != row_index:\n                factor = arr[i, col_index]\n                arr[i] = arr[i] - factor * arr[row_index]\n        row_index += 1\n        col_index += 1\n    return arr.tolist()\nmatrix = [[1, 2, -1, 1], [-2, -3, 6, -2], [-1, -1, 2, 0]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Implements the Adam optimization algorithm\n    \n    Parameters:\n    - f: Objective function to optimize\n    - grad: Gradient function of the objective function\n    - x0: Initial parameters\n    - learning_rate: Step size\n    - beta1: Decay rate for moving average of the gradient\n    - beta2: Decay rate for moving average of the squared gradient\n    - epsilon: Small value to avoid division by zero\n    - num_iterations: Number of iterations\n    \n    Returns:\n    - Optimized parameters\n    \"\"\"\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 1\n    for _ in range(num_iterations):\n        grad_x = grad(x0)\n        m = beta1 * m + (1 - beta1) * grad_x\n        v = beta2 * v + (1 - beta2) * np.power(grad_x, 2)\n        m_hat = m / (1 - np.power(beta1, t))\n        v_hat = v / (1 - np.power(beta2, t))\n        x0 -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n        t += 1\n    return np.around(x0, decimals=4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Fit a Lasso Regression model using gradient descent.\n    \n    Parameters:\n    X (np.array): Feature matrix.\n    y (np.array): Target vector.\n    alpha (float): Regularization strength; must be a positive float.\n    learning_rate (float): The learning rate for the gradient descent.\n    max_iter (int): Maximum number of iterations to perform.\n    tol (float): The stopping criterion. If the loss improvement is less than `tol`, stop early.\n    \n    Returns:\n    tuple: A tuple containing the final weights and bias rounded to the nearest 4th decimal and reshaped into lists.\n    \"\"\"\n    ones = np.ones((X.shape[0], 1))\n    X = np.concatenate((ones, X), axis=1)\n    weights = np.zeros(X.shape[1])\n    n_samples = X.shape[0]\n    for _ in range(max_iter):\n        y_pred = X.dot(weights)\n        diff = y_pred - y\n        weight_gradients = diff.dot(X[:, 0]) / n_samples + alpha * np.sign(weights)\n        bias_gradient = np.sum(diff) / n_samples\n        weights -= learning_rate * weight_gradients\n        weights[0] -= learning_rate * bias_gradient\n        if np.linalg.norm(weight_gradients, ord=1) < tol:\n            break\n    return (weights.round(4).tolist(), round(weights[0], 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two strings.\n    \n    :param source: The first input string.\n    :param target: The second input string.\n    :return: The OSA distance as an integer.\n    \"\"\"\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(1, m + 1):\n        dp[i][0] = i\n    for j in range(1, n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                delete = dp[i - 1][j] + 1\n                insert = dp[i][j - 1] + 1\n                substitute = dp[i - 1][j - 1] + 1\n                if i > 1 and j > 1 and (source[i - 2] == target[j - 1]) and (source[i - 1] == target[j - 2]):\n                    transpose = dp[i - 2][j - 2] + 1\n                    dp[i][j] = min(delete, insert, substitute, transpose)\n                else:\n                    dp[i][j] = min(delete, insert, substitute)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    :param y_true: List of true binary labels (0 or 1)\n    :param y_pred: List of predicted binary labels (0 or 1)\n    :return: Recall value rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fn = np.sum((y_pred == 0) & (y_true == 1))\n    if tp + fn == 0:\n        return 0.0\n    else:\n        return round(tp / (tp + fn), 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention mechanism over the input X.\n    \n    :param X: Input data of shape (batch_size, seq_len, d_model)\n    :param W_q: Query weight matrix of shape (d_model, d_k)\n    :param W_k: Key weight matrix of shape (d_model, d_k)\n    :param W_v: Value weight matrix of shape (d_model, d_v)\n    :return: The output of the self-attention mechanism as a numpy array, rounded to 4 decimal places.\n    \"\"\"\n    (batch_size, seq_len, d_model) = X.shape\n    (d_k, d_v) = (W_q.shape[1], W_v.shape[1])\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    A = np.matmul(Q, K.swapaxes(1, 2)) / np.sqrt(d_k)\n    A = np.exp(A - np.max(A, axis=-1, keepdims=True))\n    A /= np.sum(A, axis=-1, keepdims=True) + 1e-09\n    O = np.matmul(A, V)\n    return np.round(O, 4).tolist()\nX = np.array([[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], [[0.9, 0.8, 0.7], [0.6, 0.5, 0.4], [0.3, 0.2, 0.1]]])\nW_q = np.random.rand(3, 4)\nW_k = np.random.rand(3, 4)\nW_v = np.random.rand(3, 4)"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a single RNN forward pass given the input sequence, initial hidden state,\n    and weights. Uses tanh activation. Returns the final hidden state.\n    \n    Parameters:\n    - input_sequence: A list of input vectors. Each vector is represented as a list of floats.\n    - initial_hidden_state: Initial hidden state vector represented as a list of floats.\n    - Wx: Weight matrix for input-to-hidden connection. Represented as a list of lists.\n    - Wh: Weight matrix for hidden-to-hidden connection. Represented as a list of lists.\n    - b: Bias vector represented as a list of floats.\n    \n    Returns:\n        Final hidden state as a list of floats, rounded to 4 decimal places.\n    \"\"\"\n    ht = np.array(initial_hidden_state)\n    for xt in map(np.array, input_sequence):\n        ht = np.tanh(xt @ np.array(Wx) + ht @ np.array(Wh) + np.array(b))\n    return np.round(ht.tolist(), 4)"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Apply a 2D translation to a list of points.\n\n    Parameters:\n    - points: List of [x, y] coordinates for each point.\n    - tx: Translation distance in the x direction.\n    - ty: Translation distance in the y direction.\n\n    Returns:\n    - A new list of translated points after applying the translation matrix.\n    \"\"\"\n    points_array = np.array(points + [1])\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    transformed_points = np.dot(translation_matrix, points_array)\n    return transformed_points[:2].T.tolist()\npoints = [[1, 2], [3, 4], [5, 6]]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the KL divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of the first distribution P.\n    sigma_p (float): Standard deviation of the first distribution P.\n    mu_q (float): Mean of the second distribution Q.\n    sigma_q (float): Standard deviation of the second distribution Q.\n    \n    Returns:\n    float: The KL divergence between P and Q.\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive numbers.')\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Implementation of the Gauss-Seidel method for solving linear systems.\n    \n    Parameters:\n    A : numpy.ndarray\n        The coefficient matrix of the system.\n    b : numpy.ndarray\n        The right-hand side vector.\n    n : int\n        Number of iterations to perform.\n    x_ini : numpy.ndarray, optional\n        Initial guess for the solution vector. Defaults to a vector of zeros.\n        \n    Returns:\n    numpy.ndarray\n        Approximated solution vector after n iterations.\n    \"\"\"\n    A = np.asarray(A)\n    b = np.asarray(b)\n    N = len(b)\n    if x_ini is None:\n        x = np.zeros(N, float)\n    else:\n        x = np.asarray(x_ini)\n    for _ in range(n):\n        for i in range(N):\n            s = 0\n            for j in range(N):\n                if j != i:\n                    s += A[i, j] * x[j]\n            x[i] = (b[i] - s) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solve the system Ax = b using Gaussian elimination with partial pivoting.\n    \n    Parameters:\n        A (numpy.ndarray): The coefficient matrix.\n        b (numpy.ndarray): The dependent variable values.\n        \n    Returns:\n        numpy.ndarray: The solution vector x.\n    \"\"\"\n    Ab = np.column_stack([A, b])\n    n = len(b)\n    for i in range(n):\n        maxel_i = abs(Ab[i, i])\n        row_to_pivot_on = i\n        for k in range(i + 1, n):\n            if abs(Ab[k, i]) > maxel_i:\n                maxel_i = abs(Ab[k, i])\n                row_to_pivot_on = k\n        if row_to_pivot_on != i:\n            Ab[[i, row_to_pivot_on]] = Ab[[row_to_pivot_on, i]]\n        for k in range(i + 1, n):\n            factor = Ab[k, i] / Ab[i, i]\n            Ab[k, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, i + 1:-1], x[i + 1:])) / Ab[i, i]\n    return np.round(x, 4).tolist()\nA = np.array([[3.0, 2.0, -4.0], [2.0, 3.0, 3.0], [-1.0, 1.0, -2.0]])\nb = np.array([3.0, 15.0, 0.0])"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.special import expit\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    @staticmethod\n    def sigmoid(x):\n        return expit(x)\n\n    @staticmethod\n    def tanh(x):\n        return np.tanh(x)\n\n    @staticmethod\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        T = len(x)\n        hidden_states = []\n        hidden_state = initial_hidden_state\n        cell_state = initial_cell_state\n        for t in range(T):\n            input_t = np.vstack([x[t], hidden_state])\n            forget_gate = self.sigmoid(np.dot(self.Wf, input_t) + self.bf)\n            input_gate = self.sigmoid(np.dot(self.Wi, input_t) + self.bi)\n            candidate_cell_state = self.tanh(np.dot(self.Wc, input_t) + self.bc)\n            output_gate = self.sigmoid(np.dot(self.Wo, input_t) + self.bo)\n            cell_state = forget_gate * cell_state + input_gate * candidate_cell_state\n            hidden_state = output_gate * self.tanh(cell_state)\n            hidden_states.append(hidden_state)\n        hidden_states_rounded = [np.round(hstate, 4) for hstate in hidden_states]\n        final_hidden_state = np.round(hidden_states[-1], 4)\n        final_cell_state = np.round(cell_state, 4)\n        hidden_states_final = [hstate.tolist() for hstate in hidden_states_rounded]\n        final_hidden_state_final = final_hidden_state.tolist()\n        final_cell_state_final = final_cell_state.tolist()\n        return (hidden_states_final, final_hidden_state_final, final_cell_state_final)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\nfrom math import log\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Computes the TF-IDF scores for a query against a given corpus of documents.\n    \n    :param corpus: A list of documents, where each document is a list of words.\n    :param query: A list of words for which to compute the TF-IDF scores.\n    :return: A list of lists containing the TF-IDF scores for the query words in each document.\n    \"\"\"\n    if not corpus:\n        raise ValueError('Corpus cannot be empty.')\n    vocab = set((word for doc in corpus for word in doc))\n\n    def tf(term, doc):\n        return doc.count(term) / len(doc)\n\n    def df(term):\n        return sum((1 for doc in corpus if term in doc))\n\n    def idf(term):\n        N = len(corpus)\n        n = df(term)\n        return log((N + 1) / (n + 1)) + 1\n    result = []\n    for doc in corpus:\n        scores = []\n        for term in query:\n            if term not in vocab:\n                scores.append(0)\n            else:\n                scores.append(round(tf(term, doc) * idf(term), 4))\n        result.append(scores)\n    return np.array(result).tolist()\ncorpus = [['the', 'cat', 'sat', 'on', 'the', 'mat'], ['the', 'dog', 'sat', 'by', 'the', 'fire'], ['a', 'cat', 'is', 'not', 'a', 'dog']]\nquery = ['cat', 'dog', 'elephant']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    fn = np.sum((y_pred == 0) & (y_true == 1))\n    precision = tp / (tp + fp + 1e-09)\n    recall = tp / (tp + fn + 1e-09)\n    fscore = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall + 1e-09)\n    return round(fscore, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Returns the outputs at each time step, the last input, and the hidden states at each time step.\n        \"\"\"\n        T = len(input_sequence)\n        hiddens = np.zeros((self.hidden_size, T + 1))\n        outputs = np.zeros((self.W_hy.shape[0], T))\n        hiddens[:, 0] = np.zeros(self.hidden_size)\n        for t in range(T):\n            prev_hidden = hiddens[:, t].reshape(-1, 1)\n            input_t = input_sequence[t].reshape(-1, 1)\n            hiddens[:, t + 1] = sigmoid(np.dot(self.W_xh, input_t) + np.dot(self.W_hh, prev_hidden) + self.b_h)\n            outputs[:, t] = np.dot(self.W_hy, hiddens[:, t + 1])\n        return (outputs, hiddens[:, 1:], hiddens)\n\n    def compute_loss(self, outputs, expected_outputs):\n        \"\"\"\n        Computes the loss using mean squared error.\n        \"\"\"\n        loss = 0.5 * np.sum((outputs - expected_outputs) ** 2)\n        return loss\n\n    def backward(self, input_sequence, expected_output, outputs, hiddens, learning_rate=0.01):\n        \"\"\"\n        Backward pass to update the weights using BPTT.\n        \"\"\"\n        T = len(input_sequence)\n        (dW_xh, dW_hh, dW_hy) = (np.zeros_like(self.W_xh), np.zeros_like(self.W_hh), np.zeros_like(self.W_hy))\n        (db_h, db_y) = (np.zeros_like(self.b_h), np.zeros_like(self.b_y))\n        dh_next = np.zeros_like(hiddens[:, 0])\n        for t in reversed(range(T)):\n            output = outputs[:, t]\n            exp_out = expected_output[t]\n            dy = output - exp_out\n            dW_hy += np.dot(dy, hiddens[:, t + 1].reshape(1, -1))\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dhraw = (1 - hiddens[:, t + 1] ** 2) * dh\n            db_h += dhraw\n            dhx = np.dot(self.W_hh.T, dhraw)\n            dh_next = np.dot(self.W_hh.T, dhraw)\n            dW_xh += np.dot(dhraw, input_sequence[t].reshape(1, -1).T)\n            dW_hh += np.dot(dhraw, hiddens[:, t].reshape(1, -1).T)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def train(self, input_sequence, expected_output, epochs=100, learning_rate=0.01):\n        \"\"\"\n        Trains the RNN for a specified number of epochs.\n        \"\"\"\n        for epoch in range(epochs):\n            (outputs, _, hiddens) = self.forward(input_sequence)\n            loss = self.compute_loss(outputs, expected_output)\n            print(f'Epoch {epoch + 1}/{epochs}, Loss: {loss}')\n            self.backward(input_sequence, expected_output, outputs, hiddens, learning_rate)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    x = x0\n    r = b - A @ x\n    p = r\n    rs_old = np.dot(r, r)\n    for i in range(n):\n        Ap = A @ p\n        alpha = rs_old / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        rs_new = np.dot(r, r)\n        if np.sqrt(rs_new) < tol:\n            break\n        p = r + rs_new / rs_old * p\n        rs_old = rs_new\n    return np.around(x, decimals=8).tolist()\nA = np.array([[3, 2], [2, 6]])\nb = np.array([2, -8])\nn = 1000\nx0 = None\ntol = 1e-08"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(probabilities ** 2)\n    return round(impurity, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_pointers = [0]\n    current_row_non_zero_count = 0\n    for (i, row) in enumerate(dense_matrix):\n        for (j, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                col_indices.append(j)\n                current_row_non_zero_count += 1\n        row_pointers.append(current_row_non_zero_count)\n        current_row_non_zero_count = 0\n    return (values, col_indices, row_pointers[:-1])"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product_vL = sum((x * y for (x, y) in zip(v, L)))\n    dot_product_LL = sum((x * y for (x, y) in zip(L, L)))\n    scalar_projection = dot_product_vL / dot_product_LL\n    proj_vector = [round(scalar_projection * x, 3) for x in L]\n    return proj_vector"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_pointer = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col]:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        col_pointer.append(len(values))\n    return (values, row_indices, col_pointer[:-1])"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Calculate the column space of a given matrix A.\n    \n    Parameters:\n    - A (np.ndarray): The input matrix.\n    \n    Returns:\n    - list of lists: Basis vectors for the column space of A, \n                     rounded to 8 decimal places.\n    \"\"\"\n    A = np.array(A)\n    row_echelon = rref(A)\n    (cols, _) = row_echelon.shape\n    pivot_columns = [i for i in range(cols) if any(row_echelon[:, i])]\n    basis_vectors = [A[:, i].round(8) for i in pivot_columns]\n    return [vector.tolist() for vector in basis_vectors]\ndef rref(matrix):\n    \"\"\"\n    Helper function to calculate the Reduced Row Echelon Form of a matrix.\n    \n    Parameters:\n    - matrix (np.ndarray): Input matrix.\n    \n    Returns:\n    - np.ndarray: Reduced Row Echelon Form of the input matrix.\n    \"\"\"\n    augmented = np.column_stack((matrix, np.zeros(matrix.shape[0])))\n    numRows = matrix.shape[0]\n    numCols = matrix.shape[1]\n    lead = 0\n    for r in range(numRows):\n        if lead >= numCols:\n            return matrix\n        i = r\n        while augmented[i, lead] == 0:\n            i += 1\n            if i == numRows:\n                i = r\n                lead += 1\n                if numCols == lead:\n                    return matrix\n        augmented[[i, r], :] = augmented[[r, i], :]\n        augmented[r, :] /= augmented[r, lead]\n        for i in range(numRows):\n            if i != r:\n                augmented[i, :] -= augmented[i, lead] * augmented[r, :]\n        lead += 1\n    return augmented[:, :numCols]\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculates the R-squared (coefficient of determination) value for a set of true and predicted values.\n    \n    :param y_true: Array of true/actual values\n    :param y_pred: Array of predicted values\n    :return: R-squared value rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    y_mean = np.mean(y_true)\n    ss_total = np.sum((y_true - y_mean) ** 2)\n    ss_residual = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ss_residual / ss_total\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image.\n    \n    Parameters:\n    img (list of list of int): A 2D matrix representing the image.\n    \n    Returns:\n    float or int: The average brightness of the image rounded to two decimal places,\n                  or -1 for invalid input.\n    \"\"\"\n    if not img or not all((len(row) == len(img[0]) for row in img)):\n        return -1\n    total_pixels = len(img) * len(img[0])\n    if total_pixels == 0:\n        return -1\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n    avg_brightness = total_brightness / total_pixels\n    return round(avg_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculates the Root Mean Square Error (RMSE) between two sets of values.\n    \n    Parameters:\n    y_true (array-like): The true/actual values.\n    y_pred (array-like): The predicted values.\n    \n    Returns:\n    float: The calculated RMSE rounded to 3 decimal places.\n    \n    Raises:\n    ValueError: If the input dimensions do not match or if inputs are invalid.\n    \"\"\"\n    try:\n        y_true = np.array(y_true)\n        y_pred = np.array(y_pred)\n    except ValueError:\n        raise ValueError('Input values could not be converted to a numerical format.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Shapes of y_true and y_pred do not match.')\n    if y_true.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    error_squared = (y_true - y_pred) ** 2\n    mean_error = np.mean(error_squared)\n    root_mean_square_error = np.sqrt(mean_error)\n    return round(root_mean_square_error, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculates the Jaccard Index between the arrays y_true and y_pred.\n    \n    Parameters:\n    - y_true (np.array): A binary array representing true labels.\n    - y_pred (np.array): A binary array representing predicted labels.\n    \n    Returns:\n    - float: The Jaccard Index between y_true and y_pred rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.logical_and(y_true, y_pred)\n    intersection_size = np.sum(intersection)\n    union = np.logical_or(y_true, y_pred)\n    union_size = np.sum(union)\n    if union_size == 0:\n        return 0.0\n    jaccard = intersection_size / float(union_size)\n    return round(jaccard, 3)\ny_true = np.array([1, 0, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 1, 1, 0, 1, 0])"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    This function computes the Dice Score between two binary label arrays.\n    \n    Parameters:\n        y_true (np.ndarray): True binary labels.\n        y_pred (np.ndarray): Predicted binary labels.\n        \n    Returns:\n        float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    denominator = np.sum(y_true) + np.sum(y_pred)\n    if denominator == 0:\n        return 1.0 if intersection == 0 else 0.0\n    dice = 2.0 * intersection / denominator\n    return round(dice, 3)\ny_true = [1, 1, 0, 0]\ny_pred = [1, 0, 0, 1]"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef bind(hv1, hv2, dim):\n    \"\"\"\n    Binds two hypervectors (a form of hyperdimensional computing operation)\n    :param hv1: First hypervector\n    :param hv2: Second hypervector\n    :param dim: Dimensionality of hypervectors\n    :return: Bound hypervector\n    \"\"\"\n    return np.bitwise_xor.reduce([hv1, hv2], axis=0)\ndef bundle(hvs, dim):\n    \"\"\"\n    Bundles multiple hypervectors into one by applying bitwise XOR across them.\n    :param hvs: List of hypervectors\n    :param dim: Dimensionality of hypervectors\n    :return: Bundled hypervector\n    \"\"\"\n    if not hvs:\n        raise ValueError('No hypervectors provided to bundle.')\n    bundled = hvs[0]\n    for hv in hvs[1:]:\n        bundled = np.bitwise_xor(bundled, hv)\n    return bundled\ndef generate_hv(dim, seed=None):\n    \"\"\"\n    Generates a random hypervector of specified dimensionality and optional seed for reproducibility.\n    :param dim: Dimensionality of hypervector\n    :param seed: Seed for random number generation\n    :return: Random hypervector\n    \"\"\"\n    np.random.seed(seed)\n    return np.random.randint(2, size=dim).astype(np.uint8)\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Creates a composite hypervector for a dataset row using Hyperdimensional Computing principles.\n    :param row: Dictionary containing dataset row (feature-name: value pairs)\n    :param dim: Dimensionality of hypervectors\n    :param random_seeds: Dictionary containing seeds for generating hypervectors for each feature\n    :return: Composite hypervector representing the row (as a list)\n    \"\"\"\n    feature_hvs = []\n    for (feature_name, value) in row.items():\n        feature_seed = random_seeds.get(feature_name)\n        feature_hv = generate_hv(dim, feature_seed)\n        value_hv = generate_hv(dim, feature_seed)\n        bound_hv = bind(feature_hv, value_hv, dim)\n        feature_hvs.append(bound_hv)\n    composite_hv = bundle(feature_hvs, dim)\n    return composite_hv.tolist()\nrow_example = {'age': 34, 'income': 56000, 'is_married': True}\ndim_example = 128\nseeds_example = {'age': 123, 'income': 456, 'is_married': 789}\ncomposite_hv = create_row_hv(row_example, dim_example, seeds_example)"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix for a binary classification problem.\n\n    Args:\n    - data (list of lists): Each inner list contains [y_true, y_pred] for an observation,\n      where y_true is the actual label and y_pred is the predicted label.\n\n    Returns:\n    - list of lists: A 2x2 confusion matrix with True Negatives, False Positives,\n      False Negatives, and True Positives.\n    \"\"\"\n    counter = Counter()\n    for (y_true, y_pred) in data:\n        counter[y_true, y_pred] += 1\n    tn = counter.get((0, 0), 0)\n    fp = counter.get((0, 1), 0)\n    fn = counter.get((1, 0), 0)\n    tp = counter.get((1, 1), 0)\n    return [[tn, fp], [fn, tp]]\ndata = [[0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [1, 1], [1, 0], [0, 1]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n    \n    Parameters:\n    - v1, v2: numpy arrays representing the vectors.\n    \n    Returns:\n    - A float, representing the cosine similarity, rounded to 3 decimal points.\n    \"\"\"\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    if norm_v1 == 0 or norm_v2 == 0:\n        raise ValueError('One of the vectors has a zero magnitude.')\n    cosine_sim = dot_product / (norm_v1 * norm_v2)\n    return round(cosine_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    This function calculates several performance metrics given the actual and predicted class labels for a binary classifier.\n    \n    :param actual: List of actual class labels (0 or 1)\n    :param predicted: List of predicted class labels (0 or 1)\n    :return: A tuple containing confusion matrix, accuracy, F1 score, specificity, and negative predictive value\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    tp = tn = fp = fn = 0\n    for (act, pred) in zip(actual, predicted):\n        if act == 1 and pred == 1:\n            tp += 1\n        elif act == 0 and pred == 0:\n            tn += 1\n        elif act == 0 and pred == 1:\n            fp += 1\n        elif act == 1 and pred == 0:\n            fn += 1\n    confusion_matrix = [[tp, fp], [fn, tn]]\n    total = len(actual)\n    accuracy = round((tp + tn) / total, 3)\n    precision = round(tp / (tp + fp), 3) if tp + fp > 0 else 0\n    recall = round(tp / (tp + fn), 3) if tp + fn > 0 else 0\n    f1_score = round(2 * (precision * recall / (precision + recall)), 3) if precision + recall > 0 else 0\n    specificity = round(tn / (tn + fp), 3) if tn + fp > 0 else 0\n    negative_predictive_value = round(tn / (tn + fn), 3) if tn + fn > 0 else 0\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    This function calculates descriptive statistics for a given dataset.\n    \n    Parameters:\n    - data (list or numpy.ndarray): A list or NumPy array of numerical values.\n    \n    Returns:\n    - dict: A dictionary containing mean, median, mode, variance, standard deviation,\n            percentiles (25th, 50th, 75th), and interquartile range (IQR).\n    \"\"\"\n    data_array = np.array(data)\n    stats_dict = {'mean': round(np.mean(data_array), 4), 'median': round(np.median(data_array), 4), 'mode': stats.mode(data_array)[0][0], 'variance': round(np.var(data_array), 4), 'standard_deviation': round(np.std(data_array), 4), '25th_percentile': round(np.percentile(data_array, 25), 4), '50th_percentile': round(np.percentile(data_array, 50), 4), '75th_percentile': round(np.percentile(data_array, 75), 4), 'interquartile_range': round(np.percentile(data_array, 75) - np.percentile(data_array, 25), 4)}\n    if isinstance(stats_dict['mode'], np.ndarray):\n        stats_dict['mode'] = stats_dict['mode'][0]\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = math.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    pdf_value = exponent / denominator\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    k_factorial = math.factorial(k)\n    exp_term = math.exp(-lam)\n    probability = lam ** k * exp_term / k_factorial\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast value of the image.\n    \"\"\"\n    if not isinstance(img, np.ndarray):\n        raise ValueError('Input must be a numpy array.')\n    min_intensity = np.min(img)\n    max_intensity = np.max(img)\n    contrast = max_intensity - min_intensity\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Input vectors must be 1-dimensional arrays.')\n    if len(vec1) != len(vec2):\n        raise ValueError('Vectors must be of the same length.')\n    result = np.dot(vec1, vec2)\n    return result"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \n    Returns:\n        list[list[float]]: Transformed data points as described.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_arr = np.array(data).reshape(-1, 1)\n    poly = np.polynomial.Polynomial(np.ones(degree + 1))\n    transformed_data = poly.linspace(n=data_arr.shape[0])[1]\n    result = []\n    for x in data:\n        row = []\n        for d in range(degree + 1):\n            row.append(round(x ** d, 8))\n        result.append(row)\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int) -> list:\n    \"\"\"\n    Calculate positional encodings for a given sequence length and model dimensionality.\n    \n    :param position: The sequence length (integer).\n    :param d_model: The model's dimensionality (integer).\n    :return: A list representing the positional encoding for the sequence.\n             Returns -1 if position is 0 or if d_model <= 0.\n    \"\"\"\n    if position <= 0 or d_model <= 0:\n        return -1\n    pos_enc = np.zeros((position, d_model), dtype=np.float16)\n    angle_rates = 1 / np.power(10000, 2 * (np.arange(d_model) // 2) / np.float_(d_model))\n    angle_rads = np.outer(np.arange(position), angle_rates)\n    pos_enc[:, 0::2] = np.sin(angle_rads[:, 0::2])\n    pos_enc[:, 1::2] = np.cos(angle_rads[:, 1::2])\n    return pos_enc.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    lr_t = learning_rate * np.sqrt(1 - beta2 ** t) / (1 - beta1 ** t)\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    parameter -= lr_t * m_t / (np.sqrt(v_t) + epsilon)\n    return (np.round(parameter.tolist(), decimals=5), np.round(m_t.tolist(), decimals=5), np.round(v_t.tolist(), decimals=5))\nparameter = np.array([0.5])\ngrad = np.array([0.4])\nm = np.array([0.0])\nv = np.array([0.0])\nt = 1"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size='124M', models_dir='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef scaled_dot_product_attention(q, k, v, mask=None):\n    d_k = q.size(-1)\n    scores = np.matmul(q, k.transpose(-2, -1)) / np.sqrt(d_k)\n    if mask is not None:\n        scores += mask * -1000000000.0\n    p_attn = np.softmax(scores, axis=-1)\n    return (np.matmul(p_attn, v), p_attn)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    encoded_prompt = encoder.encode(prompt)\n    position_ids = np.arange(len(encoded_prompt), dtype=np.int64).reshape(-1, 1)\n    hidden_states = params['wte'][encoded_prompt]\n    pos_embs = params['wpe'][position_ids]\n    hidden_states = hidden_states + pos_embs\n    for _ in range(n_tokens_to_generate):\n        q = hidden_states[-1].reshape(1, 1, -1)\n        k = hidden_states.reshape(1, len(hidden_states), -1)\n        v = hidden_states.reshape(1, len(hidden_states), -1)\n        (attn_output, _) = scaled_dot_product_attention(q, k, v)\n        attn_output = attn_output.squeeze()\n        ff_output = np.dot(attn_output, np.random.rand(10, 10))\n        mean = np.mean(ff_output)\n        variance = np.var(ff_output)\n        normalized_output = (ff_output - mean) / np.sqrt(variance + 1e-08)\n        hidden_states = np.concatenate((hidden_states, normalized_output.reshape(1, -1)))\n    decoded_output = encoder.decode([int(np.argmax(hidden_state)) for hidden_state in hidden_states[len(encoded_prompt):]])\n    return prompt + ' ' + decoded_output"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        \"\"\"Apply the softmax function to a vector of values.\"\"\"\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n    weights_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            interaction_score = np.dot(crystal_values[i], crystal_values[j])\n            weights_matrix[i][j] = interaction_score\n    for i in range(n):\n        weights_matrix[i] = softmax(weights_matrix[i])\n    weighted_patterns = np.zeros((n, dimension))\n    for i in range(n):\n        for j in range(n):\n            weighted_patterns[i] += weights_matrix[i][j] * crystal_values[j]\n    return np.round(weighted_patterns, decimals=4)\nn = 3\ncrystal_values = np.array([[1, 2], [3, 4], [5, 6]])\ndimension = 2"}
{"task_id": 90, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculates BM25 scores for a given query against a corpus of documents.\n    \n    :param corpus: List[str] - A list where each element is a string representing a document in the corpus.\n    :param query: str - The query for which to calculate relevance scores.\n    :param k1: float - Free parameter related to term frequency saturation.\n    :param b: float - Free parameter related to document length normalization.\n    :return: List[float] - BM25 scores for each document, rounded to three decimal places.\n    \"\"\"\n    query_terms = query.split()\n    num_documents = len(corpus)\n    idf_values = {}\n    for doc in corpus:\n        terms_in_doc = set(doc.split())\n        for term in terms_in_doc:\n            if term not in idf_values:\n                idf_values[term] = 0\n            idf_values[term] += 1\n    for term in idf_values:\n        idf_values[term] = math.log(1 + num_documents / idf_values[term])\n    average_document_length = sum((len(doc.split()) for doc in corpus)) / num_documents\n    bm25_scores = []\n    for doc in corpus:\n        terms_in_doc = Counter(doc.split())\n        doc_length = len(doc.split())\n        score = 0.0\n        for term in query_terms:\n            if term in terms_in_doc:\n                tf = terms_in_doc[term]\n                term_frequency_adjustment = (k1 + 1) * tf / (k1 * (1 - b + b * (doc_length / average_document_length)) + tf)\n                score += idf_values.get(term, 0) * term_frequency_adjustment\n        bm25_scores.append(round(score, 3))\n    return bm25_scores\ncorpus = ['information retrieval systems', 'retrieval system performance', 'performance evaluation of systems', 'search engines and retrieval', 'retrieval methods and techniques']"}
{"task_id": 91, "completion_id": 0, "solution": "from sklearn.metrics import f1_score\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    score = f1_score(y_true, y_pred)\n    return round(score, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 1, 1, 1, 0, 0]"}
{"task_id": 92, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    \"\"\"\n    Forecast the power consumption for day 15, considering the given linear trend and fluctuation,\n    then add a 5% safety margin.\n    \n    Parameters:\n    consumption_data: List of integers representing daily power consumption over 10 days.\n    \n    Returns:\n    Integer representing the total power forecast for day 15 after adding the fluctuation and safety margin.\n    \"\"\"\n\n    def daily_fluctuation(day):\n        return 10 * np.sin(2 * PI * day / 10)\n    detrended_data = [consumption - daily_fluctuation(day) for (day, consumption) in enumerate(consumption_data, start=1)]\n    x = np.array(range(1, len(consumption_data) + 1)).reshape((-1, 1))\n    y = np.array(detrended_data)\n    model = LinearRegression().fit(x, y)\n    day_15_base_consumption = model.predict(np.array([[15]]))[0]\n    day_15_fluctuation = daily_fluctuation(15)\n    total_day_15_consumption = day_15_base_consumption + day_15_fluctuation\n    safety_margin = 0.05 * total_day_15_consumption\n    total_power_needed = total_day_15_consumption + safety_margin\n    return round(np.ceil(total_power_needed))\nconsumption_data = [120, 135, 145, 150, 160, 180, 195, 200, 220, 230]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    abs_diff = np.abs(y_true - y_pred)\n    mean_abs_error = np.mean(abs_diff)\n    return round(mean_abs_error, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Computes query, key, and value matrices from input X and weight matrices W_q, W_k, W_v.\n    \n    :param X: Input data of shape (batch_size, seq_len, d_model)\n    :param W_q: Weight matrix for queries of shape (d_model, d_k)\n    :param W_k: Weight matrix for keys of shape (d_model, d_k)\n    :param W_v: Weight matrix for values of shape (d_model, d_v)\n    :return: Tuple of Q, K, V matrices\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Performs scaled dot-product self-attention between Q, K, V matrices.\n    \n    :param Q: Query matrix of shape (batch_size, seq_len, d_k)\n    :param K: Key matrix of shape (batch_size, seq_len, d_k)\n    :param V: Value matrix of shape (batch_size, seq_len, d_v)\n    :return: Output of shape (batch_size, seq_len, d_v)\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.swapaxes(-2, -1)) / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = np.dot(attention_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implements multi-head attention mechanism.\n    \n    :param X: Input data of shape (batch_size, seq_len, d_model)\n    :param W_q: List of weight matrices for queries of shape (d_model, d_k)\n    :param W_k: List of weight matrices for keys of shape (d_model, d_k)\n    :param W_v: List of weight matrices for values of shape (d_model, d_v)\n    :param n_heads: Number of heads\n    :return: List of outputs for each head after rounding to 4 decimals\n    \"\"\"\n    outputs = []\n    d_model = X.shape[-1]\n    d_k = W_q[0].shape[-1]\n    d_v = W_v[0].shape[-1]\n    for i in range(n_heads):\n        (Q, K, V) = compute_qkv(X, W_q[i], W_k[i], W_v[i])\n        output = self_attention(Q, K, V)\n        if i == 0:\n            final_output = np.reshape(output, (output.shape[0], output.shape[1], -1))\n        else:\n            final_output = np.concatenate((final_output, np.reshape(output, (output.shape[0], output.shape[1], -1))), axis=-1)\n    final_output = np.reshape(final_output, (final_output.shape[0], final_output.shape[1], n_heads * d_v))\n    final_output_rounded = np.round(final_output, 4).tolist()\n    return final_output_rounded\nbatch_size = 2\nseq_len = 3\nd_model = 5\nn_heads = 2\nX = np.random.rand(batch_size, seq_len, d_model)\nW_q = [np.random.rand(d_model, d_model // n_heads) for _ in range(n_heads)]\nW_k = [np.random.rand(d_model, d_model // n_heads) for _ in range(n_heads)]\nW_v = [np.random.rand(d_model, d_model // n_heads) for _ in range(n_heads)]\noutputs = multi_head_attention(X, W_q, W_k, W_v, n_heads)"}
{"task_id": 95, "completion_id": 0, "solution": "from typing import List\nimport numpy as np\ndef phi_corr(x: List[int], y: List[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (List[int]): A list of binary values (0 or 1).\n    y (List[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    contingency_table = np.zeros((2, 2))\n    for i in range(len(x)):\n        contingency_table[x[i]][y[i]] += 1\n    n = len(x)\n    ad = contingency_table[0, 0] * contingency_table[1, 1] - contingency_table[0, 1] * contingency_table[1, 0]\n    total_sum = np.sum(contingency_table)\n    row_sums = np.sum(contingency_table, axis=1)\n    col_sums = np.sum(contingency_table, axis=0)\n    numerator = ad\n    denominator = np.sqrt(row_sums[0] * row_sums[1] * col_sums[0] * col_sums[1])\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    The Hard Sigmoid function is defined as follows:\n    - If x <= -2.5, returns 0\n    - If x >= 2.5, returns 1\n    - Otherwise, returns 0.2 * x + 0.5\n    \n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0\n    elif x >= 2.5:\n        return 1\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(0, x) + min(0, alpha * x)"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to the 4th decimal place.\n    \"\"\"\n    if x > 20:\n        return round(x, 4)\n    elif x < -50:\n        return round(math.log(1 + math.exp(x)), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    surrogate_obj = np.mean(np.minimum(rhos * A, clipped_rhos * A))\n    kl_divergences = np.log(pi_theta_old / pi_theta_ref)\n    kl_penalty = np.mean(pi_theta_old * kl_divergences)\n    obj_value = surrogate_obj - beta * kl_penalty\n    return round(obj_value, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return round(x * math.sigmoid(x), 4)\ndef sigmoid(y: float) -> float:\n    return 1 / (1 + math.exp(-y))"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        return scale * x\n    else:\n        return scale * (alpha * (math.exp(x) - 1))"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    binary_predictions = (probabilities >= 0.5).astype(int)\n    return binary_predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    z -= np.max(z, axis=1, keepdims=True)\n    return np.exp(z) / np.sum(np.exp(z), axis=1, keepdims=True)\ndef cross_entropy_loss(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Calculate Cross Entropy Loss.\"\"\"\n    return -np.mean(np.sum(y_true * np.log(y_pred + 1e-09), axis=1))\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X: np.ndarray, input data\n        y: np.ndarray, target labels\n        learning_rate: float, learning rate for gradient descent\n        iterations: int, number of iterations to perform gradient descent\n    \n    Returns:\n        B: list[float], CxM updated parameter vector rounded to 4 floating points\n        losses: list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    B = np.random.rand(n_features, n_classes) * 0.001\n    y_one_hot = np.eye(n_classes)[y]\n    losses = []\n    for i in range(iterations):\n        scores = X.dot(B)\n        probabilities = softmax(scores)\n        loss = cross_entropy_loss(y_one_hot, probabilities)\n        losses.append(round(loss, 4))\n        error = probabilities - y_one_hot\n        grad_B = X.T.dot(error)\n        B -= learning_rate * grad_B\n        if (i + 1) % 10 == 0:\n            print(f'Iteration {i + 1}/{iterations}, Loss: {losses[-1]}')\n    B = B.round(4).tolist()\n    losses = [round(l, 4) for l in losses]\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    - X (np.ndarray): Input features including a column of ones for the intercept term\n    - y (np.ndarray): Binary target labels (0 or 1)\n    - learning_rate (float): The step size (alpha) used in gradient descent\n    - iterations (int): Number of iterations for running gradient descent\n    \n    Returns:\n    - tuple[list[float], list[float]]: A tuple containing the optimized weights (theta) and a list of loss values per iteration.\n    \"\"\"\n    X = np.insert(X, 0, 1, axis=1)\n    weights = np.random.rand(X.shape[1])\n    losses = []\n    for _ in range(iterations):\n        z = np.dot(X, weights)\n        h = 1 / (1 + np.exp(-z))\n        gradient = np.dot(X.T, h - y) / y.size\n        weights -= learning_rate * gradient\n        epsilon = 1e-05\n        loss = -(np.dot(y, np.log(h + epsilon)) + np.dot(1 - y, np.log(1 - h + epsilon))) / y.size\n        losses.append(np.round(loss, decimals=4))\n    weights_rounded = np.round(weights, decimals=4).tolist()\n    return (weights_rounded, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, scores, -np.inf)\n    softmax_scores = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.dot(softmax_scores, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from typing import List\nimport math\ndef disorder(apples: List[int]) -> float:\n    \"\"\"\n    Calculates a measure of disorder (Shannon Entropy) in a basket of apples based on their colors.\n    \n    Args:\n    apples: A list of integers representing apple colors.\n    \n    Returns:\n    A float representing the disorder measure, rounded to the nearest 4th decimal.\n    \"\"\"\n    color_counts = {}\n    for color in apples:\n        if color in color_counts:\n            color_counts[color] += 1\n        else:\n            color_counts[color] = 1\n    total_apples = len(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 110, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Calculates the METEOR score for evaluating machine translation quality.\n    \n    Args:\n        reference (str): The reference translation.\n        candidate (str): The candidate translation provided by the machine.\n        alpha (float): Weight of fragmentation penalty.\n        beta (int): Exponential factor in computing penalties.\n        gamma (float): Weight of precision vs. recall in harmonic mean computation.\n        \n    Returns:\n        float: The METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_tokens = reference.lower().split()\n    cand_tokens = candidate.lower().split()\n    correct_matches = sum((Counter(ref_tokens) & Counter(cand_tokens)).values())\n    (ref_count, cand_count) = (len(ref_tokens), len(cand_tokens))\n    if cand_count == 0:\n        precision = 0\n    else:\n        precision = correct_matches / cand_count\n    if ref_count == 0:\n        recall = 0\n    else:\n        recall = correct_matches / ref_count\n    denom = gamma * precision + (1 - gamma) * recall\n    if denom == 0:\n        fmean = 0\n    else:\n        fmean = (gamma / precision + (1 - gamma) / recall) ** (-1)\n    if correct_matches == 0:\n        penalty = 1\n    else:\n        lcs = correct_matches\n        mean_length = (ref_count + cand_count) / 2\n        penalty = math.exp(-beta * ((2 * lcs - ref_count - cand_count) / lcs * mean_length))\n    final_score = alpha * fmean + (1 - alpha) * penalty\n    return round(final_score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI).\n    \n    Args:\n    - joint_counts: int, the number of times both events occur together.\n    - total_counts_x: int, the number of times event X occurs.\n    - total_counts_y: int, the number of times event Y occurs.\n    - total_samples: int, the total number of observations.\n    \n    Returns:\n    - pmi: float, the computed PMI value rounded to 3 decimal places.\n    \"\"\"\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    p_xy = joint_counts / total_samples\n    if p_x == 0 or p_y == 0 or p_xy == 0:\n        return float('-inf')\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)\njoint_counts = 50\ntotal_counts_x = 200\ntotal_counts_y = 150\ntotal_samples = 1000"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers.\n    \n    Parameters:\n    x (list[int]): List of integer feature values.\n    \n    Returns:\n    list[float]: List of normalized feature values rounded to 4 decimal places.\n    \"\"\"\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [float('nan')] * len(x)\n    normalized_x = [(i - min_val) / (max_val - min_val) for i in x]\n    rounded_normalized_x = [round(i, 4) for i in normalized_x]\n    return rounded_normalized_x"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements a simple residual block for a neural network.\n    \n    Args:\n        x (np.ndarray): Input feature vector.\n        w1 (np.ndarray): Weight matrix for the first layer.\n        w2 (np.ndarray): Weight matrix for the second layer.\n        \n    Returns:\n        np.ndarray: Output from the residual block, rounded to 4 decimal places.\n    \"\"\"\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    z2_plus_x = z2 + x\n    final_output = np.maximum(0, z2_plus_x)\n    return np.round(final_output, decimals=4)"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    :param x: A 3D NumPy array of shape (height, width, channels).\n    :return: A 1D NumPy array of shape (channels,) containing the average value of each channel.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Perform batch normalization on a 4D array X with shape (N, C, H, W), where N is the number of samples,\n    C is the number of channels, H is the height, and W is the width.\n    \n    Parameters:\n        X (np.ndarray): Input data of shape (N, C, H, W).\n        gamma (np.ndarray): Scale parameter of shape (C,).\n        beta (np.ndarray): Shift parameter of shape (C,).\n        epsilon (float): Epsilon value for numerical stability.\n    \n    Returns:\n        np.ndarray: Batch-normalized data of the same shape as X.\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    out = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_normalized + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return np.round(out, decimals=4)"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term c * x^n at a given point x.\n    \n    :param c: Coefficient of the polynomial term.\n    :param x: Point at which to evaluate the derivative.\n    :param n: Exponent of the polynomial term.\n    :return: The value of the derivative at point x, rounded to 4 decimal places.\n    \"\"\"\n    derivative_value = c * n * x ** (n - 1)\n    return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a set of 2D vectors.\n    \n    Args:\n    vectors: A list of 2D vectors represented as lists of float values.\n    tol: Tolerance for determining linear independence, defaulting to 1e-10.\n    \n    Returns:\n    A list of orthonormal vectors that span the same subspace as input vectors.\n    Each vector in the returned list is rounded to 4 decimal places.\n    \"\"\"\n    v = np.array(vectors)\n    basis = []\n    for i in range(len(v)):\n        u = v[i].copy()\n        for j in range(i):\n            u -= np.dot(v[i], basis[j]) * basis[j]\n        if np.linalg.norm(u) > tol:\n            basis.append(u / np.linalg.norm(u))\n    basis_rounded = [vec.round(4).tolist() for vec in basis]\n    return basis_rounded"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3-dimensional vectors a and b.\n    \n    Parameters:\n        a (list): A list of three numbers representing the first vector.\n        b (list): A list of three numbers representing the second vector.\n        \n    Returns:\n        list: The resulting vector from the cross product, rounded to 4 decimal places.\n    \"\"\"\n    a_np = np.array(a)\n    b_np = np.array(b)\n    cross = np.cross(a_np, b_np)\n    return np.around(cross, decimals=4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Cramer's rule.\n    \n    Parameters:\n    A (numpy.ndarray): A square matrix representing the coefficients of the system.\n    b (numpy.ndarray): A vector representing the constants of the system.\n    \n    Returns:\n    list: The solution vector x rounded to the nearest 4th decimal, or -1 if there's no unique solution.\n    \"\"\"\n    n = len(b)\n    det_A = round(np.linalg.det(A), 6)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = round(np.linalg.det(A_i), 6)\n        x_i = det_A_i / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two discrete probability\n    distributions.\n    \n    :param p: A list of floats representing the first distribution.\n    :param q: A list of floats representing the second distribution.\n    :return: The Bhattacharyya distance as a floating point number, rounded \n             to 4 decimal places.\n    \"\"\"\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = sum((np.sqrt(pi * qi) for (pi, qi) in zip(p, q)))\n    bd = -np.log(bc)\n    return round(bd, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the element-wise sum of two vectors (lists).\n    \n    Args:\n        a (list[int | float]): The first vector.\n        b (list[int | float]): The second vector.\n        \n    Returns:\n        list[int | float]: A new vector representing the sum of a and b,\n                           or -1 if vectors have different lengths.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    result = [a_i + b_i for (a_i, b_i) in zip(a, b)]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]) -> list:\n    \"\"\"\n    Compute the average gradient of the log-policy multiplied by the return at each time step\n    for each episode.\n    \n    :param theta: A 2D NumPy array representing the policy parameters, shape (num_states, num_actions)\n    :param episodes: A list of episodes, where each episode is a list of (state, action, reward) tuples\n    :return: A list containing the gradient of the policy, rounded to the nearest 4th decimal\n    \"\"\"\n    (num_states, num_actions) = theta.shape\n    total_gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = []\n        R = 0\n        for t in reversed(range(len(episode))):\n            (_, _, r) = episode[t]\n            R = r + 0.99 * R\n            returns.append(R)\n        returns.reverse()\n        for (t, (s, a, _)) in enumerate(episode):\n            pi_s = softmax(theta[s])\n            log_pi_sa = np.log(pi_s[a])\n            grad_log_policy = np.zeros((num_actions,))\n            grad_log_policy[a] = 1 - pi_s[a]\n            total_gradient[s] += grad_log_policy * returns[t]\n    avg_gradient = total_gradient / len(episodes)\n    return np.round(avg_gradient.tolist(), 4)\ntheta = np.array([[0.5, -0.5], [0.3, 0.7]])\nepisodes = [[(0, 0, 1), (1, 1, 2)], [(0, 1, 1), (1, 0, 2)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_flops(d_in, d_out):\n    \"\"\"\n    Compute the FLOPs required for a single neural network layer.\n    \n    Args:\n    - d_in (int): Input dimension.\n    - d_out (int): Output dimension.\n    \n    Returns:\n    int: Number of FLOPs for one layer.\n    \"\"\"\n    return 2 * d_in * d_out\ndef compute_moe_flops(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Compute the total FLOPs for an MoE layer.\n    \n    Args:\n    - n_experts (int): Total number of experts.\n    - k_active (int): Number of active experts per batch.\n    - d_in (int): Input dimension.\n    - d_out (int): Output dimension.\n    \n    Returns:\n    float: Total FLOPs for MoE layer.\n    \"\"\"\n    return k_active * compute_flops(d_in, d_out)\ndef compute_dense_flops(d_in, d_out):\n    \"\"\"\n    Compute the FLOPs for a dense neural network layer.\n    \n    Args:\n    - d_in (int): Input dimension.\n    - d_out (int): Output dimension.\n    \n    Returns:\n    float: FLOPs for dense layer.\n    \"\"\"\n    return compute_flops(d_in, d_out)\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Computes the efficiency of using an MoE layer over a dense layer.\n    \n    Args:\n    - n_experts (int): Total number of experts.\n    - k_active (int): Number of active experts per example.\n    - d_in (int): Input dimension.\n    - d_out (int): Output dimension.\n    \n    Returns:\n    tuple: A tuple containing the FLOPs for the MoE layer, the FLOPs for the dense layer,\n           and the percent decrease in computation due to using MoE.\n    \"\"\"\n    moe_flops = compute_moe_flops(n_experts, k_active, d_in, d_out)\n    dense_flops = compute_dense_flops(d_in, d_out)\n    efficiency_increase = (dense_flops - moe_flops) / dense_flops * 100\n    moe_flops_rounded = round(moe_flops, 1)\n    dense_flops_rounded = round(dense_flops, 1)\n    efficiency_increase_rounded = round(efficiency_increase, 1)\n    return (moe_flops_rounded, dense_flops_rounded, efficiency_increase_rounded)\nn_experts = 128\nk_active = 4\nd_in = 1024\nd_out = 512"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int) -> list:\n    \"\"\"\n    Implements the Noisy Top-K Gating Mechanism for Mixture-of-Experts Models.\n    \n    Parameters:\n        X (np.ndarray): Input data of shape (b, d), where b is batch size and d is input dimension.\n        W_g (np.ndarray): Gate network weight matrix of shape (d, e), where e is the number of experts.\n        W_noise (np.ndarray): Noise scaling parameter of shape (1, e).\n        N (np.ndarray): Pre-sampled noise of shape (b, e).\n        k (int): Sparsity constraint specifying how many experts to use per batch element.\n    \n    Returns:\n        list: Final gating probabilities matrix after applying top-k, rounded to the nearest 4th decimal.\n    \"\"\"\n    gate_activations = X @ W_g + W_noise * N\n    exp_scores = np.exp(gate_activations - np.max(gate_activations, axis=1, keepdims=True))\n    prob_matrix = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    top_k_indices = np.argsort(prob_matrix, axis=1)[:, -k:]\n    final_prob_matrix = np.zeros_like(prob_matrix)\n    for i in range(prob_matrix.shape[0]):\n        final_prob_matrix[i, top_k_indices[i]] = prob_matrix[i, top_k_indices[i]]\n    row_sums = np.sum(final_prob_matrix, axis=1)[:, np.newaxis]\n    normalized_prob_matrix = final_prob_matrix / row_sums\n    return np.round(normalized_prob_matrix, decimals=4).tolist()\nX = np.array([[0.5, -0.2], [-1.1, 0.4]])\nW_g = np.array([[0.1, -0.1, 0.3], [0.2, 0.1, -0.2]])\nW_noise = np.array([[-0.5, 0.5, 0.0]])\nN = np.array([[0.1, -0.1, 0.2], [-0.2, 0.3, -0.1]])\nk = 2"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Sparse Mixture-of-Experts (MoE) layer using softmax gating and top-k routing.\n    \n    :param x: Input tensor of shape (batch_size, input_dim)\n    :param We: Expert weight matrices of shape (n_experts, input_dim, output_dim)\n    :param Wg: Gating weight matrix of shape (input_dim, n_experts)\n    :param n_experts: Number of experts\n    :param top_k: Number of top experts to be selected per token\n    :return: The final MoE output tensor, rounded to the nearest 4th decimal and converted to a list\n    \"\"\"\n    gating_scores = np.dot(x, Wg)\n    gating_probabilities = np.exp(gating_scores) / np.sum(np.exp(gating_scores), axis=-1, keepdims=True)\n    transformed_outputs = np.einsum('bi, eio -> beo', x, We)\n    top_k_indices = np.argpartition(-gating_probabilities, top_k, axis=-1)[:, :top_k]\n    top_k_transformed_outputs = np.zeros((x.shape[0], top_k, We.shape[-1]))\n    top_k_gating_probabilities = np.zeros((x.shape[0], top_k))\n    for i in range(top_k):\n        idx = top_k_indices[:, i:i + 1]\n        top_k_gating_probabilities[:, i] = np.take_along_axis(gating_probabilities, idx, axis=-1).squeeze(axis=-1)\n        top_k_transformed_outputs[:, i] = np.take_along_axis(transformed_outputs, idx[:, :, None], axis=1).squeeze(axis=1)\n    aggregated_output = np.sum(top_k_gating_probabilities[:, :, None] * top_k_transformed_outputs, axis=1)\n    return np.round(aggregated_output, decimals=4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor X.\n    \n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameter of shape (C,)\n    - beta: Shift parameter of shape (C,)\n    - num_groups: Number of groups for normalization\n    - epsilon: A small float number to avoid dividing by zero\n    \n    Returns:\n    - Y: Normalized tensor of the same shape as X\n    \"\"\"\n    X = np.array(X)\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X_reshaped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_norm = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm.reshape(B, C, H, W)\n    Y = X_norm * gamma[:, np.newaxis, np.newaxis] + beta[:, np.newaxis, np.newaxis]\n    Y_rounded = np.round(Y, 4)\n    return Y_rounded.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the approximate minimum of the function f(x) = x^4 - 3x^3 + 2 using gradient descent.\n    \n    :param start_x: Initial guess for x\n    :param learning_rate: Step size for each iteration\n    :param tolerance: Stopping criterion based on the change in x\n    :param max_iters: Maximum number of iterations allowed\n    :return: Approximate x value of the minimum rounded to 4 decimal places\n    \"\"\"\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        prev_x = x\n        x -= learning_rate * df(x)\n        if abs(x - prev_x) < tolerance:\n            break\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) activation function.\n    \n    Parameters:\n    x (np.ndarray): The input tensor.\n    alpha (float): A scaling factor for the input.\n    gamma (float): A scale factor for the output.\n    beta (float): An offset factor for the output.\n    \n    Returns:\n    list[float]: Transformed array values rounded to the fourth decimal place.\n    \"\"\"\n    transformed = gamma * np.tanh(alpha * x) + beta\n    return np.round(transformed, 4).tolist()"}

{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Compute the transpose of a given matrix.\n\n    Args:\n        a (list[list[int|float]]): The input matrix as a list of lists.\n\n    Returns:\n        list[list[int|float]]: The transposed matrix.\n    \"\"\"\n    np_a = np.array(a)\n    transposed_a = np_a.T\n    return transposed_a.tolist()"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes a given matrix into the specified shape using numpy.\n    \n    Parameters:\n        a (list[list[int|float]]): The original matrix.\n        new_shape (tuple[int, int]): The target shape to reshape the matrix into.\n        \n    Returns:\n        list[list[int|float]]: The reshaped matrix as a 2D list, or an empty list if reshaping is not possible.\n    \"\"\"\n    np_array = np.array(a)\n    if np_array.size != new_shape[0] * new_shape[1]:\n        return []\n    reshaped_array = np_array.reshape(new_shape)\n    reshaped_list = reshaped_array.tolist()\n    return reshaped_list\nnew_shape = (2, 3)"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n    \n    :param matrix: A list of lists representing the matrix.\n    :param mode: A string specifying the mode, either 'row' or 'column'.\n    :return: A list of means according to the specified mode.\n    \"\"\"\n    np_matrix = np.array(matrix)\n    if mode == 'row':\n        means = np_matrix.mean(axis=1).tolist()\n    elif mode == 'column':\n        means = np_matrix.mean(axis=0).tolist()\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")\n    return means\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a given matrix by a scalar value.\n\n    Args:\n    matrix (list[list[int|float]]): A 2D list representing the matrix.\n    scalar (int|float): The scalar value to multiply the matrix by.\n\n    Returns:\n    list[list[int|float]]: The resulting matrix after scalar multiplication.\n    \"\"\"\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nscalar = 3"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculates the eigenvalues of a 2x2 matrix and returns them sorted in descending order.\n    \n    Parameters:\n        matrix (list[list[float|int]]): A 2x2 matrix represented as a list of lists.\n        \n    Returns:\n        list[float]: A list containing the eigenvalues sorted from highest to lowest.\n    \"\"\"\n    np_matrix = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(np_matrix)\n    sorted_eigenvalues = sorted(eigenvalues, reverse=True)\n    return sorted_eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[float]]:\n    \"\"\"\n    Transforms the matrix A using the operation T^(-1) * A * S, where T and S are invertible matrices.\n    \n    Parameters:\n    A (list[list[int|float]]): The original matrix to be transformed.\n    T (list[list[int|float]]): The transformation matrix T.\n    S (list[list[int|float]]): The second transformation matrix S.\n    \n    Returns:\n    list[list[float]]: The transformed matrix, or -1 if T or S are not invertible.\n    \"\"\"\n    A_np = np.array(A)\n    T_np = np.array(T)\n    S_np = np.array(S)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    try:\n        np.linalg.inv(T_np)\n    except np.linalg.LinAlgError:\n        return -1\n    try:\n        np.linalg.inv(S_np)\n    except np.linalg.LinAlgError:\n        return -1\n    transformed_A = np.round(np.dot(np.dot(np.linalg.inv(T_np), A_np), S_np)).tolist()\n    return transformed_A\nA = [[2, 3], [4, 5]]\nT = [[1, 0], [0, 1]]\nS = [[-1, 0], [0, 2]]"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculates the inverse of a 2x2 matrix.\n    \n    Args:\n    matrix (list[list[float]]): A 2x2 matrix represented as a list of lists.\n    \n    Returns:\n    list[list[float]]: The inverse of the matrix if it is invertible, otherwise returns None.\n    \"\"\"\n    matrix_np = np.array(matrix)\n    if matrix_np.shape != (2, 2):\n        return None\n    (a, b) = matrix_np[0]\n    (c, d) = matrix_np[1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inverse_matrix = np.array([[d, -b], [-c, a]]) / det\n    return inverse_matrix.tolist()"}
{"task_id": 9, "completion_id": 0, "solution": "import numpy as np\ndef matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies two matrices if they are compatible for multiplication.\n    \n    Parameters:\n    a (list[list[int|float]]): The first matrix to be multiplied.\n    b (list[list[int|float]]): The second matrix to be multiplied.\n    \n    Returns:\n    list[list[int|float]]: The resulting matrix after multiplication, or -1 if the matrices cannot be multiplied.\n    \"\"\"\n    A = np.array(a)\n    B = np.array(b)\n    if A.shape[1] != B.shape[0]:\n        return -1\n    result = np.dot(A, B)\n    return result.tolist()\na = [[1, 2], [3, 4]]\nb = [[2, 0], [1, 2]]"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n\n    Args:\n    vectors (list[list[float]]): A list of lists where each inner list represents a feature with its observations.\n\n    Returns:\n    list[list[float]]: The covariance matrix as a list of lists.\n    \"\"\"\n    observations = np.array(vectors)\n    means = np.mean(observations, axis=0)\n    centered_observations = observations - means\n    outer_products = np.dot(centered_observations.T, centered_observations)\n    covariance_matrix = outer_products / (len(vectors) - 1)\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations using the Jacobi method.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix of the system.\n    b (np.ndarray): Constant terms vector.\n    n (int): Number of iterations to perform.\n    \n    Returns:\n    list: Approximate solution vector as a list, rounded to 4 decimal places.\n    \"\"\"\n    if not is_diagonally_dominant(A):\n        raise ValueError('Matrix A must be diagonally dominant for the Jacobi method to converge.')\n    D = np.diag(np.diag(A))\n    R = A - D\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.round((b - np.dot(R, x)) / D, decimals=4)\n        x = x_new\n    return x.tolist()\ndef is_diagonally_dominant(A: np.ndarray) -> bool:\n    \"\"\"\n    Checks if the matrix is diagonally dominant.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix of the system.\n    \n    Returns:\n    bool: True if the matrix is diagonally dominant, False otherwise.\n    \"\"\"\n    for i in range(A.shape[0]):\n        diagonal_element = abs(A[i, i])\n        row_sums = np.sum(abs(A[i]), axis=1) - diagonal_element\n        if diagonal_element <= max(row_sums):\n            return False\n    return True"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximate the Singular Value Decomposition (SVD) of a 2x2 matrix using the Jacobian method.\n    \n    Args:\n    A (np.ndarray): A 2x2 input matrix.\n    \n    Returns:\n    tuple: A tuple containing the singular values of the matrix, rounded to the nearest 4th decimal.\n    \"\"\"\n    A_t = A.T\n    U = A / np.linalg.norm(A, ord=2)\n    V = A_t / np.linalg.norm(A_t, ord=2)\n    W = A_t @ A\n    (eigenvalues, eigenvectors) = np.linalg.eig(W)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    singular_values = np.sqrt(sorted_eigenvalues).real\n    singular_values = np.round(singular_values, 4)\n    return singular_values\nA = np.array([[1, 2], [3, 4]], dtype=float)\nsingular_values = svd_2x2_singular_values(A)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculates the determinant of a 4x4 matrix using Laplace's Expansion method.\n    \n    Args:\n    matrix (list[list[int | float]]): A 4x4 matrix represented as a list of lists.\n    \n    Returns:\n    float: The determinant of the matrix.\n    \"\"\"\n    if not all((len(row) == 4 for row in matrix)):\n        raise ValueError('Input must be a 4x4 matrix.')\n    if len(matrix) == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    det = 0\n    for col in range(4):\n        sub_matrix = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_4x4(sub_matrix)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation method.\n    \n    Parameters:\n    X (list[list[float]]): A matrix of features where each sublist represents a sample and each element in the sublist represents a feature.\n    y (list[float]): A vector of target values.\n    \n    Returns:\n    list[float]: Coefficients of the linear regression model rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\n    theta_rounded = [round(coef, 4) for coef in theta]\n    return theta_rounded\nX = [[1, 2], [2, 3], [4, 5], [6, 7]]\ny = [3, 4, 8, 11]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Performs linear regression using gradient descent on input data X and target y.\n    \n    Args:\n    X : np.ndarray - feature matrix with a column of ones for the intercept\n    y : np.ndarray - target vector\n    alpha : float - learning rate\n    iterations : int - number of iterations to run gradient descent\n    \n    Returns:\n    np.ndarray - rounded coefficients of the linear regression model as a list\n    \"\"\"\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        errors = predictions - y\n        gradient = X.T.dot(errors) / y.size\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Perform feature scaling on a dataset using both standardization and min-max normalization.\n    \n    Parameters:\n    - data: A 2D NumPy array, where each row represents a data sample and each column represents a feature.\n    \n    Returns:\n    - A tuple containing two elements:\n        - Standardized features as a list of lists.\n        - Min-Max normalized features as a list of lists.\n        \n    Both results are rounded to the nearest 4th decimal place.\n    \"\"\"\n    standardized_features = []\n    normalized_features = []\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    for sample in data:\n        standardized_sample = [(x - mean) / std for (x, mean, std) in zip(sample, means, std_devs)]\n        normalized_sample = [(x - min_val) / (max_val - min_val) for (x, min_val, max_val) in zip(sample, min_vals, max_vals)]\n        standardized_features.append([round(x, 4) for x in standardized_sample])\n        normalized_features.append([round(x, 4) for x in normalized_sample])\n    return (standardized_features, normalized_features)\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    Implement the k-Means clustering algorithm.\n    \n    Parameters:\n    - points: A list of points, where each point is a tuple of coordinates (e.g., (x, y) for 2D points)\n    - k: An integer representing the number of clusters to form\n    - initial_centroids: A list of initial centroid points, each a tuple of coordinates\n    - max_iterations: An integer representing the maximum number of iterations to perform\n    \n    Returns:\n    - A list of the final centroids of the clusters, where each centroid is rounded to the nearest fourth decimal.\n    \"\"\"\n    points = np.array(points)\n    initial_centroids = np.array(initial_centroids)\n    labels = np.zeros(len(points))\n    centroids = initial_centroids\n    for _ in range(max_iterations):\n        distances = cdist(points, centroids, 'euclidean')\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros((k, 2))\n        for i in range(k):\n            new_centroids[i, :] = points[labels == i].mean(axis=0)\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(round(c, 4)) for c in centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.model_selection import KFold\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generates train and test splits for K-Fold Cross-Validation.\n\n    :param X: Input features array.\n    :param y: Target labels array.\n    :param k: Number of folds (default is 5).\n    :param shuffle: Whether to shuffle the data before splitting into batches.\n    :param random_seed: Seed for the random number generator used for shuffling.\n    :return: A list of tuples containing the train and test indices for each fold.\n    \"\"\"\n    kf = KFold(n_splits=k, shuffle=shuffle, random_state=random_seed)\n    splits = []\n    for (train_index, test_index) in kf.split(X):\n        splits.append((train_index, test_index))\n    return splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    top_k_eigenvectors = sorted_eigenvectors[:, :k]\n    return [np.round(top_k_eigenvectors[i], 4).tolist() for i in range(k)]\ndata = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2.0, 1.6], [1.0, 1.1], [1.5, 1.6], [1.1, 0.9]])\nk = 2"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Implement a decision tree learning algorithm using recursive binary splitting based on entropy and information gain.\n    \n    :param examples: A list of examples, where each example is a dictionary with attribute-value pairs.\n    :param attributes: A list of attribute names.\n    :param target_attr: The name of the target attribute for classification.\n    :return: A nested dictionary representing the decision tree.\n    \"\"\"\n    if len(Counter([example[target_attr] for example in examples])) == 1:\n        return examples[0][target_attr]\n    if not attributes:\n        return majority_value(examples, target_attr)\n    best_attr = choose_attribute(attributes, examples, target_attr)\n    tree = {best_attr: {}}\n    remaining_attributes = [attr for attr in attributes if attr != best_attr]\n    for val in get_values(examples, best_attr):\n        ex_subset = [example for example in examples if example[best_attr] == val]\n        subtree = learn_decision_tree(ex_subset, remaining_attributes, target_attr)\n        tree[best_attr][val] = subtree\n    return tree\ndef choose_attribute(attributes: list[str], examples: list[dict], target_attr: str) -> str:\n    \"\"\"\n    Select the best attribute to split the data on, based on information gain.\n    \n    :param attributes: List of attributes to consider.\n    :param examples: List of training examples.\n    :param target_attr: The name of the target attribute for classification.\n    :return: The best attribute to split on.\n    \"\"\"\n    best_gain = -1\n    best_attribute = None\n    for attr in attributes:\n        gain = information_gain(examples, attr, target_attr)\n        if gain > best_gain:\n            best_gain = gain\n            best_attribute = attr\n    return best_attribute\ndef information_gain(examples: list[dict], attribute: str, target_attr: str) -> float:\n    \"\"\"\n    Calculate the information gain from splitting the data on the given attribute.\n    \n    :param examples: List of training examples.\n    :param attribute: Attribute to calculate the information gain for.\n    :param target_attr: The name of the target attribute for classification.\n    :return: The information gain as a float.\n    \"\"\"\n    parent_entropy = entropy(examples, target_attr)\n    vals = get_values(examples, attribute)\n    weight_avg_entropy = 0\n    for val in vals:\n        subset = [example for example in examples if example[attribute] == val]\n        weight = len(subset) / len(examples)\n        weight_avg_entropy += weight * entropy(subset, target_attr)\n    return parent_entropy - weight_avg_entropy\ndef entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"\n    Calculate the entropy of the given examples with respect to the target attribute.\n    \n    :param examples: List of training examples.\n    :param target_attr: The name of the target attribute for classification.\n    :return: The entropy as a float.\n    \"\"\"\n    val_freqs = Counter((example[target_attr] for example in examples))\n    impurities = [-freq / len(examples) * math.log2(freq / len(examples)) for freq in val_freqs.values()]\n    return sum(impurities)\ndef get_values(examples: list[dict], attribute: str) -> list:\n    \"\"\"\n    Get the list of unique values for the given attribute in the examples.\n    \n    :param examples: List of training examples.\n    :param attribute: Attribute to get the values for.\n    :return: List of unique values for the attribute.\n    \"\"\"\n    return set((example[attribute] for example in examples))\ndef majority_value(examples: list[dict], target_attr: str) -> str:\n    \"\"\"\n    Return the majority value of the target attribute in the given examples.\n    \n    :param examples: List of training examples.\n    :param target_attr: The name of the target attribute for classification.\n    :return: Majority value of the target attribute.\n    \"\"\"\n    class_counts = Counter((example[target_attr] for example in examples))\n    return max(class_counts, key=class_counts.get)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    assert data.shape[0] == len(labels), 'The number of data samples must match the number of labels'\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    b = 0\n    K = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if kernel == 'linear':\n                K[i, j] = np.dot(data[i], data[j])\n            elif kernel == 'rbf':\n                K[i, j] = np.exp(-np.linalg.norm(data[i] - data[j]) ** 2 / (2 * sigma ** 2))\n            else:\n                raise ValueError('Unsupported kernel type')\n    for t in range(iterations):\n        for i in range(n_samples):\n            hinge_loss = max(0, 1 - labels[i] * (b + np.dot(K[i, :], alpha * labels)))\n            if hinge_loss > 0:\n                alpha[i] = alpha[i] - lambda_val * alpha[i] + labels[i] * (1 - lambda_val) * K[i, i]\n                alpha -= lambda_val * alpha * np.sum(alpha * labels)\n                b += labels[i] * (1 - lambda_val) * K[i, i]\n    return (alpha.tolist(), round(b, 4))"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid activation function for a given input z.\n    \n    Parameters:\n    - z (float): The input value for which the sigmoid function will be computed.\n    \n    Returns:\n    - float: The output of the sigmoid function rounded to four decimal places.\n    \"\"\"\n    sig = 1 / (1 + math.exp(-z))\n    return round(sig, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax activation for a given list of scores.\n    \n    Args:\n    scores (list[float]): A list of raw scores (floats).\n    \n    Returns:\n    list[float]: A list of softmax activations corresponding to the input scores, each rounded to four decimal places.\n    \"\"\"\n    exp_scores = [math.exp(score - max(scores)) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(score / sum_exp_scores, 4) for score in exp_scores]\n    return softmax_values\nscores = [3.0, 1.0, 0.2]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x: float) -> float:\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulate a single neuron with a sigmoid activation function for binary classification.\n    \n    :param features: A list of feature vectors, where each vector represents multiple features for an example\n    :param labels: A list of true binary labels\n    :param weights: A list of weights, one for each feature\n    :param bias: The bias value for the neuron\n    :return: A tuple containing the predicted probabilities and the mean squared error\n    \"\"\"\n    predictions = []\n    mse = 0.0\n    for (feature_vector, label) in zip(features, labels):\n        weighted_sum = sum((feature * weight for (feature, weight) in zip(feature_vector, weights))) + bias\n        prediction = sigmoid(weighted_sum)\n        predictions.append(prediction)\n        mse += (prediction - label) ** 2\n    mse /= len(labels)\n    predictions_rounded = [round(pred, 4) for pred in predictions]\n    mse_rounded = round(mse, 4)\n    predictions_np = np.array(predictions_rounded).tolist()\n    return (predictions_np, mse_rounded)\nfeatures = [[1.0, 2.0, 3.0], [2.0, 3.0, 4.0], [3.0, 4.0, 5.0]]\nlabels = [0, 1, 1]\nweights = [0.5, 0.3, 0.8]\nbias = -1.0"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    features = np.array(features)\n    labels = np.array(labels)\n    initial_weights = np.array(initial_weights)\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n    for epoch in range(epochs):\n        inputs = np.dot(features, weights) + bias\n        predictions = sigmoid(inputs)\n        loss = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(loss, 4))\n        d_loss_d_pred = 2 * (predictions - labels) / len(labels)\n        d_pred_d_input = sigmoid_derivative(predictions)\n        d_input_d_weight = features\n        d_input_d_bias = 1\n        gradient_wrt_weight = np.dot(d_input_d_weight.T, d_loss_d_pred * d_pred_d_input)\n        gradient_wrt_bias = np.sum(d_loss_d_pred * d_pred_d_input, axis=0, keepdims=True)\n        weights -= learning_rate * gradient_wrt_weight\n        bias -= learning_rate * gradient_wrt_bias\n    return (weights.tolist(), bias, mse_values)\nfeatures = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\nlabels = np.array([0, 0, 0, 1])\ninitial_weights = np.array([0.5, 0.5])\ninitial_bias = 0.5\nlearning_rate = 0.1\nepochs = 1000"}
{"task_id": 26, "completion_id": 0, "solution": "import math\nclass Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __repr__(self):\n        return f'Value(data={self.data})'\n\n    def __add__(self, other):\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += 1.0 * out.grad\n            other.grad += 1.0 * out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            if self.data > 0:\n                self.grad += 1.0 * out.grad\n            else:\n                self.grad += 0.0 * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_array = np.array(B)\n    C_array = np.array(C)\n    P = np.linalg.inv(B_array).dot(C_array)\n    P_rounded = np.round(P, 4).tolist()\n    return P_rounded\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    if A.shape != (2, 2):\n        raise ValueError('Input must be a 2x2 matrix.')\n    A_T = A.T\n    A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A_T @ A)\n    V = eigenvectors.T.tolist()\n    singular_values = np.sqrt(eigenvalues).tolist()\n    S = np.zeros((2, 2))\n    np.fill_diagonal(S, singular_values)\n    S = S.round(4).tolist()\n    U = []\n    for (i, singular_value) in enumerate(singular_values):\n        if singular_value == 0:\n            continue\n        u = A @ eigenvectors[:, i] / singular_value\n        U.append(u.tolist())\n    U = np.array(U).round(4).tolist()\n    return (U, S, V)\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffle two numpy arrays X and y randomly while maintaining their correspondence.\n    \n    Parameters:\n    X (np.ndarray): Input features array.\n    y (np.ndarray): Target labels array.\n    seed (int, optional): Seed for the random number generator for reproducibility.\n    \n    Returns:\n    tuple: A tuple containing the shuffled X and y as lists.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.arange(X.shape[0])\n    np.random.shuffle(indices)\n    X_shuffled = X[indices].tolist()\n    y_shuffled = y[indices].tolist()\n    return (X_shuffled, y_shuffled)"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yield batches of data from numpy arrays X and optionally y.\n    \n    :param X: Numpy array containing the input features.\n    :param y: Numpy array containing the target labels (optional).\n    :param batch_size: Size of each batch yielded (default is 64).\n    :return: Yields batches of (X, y) pairs or X only as a python list.\n    \"\"\"\n    assert isinstance(X, np.ndarray), 'X must be a numpy array'\n    if y is not None:\n        assert isinstance(y, np.ndarray), 'y must be a numpy array if provided'\n        assert X.shape[0] == y.shape[0], 'X and y must have the same number of rows'\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        end = min(i + batch_size, n_samples)\n        if y is not None:\n            yield [X[i:end].tolist(), y[i:end].tolist()]\n        else:\n            yield [X[i:end].tolist()]\nX = np.random.rand(100, 10)\ny = np.random.randint(0, 2, (100, 1))"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide the dataset X into two subsets based on the specified feature and threshold.\n    \n    Parameters:\n    X (np.array): The input dataset, where each row represents a data point and each column represents a feature.\n    feature_i (int): The index of the feature to divide the dataset on.\n    threshold (float): The threshold value to compare the feature against.\n    \n    Returns:\n    list: A list containing two np.array elements. The first element contains samples where the feature value is >= threshold,\n          and the second element contains samples where the feature value is < threshold.\n    \"\"\"\n    split_func = None\n    if isinstance(threshold, np.number):\n        split_func = lambda sample: sample[feature_i] >= threshold\n    else:\n        split_func = lambda sample: sample[feature_i] == threshold\n    X_left = np.array([sample for sample in X if split_func(sample)])\n    X_right = np.array([sample for sample in X if not split_func(sample)])\n    return [X_left.tolist(), X_right.tolist()]\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nfeature_i = 0\nthreshold = 5"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial features for the input dataset X up to the specified degree.\n    \n    :param X: 2D numpy array of shape (n_samples, n_features)\n    :param degree: integer specifying the degree of the polynomial features\n    :return: 2D list of polynomial features\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    combos = combinations_with_replacement(range(n_features), degree)\n    result = np.zeros((n_samples, int(degree * (degree + 1) / 2)))\n    col_index = 0\n    for combo in combos:\n        if len(combo) > 1:\n            interaction_term = np.prod(X[:, combo], axis=1)\n        else:\n            interaction_term = X[:, combo[0]]\n        result[:, col_index] = interaction_term\n        col_index += 1\n    return result.tolist()\nX = np.array([[1, 2], [3, 4], [5, 6]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generates random subsets of a given dataset.\n\n    Parameters:\n    - X (np.ndarray): 2D numpy array representing features of the dataset.\n    - y (np.ndarray): 1D numpy array representing labels of the dataset.\n    - n_subsets (int): Number of subsets to generate.\n    - replacements (bool): Whether to sample with replacement or not.\n    - seed (int): Seed for the random number generator.\n\n    Returns:\n    - list of tuples: Each tuple contains (X_subset, y_subset) where X_subset and y_subset are subsets of the original dataset.\n    \"\"\"\n    np.random.seed(seed)\n    subsets = []\n    for _ in range(n_subsets):\n        rows_indices = np.random.choice(len(X), size=len(X), replace=replacements)\n        X_subset = X[rows_indices].tolist()\n        y_subset = y[rows_indices].tolist()\n        subsets.append((X_subset, y_subset))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n    \n    Parameters:\n    x (np.ndarray): A 1D numpy array containing integer values to be one-hot encoded.\n    n_col (int, optional): The number of columns for the one-hot encoded array. \n                           If not provided, it will be determined automatically.\n    \n    Returns:\n    list: A list representing the one-hot encoded form of the input array.\n    \"\"\"\n    if n_col is None:\n        n_col = int(np.max(x)) + 1\n    one_hot_encoded = np.zeros((x.size, n_col), dtype=int)\n    one_hot_encoded[np.arange(x.size), x] = 1\n    return one_hot_encoded.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix.\n    \n    Parameters:\n    x (np.array): A 1D numpy array.\n    \n    Returns:\n    np.array: A 2D numpy array representing the diagonal matrix.\n    \"\"\"\n    identity_matrix = np.eye(len(x))\n    diagonal_matrix = identity_matrix * x[:, None]\n    return diagonal_matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.metrics import accuracy_score as accuracy_score_sklearn\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n    \n    Parameters:\n    y_true (np.array): A 1D numpy array containing the true labels.\n    y_pred (np.array): A 1D numpy array containing the predicted labels.\n    \n    Returns:\n    float: The accuracy score rounded to the nearest 4th decimal.\n    \"\"\"\n    result = accuracy_score_sklearn(y_true, y_pred)\n    return round(result, 4)\ny_true = np.array([0, 1, 0, 1, 0])\ny_pred = np.array([0, 1, 0, 0, 1])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    - X: 2D numpy array\n    - Y: Optional 2D numpy array\n    \n    Returns:\n    - A 2D numpy array representing the correlation matrix, converted to a python list using tolist()\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.atleast_2d(X)\n    Y = np.atleast_2d(Y)\n    mean_X = np.mean(X, axis=1, keepdims=True)\n    mean_Y = np.mean(Y, axis=1, keepdims=True)\n    std_X = np.std(X, axis=1, keepdims=True)\n    std_Y = np.std(Y, axis=1, keepdims=True)\n    centered_X = X - mean_X\n    centered_Y = Y - mean_Y\n    covariance_matrix = centered_X @ centered_Y.T / (X.shape[1] - 1)\n    std_dev_X = np.squeeze(std_X)\n    std_dev_Y = np.squeeze(std_Y)\n    corr_matrix = covariance_matrix / (std_dev_X * std_dev_Y)\n    corr_matrix_rounded = np.round(corr_matrix, 4)\n    return corr_matrix_rounded.tolist()\nY = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.base import clone\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Implement the fit method for an AdaBoost classifier.\n    \n    Parameters:\n    X (np.array): 2D numpy array of shape (n_samples, n_features) representing the dataset.\n    y (np.array): 1D numpy array of shape (n_samples,) representing the labels.\n    n_clf (int): Number of classifiers.\n    \n    Returns:\n    list: A list of dictionaries, where each dictionary contains the parameters of a classifier after it has been trained.\n    \"\"\"\n    n_samples = X.shape[0]\n    sample_weights = np.full(n_samples, 1 / n_samples, dtype=np.float64)\n    classifiers = []\n    for _ in range(n_clf):\n        weighted_X = X * sample_weights.reshape(-1, 1)\n        weighted_sum_X = np.sum(weighted_X, axis=0)\n        clf = DecisionTreeClassifier(max_depth=1)\n        best_clf = None\n        best_error = float('inf')\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(weighted_X[:, feature])\n            for threshold in thresholds:\n                clf_clone = clone(clf)\n                clf_clone.threshold = threshold\n                clf_clone.classes_ = np.array([0, 1])\n                y_pred = (weighted_X[:, feature] >= threshold).astype(int)\n                incorrect = y_pred != y\n                e = np.sum(sample_weights[incorrect])\n                if e < best_error:\n                    best_error = e\n                    best_clf = {'feature': feature, 'threshold': round(threshold, 4), 'error': round(best_error, 4)}\n        if best_clf is None:\n            best_clf = {'feature': 0, 'threshold': 0.0, 'error': 0.0}\n        clf_clone = clone(clf)\n        clf_clone.fit(X, y, sample_weight=sample_weights)\n        classifiers.append({'classifier': clf_clone, 'feature': best_clf['feature'], 'threshold': best_clf['threshold'], 'error': best_clf['error']})\n        alpha = round(0.5 * math.log((1 - best_error) / best_error), 4)\n        incorrect = clf_clone.predict(X) != y\n        sample_weights *= np.exp(alpha * incorrect)\n        sample_weights /= np.sum(sample_weights)\n        sample_weights = np.clip(sample_weights, 0, 1)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    This function takes a list of scores (numpy array) and computes the log-softmax of each element.\n    The result is rounded to the nearest 4th decimal place and returned as a list.\n    \n    Parameters:\n    scores (list): A list of scores (real numbers)\n    \n    Returns:\n    list: A list of log-softmax values corresponding to the input scores\n    \"\"\"\n    scores_array = np.array(scores)\n    softmax_values = np.exp(scores_array - np.max(scores_array)) / np.sum(np.exp(scores_array - np.max(scores_array)))\n    log_softmax_values = np.log(softmax_values)\n    log_softmax_values_rounded = np.round(log_softmax_values, 4)\n    return log_softmax_values_rounded.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n\n    def initialize(self, input_shape=None):\n        if input_shape is None and self.input_shape is None:\n            raise ValueError('Input shape must be provided either during initialization or through set_input_shape method')\n        if input_shape is not None:\n            self.input_shape = input_shape\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros(self.n_units)\n        self.optimizer_W = SGD(lr=0.01)\n        self.optimizer_w0 = SGD(lr=0.01)\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        grad_wrt_W = np.dot(self.layer_input.T, accum_grad)\n        grad_wrt_w0 = np.sum(accum_grad, axis=0)\n        grad_wrt_prev_layer = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            self.W = self.optimizer_W.update(self.W, grad_wrt_W)\n            self.w0 = self.optimizer_w0.update(self.w0, grad_wrt_w0)\n        return grad_wrt_prev_layer\n\n    def output_shape(self):\n        return [self.n_units]\nclass SGD:\n\n    def __init__(self, lr=0.01):\n        self.lr = lr\n\n    def update(self, layer_params, grad):\n        return layer_params - self.lr * grad\naccum_grad = np.random.rand(32, 64)\ngrad = dense_layer.backward_pass(accum_grad)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Perform a simple 2D convolution on the input matrix using the given kernel.\n    \n    Parameters:\n    - input_matrix: A 2D numpy array representing the input image.\n    - kernel: A 2D numpy array representing the convolutional kernel.\n    - padding: An integer representing the number of pixels to pad the input image.\n    - stride: An integer representing the stride of the convolution operation.\n    \n    Returns:\n    - The result of the convolution operation as a list of lists, with results rounded to the nearest 4th decimal.\n    \"\"\"\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    padded_matrix = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant', constant_values=0)\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for y in range(output_height):\n        for x in range(output_width):\n            output_matrix[y][x] = np.sum(padded_matrix[y * stride:y * stride + kernel_height, x * stride:x * stride + kernel_width] * kernel)\n    output_matrix = np.round(output_matrix, decimals=4).tolist()\n    return output_matrix\ninput_matrix = np.array([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]])\nkernel = np.array([[1, 0], [0, 1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Applies the Rectified Linear Unit (ReLU) activation function to the input.\n\n    Args:\n        z (float): Input value\n\n    Returns:\n        float: Output of the ReLU function applied to the input\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Calculate the Ridge Regression loss function.\n    \n    Parameters:\n    X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n    w (np.ndarray): Coefficients vector of shape (n_features,)\n    y_true (np.ndarray): True labels vector of shape (n_samples,)\n    alpha (float): Regularization parameter\n    \n    Returns:\n    float: The calculated Ridge loss, rounded to the nearest 4th decimal.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    ridge_loss_value = mse + reg_term / len(y_true)\n    return round(ridge_loss_value, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    \"\"\"\n    Applies the Leaky Rectified Linear Unit (Leaky ReLU) activation function to the input value.\n    \n    Parameters:\n        z (float): The input value.\n        alpha (float, optional): The slope of the function when the input is less than 0. Defaults to 0.01.\n        \n    Returns:\n        float | int: The result of applying the Leaky ReLU function to the input value.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    - x1: A numpy array representing the first input vector.\n    - x2: A numpy array representing the second input vector.\n    \n    Returns:\n    - float: The dot product (linear kernel) of x1 and x2.\n    \"\"\"\n    if not isinstance(x1, np.ndarray) or not isinstance(x2, np.ndarray):\n        raise ValueError('Both x1 and x2 must be numpy arrays.')\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric.\n\n    Parameters:\n    y_true (numpy.ndarray): An array containing the true binary labels.\n    y_pred (numpy.ndarray): An array containing the predicted binary labels.\n\n    Returns:\n    float: The precision metric value.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        return 0.0\n    precision_score = tp / (tp + fp)\n    return precision_score\ny_true = np.array([1, 0, 1, 1, 0, 1, 0, 1])\ny_pred = np.array([1, 0, 1, 0, 0, 1, 1, 0])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Implements Stochastic Gradient Descent (SGD), Batch Gradient Descent, and Mini-Batch Gradient Descent using Mean Squared Error (MSE) as the loss function.\n    \n    Parameters:\n        X (np.array): Input data matrix of shape (n_samples, n_features)\n        y (np.array): Target values of shape (n_samples,)\n        weights (np.array): Initial weights of shape (n_features,)\n        learning_rate (float): Learning rate for updating weights\n        n_iterations (int): Number of iterations for gradient descent\n        batch_size (int): Size of mini-batch for mini-batch gradient descent, defaults to 1 for SGD and 'X.shape[0]' for batch\n        method (str): Type of gradient descent: 'sgd', 'batch', or 'mini_batch'\n        \n    Returns:\n        list: Updated weights after n_iterations, rounded to 4th decimal place and converted to a python list\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if method == 'batch':\n        batch_size = n_samples\n    elif method == 'sgd':\n        batch_size = 1\n    for _ in range(n_iterations):\n        if method == 'batch':\n            prediction = np.dot(X, weights)\n            error = prediction - y\n            gradient = np.dot(X.T, error) / n_samples\n            weights -= learning_rate * gradient\n        elif method == 'sgd':\n            for idx in range(n_samples):\n                sample_X = X[idx:idx + 1]\n                sample_y = y[idx:idx + 1]\n                prediction = np.dot(sample_X, weights)\n                error = prediction - sample_y\n                gradient = np.dot(sample_X.T, error)\n                weights -= learning_rate * gradient\n        elif method == 'mini_batch':\n            indices = np.random.choice(n_samples, batch_size, replace=False)\n            sample_X = X[indices]\n            sample_y = y[indices]\n            prediction = np.dot(sample_X, weights)\n            error = prediction - sample_y\n            gradient = np.dot(sample_X.T, error) / batch_size\n            weights -= learning_rate * gradient\n    return round_weights(weights.tolist())\ndef round_weights(weights_list):\n    \"\"\"\n    Rounds the weights to the nearest 4th decimal place.\n    \n    Parameters:\n        weights_list (list): List of weights\n    \n    Returns:\n        list: Rounded weights\n    \"\"\"\n    return [round(weight, 4) for weight in weights_list]"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a given matrix to its Reduced Row Echelon Form (RREF).\n\n    Parameters:\n    matrix (list of lists): A 2D list representing the matrix.\n\n    Returns:\n    list: The Reduced Row Echelon Form of the matrix as a nested list.\n    \"\"\"\n    matrix = np.array(matrix)\n    (rows, cols) = matrix.shape\n    (r, c) = (0, 0)\n    while r < rows and c < cols:\n        if c < cols and all(matrix[r:, c] == 0):\n            c += 1\n            continue\n        max_row = np.argmax(np.abs(matrix[r:, c])) + r\n        if matrix[max_row, c] != 0:\n            matrix[[r, max_row]] = matrix[[max_row, r]]\n        if matrix[r, c] != 1:\n            scalar = matrix[r, c]\n            matrix[r] /= scalar\n        for i in range(rows):\n            if i != r and matrix[i, c] != 0:\n                factor = matrix[i, c] / matrix[r, c]\n                matrix[i] -= factor * matrix[r]\n        r += 1\n        c += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 1\n    for i in range(num_iterations):\n        g = grad(x0)\n        m_corrected = m / (1 - beta1 ** t)\n        m = beta1 * m + (1 - beta1) * g\n        v_corrected = v / (1 - beta2 ** t)\n        v = beta2 * v + (1 - beta2) * g ** 2\n        x0 -= learning_rate * m_corrected / (np.sqrt(v_corrected) + epsilon)\n        t += 1\n    return x0.tolist()\nx0 = np.array([1.0, 1.0])"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    X = np.c_[np.ones((X.shape[0], 1)), X]\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    (n_samples, n_features) = X.shape\n    prev_cost = float('inf')\n    cost = None\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        cost = 1 / (2 * n_samples) * np.sum((y_pred - y) ** 2)\n        dw = 1 / n_samples * np.dot(X.T, y_pred - y) + alpha / n_samples * np.sign(weights)\n        db = 1 / n_samples * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        if abs(prev_cost - cost) < tol:\n            break\n        prev_cost = cost\n    return (weights.tolist(), round(bias, 4))\nX = np.random.rand(100, 3)\ny = np.random.rand(100, 1)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two strings.\n    Allowed operations are insert, delete, substitute, and transpose.\n    Each operation costs 1 unit.\n\n    :param source: The source string to be transformed.\n    :param target: The target string after transformation.\n    :return: Minimum number of edits required to transform source into target.\n    \"\"\"\n    len_source = len(source)\n    len_target = len(target)\n    distance_matrix = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        for j in range(len_target + 1):\n            if i == 0:\n                distance_matrix[i][j] = j\n            elif j == 0:\n                distance_matrix[i][j] = i\n            elif source[i - 1] == target[j - 1]:\n                distance_matrix[i][j] = distance_matrix[i - 1][j - 1]\n            else:\n                substitution_cost = distance_matrix[i - 1][j - 1] + 1\n                insertion_cost = distance_matrix[i][j - 1] + 1\n                deletion_cost = distance_matrix[i - 1][j] + 1\n                transpose_cost = float('inf')\n                if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                    transpose_cost = distance_matrix[i - 2][j - 2] + 1\n                distance_matrix[i][j] = min(substitution_cost, insertion_cost, deletion_cost, transpose_cost)\n    return distance_matrix[len_source][len_target]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n    - y_true: List of true binary labels (0 or 1).\n    - y_pred: List of predicted binary labels (0 or 1).\n    \n    Returns:\n    - Recall value rounded to three decimal places. Returns 0.0 if the denominator is zero.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        recall_value = 0.0\n    else:\n        recall_value = TP / (TP + FN)\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Implements the self-attention mechanism for a given input matrix X.\n    \n    Args:\n    - X (np.array): Input feature matrix of shape (sequence_length, embedding_dim).\n    - W_q (np.array): Query weights matrix of shape (embedding_dim, d_k).\n    - W_k (np.array): Key weights matrix of shape (embedding_dim, d_k).\n    - W_v (np.array): Value weights matrix of shape (embedding_dim, d_v).\n    \n    Returns:\n    - np.array: Self-attention output after applying weights and aggregation.\n    \"\"\"\n    assert X.shape[1] == W_q.shape[0] == W_k.shape[0] == W_v.shape[0], 'Embedding dimensions must match'\n    (sequence_length, embedding_dim) = X.shape\n    d_k = W_q.shape[1]\n    d_v = W_v.shape[1]\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.matmul(Q.T, K) / np.sqrt(d_k)\n    attention_probs = npsoftmax(attention_scores)\n    self_att_output = np.matmul(attention_probs, V.T).T\n    return np.round(self_att_output, 4).tolist()\ndef npsoftmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n    return e_x / e_x.sum(axis=-1, keepdims=True)\nX = np.array([[1, 2], [3, 4], [5, 6]])\nW_q = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\nW_k = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\nW_v = np.array([[0.7, 0.8], [0.9, 1.0], [1.1, 1.2]])"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a simple RNN cell that processes a sequence of input vectors\n    and produces the final hidden state using the tanh activation function.\n    \n    :param input_sequence: List of input vectors (each vector is a list of floats)\n    :param initial_hidden_state: Initial hidden state (a list of floats)\n    :param Wx: Weight matrix for input-to-hidden connections (2D list or numpy array)\n    :param Wh: Weight matrix for hidden-to-hidden connections (2D list or numpy array)\n    :param b: Bias vector (a list or numpy array)\n    :return: Final hidden state after processing the entire sequence (rounded to 4 decimal places)\n    \"\"\"\n    x = np.array(input_sequence)\n    h_prev = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_states = [h_prev]\n    for x_t in x:\n        h_prev = np.tanh(np.dot(x_t, Wx) + np.dot(h_prev, Wh) + b)\n        hidden_states.append(h_prev)\n    final_hidden_state = np.round(hidden_states[-1].tolist(), 4)\n    return final_hidden_state"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation matrix to a set of points.\n\n    Parameters:\n    points (list): A list of [x, y] coordinates.\n    tx (float): Translation distance in the x direction.\n    ty (float): Translation distance in the y direction.\n\n    Returns:\n    list: The translated points as a new list of [x, y] coordinates.\n    \"\"\"\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.hstack((points_array, np.ones((points_array.shape[0], 1))))\n    transformed_points_homogeneous = np.dot(translation_matrix[:2, :2], homogeneous_points.T) + translation_matrix[:2, 2]\n    transformed_points = transformed_points_homogeneous.T.tolist()\n    return transformed_points\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 10\nty = 5"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the Kullback-Leibler (KL) Divergence between two normal distributions.\n\n    Parameters:\n    mu_p (float): Mean of the first normal distribution P.\n    sigma_p (float): Standard deviation of the first normal distribution P.\n    mu_q (float): Mean of the second normal distribution Q.\n    sigma_q (float): Standard deviation of the second normal distribution Q.\n\n    Returns:\n    float: The KL divergence between the two normal distributions.\n    \"\"\"\n    ratio = sigma_p / sigma_q\n    delta = mu_p - mu_q\n    kl_div = 0.5 * (np.log(sigma_q ** 2 / sigma_p ** 2) + (sigma_p ** 2 + delta ** 2) / sigma_q ** 2 - 1)\n    return kl_div\nmu_p = 0\nsigma_p = 1\nmu_q = 1\nsigma_q = 1.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A)\n    b = np.array(b)\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x_ini, dtype=float)\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    for _ in range(n):\n        for i in range(A.shape[0]):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, decimals=4).tolist()\nA = [[4, -1, 0, 0], [-1, 4, -1, 0], [0, -1, 4, -1], [0, 0, -1, 4]]\nb = [15, -4, -17, 20]\nn = 100"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix of the system.\n    b (np.ndarray): Right-hand side vector of the system.\n    \n    Returns:\n    list: Solution vector x, rounded to the nearest 4th decimal.\n    \"\"\"\n    n = len(b)\n    Ab = np.hstack((A, b.reshape(n, 1)))\n    for i in range(n):\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        if Ab[i][i] == 0:\n            raise ValueError(' Singular matrix ')\n        for j in range(i + 1, n):\n            factor = Ab[j][i] / Ab[i][i]\n            Ab[j] -= factor * Ab[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = Ab[i, n] / Ab[i, i]\n        for j in range(i - 1, -1, -1):\n            Ab[j, n] -= Ab[j, i] * x[i]\n    return np.round(Ab[:, n], 4).tolist()\nA = np.array([[4, 3, -2], [2, 6, 3], [-1, -1, 5]])\nb = np.array([1, -2, -3])"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        T = x.shape[0]\n        hs = []\n        h = initial_hidden_state\n        c = initial_cell_state\n        for t in range(T):\n            xt = x[t]\n            xt_hc = np.concatenate((xt, h), axis=0).reshape(self.input_size + self.hidden_size, 1)\n            ft = self.sigmoid(np.dot(self.Wf, xt_hc) + self.bf)\n            it = self.sigmoid(np.dot(self.Wi, xt_hc) + self.bi)\n            cct = self.tanh(np.dot(self.Wc, xt_hc) + self.bc)\n            ot = self.sigmoid(np.dot(self.Wo, xt_hc) + self.bo)\n            c = ft * c + it * cct\n            h = ot * self.tanh(c)\n            hs.append(h.T.tolist()[0])\n        hs = np.array(hs).round(4).tolist()\n        return (hs, h.round(4).tolist(), c.round(4).tolist())\ninput_size = 3\nhidden_size = 2\nx = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]).round(4)\ninitial_hidden_state = np.zeros((hidden_size, 1)).round(4)\ninitial_cell_state = np.zeros((hidden_size, 1)).round(4)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Compute TF-IDF scores for a query against a given corpus of documents.\n    \n    :param corpus: A list of documents, where each document is a list of words.\n    :param query: A list of words for which to compute the TF-IDF scores.\n    :return: A list of lists containing the TF-IDF scores for the query words in each document, rounded to five decimal places.\n    \"\"\"\n    if not corpus:\n        raise ValueError('Corpus cannot be empty')\n    tf = []\n    for doc in corpus:\n        doc_tfs = {}\n        for word in query:\n            doc_tfs[word] = doc.count(word) / len(doc)\n        tf.append(doc_tfs)\n    df = {word: 0 for word in query}\n    for doc in corpus:\n        for word in query:\n            if word in doc:\n                df[word] += 1\n    idf = {word: np.log((1 + len(corpus)) / (1 + df[word])) + 1 for word in query}\n    tf_idf_scores = []\n    for doc_tfs in tf:\n        doc_scores = []\n        for word in query:\n            if word in doc_tfs:\n                score = doc_tfs[word] * idf[word]\n            else:\n                score = 0\n            doc_scores.append(round(score, 5))\n        tf_idf_scores.append(doc_scores)\n    return tf_idf_scores\ncorpus = [['the', 'quick', 'brown', 'fox', 'jumps'], ['jumped', 'over', 'a', 'lazy', 'dog'], ['the', 'fox', 'is', 'quick']]\nquery = ['the', 'quick', 'brown', 'dog']\ntf_idf_scores = compute_tf_idf(corpus, query)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp != 0 else 0\n    recall = tp / (tp + fn) if tp + fn != 0 else 0\n    fscore = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if precision + recall != 0 else 0\n    return round(fscore, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def rnn_forward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n        \"\"\"\n        Processes a sequence of inputs and returns the output, the last inputs and the hidden states.\n        \"\"\"\n        h = np.zeros((hidden_size, 1))\n        output_sequence = []\n        for t in range(len(input_sequence)):\n            x_t = input_sequence[t].reshape((-1, 1))\n            h = np.tanh(np.dot(W_xh, x_t) + np.dot(W_hh, h) + b_h)\n            y = np.dot(W_hy, h) + b_y\n            output_sequence.append(y)\n        return (output_sequence, h, input_sequence)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_hidden_states, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        (dW_xh, dW_hh, dW_hy) = (np.zeros_like(W_xh), np.zeros_like(W_hh), np.zeros_like(W_hy))\n        (db_h, db_y) = (np.zeros_like(b_h), np.zeros_like(b_y))\n        losses = [np.square(o - e).mean() / 2 for (o, e) in zip(outputs, expected_output)]\n        total_loss = sum(losses)\n        delta = (outputs[-1] - expected_output[-1]) * (1 - last_hidden_states ** 2)\n        db_y += delta.sum(axis=1, keepdims=True) * learning_rate\n        dW_hy += np.dot(delta, last_hidden_states.T) * learning_rate\n        for t in reversed(range(len(input_sequence))):\n            x_t = input_sequence[t].reshape((-1, 1))\n            h_t = last_hidden_states if t == len(input_sequence) - 1 else hidden_states[t + 1]\n            delta_h = (np.dot(W_hh.T, delta) + db_h) * (1 - h_t ** 2)\n            db_h += delta_h.sum(axis=1, keepdims=True) * learning_rate\n            dW_hh += np.dot(delta_h, h_t.T) * learning_rate\n            delta_x = np.dot(W_xh.T, delta_h)\n            db_xh = delta_x.sum(axis=1, keepdims=True) * learning_rate\n            dW_xh += np.dot(delta_x, x_t.T) * learning_rate\n            delta = delta_h\n        return (dW_xh, dW_hh, dW_hy, db_h, db_y, total_loss)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    x = x0\n    r = b - A @ x\n    p = r.copy()\n    rsold = np.dot(r, r)\n    for i in range(n):\n        Ap = A @ p\n        alpha = rsold / np.dot(p, Ap)\n        x = x + alpha * p\n        r = b - A @ x\n        rsnew = np.dot(r, r)\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    label_freq = np.bincount(y)\n    total_instances = len(y)\n    probabilities = label_freq / total_instances\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    dense_array = np.array(dense_matrix)\n    (rows, cols) = dense_array.nonzero()\n    values = dense_array[rows, cols].tolist()\n    col_indices = cols.tolist()\n    num_rows = dense_array.shape[0]\n    row_pointer = [sum(rows == i) for i in range(num_rows)]\n    row_pointer = [sum(row_pointer[:i + 1]) for i in range(num_rows)]\n    return (values, col_indices, row_pointer)\ndense_matrix = [[1, 0, 2], [0, 3, 0], [4, 5, 6]]"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    L = np.array(L)\n    L_norm = L / np.linalg.norm(L)\n    dot_product = np.dot(v, L_norm)\n    projection = dot_product * L_norm\n    return [round(coord, 3) for coord in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "import numpy as np\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    from scipy.sparse import csc_matrix\n    sparse_matrix = csc_matrix(dense_matrix)\n    values = sparse_matrix.data\n    row_indices = sparse_matrix.indices\n    col_pointers = sparse_matrix.indptr\n    return (values, row_indices, col_pointers)\ndense_matrix = [[1, 0, 3], [4, 5, 0], [0, 7, 8]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    This function finds the column space (image) of a matrix A using row echelon form.\n    It returns the basis vectors that span the column space of A, rounded to 8 decimal places.\n\n    :param A: numpy array representing the matrix\n    :return: List of basis vectors that span the column space of A\n    \"\"\"\n    U = np.linalg.matrix_rank(A)\n    (rref_A, _) = np.linalg.qr(A.T)\n    rref_A = np.nan_to_num(rref_A)\n    pivots = np.any(rref_A != 0, axis=0)\n    basis_vectors = A[:, pivots]\n    basis_vectors_rounded = np.round(basis_vectors, 8).tolist()\n    return basis_vectors_rounded\nA = np.array([[1, 2, 3], [2, 5, 7], [4, 10, 11]], dtype=float)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared value for a given set of true and predicted values.\n    \n    Args:\n    y_true (np.array): Array of true values.\n    y_pred (np.array): Array of predicted values.\n    \n    Returns:\n    float: R-squared value rounded to three decimal places.\n    \"\"\"\n    SST = np.sum((y_true - np.mean(y_true)) ** 2)\n    SSR = np.sum((y_true - y_pred) ** 2)\n    r_squared_value = 1 - SSR / SST\n    return round(r_squared_value, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "import numpy as np\ndef calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image represented as a 2D matrix.\n    \n    Parameters:\n    img (list of list of int): Grayscale image represented as a 2D matrix.\n    \n    Returns:\n    float: Average brightness of the image rounded to two decimal places. Returns -1 for invalid inputs.\n    \"\"\"\n    if not img or not img[0]:\n        return -1\n    row_lengths = [len(row) for row in img]\n    if len(set(row_lengths)) > 1:\n        return -1\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n    total_brightness = sum((pixel for row in img for pixel in row))\n    num_pixels = sum((len(row) for row in img))\n    avg_brightness = round(total_brightness / num_pixels, 2)\n    return avg_brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between the actual and predicted values.\n\n    Parameters:\n    y_true (np.array): An array of actual values.\n    y_pred (np.array): An array of predicted values.\n\n    Returns:\n    float: The RMSE value rounded to three decimal places.\n\n    Raises:\n    ValueError: If input arrays have mismatched shapes, are empty, or contain invalid inputs.\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both y_true and y_pred must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    rmse_value = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays y_true and y_pred.\n\n    :param y_true: numpy array of true binary labels\n    :param y_pred: numpy array of predicted binary labels\n    :return: Jaccard Index as a float value rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1, 0, 0])\ny_pred = np.array([1, 1, 1, 0, 0, 1, 0, 0])"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score between two binary arrays y_true and y_pred.\n    \n    Parameters:\n    - y_true: np.array, ground truth binary array\n    - y_pred: np.array, predicted binary array\n    \n    Returns:\n    - score: float, Dice Score rounded to 3 decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    true_positives = intersection\n    false_positives = np.sum(y_pred) - intersection\n    false_negatives = np.sum(y_true) - intersection\n    if true_positives + false_positives + false_negatives == 0:\n        return round(0.0, 3)\n    else:\n        score = 2.0 * true_positives / (true_positives + false_positives + false_negatives)\n        return round(score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a given dataset row using Hyperdimensional Computing (HDC).\n    \n    Parameters:\n    - row (dict): A dictionary representing a dataset row, where keys are feature names and values are their corresponding values.\n    - dim (int): The dimensionality of the hypervectors.\n    - random_seeds (dict): A dictionary where keys are feature names and values are seeds to ensure reproducibility of hypervectors.\n    \n    Returns:\n    - list: A composite hypervector representing the entire row.\n    \"\"\"\n\n    def create_hypervector(value, seed, dim):\n        np.random.seed(seed)\n        return np.random.randint(2, size=dim).tolist()\n    composite_hv = []\n    for (feature, value) in row.items():\n        feature_seed = random_seeds.get(feature, np.random.randint(100000.0))\n        hv = create_hypervector(value, feature_seed, dim)\n        if not composite_hv:\n            composite_hv = hv\n        else:\n            composite_hv = np.bitwise_xor(composite_hv, hv).tolist()\n    return composite_hv"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix for binary classification based on the true and predicted labels provided in the dataset.\n\n    Parameters:\n    data (list of lists): A list where each element is a sublist [y_true, y_pred] representing the true and predicted labels for each observation.\n\n    Returns:\n    list: A 2x2 confusion matrix represented as a list of lists, where the order of elements is [[true_negative, false_positive], [false_negative, true_positive]].\n    \"\"\"\n    label_counts = Counter((tuple(item) for item in data))\n    cm = [[0, 0], [0, 0]]\n    for ((y_true, y_pred), count) in label_counts.items():\n        if y_true == 0 and y_pred == 0:\n            cm[0][0] += count\n        elif y_true == 0 and y_pred == 1:\n            cm[1][0] += count\n        elif y_true == 1 and y_pred == 0:\n            cm[0][1] += count\n        elif y_true == 1 and y_pred == 1:\n            cm[1][1] += count\n    return cm\ndata = [[0, 0], [0, 0], [0, 1], [0, 1], [1, 0], [1, 0], [1, 1], [1, 1], [1, 1]]\ncm = confusion_matrix(data)"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n\n    Parameters:\n    - v1: Numpy array representing the first vector.\n    - v2: Numpy array representing the second vector.\n\n    Returns:\n    - A float representing the cosine similarity, rounded to three decimal places.\n    \n    Constraints:\n    - Both input vectors must have the same shape.\n    - Input vectors cannot be empty or have zero magnitude.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape')\n    if np.any(v1 == 0) or np.any(v2 == 0) or len(v1) == 0 or (len(v2) == 0):\n        raise ValueError('Vectors cannot be empty or have zero magnitude')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    cosine_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cosine_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_recall_fscore_support\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError('Actual and predicted lists must have the same length.')\n    if not all((label in [0, 1] for label in actual + predicted)):\n        raise ValueError('All elements in actual and predicted lists must be either 0 or 1.')\n    cm = confusion_matrix(actual, predicted)\n    (tn, fp, fn, tp) = cm.ravel()\n    accuracy = round(accuracy_score(actual, predicted), 3)\n    f1 = round(f1_score(actual, predicted), 3)\n    specificity = round(tn / (tn + fp), 3)\n    npv = round(tn / (tn + fn), 3)\n    return (cm, accuracy, f1, specificity, npv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculates various descriptive statistics metrics for a given dataset.\n    \n    Parameters:\n    - data: A list or NumPy array of numerical values\n    \n    Returns:\n    A dictionary containing the following statistics:\n    - mean\n    - median\n    - mode\n    - variance\n    - standard deviation\n    - 25th percentile\n    - 50th percentile (median)\n    - 75th percentile\n    - interquartile range (IQR)\n    \"\"\"\n    data = np.array(data)\n    mean_value = np.mean(data)\n    median_value = np.median(data)\n    mode_value = stats.mode(data)[0][0] if len(stats.mode(data)[1][0]) > 0 else np.nan\n    variance_value = np.var(data)\n    std_dev_value = np.std(data)\n    twenty_five_percentile = np.percentile(data, 25)\n    fifty_percentile = np.percentile(data, 50)\n    seventy_five_percentile = np.percentile(data, 75)\n    iqr_value = seventy_five_percentile - twenty_five_percentile\n    result = {'mean': round(mean_value, 4), 'median': round(median_value, 4), 'mode': round(mode_value, 4) if not np.isnan(mode_value) else np.nan, 'variance': round(variance_value, 4), 'standard_deviation': round(std_dev_value, 4), '25th_percentile': round(twenty_five_percentile, 4), '50th_percentile': round(fifty_percentile, 4), '75th_percentile': round(seventy_five_percentile, 4), 'interquartile_range': round(iqr_value, 4)}\n    return result\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to five decimal places\n    \"\"\"\n\n    def binom_coefficient(n, k):\n        return math.comb(n, k)\n    q = 1 - p\n    binom_prob = binom_coefficient(n, k) * p ** k * q ** (n - k)\n    return round(binom_prob, 5)\nn = 10\nk = 3\np = 0.5"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * pow(lam, k) / math.factorial(k)\n    return round(probability, 5)\nk = 3\nlam = 2"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast value of the image.\n    \"\"\"\n    if not isinstance(img, np.ndarray) or len(img.shape) != 2:\n        raise ValueError('Input must be a 2D numpy array representing a grayscale image.')\n    max_pixel_value = np.max(img)\n    min_pixel_value = np.min(img)\n    contrast = max_pixel_value - min_pixel_value\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        int or float: The dot product of the two input vectors.\n    \"\"\"\n    if not isinstance(vec1, np.ndarray) or not isinstance(vec2, np.ndarray):\n        raise ValueError('Both inputs must be numpy arrays.')\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Inputs must be 1D arrays.')\n    if vec1.shape != vec2.shape:\n        raise ValueError('Inputs must have the same shape.')\n    dot_product = np.dot(vec1, vec2)\n    return dot_product"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data)\n    transformed_data = []\n    for item in data_array:\n        transformed_features = [item ** i for i in range(1, degree + 1)]\n        transformed_data.append(transformed_features)\n    transformed_data_rounded = [[round(feature, 8)] for feature in np.array(transformed_data).T]\n    return transformed_data_rounded\ndegree = 2"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Calculate the positional encoding for a given position and model dimensionality.\n\n    Args:\n        position (int): The position in the sequence.\n        d_model (int): The dimensionality of the model.\n\n    Returns:\n        list: The positional encoding as a float16 numpy array converted to a list.\n\n    Note:\n        If position is 0 or d_model is less than or equal to 0, return -1.\n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros(d_model, dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            pe[i] += np.sin(pos / 10000 ** (i / d_model))\n            pe[i + 1] += np.cos(pos / 10000 ** ((i + 1) / d_model))\n    return pe.tolist()\nposition = 50\nd_model = 24"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    overfitting_threshold = 0.2\n    underfitting_threshold = 0.7\n    if training_accuracy - test_accuracy > overfitting_threshold:\n        return 1\n    elif training_accuracy < underfitting_threshold and test_accuracy < underfitting_threshold:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_corrected = m_t / (1 - beta1 ** (t + 1))\n    v_corrected = v_t / (1 - beta2 ** (t + 1))\n    parameter_updated = parameter - learning_rate * m_corrected / (np.sqrt(v_corrected) + epsilon)\n    return [np.round(parameter_updated.tolist(), 5), np.round(m_t.tolist(), 5), np.round(v_t.tolist(), 5)]"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    context = np.array(token_ids, dtype=np.int32).reshape((1, len(token_ids)))\n    generated_text_ids = []\n    for _ in range(n_tokens_to_generate):\n        curr_ctx = context[:, -hparams['n_ctx']:]\n        attended_token = curr_ctx[0][-1]\n        attended_emb = params['wte'][attended_token]\n        ff_output = attended_emb + np.random.rand(1, 10)\n        normalized_output = (ff_output - params['ln_f']['b']) / params['ln_f']['g']\n        next_token_prob = np.exp(normalized_output) / np.sum(np.exp(normalized_output))\n        next_token_id = np.random.choice(len(encoder.encoder_dict), p=next_token_prob)\n        generated_text_ids.append(next_token_id)\n    generated_text = encoder.decode(generated_text_ids)\n    return generated_text\ngenerated_text = gen_text('hello', n_tokens_to_generate=5)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        \"\"\"Compute the softmax of a vector.\"\"\"\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n    if not all((isinstance(x, (int, float)) for x in crystal_values)) or len(crystal_values) != n:\n        raise ValueError('Invalid input: crystal_values must be a list of numeric values with length n')\n    attention_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                attention_matrix[i][j] = np.exp(crystal_values[i] * crystal_values[j])\n    normalized_attention_matrix = softmax(attention_matrix.sum(axis=1))\n    weighted_patterns = []\n    for i in range(n):\n        pattern_sum = sum((attention_matrix[i] * crystal_values[j] for j in range(n) if j != i))\n        weighted_patterns.append(pattern_sum * normalized_attention_matrix[i])\n    return [round(value, 4) for value in weighted_patterns]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_tf(term, doc):\n    return doc.count(term) / len(doc)\ndef calculate_idf(term, corpus):\n    df = sum([1 for doc in corpus if term in doc])\n    N = len(corpus)\n    return np.log((N - df + 0.5) / (df + 0.5))\ndef calculate_avg_doc_length(corpus):\n    lengths = [len(doc) for doc in corpus]\n    return (np.mean(lengths), np.std(lengths))\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    N = len(corpus)\n    (avg_len, std_dev) = calculate_avg_doc_length(corpus)\n    query_terms = set(query.split())\n    idfs = {term: calculate_idf(term, corpus) for term in query_terms}\n    bm25_scores = []\n    for doc in corpus:\n        score = 0\n        doc_terms = set(doc.split())\n        for term in query_terms:\n            tf = calculate_tf(term, doc)\n            idf = idfs[term]\n            score += idf * tf * (k1 + 1) / (tf + k1 * (1 - b + b * len(doc) / avg_len))\n        bm25_scores.append(round(score, 3))\n    return bm25_scores\ncorpus = ['the quick brown fox jumps over the lazy dog', 'the dog barked at the cat', 'the fox was seen near the dog', 'jumps over the dog again']"}
{"task_id": 91, "completion_id": 0, "solution": "from sklearn.metrics import f1_score\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    score = f1_score(y_true, y_pred, average='binary')\n    return round(score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef power_grid_forecast(consumption_data):\n    PI = 3.14159\n    fluctuation = 10 * np.sin(2 * PI * np.arange(1, len(consumption_data) + 1) / 10)\n    detrended_data = consumption_data - fluctuation\n    X = np.arange(1, len(detrended_data) + 1).reshape(-1, 1)\n    y = detrended_data\n    model = LinearRegression()\n    model.fit(X, y)\n    day_15_detrended = model.predict(np.array([15]).reshape(-1, 1))[0]\n    day_15_fluctuation = 10 * np.sin(2 * PI * 15 / 10)\n    day_15_consumption = round(day_15_detrended) + int(day_15_fluctuation * 1.05)\n    return day_15_consumption\nconsumption_data = [10, 12, 15, 18, 21, 24, 27, 30, 33, 36]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    abs_diff = np.abs(y_true - y_pred)\n    mae_value = np.mean(abs_diff)\n    return round(mae_value, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the query, key, and value vectors from the input matrix X using the weight matrices W_q, W_k, and W_v.\n    \n    Args:\n    - X (np.ndarray): Input embeddings of shape (batch_size, seq_length, embedding_dim).\n    - W_q (np.ndarray): Weight matrix for queries of shape (embedding_dim, q_k_dim).\n    - W_k (np.ndarray): Weight matrix for keys of shape (embedding_dim, q_k_dim).\n    - W_v (np.ndarray): Weight matrix for values of shape (embedding_dim, v_dim).\n    \n    Returns:\n    - tuple: A tuple containing query (Q), key (K), and value (V) matrices, each of shape (batch_size, seq_length, head_dim).\n    \"\"\"\n    q_k_dim = W_q.shape[1]\n    v_dim = W_v.shape[1]\n    Q = np.matmul(X, W_q)\n    K = np.matmul(X, W_k)\n    V = np.matmul(X, W_v)\n    (batch_size, seq_length, embedding_dim) = X.shape\n    head_dim = q_k_dim // n_heads\n    Q = np.reshape(Q, (batch_size, seq_length, n_heads, head_dim)).transpose(0, 2, 1, 3).reshape(batch_size * n_heads, seq_length, head_dim)\n    K = np.reshape(K, (batch_size, seq_length, n_heads, head_dim)).transpose(0, 2, 1, 3).reshape(batch_size * n_heads, seq_length, head_dim)\n    V = np.reshape(V, (batch_size, seq_length, n_heads, v_dim)).transpose(0, 2, 1, 3).reshape(batch_size * n_heads, seq_length, head_dim)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention scores and apply the attention mechanism.\n    \n    Args:\n    - Q (np.ndarray): Query matrix of shape (batch_size * n_heads, seq_length, head_dim).\n    - K (np.ndarray): Key matrix of shape (batch_size * n_heads, seq_length, head_dim).\n    - V (np.ndarray): Value matrix of shape (batch_size * n_heads, seq_length, head_dim).\n    \n    Returns:\n    - np.ndarray: The output of the self-attention mechanism of shape (batch_size * n_heads, seq_length, head_dim).\n    \"\"\"\n    attention_scores = np.matmul(Q, K.transpose(0, 1)) / np.sqrt(K.shape[-1])\n    attention_probs = np.softmax(attention_scores, axis=-1)\n    output = np.matmul(attention_probs, V)\n    output = np.reshape(output, (batch_size, n_heads, seq_length, head_dim)).transpose(0, 2, 1, 3).reshape(batch_size, seq_length, n_heads * head_dim)\n    return np.round(output, decimals=4)\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implements the multi-head self-attention mechanism for a given input matrix X and weight matrices W_q, W_k, W_v.\n    \n    Args:\n    - X (np.ndarray): Input embeddings of shape (batch_size, seq_length, embedding_dim).\n    - W_q (np.ndarray): Weight matrix for queries of shape (embedding_dim, q_k_dim).\n    - W_k (np.ndarray): Weight matrix for keys of shape (embedding_dim, q_k_dim).\n    - W_v (np.ndarray): Weight matrix for values of shape (embedding_dim, v_dim).\n    - n_heads (int): Number of attention heads.\n    \n    Returns:\n    - list: A list containing the output of the multi-head self-attention mechanism for each head.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    head_outputs = [self_attention(Q[:, i * head_dim:(i + 1) * head_dim], K[:, i * head_dim:(i + 1) * head_dim], V[:, i * head_dim:(i + 1) * head_dim]) for i in range(n_heads)]\n    return [np.round(head_output.tolist(), decimals=4) for head_output in head_outputs]\nbatch_size = 2\nseq_length = 4\nembedding_dim = 8\nn_heads = 2\nq_k_dim = 4\nv_dim = 4\nX = np.random.rand(batch_size, seq_length, embedding_dim)\nW_q = np.random.rand(embedding_dim, q_k_dim)\nW_k = np.random.rand(embedding_dim, q_k_dim)\nW_v = np.random.rand(embedding_dim, v_dim)"}
{"task_id": 95, "completion_id": 0, "solution": "from math import sqrt\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    true_true = sum((1 for i in range(len(x)) if x[i] == 1 and y[i] == 1))\n    true_false = sum((1 for i in range(len(x)) if x[i] == 1 and y[i] == 0))\n    false_true = sum((1 for i in range(len(x)) if x[i] == 0 and y[i] == 1))\n    false_false = sum((1 for i in range(len(x)) if x[i] == 0 and y[i] == 0))\n    row_total_ones = true_true + true_false\n    row_total_zeros = false_true + false_false\n    col_total_ones = true_true + false_true\n    col_total_zeros = true_false + false_false\n    grand_total = row_total_ones + row_total_zeros\n    phi_squared = (true_true * false_false - true_false * false_true) ** 2 / (row_total_ones * row_total_zeros * col_total_ones * col_total_zeros)\n    return round(sqrt(phi_squared), 4)\nx = [0, 1, 1, 0, 1, 1, 0, 0, 1, 1]\ny = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0]"}
{"task_id": 96, "completion_id": 0, "solution": "import numpy as np\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0\n    elif x > 2.5:\n        return 1\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(alpha * x, x)"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x), rounded to 4 decimal places.\n    \"\"\"\n    if x > 20:\n        return math.log(1 + math.exp(x - 20)) + 20\n    elif x < -20:\n        return math.log(1 + math.exp(x + 20)) - 20\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "import numpy as np\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    result = x / (1 + np.abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return x * sigmoid(x)\ndef sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the sigmoid activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The sigmoid activation value\n    \"\"\"\n    return 1 / (1 + math.exp(-x))"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = [1 if prob > 0.5 else 0 for prob in probabilities]\n    return predictions"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    X = np.insert(X, 0, 1, axis=1)\n    num_features = X.shape[1]\n    num_classes = len(np.unique(y))\n    B = np.random.rand(num_classes, num_features)\n    Y_one_hot = np.zeros((y.size, num_classes))\n    Y_one_hot[np.arange(y.size), y] = 1\n    losses = []\n\n    def softmax(Z):\n        A = np.exp(Z) / np.sum(np.exp(Z), axis=1, keepdims=True)\n        return A\n\n    def cross_entropy_loss(A, Y):\n        loss = -np.mean(np.sum(Y * np.log(A), axis=1))\n        return round(loss, 4)\n\n    def forward_pass(X, B):\n        Z = X @ B.T\n        A = softmax(Z)\n        return A\n\n    def backward_pass(X, B, A, Y):\n        m = Y.size\n        dZ = A - Y\n        dB = 1 / m * dZ @ X.T\n        return dB\n    for i in range(iterations):\n        A = forward_pass(X, B)\n        loss = cross_entropy_loss(A, Y_one_hot)\n        losses.append(loss)\n        dB = backward_pass(X, B, A, Y_one_hot)\n        B -= learning_rate * dB\n    return [B.round(4).tolist(), losses]"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Sigmoid function to map any real value to a value between 0 and 1.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef binary_cross_entropy_loss(y_true, y_pred):\n    \"\"\"\n    Binary Cross Entropy Loss function.\n    \"\"\"\n    epsilon = 1e-15\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -y_true * np.log(y_pred) - (1 - y_true) * np.log(1 - y_pred)\n    return np.mean(loss)\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.insert(X, 0, 1, axis=1)\n    (m, n) = X.shape\n    theta = np.zeros(n).reshape(-1, 1)\n    losses = []\n    for _ in range(iterations):\n        hypothesis = sigmoid(np.dot(X, theta))\n        gradient = np.dot(X.T, hypothesis - y) / m\n        theta -= learning_rate * gradient\n        loss = binary_cross_entropy_loss(y, hypothesis)\n        losses.append(round(loss, 4))\n    return (theta.flatten().tolist(), losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    if mask.ndim < K.ndim:\n        mask = mask[np.newaxis, np.newaxis, :, :]\n    score = np.dot(Q, K.T) / np.sqrt(K.shape[-1])\n    score = np.where(mask == 0, -1000000000.0, score)\n    attention_weights = np.exp(score) / np.sum(np.exp(score), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    probabilities = [count / total_apples for count in color_counts.values()]\n    disorder_score = -sum((p * p ** (-1) if p != 0 else 0 for p in probabilities))\n    normalized_disorder = 1 - disorder_score / max(entropy(total_apples), 1e-09)\n    return round(normalized_disorder, 4)\ndef entropy(n: int) -> float:\n    \"\"\"\n    Helper function to calculate the maximum possible entropy given n items.\n    \"\"\"\n    return sum((-p * p ** (-1) if p != 0 else 0 for p in [1 / n] * n))"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Parameters:\n    - X: Input tensor of shape (batch_size, sequence_length, feature_dim)\n    - gamma: Scaling parameter of shape (1, 1, feature_dim)\n    - beta: Shifting parameter of shape (1, 1, feature_dim)\n    - epsilon: Small value to stabilize division\n    \n    Returns:\n    - Normalized and scaled tensor, with values rounded to 5 decimal places and converted to a list.\n    \"\"\"\n    (batch_size, sequence_length, feature_dim) = X.shape\n    assert gamma.shape == (1, 1, feature_dim), 'Gamma must have the same feature dimension as X'\n    assert beta.shape == (1, 1, feature_dim), 'Beta must have the same feature dimension as X'\n    mean = np.mean(X, axis=2, keepdims=True)\n    var = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled_and_shifted = gamma * X_normalized + beta\n    return np.round(X_scaled_and_shifted, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Calculate the METEOR score for evaluating machine translation quality.\n    \n    Parameters:\n    reference (str): The reference translation string.\n    candidate (str): The candidate translation string.\n    alpha (float): The alpha parameter for penalizing wrong matches.\n    beta (float): The beta parameter for penalizing word order errors.\n    gamma (float): The gamma parameter for penalizing length ratio.\n    \n    Returns:\n    float: The METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_words = reference.lower().split()\n    cand_words = candidate.lower().split()\n    matches = 0\n    ref_counts = Counter(ref_words)\n    cand_counts = Counter(cand_words)\n    for (word, count) in ref_counts.items():\n        min_count = min(count, cand_counts[word])\n        matches += min_count\n        cand_counts[word] -= min_count\n    wrong_matches = sum((count for count in cand_counts.values() if count > 0))\n    prec = float(matches) / len(cand_words)\n    pen_w = wrong_matches * (1 - alpha)\n    rec = float(matches) / len(ref_words)\n    fmes = (1 + beta ** 2) * prec * rec / (beta ** 2 * prec + rec)\n    ref_len = len(ref_words)\n    cand_len = len(cand_words)\n    pen_l = (cand_len - ref_len) / ref_len if ref_len else cand_len - ref_len\n    meteor = (1 - gamma) * fmes - gamma * abs(pen_l)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI) for a pair of events.\n    \n    Parameters:\n    - joint_counts (int): The count of the joint occurrence of the two events.\n    - total_counts_x (int): The count of event X occurring.\n    - total_counts_y (int): The count of event Y occurring.\n    - total_samples (int): The total number of samples.\n    \n    Returns:\n    - float: The PMI value rounded to 3 decimal places.\n    \"\"\"\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    if p_x * p_y == 0:\n        pmi = 0\n    else:\n        pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)\njoint_counts = 150\ntotal_counts_x = 300\ntotal_counts_y = 400\ntotal_samples = 1000"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max normalization on a list of integers.\n    \n    Parameters:\n    x (list[int]): A list of integers to be normalized.\n    \n    Returns:\n    list[float]: A list of floats representing the normalized values, rounded to 4 decimal places.\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [round(0.0, 4) for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    This function implements a simple residual block using NumPy.\n    \n    Parameters:\n    x (np.ndarray): Input 1D array.\n    w1 (np.ndarray): Weight matrix for the first linear transformation.\n    w2 (np.ndarray): Weight matrix for the second linear transformation.\n    \n    Returns:\n    np.ndarray: Output of the residual block as a list with values rounded to 4 decimal places.\n    \"\"\"\n    x1 = np.dot(x, w1)\n    x1 = np.maximum(0, x1)\n    x2 = np.dot(x1, w2)\n    x2 = np.maximum(0, x2 + x)\n    return np.round(x2, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: Output array of shape (channels,), where each element is the average of all values in the corresponding feature map.\n    \"\"\"\n    if len(x.shape) != 3:\n        raise ValueError('Input array must be 3D')\n    (height, width, channels) = x.shape\n    pooled = np.zeros(channels)\n    for i in range(channels):\n        pooled[i] = np.mean(x[:, :, i])\n    return pooled"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Batch Normalization on a 4D NumPy array (BCHW format).\n\n    Parameters:\n    X (np.ndarray): Input tensor of shape (batch_size, channels, height, width).\n    gamma (np.ndarray): Scale parameter of shape (channels,).\n    beta (np.ndarray): Shift parameter of shape (channels,).\n    epsilon (float): Small value for numerical stability.\n\n    Returns:\n    np.ndarray: Normalized tensor with the same shape as X, rounded to 4 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_norm * gamma + beta\n    X_normalized_rounded = np.round(X_normalized, 4)\n    return X_normalized_rounded.tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "import math\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term c * x^n at a given point x.\n    \n    Parameters:\n    c (float): The coefficient of the term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of the term.\n    \n    Returns:\n    float: The value of the derivative, rounded to 4 decimal places.\n    \"\"\"\n    if n == 0:\n        return 0.0\n    else:\n        derivative_value = n * c * math.pow(x, n - 1)\n        return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a list of 2D vectors using the Gram-Schmidt process.\n    \n    Parameters:\n    - vectors: A list of 2D vectors as lists of floats.\n    - tol: Tolerance value for determining linear independence.\n    \n    Returns:\n    - A list of orthonormal vectors that span the same subspace.\n    \"\"\"\n    V = np.array(vectors)\n    Q = np.zeros_like(V)\n    R = np.zeros((len(vectors), len(vectors)))\n    for i in range(len(vectors)):\n        v = V[i]\n        for j in range(i):\n            R[j, i] = np.dot(Q[j], V[i])\n            v = v - R[j, i] * Q[j]\n        norm = np.linalg.norm(v)\n        if norm > tol:\n            R[i, i] = norm\n            Q[i] = v / norm\n    Q = Q[:np.linalg.matrix_rank(R)]\n    Q_rounded = np.round(Q, 4).tolist()\n    return Q_rounded\nvectors = [[1.0, 1.0], [2.0, 2.0]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3-dimensional vectors.\n    \n    Parameters:\n    a (np.array): First 3D vector.\n    b (np.array): Second 3D vector.\n    \n    Returns:\n    np.array: Resultant vector from the cross product, rounded to 4 decimal places.\n    \"\"\"\n    if len(a) != 3 or len(b) != 3:\n        raise ValueError('Both vectors must be 3-dimensional.')\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n    A (np.array): Square coefficient matrix of the system of equations.\n    b (np.array): Constant vector of the system of equations.\n    \n    Returns:\n    list: Solution vector x if the system has a unique solution, otherwise returns -1.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    if A.shape[0] != A.shape[1]:\n        return -1\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(A.shape[0]):\n        Ai = A.copy()\n        Ai[:, i] = b\n        x.append(np.round(np.linalg.det(Ai) / det_A, 4))\n    return x.tolist()\nA = [[2, 3], [4, 6]]\nb = [10, 18]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = np.sum(np.sqrt(np.array(p) * np.array(q)))\n    bdist = -np.log(bc)\n    return round(bdist, 4)\np = [0.1, 0.2, 0.7]\nq = [0.8, 0.2]"}
{"task_id": 121, "completion_id": 0, "solution": "from typing import List\ndef vector_sum(a: List[int | float], b: List[int | float]) -> List[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n\n    def policy(state):\n        action_values = theta[state]\n        exp_values = np.exp(action_values - np.max(action_values))\n        return exp_values / np.sum(exp_values)\n    gradients = []\n    for episode in episodes:\n        G_t = 0\n        for transition in reversed(episode):\n            (state, action, reward) = transition\n            G_t += reward\n            prob = policy(state)[action]\n            log_prob = np.log(prob)\n            grad_log_prob = log_prob * (1 - prob * np.ones_like(policy(state)))\n            if state not in [trans[0] for trans in gradients]:\n                gradients.append((state, grad_log_prob))\n            else:\n                index = [trans[0] for trans in gradients].index(state)\n                gradients[index][1] += grad_log_prob\n    normalized_gradients = [(state, grad / len([trans for trans in episode if trans[0] == state])) for (state, grad) in gradients]\n    avg_gradient = np.mean([grad for (_, grad) in normalized_gradients], axis=0)\n    return avg_gradient.tolist()\ntheta = np.random.rand(5, 3)\nepisodes = [[(0, 1, 10), (1, 0, 5), (2, 2, 20)], [(0, 2, 8), (1, 1, 7), (2, 1, 9)], [(0, 0, 6), (1, 2, 15), (2, 0, 4)]]"}
{"task_id": 123, "completion_id": 0, "solution": "import math\ndef compute_flops(d_in, d_out, n_experts, k_active):\n    flops_dense = d_in * d_out * 2\n    flops_moe = k_active * d_in * d_out * 2\n    return (flops_dense, flops_moe)\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    (flops_dense, flops_moe) = compute_flops(d_in, d_out, n_experts, k_active)\n    efficiency_savings = (flops_dense - flops_moe) / flops_dense * 100\n    efficiency_savings_rounded = round(efficiency_savings, 1)\n    return efficiency_savings_rounded\nn_experts = 16\nk_active = 4\nd_in = 1024\nd_out = 512"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    X = np.array(X)\n    W_g = np.array(W_g)\n    W_noise = np.array(W_noise)\n    N = np.array(N)\n    logits = X @ W_g + N @ W_noise\n    gating_probs = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n    gating_probs /= np.sum(gating_probs, axis=1, keepdims=True)\n    topk_indices = np.argsort(logits, axis=1)[:, -k:]\n    topk_probs = np.zeros_like(gating_probs)\n    for i in range(gating_probs.shape[0]):\n        topk_probs[i, topk_indices[i]] = 1.0 / k\n    epsilon = 1e-05\n    topk_probs += (np.random.rand(*topk_probs.shape) < topk_probs) * epsilon\n    topk_probs /= np.sum(topk_probs, axis=1, keepdims=True)\n    return topk_probs.tolist()\nX = np.random.rand(3, 8)\nW_g = np.random.rand(8, 4)\nW_noise = np.random.rand(3, 4)\nN = np.random.rand(4)\nk = 2"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    num_tokens = x.shape[0]\n    gate_scores = x @ Wg\n    gate_probs = np.exp(gate_scores - np.max(gate_scores, axis=1, keepdims=True))\n    gate_probs /= np.sum(gate_probs, axis=1, keepdims=True)\n    output = np.zeros((num_tokens, We.shape[1]))\n    for i in range(num_tokens):\n        top_k_indices = np.argsort(gate_probs[i])[-top_k:]\n        selected_experts = We[top_k_indices]\n        selected_x = x[i].reshape(1, -1)\n        expert_outputs = selected_experts @ selected_x.T\n        output[i] = np.sum(expert_outputs, axis=0).T\n    output_rounded = np.round(output, decimals=4).tolist()\n    return output_rounded"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor X with shape (B, C, H, W).\n    \n    Parameters:\n    X (np.ndarray): Input tensor of shape (B, C, H, W)\n    gamma (np.ndarray): Scale parameter of shape (C,)\n    beta (np.ndarray): Shift parameter of shape (C,)\n    num_groups (int): Number of groups to divide the channels into\n    epsilon (float): Small value added for numerical stability\n    \n    Returns:\n    np.ndarray: Normalized tensor reshaped to (B, C, H, W) and converted to a list using tolist()\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of groups should divide the number of channels evenly'\n    X = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X, axis=(2, 3, 4), keepdims=True)\n    X = (X - mean) / np.sqrt(var + epsilon)\n    X = X.reshape(B, C, H, W)\n    X = X * gamma + beta\n    return X.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the value of x where the function f(x) = x^4 - 3x^3 + 2 reaches its minimum using gradient descent.\n    \n    :param start_x: Initial guess for the location of the minimum.\n    :param learning_rate: Step size for each iteration of gradient descent.\n    :param tolerance: Tolerance level for stopping criteria based on change in x between iterations.\n    :param max_iters: Maximum number of iterations to perform.\n    :return: The x value where the function reaches its minimum, rounded to the nearest 4th decimal.\n    \"\"\"\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for i in range(max_iters):\n        previous_x = x\n        x -= learning_rate * df(previous_x)\n        if abs(f(x) - f(previous_x)) < tolerance:\n            break\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implements the Dynamic Tanh (DyT) function, which is a normalization-free transformation\n    inspired by the Tanh function. The function is applied element-wise on the input array x.\n    \n    Args:\n    x (np.ndarray): Input array of arbitrary shape.\n    alpha (float): Scaling factor for the linear part of the activation.\n    gamma (float): Scales the output of the tanh function.\n    beta (float): Shifts the output of the tanh function.\n    \n    Returns:\n    list[float]: List containing the transformed values of the input array, rounded to 4th decimal.\n    \"\"\"\n    dyt_values = gamma * np.tanh(alpha * x + beta)\n    return np.round(dyt_values.flatten().tolist(), 4)\nx = np.array([0.1, -0.2, 0.3, -0.4, 0.5])\nalpha = 0.5\ngamma = 2.0\nbeta = 1.0"}

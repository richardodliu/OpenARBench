{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n        data (np.ndarray): Input data with the last column as target y and preceding columns as features X.\n        alpha (float): Regularisation strength.\n        \n    Returns:\n        list[float]: Weight vector rounded to 4 decimal places.\n    \"\"\"\n    # Add bias term to the feature matrix\n    X = np.c_[np.ones(data.shape[0]), data[:, :-1]]\n    y = data[:, -1]\n    \n    # Calculate the number of features including bias\n    n_features = X.shape[1]\n    \n    # Compute the matrix inverse term\n    try:\n        inverse_matrix = np.linalg.inv(X.T @ X + alpha * np.eye(n_features))\n    except np.linalg.LinAlgError:\n        # Return -1 if the matrix is not invertible\n        return [-1]\n    \n    # Compute the weight vector\n    w = inverse_matrix @ X.T @ y\n    \n    # Round coefficients to 4 decimal places\n    w_rounded = [round(coef, 4) for coef in w]\n    \n    return w_rounded\n```"}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    K = np.dot(X_train, X_train.T)  # Compute the Gram matrix\n    alpha = np.zeros(n_samples)  # Initialize alpha\n    b = 0.0  # Initialize bias\n    \n    for t in range(n_iter):\n        updates = 0\n        for i in range(n_samples):\n            activation = np.dot(alpha * y_train, K[i]) + b\n            if y_train[i] * activation <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n        \n        if updates == 0:\n            break  # No more updates, data is linearly separable\n    \n    # Compute the primal weight vector w from the final alpha\n    w = np.dot(alpha * y_train, X_train)\n    w = np.round(w, 4)\n    \n    return (w.tolist(), np.round(b, 4))\n\n# Example usage:\n# Generate some linearly separable data for testing\nnp.random.seed(0)\nX_train = np.random.rand(10, 2)\ny_train = np.array([1 if np.dot(X_train[i], [1, 1]) > 0 else -1 for i in range(10)])\n\n# Run the dual-form perceptron\nw, b = perceptron_dual(X_train, y_train)\n\nprint(f\"w: {w}\")\nprint(f\"b: {b}\")\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    \n    # Identity link function\n    links[\"identity\"] = {\n        \"link\": lambda mu: mu,\n        \"inv_link\": lambda eta: eta,\n        \"derivative\": lambda mu: 1.0\n    }\n    \n    # Log link function\n    links[\"log\"] = {\n        \"link\": lambda mu: np.log(mu),\n        \"inv_link\": lambda eta: np.exp(eta),\n        \"derivative\": lambda mu: 1.0 / mu\n    }\n    \n    # Logit link function\n    links[\"logit\"] = {\n        \"link\": lambda mu: np.log(mu / (1 - mu)),\n        \"inv_link\": lambda eta: 1 / (1 + np.exp(-eta)),\n        \"derivative\": lambda mu: mu * (1 - mu)\n    }\n    \n    return links\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)   # \u2192 [0.2, 0.8]\n\n# Rounding the results to four decimal places\neta_rounded = np.round(eta, 4).tolist()\nmu2_rounded = np.round(mu2, 4).tolist()\n\nprint(f\"eta (rounded): {eta_rounded}\")\nprint(f\"mu2 (rounded): {mu2_rounded}\")\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples, n_features = data.shape\n    depths = [0] * n_samples\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return\n        node_depth = 0\n        node_values = data[indices]\n        feature_index = np.random.randint(n_features)\n        feature_values = node_values[:, feature_index]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        split_value = np.random.uniform(down, up)\n        \n        left_indices = indices[np.where(node_values[:, feature_index] <= split_value)]\n        right_indices = indices[np.where(node_values[:, feature_index] > split_value)]\n        \n        left_depths, right_depths = build_tree(left_indices), build_tree(right_indices)\n        for i in range(len(left_indices)):\n            depths[left_indices[i]] = node_depth + 1 + left_depths[i]\n        for i in range(len(right_indices)):\n            depths[right_indices[i]] = node_depth + 1 + right_depths[i]\n        \n        node_depth += 1\n    \n    build_tree(np.arange(n_samples))\n    return depths\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Count the occurrences of each item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Calculate the minimum support threshold as an integer\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Filter out infrequent items\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support_count}\n    \n    # Helper function to generate frequent itemsets using a given prefix\n    def generate_itemsets(prefix):\n        if len(prefix) > 0:\n            # Get all items that contain the prefix\n            itemsets_with_prefix = [set(t) for t in transactions if set(prefix).issubset(set(t))]\n        else:\n            itemsets_with_prefix = transactions\n        \n        # Count the occurrences of each itemset\n        itemset_counts = Counter(tuple(sorted(iss)) for iss in itemsets_with_prefix)\n        \n        # Filter out infrequent itemsets\n        frequent_itemsets = {itemset: count for itemset, count in itemset_counts.items() if count >= min_support_count}\n        \n        # Generate all supersets of length k+1 from the frequent itemsets\n        next_prefix_length = len(prefix) + 1\n        for itemset, count in frequent_itemsets.items():\n            for new_item in set(itemset) ^ set(frequent_items.keys()):\n                superset = tuple(sorted(itemset + (new_item,)))\n                if len(superset) <= next_prefix_length:\n                    yield superset, count\n    \n    # Start with individual items\n    frequent_itemsets_dict = frequent_items.copy()\n    current_prefix_length = 1\n    \n    # Generate itemsets of increasing size until none are frequent anymore\n    while True:\n        new_frequent_itemsets = {}\n        for itemset, count in generate_itemsets(tuple(sorted(list(next(frequent_items.keys()))[:current_prefix_length]))):\n            if itemset not in frequent_itemsets_dict:\n                new_frequent_itemsets[itemset] = count\n        if not new_frequent_itemsets:\n            break\n        frequent_itemsets_dict.update(new_frequent_itemsets)\n        current_prefix_length += 1\n    \n    # Convert the frequent itemsets back to a dictionary of tuples and their counts\n    result = {tuple(sorted(k)): v for k, v in frequent_itemsets_dict.items()}\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    transactions = [\n        ['bread', 'milk'],\n        ['bread', 'diaper', 'beer', 'egg'],\n        ['milk', 'diaper', 'beer', 'coke'],\n        ['bread', 'milk', 'diaper', 'beer'],\n        ['bread', 'milk', 'diaper', 'coke']\n    ]\n    minsup = 0.6\n    print(find_frequent_itemsets(transactions, minsup))\n```"}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Choose initial cluster centers\n    np.random.seed(0)  # For reproducibility\n    indices = np.random.randint(len(data), size=k)\n    centers = [data[i] for i in indices]\n    \n    # Step 2: Labels initialization\n    labels = [0] * len(data)\n    \n    # Step 3: Main loop\n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest center\n        new_labels = []\n        for sample in data:\n            distances = [np.sum((sample - center) ** 2) for center in centers]\n            nearest_center_index = np.argmin(distances)\n            new_labels.append(nearest_center_index)\n        \n        # Step 4: Update centers\n        prev_centers = centers.copy()\n        for i in range(k):\n            cluster_samples = [data[j] for j in range(len(data)) if new_labels[j] == i]\n            if cluster_samples:\n                centers[i] = np.mean(cluster_samples, axis=0)\n            else:\n                # Randomly reinitialize the center if the cluster is empty\n                rand_idx = np.random.randint(len(data))\n                centers[i] = data[rand_idx]\n        \n        # Check convergence\n        center_shifts = [np.sum((center_new - center_old) ** 2) ** 0.5 for center_new, center_old in zip(centers, prev_centers)]\n        if all(shift < epsilon for shift in center_shifts):\n            break\n    \n    # Round centers to 4 decimal places\n    rounded_centers = [tuple(np.round(center, 4)) for center in centers]\n    \n    # Convert labels to lists\n    labels_list = new_labels\n    \n    return rounded_centers, labels_list\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef mean_center(v: np.ndarray) -> np.ndarray:\n    \"\"\"Mean center a vector if its std is greater than 1e-3.\"\"\"\n    if v.std() > 1e-3:\n        return v - v.mean()\n    return v\n\ndef build_item_item_similarity_matrix(data: np.ndarray, criterion: str) -> np.ndarray:\n    \"\"\"Build an item-item similarity matrix based on the given criterion.\"\"\"\n    n_item, _ = data.shape\n    S = np.zeros((n_item, n_item))\n    \n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.logical_and(data[:, i] > 0, data[:, j] > 0)\n            if not np.any(common_users):  # no common users\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[:, i][common_users]\n                v2 = data[:, j][common_users]\n                \n                if criterion == \"cosine\":\n                    v1 = mean_center(v1)\n                    v2 = mean_center(v2)\n                    \n                    sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == \"pearson\":\n                    sim = np.corrcoef(v1, v2)[0, 1]\n                else:\n                    raise ValueError(\"Criterion must be 'cosine' or 'pearson'\")\n                S[i, j] = S[j, i] = sim\n                \n    return S\n\ndef predict_unseen_items(data: np.ndarray, user_ind: int, S: np.ndarray) -> dict[int, float]:\n    \"\"\"Predict attractiveness of unseen items for the given user.\"\"\"\n    _, n_item = data.shape\n    rated_item_indices = np.where(data[user_ind] > 0)[0]\n    unseen_items_indices = np.where(data[user_ind] == 0)[0]\n    \n    predictions = defaultdict(float)\n    \n    for t in unseen_items_indices:\n        # Only sum over the centers of the rated items\n        score_t = np.sum(data[user_ind, rated_item_indices] * S[t, rated_item_indices]) / \\\n                  np.abs(np.sum(S[t, rated_item_indices]))\n        \n        predictions[t] = score_t\n    \n    return predictions\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item-item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user. \n    It finally returns the indices of the *k* most promising items.\n    \"\"\"\n    S = build_item_item_similarity_matrix(data, criterion)\n    \n    if np.all(data[user_ind] > 0):\n        return []  # the user has rated all items\n    \n    predictions = predict_unseen_items(data, user_ind, S)\n    \n    # Sort predictions by score in descending order and then by index in ascending order\n    sorted_predictions = sorted(predictions.items(), key=lambda x: (-x[1], x[0]))\n    \n    return [item[0] for item in sorted_predictions][:k]\n\n# Example usage\ndata = np.array([\n    [5, 0, 3, 2],\n    [4, 0, 0, 1],\n    [0, 1, 0, 5],\n    [1, 2, 4, 0],\n])\n\nuser_ind = 0\nk = 2\nprint(knn_recommend(data, user_ind, k, criterion='cosine'))\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    max_gain = 0\n    best_feature = None\n    best_threshold = None\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        \n        for threshold in unique_values:\n            if len(unique_values) <= 2:\n                continue\n            \n            mask_left = feature_values <= threshold\n            mask_right = feature_values > threshold\n            \n            if np.sum(mask_left) < 2 or np.sum(mask_right) < 2:\n                continue\n            \n            g_left = g[mask_left]\n            g_right = g[mask_right]\n            h_left = h[mask_left]\n            h_right = h[mask_right]\n            \n            # Calculate the regularized losses for the left and right children\n            loss_left = -0.5 * (np.sum(g_left) ** 2 / (np.sum(h_left) + lam)) + gamma\n            loss_right = -0.5 * (np.sum(g_right) ** 2 / (np.sum(h_right) + lam)) + gamma\n            \n            # Calculate the regularized loss of the parent node\n            loss_parent = -0.5 * (np.sum(g) ** 2 / (np.sum(h) + lam)) + gamma\n            \n            # Compute the gain\n            gain = loss_parent - loss_left - loss_right\n            \n            # Update the best split if this split has a higher gain\n            if gain > max_gain:\n                max_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    \n    if max_gain <= 0:\n        return None\n    else:\n        return (best_feature, best_threshold)\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    g = np.array([1, -1, 1, -1])\n    h = np.array([1, 1, 1, 1])\n    gamma = 1.0\n    lam = 1.0\n    \n    result = best_split(X, g, h, gamma, lam)\n    print(result)\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    def sigmoid(val):\n        return 1 / (1 + np.exp(-val))\n    \n    def sigmoid_gradient(val):\n        sig = sigmoid(val)\n        return sig * (1 - sig)\n    \n    # Convert input to numpy array\n    if isinstance(x, (int, float)):\n        xx = np.array([x])\n    elif isinstance(x, list):\n        xx = np.array(x)\n    else:\n        xx = x\n    \n    # Compute sigmoid and gradient\n    sigmoid_val = sigmoid(xx)\n    gradient_val = sigmoid_gradient(xx)\n    \n    # Round the results\n    sigmoid_rounded = np.round(sigmoid_val, 4)\n    gradient_rounded = np.round(gradient_val, 4)\n    \n    # Convert numpy arrays back to list if necessary\n    if isinstance(x, (int, float)):\n        sigmoid_rounded = float(sigmoid_rounded[0])\n        gradient_rounded = float(gradient_rounded[0])\n    \n    return (sigmoid_rounded.tolist(), gradient_rounded.tolist())\n\n# Example usage:\n# Scalar input\nprint(sigmoid_activation(0.5))  # Should print (sigmoid(0.5), gradient(0.5))\n\n# List input\nprint(sigmoid_activation([0.5, 1.0, 2.0]))  # Should print ((sigmoid(0.5), sigmoid(1.0), sigmoid(2.0)), (gradient(0.5), gradient(1.0), gradient(2.0)))\n\n# NumPy array input\nsigmoid_activation(np.array([0.5, 1.0, 2.0]))  # Should print the same as list input example\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    alpha = []\n    h = []\n\n    # Initialize weights\n    w = np.array([1. / n_samples] * n_samples)\n\n    while True:\n        # Sort the training samples\n        sorted_indices = np.argsort(x_train)\n        x_train_sorted = np.array(x_train)[sorted_indices]\n        y_train_sorted = np.array(y_train)[sorted_indices]\n\n        min_error = float('inf')\n        best_stump = None\n        best_theta = None\n\n        # Enumerate every possible stump\n        for d in [0, 1]:\n            for i in range(n_samples - 1):\n                theta = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n                pred = np.where(x_train_sorted <= theta, 1, -1) if d == 0 else np.where(x_train_sorted > theta, 1, -1)\n                error = np.sum(w[y_train_sorted != pred])\n\n                # Update best stump if this one has smaller error\n                if error < min_error:\n                    min_error = error\n                    best_stump = d\n                    best_theta = theta\n\n        # Skip if no improvement\n        if min_error >= 0.5:\n            break\n\n        # Compute alpha\n        err = (1 - min_error) / (min_error + 1e-10)\n        alpha.append(0.5 * math.log(err))\n\n        # Compute prediction of best stump\n        pred = np.where(x_train <= best_theta, 1, -1) if best_stump == 0 else np.where(x_train > best_theta, 1, -1)\n\n        # Update weights\n        w *= np.exp(-y_train * pred * alpha[-1])\n        w /= np.sum(w)\n\n        # Add the best stump to the ensemble\n        h.append(best_theta)\n\n        # Compute training error\n        y_pred = np.sign(np.dot(alpha, [1 if xi <= theta else -1 for xi, theta in zip(x_train, h)]))\n        train_error = np.mean(y_pred != y_train)\n\n        # Stop if training error is less than or equal to epsilon\n        if train_error <= epsilon:\n            break\n\n    # Predict using the trained ensemble\n    y_pred_test = np.sign(np.dot(alpha, [1 if xi <= theta else -1 for theta in h for xi in x_test]))\n    return y_pred_test.tolist()\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m = X_test.shape[0]\n    d_test = X_test.shape[1]\n    \n    assert d == d_test, \"Dimension mismatch between training and test samples.\"\n    \n    K = np.exp(-gamma * np.sum((X_train[:, np.newaxis] - X_test)**2, axis=2))\n    g_z = np.dot(alpha * y_train, K.T) + b\n    \n    return np.sign(g_z).tolist()\n\n# Example usage:\nnp.random.seed(0)\nX_train = np.random.randn(10, 3)\ny_train = np.random.choice([-1, 1], size=10)\nalpha = np.random.rand(10)\nb = 0.5\ngamma = 0.1\nX_test = np.random.randn(5, 3)\n\npredicted_labels = gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test)\nprint(predicted_labels)\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the list of lists to a numpy array\n    x_np = np.array(X)\n    \n    # Check if k is valid\n    if not (1 <= k <= min(x_np.shape)):\n        return -1\n    \n    # Perform truncated SVD\n    u, s, vh = np.linalg.svd(x_np, full_matrices=False)\n    s[k:] = 0  # Zero out singular values beyond k\n    x_hat_np = np.dot(u[:, :k] * s[:k], vh[:k, :])  # Reconstruct the matrix\n    \n    # Compute Mean Squared Error (MSE)\n    mse = np.mean((x_np - x_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to 4 decimal places\n    x_hat_rounded = np.round(x_hat_np, 4)\n    x_hat_list = x_hat_rounded.tolist()\n    mse_rounded = np.round(mse, 4)\n    \n    return x_hat_list, mse_rounded\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    residuals = y_train - np.mean(y_train)\n    \n    while True:\n        split_points = []\n        for i in range(len(x_train) - 1):\n            split_points.append((x_train[i] + x_train[i + 1]) / 2)\n        \n        min_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        for split in split_points:\n            c1 = np.mean(residuals[x_train <= split])\n            c2 = np.mean(residuals[x_train > split])\n            rss = np.sum((residuals[x_train <= split] - c1)**2) + np.sum((residuals[x_train > split] - c2)**2)\n            \n            if rss < min_rss:\n                min_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        \n        if min_rss >= epsilon:\n            break\n        \n        stump_contribution = 0 if x_query <= best_split else best_c2 - best_c1\n        residuals[x_train <= best_split] -= best_c1 - residuals[x_train <= best_split].mean()\n        residuals[x_train > best_split] -= best_c2 - residuals[x_train > best_split].mean()\n        \n    return round(np.mean(y_train) + stump_contribution, 4)\n\n# Example usage\nx_train = [2.60, 2.90, 3.15, 3.25, 4.00, 4.20, 4.55, 4.80]\ny_train = [3.40, 3.70, 3.95, 4.10, 4.85, 5.00, 5.45, 5.90]\nx_query = 3.5\n\nprediction = predict_boosting_tree(x_train, y_train, x_query)\nprint(f\"Prediction for x_query: {prediction}\")\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified sparsity.\n    \n    Parameters:\n        shape (tuple[int, ...]): The shape of the tensor to generate.\n        sparsity (float): A real number in the closed interval [0,1] indicating the probability of generating a 1.0.\n        seed (int, optional): Seed for the random number generator to ensure reproducibility.\n        \n    Returns:\n        numpy.ndarray: A tensor where each entry is 1.0 with the specified probability and 0.0 otherwise.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a tensor of random values between 0 and 1\n    random_array = np.random.rand(*shape)\n    \n    # Apply the sparsity threshold\n    threshold = 1 - sparsity\n    binary_tensor = np.where(random_array <= threshold, 1.0, 0.0)\n    \n    return binary_tensor\n\n# Example usage:\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\n\nbinary_tensor = random_binary_tensor(shape, sparsity, seed)\nprint(binary_tensor)\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples, _ = data.shape\n    median_value = np.median(data[:, d])\n    pivot_index = np.argpartition(data[:, d], n_samples // 2)[n_samples // 2]\n    pivot_value = data[pivot_index, d]\n    \n    left_indices = [i for i in range(n_samples) if data[i, d] < pivot_value]\n    right_indices = [i for i in range(n_samples) if data[i, d] > pivot_value]\n    \n    # Ensure pivot_index is included in left_indices for even n_samples\n    if data[pivot_index, d] == median_value:\n        left_indices.append(pivot_index)\n    \n    return pivot_index, sorted(left_indices), sorted(right_indices)\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    np.random.seed(42)\n    data = np.random.rand(10, 2) * 10  # Generate a random 2D array\n    d = 0  # Split along the first column\n    \n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot Index: {pivot}\")\n    print(f\"Indices of samples to the left of the pivot: {left}\")\n    print(f\"Indices of samples to the right of the pivot: {right}\")\n    \n    # Check function\n    def check_split(data, d, pivot, left, right):\n        assert pivot in range(len(data)), \"Pivot index out of bounds\"\n        assert all(data[i, d] < data[pivot, d] for i in left), \"Some left samples are not smaller than pivot\"\n        assert all(data[i, d] > data[pivot, d] for i in right), \"Some right samples are not larger than pivot\"\n        assert len(set(left + [pivot] + right)) == len(data), \"Split indices do not cover all samples\"\n        assert len(left) + len(right) + 1 == len(data), \"Duplicate pivot in split indices\"\n        assert min(left + right) == 0 and max(left + right) == len(data) - 1, \"Split indices not sorted increasingly\"\n    \n    check_split(data, d, pivot, left, right)\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert len(x.shape) == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be at least 1.\"\n    assert len(x) >= frame_width, \"Signal must be longer than or equal to the frame width.\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n    # Shape of the strided view\n    shape = (n_frames, frame_width)\n    # Stride of the original array\n    strides = x.strides * 2\n    # Creating a read-only view if required\n    if not writeable:\n        strides = tuple(list(x.strides) + [0] * x.strides[0])\n\n    return as_strided(x, shape=shape, strides=strides, writeable=writeable)\n\n# Example usage\nif __name__ == \"__main__\":\n    x = np.arange(10)\n    frame_width = 4\n    stride = 2\n\n    framed_signal = to_frames(x, frame_width, stride)\n    print(framed_signal)\n\n    # Check the writability of the array\n    assert framed_signal.flags.writeable == writeable, \"The writeability flag is incorrect.\"\n```\n\n### Explanation:\n- **Assertion Checks**: The function begins with three assertion checks to ensure that:\n  1. `x` is one-dimensional.\n  2. `stride` is at least 1.\n  3. The length of `x` is greater than or equal to `frame_width`.\n\n- **Strided View Calculation**:\n  - `n_frames`: Number of frames calculated as `(len(x) - frame_width) // stride + 1`.\n  - `shape`: The desired shape of the strided view array, which is `(n_frames, frame_width)`.\n  - `strides`: The strides of the original array are doubled because we want to treat every two elements as a single stride for the new shape. This effectively creates a view on the original data with the specified window size and step.\n\n- **Writeability Control**:\n  - If `writeable` is set to `False`, the strides for the new array are set to be read-only.\n  - Otherwise, the strides inherit the writeability of the original array.\n\nThis approach ensures that the returned array is a view of the original array `x` rather than a copy, thus saving memory."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | np.ndarray) -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Check if X is a numpy array for easy manipulation\n    if isinstance(X, list):\n        X = np.array(X)\n\n    # Check if the matrix is two-dimensional\n    if len(X.shape) != 2:\n        return False\n\n    # Check if all elements are within the range [0, 1]\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 within a tolerance of 1e-8\n    row_sums = np.allclose(np.sum(X, axis=1), 1, atol=1e-8)\n    return row_sums\n\n# Example usage:\nstochastic_matrix = [[0.5, 0.5], [0.4, 0.6]]\nnon_stochastic_matrix = [[0.5, 0.5], [0.6, 0.4]]\ninvalid_probability_matrix = [[0.5, 1.5], [0.4, 0.6]]\n\nprint(is_stochastic(stochastic_matrix))          # Expected output: True\nprint(is_stochastic(non_stochastic_matrix))       # Expected output: False\nprint(is_stochastic(invalid_probability_matrix))  # Expected output: False\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    if n < batch_size:\n        batch_size = n\n    s = np.zeros(d)\n    \n    # Shuffling the data to ensure randomness in mini-batch processing\n    indices = np.random.permutation(n)\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    \n    w = np.zeros(d)\n    for _ in range(max_iter):\n        for batch_start in range(0, n, batch_size):\n            batch_end = min(batch_start + batch_size, n)\n            X_batch = X_shuffled[batch_start:batch_end]\n            y_batch = y_shuffled[batch_start:batch_end]\n            \n            # Compute the gradient\n            grad = (1 / batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad**2\n            \n            # Update the weights\n            w -= eta * grad / (np.sqrt(s) + eps_station)\n        \n        # Check if the norm of the gradient is less than epsilon\n        if np.linalg.norm(grad) < epsilon:\n            break\n    \n    return [round(val, 4) for val in w]\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\ny = np.array([3, 5, 7, 9, 11, 13])\n\nweight_vector = rms_prop(X, y)\nprint(weight_vector)\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Computes the SoftPlus activation function or its derivative on an input x.\n    When deriv=False, returns SoftPlus(x) = log(1 + exp(x)).\n    When deriv=True, returns the gradient, which is the sigmoid function, i.e., 1 / (1 + exp(-x)).\n    \n    Args:\n    x : Union[float, List[float], np.ndarray] - Input data containing real values.\n    deriv : bool - Flag indicating whether to return the function value (False) or its derivative (True). Default is False.\n    \n    Returns:\n    Union[float, List[float]] - The computed SoftPlus or its derivative, rounded to 4th decimal place if a list is returned.\n    \"\"\"\n    if deriv:\n        # Numerically stable computation of the derivative (sigmoid)\n        return 1 / (1 + np.exp(-np.clip(x, -100, 100)))\n    else:\n        # Numerically stable computation of SoftPlus using log1p for large x to avoid overflow\n        return np.log1p(np.exp(np.clip(x, -100, 100)))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Scalar example\n    scalar_input = 1.0\n    scalar_output = softplus(scalar_input)\n    print(f\"Scalar SoftPlus: {scalar_output:.4f}\")\n    \n    # List example\n    list_input = [1.0, 0.0, -1.0, -2.0, 100.0, -100.0]\n    list_output = [round(item, 4) for item in softplus(np.array(list_input), deriv=True)]\n    print(f\"List SoftPlus Derivative: {list_output}\")\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Count the frequency of each N-gram in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus)-N+1))\n    # Count the frequency of each (N-1)-gram in the corpus\n    prev_ngram_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus)-N+2))\n\n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence)-N+1):\n        current_ngram = tuple(sequence[i:i+N])\n        if ngram_counts[current_ngram] == 0 or prev_ngram_counts[current_ngram[:-1]] == 0:\n            return float('-inf')\n        log_prob += np.log(ngram_counts[current_ngram] / prev_ngram_counts[current_ngram[:-1]])\n\n    # Return the result rounded to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    corpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n    sequence = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"cat\"]\n    N = 2\n    print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output will depend on the actual counts\n```\n```"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n\n    # Build design matrix with polynomial features\n    X_poly = np.vander(X, degree + 1, increasing=True)\n\n    # Initialize weights\n    w = np.zeros(degree + 1)\n    w[0] = np.mean(y)  # Initialize bias term\n\n    # Normalize the design matrix and target variable\n    X_poly -= np.mean(X_poly, axis=0)\n    X_poly /= np.linalg.norm(X_poly, axis=0)\n    y -= np.mean(y)\n    y /= np.linalg.norm(y)\n\n    # Perform coordinate descent\n    for _ in range(n_iterations):\n        weight_changes = []\n        for j in range(degree + 1):\n            if j == 0:  # Bias term is not regularized\n                w[j] = np.mean(y - X_poly[:, 1:].dot(w[1:]))\n            else:\n                # Compute the inner product\n                inner_product = X_poly[:, j].T.dot(y - X_poly.dot(w) + w[j] * X_poly[:, j])\n                # Apply the soft thresholding operator\n                rho = inner_product\n                w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_poly[:, j].T.dot(X_poly[:, j]) + 1e-6)\n                weight_changes.append(abs(w[j] - w[j-1]))\n\n        # Check for convergence\n        if max(weight_changes) < tol:\n            break\n\n    # Round the weights to 4 decimal places\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\nX = np.array([1, 2, 3, 4, 5])\ny = np.array([0.5, 1.5, 2.5, 3.5, 4.5])\ndegree = 2\nreg_factor = 0.1\ncoef = lasso_regression(X, y, degree, reg_factor)\nprint(coef)\n```"}
{"task_id": 63, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: Backward probability vector \u03b2_t, rounded to 4 decimal places.\n    \"\"\"\n\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n\n    # Initialize the backward variables\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros(N)\n    \n    # Set the last step's beta values to 1, as per the definition\n    beta[:] = 1\n    \n    # Calculate backward probabilities recursively\n    for i in range(t, -1, -1):\n        if i == t:\n            continue\n        else:\n            for n in range(N):\n                beta[n] = np.sum(A[n,:] * B[:,obs[i+1]] * beta)\n\n    # Return the backward probability vector rounded to 4 decimal places\n    return [round(val, 4) for val in beta]\n\n# Example usage\nA = [[0.5, 0.2, 0.3],\n     [0.3, 0.5, 0.2],\n     [0.2, 0.3, 0.5]]\nB = [[0.5, 0.4, 0.1],\n     [0.4, 0.1, 0.5],\n     [0.1, 0.6, 0.3]]\nobs = [0, 1, 2]\nt = 1\n\nbackward_probs = backward_beta(A, B, obs, t)\nprint(backward_probs)\n```\n```"}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial probability distribution `pi`, compute the probability that the\n    model generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not obs:\n        return 0.0\n\n    N = len(pi)\n    T = len(obs)\n\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    beta = np.zeros((T, N))\n\n    # Initialize beta values for time step T-1\n    beta[T-1] = np.ones(N)\n\n    # Calculate backward probabilities\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.dot(A[i], B[:, obs[t+1]] * beta[t+1])\n\n    # Compute the final sequence probability\n    sequence_prob = np.sum(pi * B[:, obs[0]] * beta[0])\n\n    return round(sequence_prob, 6)\n\n# Example usage:\nA = [[0.5, 0.2, 0.3],\n     [0.3, 0.5, 0.2],\n     [0.2, 0.3, 0.5]]\nB = [[0.1, 0.4, 0.5],\n     [0.6, 0.3, 0.1],\n     [0.3, 0.3, 0.4]]\npi = [0.2, 0.4, 0.4]\nobs = [0, 1, 2]\n\nprint(backward_prob(A, B, pi, obs))  # Expected output will depend on the inputs\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n\n    # Validate dimensions\n    if len(S) != A.shape[0] or len(S) != A.shape[1] or A.shape[0] != B.shape[0]:\n        return -1\n\n    n_states = len(S)\n    n_observations = len(observations)\n\n    # Check if the observation indices are within the valid range\n    if np.any(observations < 0) or np.any(observations >= B.shape[1]):\n        return -1\n\n    # Initialize forward variables\n    alpha = np.zeros((n_observations, n_states))\n    alpha[0] = S * B[:, observations[0]]\n\n    # Validate initial state probabilities\n    if not np.isclose(np.sum(alpha[0]), 1):\n        return -1\n\n    # Forward algorithm recursion\n    for t in range(1, n_observations):\n        for j in range(n_states):\n            alpha[t, j] = np.dot(alpha[t-1], A[:, j]) * B[j, observations[t]]\n\n    # Final probability is the sum of all states at the last observation\n    final_prob = np.sum(alpha[-1])\n\n    # Round the result to 4 decimal places\n    return round(final_prob, 4)\n\n# Example usage:\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.9], [0.8, 0.2]]\nobservations = [0, 1, 0]\n\nprint(forward_algorithm(S, A, B, observations))  # Output will depend on the input\n```\n```\n\nThis script defines the `forward_algorithm` function which implements the forward algorithm for computing the likelihood of an observation sequence given a Hidden Markov Model (HMM). The function checks the validity of the input dimensions, ensures that the observation indices are within the valid range, and returns the computed sequence likelihood rounded to 4 decimal places using the `round` function."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # Step 1: Count the support of every single item and discard infrequent ones\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    total_transactions = len(transactions)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    # Step 2: Build one FP-tree\n    def create_fptree(transactions: List[List[str]], frequent_items: dict[int, int]):\n        tree = defaultdict(int)\n        for transaction in transactions:\n            transaction = [item for item in transaction if item in frequent_items]\n            transaction.sort(key=lambda item: frequent_items[item], reverse=True)\n            for item in transaction:\n                if item not in tree:\n                    tree[item] = {}\n                tree[item] += 1\n        return tree\n\n    fptree = create_fptree(transactions, frequent_items)\n\n    # Step 3: Recursively mine conditional FP-trees to obtain larger item-sets\n    def mine_tree(tree: dict[str, int], prefix_path: List[str], frequent_itemsets: defaultdict):\n        headers = {item: (freq, tree[item]) for item, freq in frequent_items.items()}\n        while headers:\n            base_path = headers.popitem()[1][1]\n            if not base_path:\n                continue\n            path_freq = base_path.pop()\n            if path_freq < min_support:\n                break\n            prefix = prefix_path + [path_freq[0]]\n            prefix_support = path_freq[1]\n            frequent_itemsets[tuple(prefix)] += prefix_support\n            conditional_pattern_base = find_conditional_patterns(base_path, path_freq[0], min_support)\n            conditional_tree = create_fptree(conditional_pattern_base, frequent_items)\n            headers = {item: (count, conditional_tree[item]) for item, count in conditional_items.items()}\n            mine_tree(conditional_tree, prefix, frequent_itemsets)\n\n    def find_conditional_patterns(base_path: dict[str, int], item: str, min_support: int) -> List[List[str]]:\n        patterns = []\n        for transaction in base_path:\n            pattern = [item]\n            if base_path[transaction] > min_support:\n                pattern.extend(find_prefix_path(transaction, item, base_path))\n                patterns.append(pattern)\n        return patterns\n\n    def find_prefix_path(transaction: str, item: str, base_path: dict[str, int]) -> List[str]:\n        path = []\n        while transaction:\n            path.append(transaction.pop())\n        transaction = [item] + transaction\n        return transaction\n\n    frequent_itemsets = defaultdict(int)\n    mine_tree(fptree, [], frequent_itemsets)\n\n    # Convert defaultdict to list of tuples and sort the result\n    result = [(list(itemset), support) for itemset, support in frequent_itemsets.items()]\n    result.sort(key=lambda x: (len(x[0]), x[0]))\n\n    # Return only the itemsets without their support counts\n    return [itemset for itemset, _ in result]\n\n# Example usage\ntransactions = [\n    ['milk', 'bread', 'eggs'],\n    ['milk', 'bread'],\n    ['bread', 'butter'],\n    ['bread', 'milk', 'eggs', 'butter'],\n    ['milk', 'bread', 'butter'],\n    ['bread', 'eggs']\n]\nmin_support = 3\n\nprint(fp_growth(transactions, min_support))\n```\n\n### Explanation:\n1. **Count the support of every single item and discard infrequent ones**: We use a `Counter` to count the occurrences of each item across all transactions. Then, we filter out infrequent items based on the `min_support`.\n\n2. **Build one FP-tree**: We create an FP-tree by iterating through each transaction and adding items to the tree only if they are frequent. Items are added in a sorted order based on their frequency to ensure the tree structure is correct.\n\n3. **Recursively mine conditional FP-trees to obtain larger item-sets**: For each frequent item, we generate a conditional pattern base and build a conditional FP-tree. We then recursively mine these trees to find larger frequent item-sets.\n\n4. **Sorting and Returning Result**: Finally, we convert the `defaultdict` to a list of tuples and sort the result according to the specified constraints before returning the frequent item-sets."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(a: np.ndarray, b: np.ndarray) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(a - b)\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return [-1]\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n\n    # Calculate distances from each test sample to each training sample\n    distances = [euclidean_distance(test_sample, train_sample) for train_sample in X_train for test_sample in X_test]\n\n    # Get indices of k nearest neighbors\n    nearest_indices = []\n    for i in range(len(X_test)):\n        # Flatten the training data and distances for this test sample\n        flat_train_data = X_train.flatten()\n        flat_distances = distances[i * len(X_train):(i + 1) * len(X_train)]\n        # Find the indices of the k smallest distances\n        nearest_indices.append(np.argsort(flat_distances)[:k])\n\n    # Create an array to hold the predicted classes\n    predictions = []\n\n    for idx in nearest_indices:\n        # Gather the classes of the k nearest neighbors\n        nearest_classes = y_train[idx]\n        # Count the occurrences of each class\n        class_count = {}\n        for cls in nearest_classes:\n            if cls in class_count:\n                class_count[cls] += 1\n            else:\n                class_count[cls] = 1\n\n        # Find the class with the maximum count\n        max_count = -1\n        max_class = -1\n        for cls, count in class_count.items():\n            if count > max_count or (count == max_count and cls < max_class):\n                max_count = count\n                max_class = cls\n\n        predictions.append(max_class)\n\n    return predictions\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure inputs are NumPy arrays\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Check if shapes match\n    if y.shape != y_pred.shape:\n        raise ValueError(\"Shapes of y and y_pred do not match.\")\n    \n    # Check for invalid predictions (negative or greater than 1)\n    if np.any(y_pred < 0) or np.any(y_pred > 1):\n        raise ValueError(\"Invalid prediction values found in y_pred.\")\n    \n    # Adding machine epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    y_pred_stable = y_pred + epsilon\n    \n    # Calculating the loss\n    loss = -np.sum(y * np.log(y_pred_stable))\n    \n    # Returning the loss rounded to 4 decimal places\n    return round(loss, 4)\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the ReLU activation of Z.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid activation of Z.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef single_layer_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation_function: str) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Compute a single forward step for one layer.\"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation_function == \"relu\":\n        A = relu(Z)\n    elif activation_function == \"sigmoid\":\n        A = sigmoid(Z)\n    else:\n        raise ValueError(\"Activation function must be 'relu' or 'sigmoid'\")\n    \n    return A, Z\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list[tuple[np.ndarray, np.ndarray]]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[float], list[tuple[np.ndarray, np.ndarray]]]\n        The final activation AL rounded to 4 decimal places and converted to a plain\n        Python list, and the list of caches.\n    \"\"\"\n    caches = []\n    A = X\n    \n    # Iterate through each layer\n    for l in range(1, len(parameters) // 2):\n        W_key = f\"W{l}\"\n        b_key = f\"b{l}\"\n        A_prev = A\n        \n        # Compute linear step and activation step\n        A, Z = single_layer_forward(A_prev, parameters[W_key], parameters[b_key], \"relu\")\n        caches.append((A_prev, parameters[W_key], parameters[b_key]))\n    \n    # Compute the output layer (sigmoid activation)\n    WL_key = f\"W{len(parameters)//2}\"\n    bL_key = f\"b{len(parameters)//2}\"\n    AL, ZL = single_layer_forward(A, parameters[WL_key], parameters[bL_key], \"sigmoid\")\n    caches.append((A, parameters[WL_key], parameters[bL_key]))\n    \n    # Round the final activation AL to 4 decimal places and convert to a list\n    AL_rounded = np.round(AL, 4).tolist()\n    \n    return AL_rounded, caches\n```\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Union\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    logprobs = np.multiply(Y, np.log(A2_clipped)) + np.multiply((1 - Y), np.log(1 - A2_clipped))\n    cost = -np.sum(logprobs) / A2_clipped.shape[1]\n    return round(cost, 6)\n\n# Example usage\nif __name__ == \"__main__\":\n    A2 = np.array([[1.1, 0.3, 0.5, 1.3]])\n    Y = np.array([[0, 1, 1, 0]])\n    print(compute_cost(A2, Y))  # Expected output: 0.94591\n\n    A2 = np.array([[0.6, 0.7, 0.1, 0.9]])\n    Y = np.array([[1, 0, 1, 0]])\n    print(compute_cost(A2, Y))  # Expected output: 0.718533\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    q_values = np.array(Q)\n    n = q_values.shape[0]\n    max_q_value = np.max(q_values)\n    greedy_indices = np.where(q_values == max_q_value)[0]\n    \n    # Choose the first occurrence in case of ties\n    greedy_index = greedy_indices[0]\n    prob_greedy = 1 - epsilon + (epsilon / n)\n    prob_nongreedy = epsilon / n\n    \n    # Initialize probabilities\n    probabilities = np.zeros(n)\n    \n    # Set the probability for the greedy action\n    probabilities[greedy_index] = prob_greedy\n    \n    # Set the probabilities for the other actions\n    probabilities[np.setdiff1d(np.arange(n), greedy_index)] = prob_nongreedy\n    \n    # Round probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum of probabilities is within the allowed tolerance\n    if not np.isclose(np.sum(probabilities), 1, atol=1e-12):\n        raise ValueError(\"The sum of probabilities must be equal to 1.\")\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis script defines the `epsilon_soft` function according to the problem description. It calculates the probabilities for each action based on the given Q-values and exploration parameter \\( \\epsilon \\). The function ensures that the sum of the probabilities is exactly 1 and rounds them to 4 decimal places. If the sum is not exactly 1 within the specified tolerance, it raises a `ValueError`."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    for sample_predictions in zip(*predictions):\n        counter = Counter(sample_predictions)\n        final_prediction = min(counter, key=lambda x: (counter[x], x))\n        final_predictions.append(final_prediction)\n    return final_predictions\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    elif isinstance(z, (list, np.ndarray)):\n        result = np.logaddexp(0.0, np.array(z))\n        rounded_result = [round(val, 4) for val in result]\n        return rounded_result.tolist()\n    else:\n        raise TypeError(\"Input must be an int, float, list, or numpy array\")\n\n# Example usage:\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n\nz_scalar = 5\nprint(softplus(z_scalar))  # Output: 2.1972\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Extract the true expected payouts\n    true_payouts = bandit.get(\"arm_evs\")\n    if true_payouts is None or len(true_payouts) == 0:\n        return np.nan\n\n    # Extract and sort the policy estimates based on the arm indices\n    arm_indices = sorted(policy.get(\"ev_estimates\", {}).keys())\n    estimates = [policy[\"ev_estimates\"][index] for index in arm_indices]\n\n    # Compute the mean-squared error\n    if len(estimates) != len(true_payouts):\n        return np.nan\n\n    squared_errors = [(est - true_payout) ** 2 for est, true_payout in zip(estimates, true_payouts)]\n    mse_value = np.mean(squared_errors)\n\n    return round(mse_value, 4)\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Lidstone/Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build N-gram frequency tables\n    def build_ngram_freq_tables(corpus, N):\n        ngrams = defaultdict(Counter)\n        for sentence in corpus:\n            words = sentence.split()\n            for i in range(len(words) - N + 1):\n                context = ' '.join(words[i:i+N-1])\n                word = words[i+N-1]\n                ngrams[context][word] += 1\n        # Adding <UNK> token to the vocabulary\n        vocab = set(word for sentence in corpus for word in sentence.split()) | {'<UNK>'}\n        return ngrams, vocab\n    \n    # Step 2: Estimate probabilities with additive smoothing\n    def estimate_probabilities(ngrams, vocab, N, K):\n        smoothed_probs = {}\n        for context, words in ngrams.items():\n            total_count = sum(words.values())\n            for word in vocab:\n                if word in words:\n                    smoothed_probs[(context, word)] = (words[word] + K) / (total_count + K * len(vocab))\n                else:\n                    smoothed_probs[(context, word)] = K / (total_count + K * len(vocab))\n        return smoothed_probs\n    \n    # Step 3: Calculate log-probability of the sentence\n    def calculate_sentence_log_prob(sequence, smoothed_probs, N, vocab):\n        words = sequence.split()\n        log_prob = 0.0\n        for i in range(len(words) - N + 1):\n            context = ' '.join(words[i:i+N-1])\n            word = words[i+N-1]\n            if (context, word) in smoothed_probs:\n                log_prob += math.log(smoothed_probs[(context, word)])\n            else:\n                log_prob += math.log(smoothed_probs[('<UNK>', '<UNK>')])  # Handle unseen context and word\n        return round(log_prob, 4)\n    \n    # Main function logic\n    ngrams, vocab = build_ngram_freq_tables(corpus, N)\n    smoothed_probs = estimate_probabilities(ngrams, vocab, N, K)\n    \n    # Check if the sentence has at least one N-gram\n    if N > len(words := sequence.split()):\n        return 0.0\n    \n    return calculate_sentence_log_prob(sequence, smoothed_probs, N, vocab)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    # Set a fixed random seed for deterministic initialisation\n    np.random.seed(0)\n    \n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for _ in range(max_iter):\n        # Fix H and solve for W\n        W = solve_als_step_W(X, H, alpha)\n        \n        # Fix W and solve for H\n        H = solve_als_step_H(X, W, alpha)\n        \n        # Compute the current loss\n        X_hat = np.dot(W, H)\n        loss = np.linalg.norm(X - X_hat)**2 + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n        \n        # Check if the loss has dropped below the tolerance\n        if loss < tol:\n            break\n    \n    # Return the reconstructed matrix rounded to 4 decimal places and converted to a list of lists\n    return X_hat.round(4).tolist()\n\ndef solve_als_step_W(X: np.ndarray, H: np.ndarray, alpha: float) -> np.ndarray:\n    \"\"\"Solve for W in the ALS algorithm.\"\"\"\n    HtH = np.dot(H, H.T)\n    Id = np.eye(HtH.shape[0])\n    W = np.dot(np.linalg.pinv(HtH + alpha * Id), np.dot(H.T, X))\n    return W\n\ndef solve_als_step_H(X: np.ndarray, W: np.ndarray, alpha: float) -> np.ndarray:\n    \"\"\"Solve for H in the ALS algorithm.\"\"\"\n    WtW = np.dot(W.T, W)\n    Id = np.eye(WtW.shape[0])\n    H = np.dot(np.linalg.pinv(WtW + alpha * Id), np.dot(W.T, X.T)).T\n    return H\n```\n\nThis script implements the regularised Alternating Least Squares (ALS) matrix factorisation algorithm. The function `als_factorization` takes a real-valued matrix `X`, the desired latent rank `K`, and optional parameters for regularisation weight `alpha`, maximum number of iterations `max_iter`, and tolerance `tol`. It returns the reconstructed matrix `X_hat` rounded to 4 decimal places and converted to a Python list of lists. The factor matrices `W` and `H` are initialised with a fixed random seed for deterministic results. The algorithm updates `W` and `H` alternately until the loss converges below the specified tolerance or the maximum number of iterations is reached."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n    centroids = []\n    \n    # Initialize centroids using K-Means++\n    def initialize_centroids(X, k):\n        centroids = [X[np.random.choice(m)]]\n        for _ in range(1, k):\n            dists = np.min(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=0)\n            dists_prob = dists / dists.sum()\n            cumulative_probs = dists_prob.cumsum()\n            r = np.random.random()\n            index = np.searchsorted(cumulative_probs, r)\n            centroids.append(X[index])\n        return centroids\n\n    centroids = initialize_centroids(X, K)\n\n    for _ in range(max_iter):\n        # Assign samples to nearest centroid\n        labels = []\n        for x in X:\n            label = np.argmin(np.linalg.norm(x - np.array(centroids), axis=1))\n            labels.append(label)\n        \n        # Update centroids\n        new_centroids = []\n        for k in range(K):\n            cluster_points = X[labels == k]\n            if len(cluster_points) > 0:\n                new_centroid = cluster_points.mean(axis=0).tolist()\n            else:\n                new_centroid = centroids[k].tolist()\n            new_centroids.append(new_centroid)\n\n        if np.allclose(centroids, new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Round and sort centroids\n    final_centroids = [round(cen[i], 4) for i in range(n) for cen in centroids]\n    sorted_centroids = sorted(centroids, key=lambda x: (x[0], x[1]))\n\n    return sorted_centroids\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([\n        [1.6, 1.7],\n        [5.1, 5.0],\n        [2.3, 2.1],\n        [8.2, 8.1],\n        [3.4, 3.2],\n        [9.3, 9.0],\n        [4.5, 4.3],\n        [10.1, 10.0],\n        [5.6, 5.4],\n        [11.2, 11.0],\n        [6.7, 6.5],\n        [12.0, 12.0]\n    ])\n    K = 2\n    max_iter = 100\n    random_state = 42\n\n    print(kmeans(X, K, max_iter=max_iter, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It initializes the centroids using the K-Means++ method, iteratively assigns each sample to the nearest centroid, updates the centroids, and repeats until convergence or the maximum number of iterations is reached. The final centroids are rounded to four decimal places and returned in a sorted list."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    If the input is shorter than TIME_STEPS, appends the padding token 0 on the right.\n    If it is longer, truncates the sequence. Characters not in the vocabulary are encoded as 0.\n    \"\"\"\n    encoded = [vocabulary.get(c, 0) for c in text]\n    encoded = encoded[:time_steps]  # truncate if longer than TIME_STEPS\n    while len(encoded) < time_steps:\n        encoded.append(0)  # pad if shorter than TIME_STEPS\n    return encoded\n\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Ignores padding tokens (0) during decoding \u2013 they do not appear in the returned string.\n    \"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Puts everything together. It encodes the raw text with string_to_int, \n    calls model.predict on the encoded batch, \n    applies argmax over the last axis to obtain one predicted id per time step, \n    and finally decodes the ids with int_to_string.\n    \"\"\"\n    # Encode the input text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Convert the encoded text to a numpy array and add a batch dimension\n    X = np.array([encoded_text])\n    \n    # Predict using the model\n    prediction = model.predict(X)\n    \n    # Apply argmax to obtain predicted ids\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    \n    # Decode the predicted ids\n    decoded_prediction = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_prediction\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES  # Assuming EXAMPLES is defined in the user's environment\n    \n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        full_prediction = ''.join(prediction)\n        print(f\"input:  {example}\")\n        print(f\"output: {full_prediction}\")\n        predictions.append(full_prediction)\n    \n    return predictions\n\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    \"\"\"Helper function to run the model on a single example and return the output as a list of characters.\"\"\"\n    return list(model(example))\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]  # Number of samples\n    z = X @ w  # Compute the dot product of X and w to get z\n    p = 1 / (1 + np.exp(-z))  # Compute sigmoid function\n    \n    # Avoid numerical issues by clamping p between epsilon and 1 - epsilon\n    epsilon = 1e-20\n    p_clamped = np.clip(p, epsilon, 1 - epsilon)\n\n    # Compute the loss\n    loss = -np.mean(y * np.log(p_clamped) + (1 - y) * np.log(1 - p_clamped))\n    \n    # Compute the gradient\n    gradient = np.mean((p_clamped - y) * X, axis=0)\n    \n    # Return the loss and gradient as required\n    return round(loss, 4), gradient.tolist()\n\n# Example usage:\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([0, 1, 0, 1])\nw = np.array([0.1, -0.2])\n\nloss, gradient = logistic_loss_and_gradient(X, y, w)\nprint(\"Loss:\", loss)\nprint(\"Gradient:\", gradient)\n```"}
{"task_id": 118, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    w = np.ones(m) / m  # Initialize weights\n    predictions = []\n    alphas = []\n\n    for _ in range(n_clf):\n        # Find the best decision stump\n        best_stump = None\n        min_error = float('inf')\n        for feature_index in range(n):\n            feature_values = X_train[:, feature_index]\n            unique_values = np.unique(feature_values)\n            for value in unique_values:\n                prediction = 2 * (feature_values >= value) - 1\n                error = np.sum(w[prediction != y_train])\n                if error <= 0.5:\n                    # Calculate weighted error\n                    error = 0.5 if error == 0 else error\n                    alpha = 0.5 * np.log((1 - error) / error)\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature': feature_index, 'threshold': value, 'prediction': prediction, 'alpha': alpha}\n\n        # Update the weights if the stump has non-zero error\n        if best_stump['alpha'] > 0:\n            prediction = best_stump['prediction']\n            error = best_stump['error']\n            alpha = best_stump['alpha']\n            alphas.append(alpha)\n            w *= np.exp(-alpha * y_train * prediction)\n            w /= np.sum(w)\n\n        # Predict on test data\n        test_predictions = [np.sign(np.sum([alpha * stump(X_test[i]) for i in range(len(X_test))])) for stump in alphas]\n        test_predictions = [1 if pred > 0 else -1 for pred in test_predictions]\n        predictions.extend(test_predictions)\n\n    # Aggregate the final prediction\n    final_prediction = np.sign(np.sum(predictions[:len(X_test)]))\n    return [final_prediction] * len(X_test)\n\n# Define a decision stump function\ndef decision_stump(x):\n    return np.sign(x)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Training data\n    X_train = np.array([[1, 2], [2, 1], [-1, -2], [-2, -1]])\n    y_train = np.array([1, -1, 1, -1])\n\n    # Test data\n    X_test = np.array([[0, 0], [1, 1], [-1, -1]])\n\n    # Predict\n    print(adaboost_predict(X_train, y_train, X_test, 3))\n```\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom scipy.linalg import inv, pinv\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components <= 0 or n_components > X.shape[1]:\n        return []\n\n    # Step 1: Compute the within-class scatter matrix S_W\n    class_means = []\n    for c in np.unique(y):\n        class_samples = X[y == c]\n        class_mean = np.mean(class_samples, axis=0)\n        class_means.append(class_mean)\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for i, mean in enumerate(class_means):\n        class_samples = X[y == i]\n        centered_samples = class_samples - mean\n        S_W += np.dot(centered_samples.T, centered_samples)\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    global_mean_matrix = np.ones((len(X), X.shape[1])) @ global_mean.reshape(-1, 1)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for i, mean in enumerate(class_means):\n        n_c = len(class_means[i])\n        centered_class_mean = mean.reshape(-1, 1) - global_mean.reshape(-1, 1)\n        S_B += n_c * np.dot(centered_class_mean.T, centered_class_mean)\n\n    # Step 3: Solve the generalized eigenvalue problem\n    A = pinv(S_W) @ S_B\n    eigen_values, eigen_vectors = np.linalg.eigh(A)\n\n    # Step 4: Sort the eigenpairs in descending order of eigenvalues\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n\n    # Step 5: Fix the deterministic sign\n    for i in range(eigen_vectors.shape[1]):\n        if eigen_vectors[:, i][np.argmax(eigen_vectors[:, i])] < 0:\n            eigen_vectors[:, i] *= -1\n\n    # Step 6: Project the data\n    W = eigen_vectors[:, :n_components]\n    X_projected = X @ W\n    rounded_projected_data = np.round(X_projected, 4).tolist()\n\n    return rounded_projected_data\n```"}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n\n    # Check if starting or ending cell is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n\n    # Directions the agent and fire can move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # BFS for fire spread\n    def bfs_fire():\n        fire_queue = deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 'F']])\n        fire_time = {}\n        for i, j in fire_queue:\n            fire_time[(i, j)] = 0\n        time = 0\n        while fire_queue:\n            for _ in range(len(fire_queue)):\n                x, y = fire_queue.popleft()\n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny) not in fire_time:\n                        fire_time[(nx, ny)] = time + 1\n                        fire_queue.append((nx, ny))\n            time += 1\n        return fire_time\n\n    # BFS for agent movement\n    def bfs_agent(fire_time):\n        agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n        visited = set([(0, 0)])\n        while agent_queue:\n            x, y, time = agent_queue.popleft()\n            if (x, y) == (n-1, n-1):\n                return time\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny) not in visited and time + 1 < fire_time.get((nx, ny), math.inf):\n                    agent_queue.append((nx, ny, time + 1))\n                    visited.add((nx, ny))\n        return -1\n\n    fire_time = bfs_fire()\n    return bfs_agent(fire_time)\n\n# Example usage:\nif __name__ == \"__main__\":\n    grid1 = [\"..F\", \"...\", \"F..\"]\n    grid2 = [\".F.\", \"#F#\", \"..F\"]\n    grid3 = [\"....F\", \"F....\", \"....#\"]\n    grid4 = [\"F\"]\n\n    print(escape_fire_maze(grid1))  # Output: 2\n    print(escape_fire_maze(grid2))  # Output: -1\n    print(escape_fire_maze(grid3))  # Output: -1\n    print(escape_fire_maze(grid4))  # Output: 0\n```"}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors (k-NN) classifier.\"\"\"\n    \n    # Check if the provided metric is valid\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n        \n    # Initialize the predictions array\n    predictions = np.zeros(X_test.shape[0], dtype=int)\n    \n    # Compute distances for each test sample to all training samples\n    for i, test_sample in enumerate(X_test):\n        if metric == 'euclidean':\n            dists = np.linalg.norm(X_train - test_sample, axis=1)\n        elif metric == 'manhattan':\n            dists = distance.cityblock(X_train, test_sample.reshape(1, -1), axis=1)\n        else:  # cosine metric\n            dists = 1 - np.dot(X_train, test_sample) / (np.linalg.norm(X_train, axis=1) * np.linalg.norm(test_sample))\n        \n        # Get indices of the k smallest distances\n        k_smallest_indices = np.argsort(dists)[:k]\n        \n        # Get the labels of these k nearest neighbors\n        k_nearest_labels = y_train[k_smallest_indices]\n        \n        # Predict the class by majority vote\n        prediction = np.argmax(np.bincount(k_nearest_labels))\n        predictions[i] = prediction\n    \n    return predictions\n```"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(x: np.ndarray, x_hat: np.ndarray) -> float:\n    \"\"\"Compute the Euclidean distance between two samples.\"\"\"\n    return np.sqrt(np.sum((x - x_hat) ** 2))\n\ndef manhattan_distance(x: np.ndarray, x_hat: np.ndarray) -> float:\n    \"\"\"Compute the Manhattan distance between two samples.\"\"\"\n    return np.sum(np.abs(x - x_hat))\n\ndef cosine_distance(x: np.ndarray, x_hat: np.ndarray) -> float:\n    \"\"\"Compute the Cosine distance between two samples.\"\"\"\n    epsilon = 1e-12\n    numerator = np.dot(x, x_hat)\n    denominator = np.linalg.norm(x) * np.linalg.norm(x_hat)\n    return 1 - (numerator / (denominator + epsilon))\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_train, n_features = X.shape\n    n_test = X_test.shape[0]\n    predictions = []\n\n    if k > n_train:\n        k = n_train\n\n    for x_test in X_test:\n        distances = []\n        for i, x_train in enumerate(X):\n            if metric == 'euclidean':\n                dist = euclidean_distance(x_train, x_test)\n            elif metric == 'manhattan':\n                dist = manhattan_distance(x_train, x_test)\n            elif metric == 'cosine':\n                dist = cosine_distance(x_train, x_test)\n            else:\n                raise ValueError(\"Invalid distance metric\")\n\n            distances.append((y[i], dist))\n        \n        # Sort distances and take the smallest k values\n        distances.sort(key=lambda x: x[1])\n        k_nearest_labels = [label for label, _ in distances[:k]]\n        \n        # Perform majority vote\n        prediction = min(set(k_nearest_labels), key=k_nearest_labels.count)\n        predictions.append(prediction)\n\n    return predictions\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny = np.array([0, 1, 0, 1])\nX_test = np.array([[2, 3], [6, 7]])\n\n# Predicting using Euclidean distance\npredictions_euclidean = knn_predict(X, y, X_test, k=2, metric='euclidean')\nprint(predictions_euclidean)\n\n# Predicting using Manhattan distance\npredictions_manhattan = knn_predict(X, y, X_test, k=2, metric='manhattan')\nprint(predictions_manhattan)\n\n# Predicting using Cosine distance\npredictions_cosine = knn_predict(X, y, X_test, k=2, metric='cosine')\nprint(predictions_cosine)\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array for easier manipulation\n    state = np.array(state)\n    \n    # First linear transformation\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    \n    # First ReLU activation\n    relu1 = np.maximum(h1, 0)\n    \n    # Second linear transformation\n    h2 = np.dot(relu1, weights['W2']) + weights['b2']\n    \n    # Second ReLU activation\n    relu2 = np.maximum(h2, 0)\n    \n    # Output linear transformation\n    action_raw = np.dot(relu2, weights['W3']) + weights['b3']\n    \n    # Tanh activation\n    action = np.tanh(action_raw)\n    \n    # Return the action vector as a list rounded to 4 decimal places\n    return [round(act, 4) for act in action]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example weight matrices and bias vectors\n    weights = {\n        'W1': np.array([[1.0, -2.0], [-3.0, 0.5], [2.0, -2.5]]),\n        'b1': np.array([0.1, -0.2]),\n        'W2': np.array([[0.5, 1.0], [-1.0, 0.5]]),\n        'b2': np.array([0.2, -0.3]),\n        'W3': np.array([[0.1, -0.2]]),\n        'b3': np.array([-0.1])\n    }\n    \n    # Example state\n    state = [1.0, 2.0, -1.0]\n    \n    # Perform the forward pass\n    action = actor_forward(state, weights)\n    \n    print(action)\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    \n    w = np.zeros(n + 1 if fit_intercept else n)\n    for _ in range(max_iters):\n        for j in range(n + 1 if fit_intercept else n):\n            xj = X[:, j]\n            r = y - X @ w + w[j] * xj\n            s = lambda_param * m / xj.dot(xj)\n            w[j] = np.sign(np.sum(r * xj)) * max(abs(np.sum(r * xj)) - s, 0)\n            if fit_intercept and j == 0:\n                w[j] = np.mean(r)\n    \n    if fit_intercept:\n        weights = w[1:].tolist()\n        bias = round(w[0], 4)\n    else:\n        weights = w.tolist()\n        bias = 0.0\n    \n    return (list(map(lambda x: round(x, 4), weights)), round(bias, 4))\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([2, 4, 6])\nlambda_param = 0.1\nmax_iters = 100\nfit_intercept = True\n\nweights, bias = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\nprint(weights, bias)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Check if inputs are lists or numpy arrays\n    if not isinstance(x, (list, np.ndarray)) or not isinstance(y, (list, np.ndarray)):\n        raise ValueError(\"Inputs must be either Python lists or NumPy arrays.\")\n    \n    # Convert inputs to numpy arrays if they are lists\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Check if lengths are different\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Hamming distance\n    diff_count = np.sum(x != y)\n    hamming_dist = round(diff_count / len(x), 4)\n    \n    return hamming_dist\n\n# Example usage:\nx = [1, 0, 0, 1, 0, 1]\ny = [1, 1, 0, 1, 0, 1]\nprint(hamming_distance(x, y))  # Output: 0.3333\n\nx = np.array([1, 0, 0, 1, 0, 1])\ny = np.array([1, 1, 0, 1, 0, 1])\nprint(hamming_distance(x, y))  # Output: 0.3333\n\nx = [1, 0, 0, 1, 0, 1]\ny = [1, 1, 1, 1, 1, 1]\nprint(hamming_distance(x, y))  # Output: 0.5000\n\nx = np.array([1, 0, 0, 1, 0, 1])\ny = np.array([1, 1, 1, 1, 1])\nprint(hamming_distance(x, y))  # Output: -1\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window == \"hamming\":\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"hann\":\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None or len(coefficients) % 2 != 0:\n            raise ValueError(\"For 'generalized_cosine', coefficients must be supplied as a non-empty list with an even number of elements.\")\n        \n        series_coefficients = coefficients\n        return [round(sum(series_coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(len(series_coefficients))), 4) for n in range(N)]\n    else:\n        raise ValueError(\"Unknown window type.\")\n\n# Example usage:\nprint(generate_window(\"hamming\", 10))\nprint(generate_window(\"hann\", 10))\nprint(generate_window(\"blackman_harris\", 10))\nprint(generate_window(\"generalized_cosine\", 10, [0.5, 0.3]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Add bias term to X_train and X_test\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n\n    # Map labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    y_train_binary = np.zeros_like(y_train)\n    y_train_binary[np.where(y_train == unique_labels[1])] = 1\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Check if all labels are the same\n    if len(np.unique(y_train)) == 1:\n        return [unique_labels[0]] * X_test.shape[0]\n\n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        shuffled_indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[shuffled_indices]\n        y_train_shuffled = y_train_binary[shuffled_indices]\n\n        for index in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[index:index+batch_size]\n            y_batch = y_train_shuffled[index:index+batch_size]\n\n            # Compute the sigmoid of the weighted sum of features\n            z = np.dot(X_batch, weights)\n            sigmoid_values = 1 / (1 + np.exp(-z))\n\n            # Compute the gradient\n            gradient = np.dot(X_batch.T, (sigmoid_values - y_batch))\n            weights += learning_rate * gradient / batch_size\n\n    # Map predictions back to original labels\n    predictions_binary = []\n    for x in X_test:\n        z = np.dot(x, weights)\n        sigmoid_value = 1 / (1 + np.exp(-z))\n        prediction = 0 if sigmoid_value < 0.5 else 1\n        predictions_binary.append(prediction)\n\n    # Convert binary predictions to original labels\n    predictions = np.zeros_like(predictions_binary)\n    predictions[np.where(predictions_binary == 1)] = unique_labels[1]\n    predictions[np.where(predictions_binary == 0)] = unique_labels[0]\n\n    return predictions.tolist()\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"\n    Implement the AdaBoost ensemble algorithm using decision stumps as weak learners.\n    \n    Parameters:\n        X_train: Training feature matrix.\n        y_train: Training label vector.\n        X_test: Test feature matrix for prediction.\n        n_estimators: Number of decision stumps to train.\n        \n    Returns:\n        A list of predicted class labels for the test set.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    m = len(X_train)  # number of samples in the training set\n    n = len(X_train[0])  # number of features in each sample\n    \n    # Initialize sample weights\n    w = np.ones(m) / m\n    \n    predictions = []\n    \n    for t in range(n_estimators):\n        best_stump = None\n        min_error = float(\"inf\")\n        \n        # Try all features and thresholds to find the best stump\n        for i in range(n):\n            feature_values = X_train[:, i]\n            possible_thresholds = np.unique(feature_values)\n            for threshold in possible_thresholds:\n                h = get_prediction(feature_values, threshold, polarity=1)\n                h[feature_values < threshold] *= -1  # flip the prediction\n                \n                # Compute weighted error\n                error = np.sum(w[y_train != h])\n                \n                if error >= 0.5:\n                    error = np.sum(w[y_train != -h])  # flip polarity\n                    h *= -1\n                \n                # Update the best stump if this one has lower error\n                if error < min_error:\n                    best_stump = {'feature_index': i, 'threshold': threshold, 'polarity': 1}\n                    min_error = error\n        \n        # If no better stump is found, exit the loop\n        if min_error == float(\"inf\"):\n            break\n        \n        # Update the best stump's polarity if the flip had a lower error\n        if min_error > np.sum(w[y_train != -best_stump['polarity'] * best_stump['feature_values']]):\n            best_stump['polarity'] = -1\n        \n        # Calculate the alpha value\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        \n        # Update the sample weights\n        h = get_prediction(X_train[:, best_stump['feature_index']], best_stump['threshold'], polarity=best_stump['polarity'])\n        w *= np.exp(-alpha * y_train * h)\n        w /= np.sum(w)  # normalization step\n        \n        # Predict on the test set\n        h_test = get_prediction(X_test[:, best_stump['feature_index']], best_stump['threshold'], polarity=best_stump['polarity'])\n        predictions.append(h_test)\n    \n    # Aggregate the predictions\n    aggregated_prediction = np.sign(np.sum(predictions, axis=0))\n    \n    # Convert the aggregated predictions to class labels\n    y_pred = np.where(aggregated_prediction > 0, 1, 0).tolist()\n    \n    return y_pred\n\ndef get_prediction(feature_values, threshold, polarity=1):\n    \"\"\"\n    Create a prediction vector based on the feature values, threshold, and polarity.\n    \"\"\"\n    predictions = np.ones(len(feature_values))\n    predictions[feature_values < threshold] = -1 * polarity\n    predictions[feature_values >= threshold] = polarity\n    return predictions\n```"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sphere_function(x):\n    \"\"\"Evaluates the Sphere function at point x.\"\"\"\n    return np.sum(x**2)\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    \n    lower_bound = -1\n    upper_bound = 1\n    \n    # Set up random number generator\n    rng = np.random.default_rng(seed)\n    \n    # Initialize particles\n    particles_positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    particles_velocity = rng.uniform(-0.5, 0.5, (num_particles, n_dims))\n    particles_pbest = particles_positions.copy()\n    particles_gbest = particles_positions[sphere_function(particles_positions).argmin()]\n    inertia_weight = 0.5\n    cognitive_weight = 1.5\n    social_weight = 1.5\n    \n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity and position according to PSO rules\n            r1, r2 = rng.random(2)\n            particles_velocity[i] = (inertia_weight * particles_velocity[i] +\n                                      cognitive_weight * r1 * (particles_pbest[i] - particles_positions[i]) +\n                                      social_weight * r2 * (particles_gbest - particles_positions[i]))\n            particles_positions[i] = np.clip(particles_positions[i] + particles_velocity[i], lower_bound, upper_bound)\n            \n            # Update personal best\n            if sphere_function(particles_positions[i]) < sphere_function(particles_pbest[i]):\n                particles_pbest[i] = particles_positions[i].copy()\n                \n                # Update global best\n                if sphere_function(particles_positions[i]) < sphere_function(particles_gbest):\n                    particles_gbest = particles_positions[i].copy()\n                    \n    return round(sphere_function(particles_gbest), 4)\n\n# Example usage:\nresult = particle_swarm_optimisation(3, 10, 1000)\nprint(result)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\nfrom scipy.spatial import distance\n\ndef euclidean_distance(a: np.ndarray, b: np.ndarray) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return distance.euclidean(a, b)\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    # Convert lists to numpy arrays for efficient computation\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    \n    # Ensure k is within the bounds of the training set size\n    k = min(k, len(X_train))\n    k = max(k, 1)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from test point to all training points\n        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]\n        # Get k nearest indices\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        if task == \"classification\":\n            # Extract the k nearest labels\n            k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n            # Return the most frequent label\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n            if isinstance(prediction, str):\n                predictions.append(prediction)\n            else:\n                # Handle numeric labels\n                predictions.append(min(k_nearest_labels))\n        elif task == \"regression\":\n            # Extract the k nearest targets\n            k_nearest_targets = [y_train[i] for i in k_nearest_indices]\n            # Return the average of the k nearest targets\n            prediction = round(np.mean(k_nearest_targets), 4)\n            predictions.append(prediction)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n    \n    return predictions\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf_node(self):\n        return self.value is not None\n\nclass CARTTreeClassifier:\n    def __init__(self, max_depth: int | None = None):\n        self.max_depth = max_depth\n\n    def fit(self, X_train: np.ndarray, y_train: np.ndarray):\n        self.n_classes = len(np.unique(y_train))\n        self.root = self._build_tree(X_train, y_train)\n\n    def _build_tree(self, X, y, depth=0):\n        n_samples, n_features = X.shape\n        n_labels = len(np.unique(y))\n\n        # stopping criteria\n        if (depth >= self.max_depth) or (n_labels == 1) or (n_samples < 2):\n            leaf_value = self._majority_vote(y)\n            return Node(value=leaf_value)\n\n        feat_idx, thr = self._best_split(X, y)\n        if feat_idx is None:\n            return Node(value=self._majority_vote(y))\n\n        left_idxs, right_idxs = self._split(X[:, feat_idx], thr)\n        left = self._build_tree(X[left_idxs, :], y[left_idxs], depth + 1)\n        right = self._build_tree(X[right_idxs, :], y[right_idxs], depth + 1)\n        return Node(feat_idx, thr, left, right)\n\n    def _best_split(self, X, y):\n        best_gini_gain = -1\n        split_idx, split_threshold = None, None\n        n_samples, n_features = X.shape\n        for feature in range(n_features):\n            X_column = X[:, feature]\n            thresholds = np.unique(X_column)\n            for thr in thresholds:\n                # calculate gini gain\n                gini_gain, l_idxs, r_idxs = self._gini_gain(X_column, y, thr)\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    split_idx = feature\n                    split_threshold = thr\n                    left_idxs = l_idxs\n                    right_idxs = r_idxs\n\n        return split_idx, split_threshold\n\n    def _gini_gain(self, x, y, thr):\n        # Split dataset\n        l_idxs, r_idxs = self._split(x, thr)\n\n        if len(l_idxs) == 0 or len(r_idxs) == 0:\n            return -1, [], []\n\n        # Calculate current (parent) Gini impurity\n        parent_gini = self._gini(y)\n\n        # Calculate weighted avg. of children impurity\n        n = len(y)\n        n_l, n_r = len(l_idxs), len(r_idxs)\n        child_gini = (n_l / n) * self._gini(y[l_idxs]) + (n_r / n) * self._gini(y[r_idxs])\n\n        # Calculate Gini gain as difference\n        gini_gain = parent_gini - child_gini\n\n        return gini_gain, l_idxs, r_idxs\n\n    def _split(self, X_column, thr):\n        left_idxs = np.argwhere(X_column <= thr).flatten()\n        right_idxs = np.argwhere(X_column > thr).flatten()\n        return left_idxs, right_idxs\n\n    def _gini(self, y):\n        _, counts = np.unique(y, return_counts=True)\n        gini = 1.0 - sum((counts / len(y)) ** 2)\n        return gini\n\n    def _majority_vote(self, y):\n        counts = np.bincount(y)\n        return np.argmax(counts)\n\n    def predict(self, X_test: np.ndarray) -> list[int]:\n        return [self._traverse_tree(x, self.root) for x in X_test]\n\n    def _traverse_tree(self, x, node):\n        if node.is_leaf_node():\n            return node.value\n\n        if x[node.feature] <= node.threshold:\n            return self._traverse_tree(x, node.left)\n        return self._traverse_tree(x, node.right)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    tree = CARTTreeClassifier(max_depth=max_depth)\n    tree.fit(X_train, y_train)\n    return tree.predict(X_test)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    y_train = np.array([0, 1, 1, 0])\n    X_test = np.array([[2, 3], [5, 7]])\n\n    predictions = decision_tree_predict(X_train, y_train, X_test, max_depth=3)\n    print(predictions)  # Expected: [0, 1] or similar depending on the splits\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return gini_impurity\n\ndef find_best_split(X, y):\n    \"\"\"Find the best threshold to split the data based on Gini impurity.\"\"\"\n    n_samples, n_features = X.shape\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        # Find unique values of the current feature\n        unique_values = np.unique(X[:, feature_index])\n        \n        for v in unique_values:\n            # Determine the split\n            left = y[X[:, feature_index] <= v]\n            right = y[X[:, feature_index] > v]\n            \n            if len(left) == 0 or len(right) == 0:\n                continue\n            \n            # Calculate Gini impurity for the split\n            gini_split = (len(left) / n_samples) * calculate_gini_impurity(left) + \\\n                         (len(right) / n_samples) * calculate_gini_impurity(right)\n            \n            # Update the best split if this one has lower Gini impurity\n            if gini_split < best_gini:\n                best_gini = gini_split\n                best_feature_index = feature_index\n                best_threshold_value = v\n    \n    # Return the best split and its Gini impurity\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    # Ensure X and y are numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Calculate the Gini impurity of the whole dataset\n    G_whole_dataset = calculate_gini_impurity(y)\n    \n    # If every sample belongs to the same class, return the whole dataset's Gini impurity\n    if G_whole_dataset == 0:\n        return (-1, None, round(G_whole_dataset, 4))\n    \n    # Find the best split\n    (feature_index, threshold_value, best_gini) = find_best_split(X, y)\n    \n    return (feature_index, threshold_value, best_gini)\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ny = np.array([0, 0, 1, 1, 1])\n\nprint(best_gini_split(X, y))\n```\n\nThis code defines a `best_gini_split` function that computes the best single binary split for a dataset based on minimizing the weighted Gini impurity. It also includes a helper function `calculate_gini_impurity` to compute the Gini impurity of a set of labels and another helper function `find_best_split` to find the best split for each feature. The example usage at the end demonstrates how to call the `best_gini_split` function with a sample dataset."}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    if name == 'euclidean':\n        def d(x, y):\n            x, y = np.array(x), np.array(y)\n            if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or len(x) == 0 or np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n                return -1\n            return round(np.linalg.norm(x - y, ord=2), 4)\n    elif name == 'manhattan':\n        def d(x, y):\n            x, y = np.array(x), np.array(y)\n            if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or len(x) == 0:\n                return -1\n            return round(np.sum(np.abs(x - y)), 4)\n    elif name == 'chebyshev':\n        def d(x, y):\n            x, y = np.array(x), np.array(y)\n            if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or len(x) == 0:\n                return -1\n            return round(np.max(np.abs(x - y)), 4)\n    elif name == 'cosine':\n        def d(x, y):\n            x, y = np.array(x), np.array(y)\n            if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or len(x) == 0 or np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n                return -1\n            dot_product = np.dot(x, y)\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            return round(1 - dot_product / (norm_x * norm_y), 4)\n    else:\n        def d(*args):\n            return -1\n    return d\n\n# Example calls\nprint(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\nprint(metric('manhattan')([1, 2, 3], [4, 5, 6]))  # \u279e 9.0\nprint(metric('chebyshev')([1, 2, 3], [4, 5, 6]))  # \u279e 3.0\nprint(metric('cosine')([1, 2, 3], [4, 5, 6]))  # \u279e 0.7489\nprint(metric('euclidean')([1, 2, 3], []))  # \u279e -1\nprint(metric('unknown')([1, 2, 3], [4, 5, 6]))  # \u279e -1\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    \n    if cont_action:\n        # If the action space is continuous, mark all dimensions as infinite\n        n_actions_per_dim = [np.inf] * len(env.action_space.shape)\n    else:\n        if md_action:\n            # If multi-dimensional, iterate over sub-spaces\n            for subspace in env.action_space.spaces:\n                if hasattr(subspace, 'n'):\n                    n_actions_per_dim.append(subspace.n)\n                else:\n                    n_actions_per_dim.append(subspace.shape[0])\n                    break  # Stop at the first continuous dimension\n            else:\n                # Compute all possible discrete actions (cartesian product)\n                action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n        else:\n            # Single-dimensional case\n            if hasattr(env.action_space, 'n'):\n                n_actions_per_dim.append(env.action_space.n)\n            else:\n                n_actions_per_dim.append(env.action_space.shape[0])\n    \n    action_dim = len(n_actions_per_dim)\n    \n    return n_actions_per_dim, action_ids, action_dim\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef update_beta(phi: List[np.ndarray], corpus: List[List[int]], V: int) -> List[List[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    D = len(corpus)  # Number of documents\n    T = phi[0].shape[1]  # Number of topics, assuming all documents have the same number of topics\n    \n    # Initialize beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Iterate over each document and its tokens\n    for d in range(D):\n        N_d = len(corpus[d])\n        for n in range(N_d):\n            w_idx = corpus[d][n]\n            if w_idx < V:  # Ensure word index is within vocabulary bounds\n                beta[w_idx, :] += phi[d][n, :]\n    \n    # Normalize each column in beta\n    for t in range(T):\n        if np.sum(beta[:, t]) > 0:\n            beta[:, t] /= np.sum(beta[:, t])\n    \n    # Round the values to 4 decimal places\n    beta = np.round(beta, 4).tolist()\n\n    return beta\n```"}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.spatial import distance_matrix\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    # Step 1: Initialize medoids\n    medoids = X[:k]\n    n_samples, _ = X.shape\n    \n    while True:\n        # Step 2: Assign each sample to the nearest medoid\n        D = distance_matrix(X, medoids)\n        labels = np.argmin(D, axis=1)\n        \n        # Step 3: Update medoids\n        new_medoids = []\n        for j in range(k):\n            # Get all samples in the current cluster\n            cluster_samples = X[labels == j]\n            # Compute the cost of each sample being the medoid of this cluster\n            costs = D[labels == j, j].sum()\n            for sample in cluster_samples:\n                if sample.tolist() not in medoids.tolist():\n                    # Compute the cost of swapping\n                    temp_medoids = medoids.copy()\n                    index = np.where(np.all(temp_medoids == medoids[j], axis=1))[0][0]\n                    temp_medoids[index] = sample\n                    temp_costs = distance_matrix(cluster_samples, temp_medoids).sum(axis=0)\n                    temp_costs[j] = 0  # The cost of assigning the sample itself to itself is 0\n                    if temp_costs.sum() < costs:\n                        new_medoids.append(sample)\n                        break\n        new_medoids = np.array(new_medoids)\n        \n        # If no improvement, stop the loop\n        if new_medoids.shape[0] == 0 or not np.any(~np.isin(new_medoids, medoids)):\n            break\n        else:\n            medoids = new_medoids\n    \n    return labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))\n```\n\nThis code defines a function `pam_clustering` that implements the Partitioning Around Medoids (PAM) clustering algorithm according to the specified rules. It uses the `distance_matrix` function from `scipy.spatial` to compute the pairwise distances between all samples and the current medoids, and then iteratively attempts to improve the medoids by swapping them with non-medoid samples until no further improvement can be made. Finally, it assigns each sample to the nearest medoid based on the converged medoids and returns the list of cluster labels."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    # Convert inputs to numpy arrays\n    try:\n        x_train = np.array(x_train)\n        y_train = np.array(y_train)\n        x_test = np.array(x_test)\n    except:\n        return -1\n\n    # Check if the shapes are compatible\n    if len(x_train.shape) != 2 or len(x_test.shape) != 2:\n        return -1\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    if n_iterations < 1:\n        return -1\n\n    # Expand features to polynomial\n    def add PolynomialFeatures(X, degree):\n        X_expanded = np.copy(X)\n        if degree > 1:\n            for i in range(1, degree):\n                for j in range(i + 1):\n                    X_expanded = np.concatenate((X_expanded, X ** j * x_train ** (i - j)), axis=1)\n        return X_expanded\n\n    x_train = add_polynomial_features(x_train, degree)\n    x_test = add_polynomial_features(x_test, degree)\n\n    # Standard score all features\n    def standard_score(X):\n        means = np.mean(X, axis=0)\n        stds = np.std(X, axis=0)\n        X_standard = (X - means) / stds\n        return X_standard, means, stds\n\n    x_train, train_means, train_stds = standard_score(x_train)\n    x_test, test_means, test_stds = standard_score(x_test)\n\n    # Add bias term\n    x_train = np.hstack((np.ones((x_train.shape[0], 1)), x_train))\n    x_test = np.hstack((np.ones((x_test.shape[0], 1)), x_test))\n\n    # Initialize weights\n    weights = np.zeros(x_train.shape[1])\n\n    # Batch Gradient Descent\n    for _ in range(n_iterations):\n        predictions = x_train.dot(weights)\n        residuals = predictions - y_train\n        gradient = x_train.T.dot(residuals) / y_train.size\n        l1_penalty = l1_ratio * reg_factor * np.sign(weights)\n        l2_penalty = (1 - l1_ratio) * reg_factor * 2 * weights\n        penalty = l1_penalty + l2_penalty\n        weights -= learning_rate * (gradient + penalty)\n\n    # Make predictions on test data\n    predictions_test = x_test.dot(weights)\n\n    # Return predictions rounded to 4 decimals\n    return np.round(predictions_test, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Ensure actual values are +1 or -1\n    assert np.isin(actual, [-1, 1]).all(), \"actual must contain only +1 or -1\"\n    \n    # Compute the sigmoid probabilities\n    probability_list = [1 / (1 + np.exp(-x)) for x in predicted]\n    probability_list_rounded = [round(p, 6) for p in probability_list]\n\n    # Compute the gradients\n    grad_list = actual * (1 - probability_list)\n    grad_list_rounded = [round(g, 6) for g in grad_list]\n\n    # Compute the Hessians\n    hess_list = probability_list * (1 - probability_list)\n    hess_list_rounded = [round(h, 6) for h in hess_list]\n\n    # Convert results back to lists\n    return (grad_list_rounded, hess_list_rounded, probability_list_rounded)\n\n# Example usage\nactual_labels = np.array([-1, 1, -1, 1])\nscores = np.array([0.1, 2.0, -1.5, 1.0])\n\ngradient, hessian, probability = logistic_components(actual_labels, scores)\n\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def calculate_score(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a hand, considering the usable ace rule.\"\"\"\n        score = sum(card for card in hand)\n        aces = hand.count(1)\n        \n        while aces > 0 and score + 10 <= 21:\n            score += 10\n            aces -= 1\n        \n        return score\n\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n\n    if player_score > 21:\n        return -1.0  # Player busts\n    elif dealer_score > 21:\n        return 1.0   # Dealer busts\n    elif player_score == dealer_score:\n        return 0.0   # Draw\n    elif (player_score == 21 and len(player) == 2) or (dealer_score != 21 or len(player) == 2):\n        return 1.5 if player_score == 21 and len(player) == 2 else 1.0  # Natural blackjack for player or higher score\n    else:\n        return -1.0 if player_score > dealer_score else 1.0  # Compare scores\n\n# Example check function to test the solution\ndef check_blackjack_outcome():\n    assert abs(blackjack_outcome([8, 6], [9, 7]) - 0.0) < 0.001  # Draw\n    assert abs(blackjack_outcome([10, 1], [9, 8]) - 1.5) < 0.001  # Player natural blackjack\n    assert abs(blackjack_outcome([10, 10], [8, 9]) - -1.0) < 0.001  # Dealer wins (both are under 21, dealer has higher score)\n    assert abs(blackjack_outcome([10, 10], [9, 1]) - 1.0) < 0.001  # Player wins (both are under 21, player has higher score)\n    assert abs(blackjack_outcome([10, 10], [10, 1]) - 0.0) < 0.001  # Draw (both are under 21, same score)\n    assert abs(blackjack_outcome([9, 10], [10, 10]) - -1.0) < 0.001  # Player busts\n    assert abs(blackjack_outcome([9, 10], [10, 10, 10]) - 1.0) < 0.001  # Dealer busts\n    print(\"All checks passed successfully!\")\n\ncheck_blackjack_outcome()\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate element-wise squared log errors.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    \n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    errors = np.log1p(actual) - np.log1p(predicted)\n    squared_errors = np.square(errors)\n    return squared_errors\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    \n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    errors = squared_log_error(actual, predicted)\n    if isinstance(errors, np.ndarray):\n        msle = np.mean(errors)\n        return round(msle, 4)\n    else:\n        return -1\n\n# Example usage\nactual_values = [1, 2, 3, 4, 5]\npredicted_values = [2, 2.5, 3, 4.5, 5.5]\n\nmsle = mean_squared_log_error(actual_values, predicted_values)\nprint(f'Mean Squared Log Error: {msle}')\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            return round(np.exp(z) / (1 + np.exp(z)), 4)\n    elif isinstance(z, list):\n        return [round(1 / (1 + np.exp(-i)), 4) if i >= 0 else round(np.exp(i) / (1 + np.exp(i)), 4) for i in z]\n    elif isinstance(z, np.ndarray):\n        result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n        return np.round(result, 4).tolist()\n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy array\")\n\n# Example usage:\nprint(sigmoid(1))  # Single scalar\nprint(sigmoid([-1, 0, 1]))  # Python list\nz = np.array([[-2, 0], [1, -3]])\nprint(sigmoid(z))  # NumPy array\n```\n\nThis implementation handles scalar, list, and NumPy array inputs and ensures numerical stability by using different computation methods for non-negative and negative values. It returns the result as a Python list if the input is a list or a NumPy array, otherwise, it returns a float."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(value):\n        if isinstance(value, (list, np.ndarray)):\n            if isinstance(value, list):\n                value = np.array(value)\n            return np.vectorize(apply_leaky_relu)(value)\n        else:\n            return max(0, value) if value >= 0 else a * value\n\n    result = apply_leaky_relu(z)\n    return result.tolist()\n\n# Test the function with different types of input\nif __name__ == \"__main__\":\n    # Scalar input\n    scalar_input = 5\n    print(leaky_relu(scalar_input))  # Expected: 5.0\n\n    # Positive array input\n    positive_array_input = np.array([1, 2, 3, 4])\n    print(leaky_relu(positive_array_input).tolist())  # Expected: [1.0, 2.0, 3.0, 4.0]\n\n    # Mixed negative and positive array input\n    mixed_array_input = np.array([-1, -2, 0, 1, 2])\n    print(leaky_relu(mixed_array_input).tolist())  # Expected: [0.01, 0.02, 0.0, 1.0, 2.0]\n\n    # Nested list input\n    nested_list_input = [[-1, -2], [3, 4]]\n    print(leaky_relu(nested_list_input).tolist())  # Expected: [[0.01, 0.02], [3.0, 4.0]]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_decision_stump(X_train: np.ndarray, y_train: np.ndarray, sample_weights: np.ndarray) -> tuple:\n    \"\"\"Find the best decision stump in terms of weighted misclassification error.\"\"\"\n    n_samples, n_features = X_train.shape\n    \n    min_error = float('inf')\n    best_stump = {'feature_index': None, 'threshold': None, 'polarity': None}\n    \n    for feature_index in range(n_features):\n        feature_values = X_train[:, feature_index]\n        possible_thresholds = np.unique(feature_values)\n        \n        for threshold in possible_thresholds:\n            p_pos = 1\n            p_neg = -1\n            \n            # Predictions if feature value < threshold\n            pred_pos = (X_train[:, feature_index] < threshold) * p_pos\n            # Predictions if feature value >= threshold\n            pred_neg = (X_train[:, feature_index] >= threshold) * p_neg\n            \n            error_pos = np.sum(sample_weights[y_train != pred_pos])\n            error_neg = np.sum(sample_weights[y_train != pred_neg])\n            \n            # Compute weighted error\n            total_error = error_pos + error_neg\n            \n            # Early stopping if error is zero\n            if total_error == 0:\n                break\n            \n            # Choose the best polarity to minimize weighted error\n            if total_error < min_error:\n                min_error = total_error\n                best_stump['feature_index'] = feature_index\n                best_stump['threshold'] = threshold\n                best_stump['polarity'] = p_pos if error_pos < error_neg else p_neg\n                \n    return best_stump\n\ndef adaboost_train(X_train: np.ndarray, y_train: np.ndarray, n_clf: int = 5) -> list[tuple]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps.\"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    \n    for _ in range(n_clf):\n        best_stump = adaboost_decision_stump(X_train, y_train, sample_weights)\n        y_pred = np.where(X_train[:, best_stump['feature_index']] < best_stump['threshold'], \n                          -best_stump['polarity'], best_stump['polarity'])\n        \n        # Compute weighted error\n        error = np.sum(sample_weights[y_train != y_pred])\n        alpha = 0.5 * math.log((1 - error) / max(error, 1e-10))\n        \n        # Update sample weights\n        sample_weights[y_pred != y_train] *= np.exp(alpha)\n        sample_weights /= np.sum(sample_weights)\n        \n        classifiers.append((best_stump['feature_index'], best_stump['threshold'], best_stump['polarity']))\n    \n    return classifiers\n\ndef adaboost_predict_stump(X: np.ndarray, stump: tuple) -> np.ndarray:\n    \"\"\"Predict using a single decision stump.\"\"\"\n    feature_index, threshold, polarity = stump\n    predictions = np.where(X[:, feature_index] < threshold, -polarity, polarity)\n    return predictions\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\"\"\"\n    classifiers = adaboost_train(X_train, y_train, n_clf)\n    \n    n_samples, _ = X_test.shape\n    sample_predictions = np.zeros(n_samples)\n    \n    for classifier in classifiers:\n        sample_predictions += adaboost_predict_stump(X_test, classifier)\n    \n    # Compute final predictions\n    final_predictions = np.sign(sample_predictions).tolist()\n    return final_predictions\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(42)\n    X_train = np.random.rand(100, 10)\n    y_train = np.random.choice([-1, 1], size=100)\n    X_test = np.random.rand(50, 10)\n    n_clf = 5\n    \n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf)\n    print(predictions)\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    k = min(shape[0], np.prod(shape[1:]))\n    A = np.random.normal(size=(shape[0], k))\n    \n    _, _, V = np.linalg.svd(A, full_matrices=False)\n    Q = V[:k, :].T if shape[0] <= k else V[:, :k]\n    \n    reshaped_q = Q.reshape(shape)\n    return (scale * reshaped_q).tolist()\n```"}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Given weights and biases\n    W1 = np.array([[1.0], [1.0], [1.0], [1.0]])\n    b1 = 0.0\n    \n    W2 = np.array([[1.0, 1.0, 1.0, 1.0]])\n    b2 = 0.0\n    \n    W3 = np.array([[1.0, 1.0, 1.0, 1.0]])\n    b3 = 0.0\n    \n    Wa = np.array([[1.0, 1.0, 1.0, 1.0]])\n    b4 = 0.0\n    \n    Wc = np.array([1.0, 1.0, 1.0, 1.0])\n    b5 = 0.0\n\n    # Convert state to a numpy array for easier computation\n    s = np.array(state)\n    \n    # Dense-1 layer\n    z1 = np.maximum(0, s @ W1 + b1)\n    \n    # Dense-2 layer\n    z2 = np.maximum(0, z1 @ W2 + b2)\n    \n    # Dense-3 layer\n    z3 = np.maximum(0, z2 @ W3 + b3)\n    \n    # Actor head\n    logits = z3 @ Wa + b4\n    action_probs = np.round(np.exp(logits) / np.sum(np.exp(logits)), 4).tolist()\n    \n    # Critic head\n    state_value = np.round((z3 @ Wc + b5)[0], 4)\n    \n    return action_probs, state_value\n\n# Example usage\nstate_input = [1.0, -2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state_input)\nprint(f\"Action probabilities: {action_probs}\")\nprint(f\"State value: {state_value}\")\n```"}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n\n    def affine_transform(x, W, b):\n        return x @ W + b\n\n    def relu(x):\n        return np.maximum(0, x)\n\n    # Convert state to a NumPy array\n    x = np.array(state)\n\n    # Shared layers\n    h1 = relu(affine_transform(x, params['W1'], params['b1']))\n    h2 = relu(affine_transform(h1, params['W2'], params['b2']))\n    h3 = relu(affine_transform(h2, params['W3'], params['b3']))\n\n    # Actor head - convert hidden representation into action scores and apply softmax\n    logits = affine_transform(h3, params['Wa'], params['ba'])\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n\n    # Critic head - convert hidden representation into a single scalar\n    value = np.dot(h3, params['Wc']) + params['bc']\n\n    # Round results to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n\n    # Handle exact 0 or 1 probabilities\n    probabilities[probabilities == 0.0] = 0.0\n    probabilities[probabilities == 1.0] = 1.0\n\n    return probabilities.tolist(), value.item()\n\n# Example usage:\nparams = {\n    'W1': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]],\n    'b1': [0.1, 0.2, 0.3],\n    'W2': [[-0.1, -0.2, -0.3], [-0.4, -0.5, -0.6], [-0.7, -0.8, -0.9]],\n    'b2': [-0.1, -0.2, -0.3],\n    'W3': [[0.1, -0.2, 0.3], [0.4, -0.5, 0.6], [0.7, -0.8, 0.9]],\n    'b3': [0.1, 0.2, 0.3],\n    'Wa': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],\n    'ba': [0.1, 0.2],\n    'Wc': [0.1, 0.2, 0.3],\n    'bc': 0.1\n}\n\nstate = [1.0, 2.0, 3.0]\nprobabilities, value = actor_critic_forward(state, params)\nprint(f\"Probabilities: {probabilities}\")\nprint(f\"Value: {value}\")\n```"}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    w = np.array(w)\n    \n    # Calculate the L2 norm of the weight vector\n    l2_norm = np.linalg.norm(w)\n    \n    # Calculate the L1 norm of the weight vector\n    l1_norm = np.abs(w).sum()\n    \n    # Compute the Elastic-Net penalty\n    penalty_value = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm**2)\n    \n    if not gradient:\n        # Return the penalty value rounded to 4 decimal places\n        return round(penalty_value, 4)\n    else:\n        # Compute the gradient\n        gradient_value = alpha * ((l1_ratio * np.sign(w)) + ((1 - l1_ratio) * w))\n        \n        # Convert the gradient back to a list and round each element to 4 decimal places\n        return [round(g, 4) for g in gradient_value]\n\n# Example usage:\nw = [0.5, 1.5, 2.5]\nalpha = 0.7\nl1_ratio = 0.3\n\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\ngradient = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\n\nprint(f\"Penalty: {penalty}\")\nprint(f\"Gradient: {gradient}\")\n```"}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    params = model.parameters\n    param_value = params[param_name.lower()] if param_name in [\"Ba\", \"Bx\"] else params[param_name]\n\n    grads = np.zeros(param_value.shape)\n    original_param = deepcopy(param_value)\n\n    for i in range(param_value.shape[0]):\n        for j in range(param_value.shape[1]):\n            if param_name in [\"Ba\", \"Bx\"]:\n                param_value = params[param_name.lower()]\n            else:\n                param_value = params[param_name]\n\n            param_value[i, j] += epsilon\n            model.flush_gradients()\n            loss_plus = loss_func([model.forward(X_t) for X_t in X])\n\n            param_value[i, j] -= 2 * epsilon\n            model.flush_gradients()\n            loss_minus = loss_func([model.forward(X_t) for X_t in X])\n\n            param_value[i, j] += epsilon\n            grad = (loss_plus - loss_minus) / (2 * epsilon)\n            grads[i, j] = grad\n\n            # Reset the parameter to its original value\n            param_value[i, j] = original_param[i, j]\n\n    return grads.T.astype(np.float64)\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n    \n    # Initialize weights\n    m = len(X_train)\n    w = np.ones(m) / m  # Initial weight is 1/m for each example\n    \n    alpha = []\n    stumps = []\n    \n    for _ in range(n_clf):\n        # Fit a decision stump on the current weighted dataset\n        stump, error = fit_stump(X_train, y_train, w)\n        \n        # Calculate alpha\n        alpha_t = 0.5 * np.log((1 - error) / error)\n        alpha.append(alpha_t)\n        \n        # Update weights\n        w *= np.exp(-alpha_t * y_train * stump.predict(X_train))\n        w /= np.sum(w)  # Normalize weights\n        \n        # Store the stump\n        stumps.append(stump)\n    \n    # Predict on test data\n    predictions = []\n    for row in X_test:\n        vote_sum = 0\n        for i, stump in enumerate(stumps):\n            vote_sum += alpha[i] * stump.predict([row])\n        if vote_sum > 0:\n            predictions.append(1)\n        else:\n            predictions.append(-1)\n    \n    return predictions\n\n\ndef fit_stump(x: np.ndarray, y: np.ndarray, w: np.ndarray) -> (object, float):\n    \"\"\"Fit a decision stump.\n    \n    Args:\n        x: 1-D NumPy array of shape (m,) containing feature values.\n        y: 1-D NumPy array of length m with labels **-1** or **1**.\n        w: 1-D NumPy array of length m containing weights.\n        \n    Returns:\n        A tuple (stump, error), where `stump` is the decision stump object,\n        and `error` is the stump's weighted error.\n    \"\"\"\n    # Find the best threshold for splitting\n    thresholds = np.unique(x)\n    best_stump = None\n    best_error = float('inf')\n    \n    for th in thresholds:\n        pred = np.where(x >= th, 1, -1)\n        error = np.sum(w * (pred != y))\n        if error <= best_error:\n            best_stump = {'feature': 'x', 'threshold': th, 'prediction': pred}\n            best_error = error\n    \n    # Calculate the stump's error\n    error = best_stump['prediction'][best_stump['prediction'] != y].shape[0] / len(y)\n    \n    # Create the stump object\n    stump = DecisionStump(best_stump['feature'], best_stump['threshold'])\n    \n    return stump, error\n\n\nclass DecisionStump:\n    def __init__(self, feature: str, threshold: float):\n        self.feature = feature\n        self.threshold = threshold\n    \n    def predict(self, x: np.ndarray) -> np.ndarray:\n        return np.where(x[self.feature] >= self.threshold, 1, -1)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Generate some synthetic data\n    X_train = np.random.rand(100, 1) * 10\n    y_train = np.where(X_train < 5, -1, 1).reshape(-1, 1)\n    X_test = np.random.rand(10, 1) * 10\n    \n    # Ensure the data matches the expected format\n    X_train = np.hstack([X_train, np.zeros_like(X_train)])\n    X_test = np.hstack([X_test, np.zeros_like(X_test)])\n    \n    # Run the AdaBoost classifier\n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=5)\n    \n    print(predictions)\n```\n\nThis script defines the `adaboost_predict` function which implements the AdaBoost algorithm using decision stumps as weak learners. The `fit_stump` function is responsible for fitting a single decision stump to the data, while the `DecisionStump` class represents a decision stump learner. The example usage section demonstrates how to use this function with synthetic data."}
{"task_id": 261, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Compute fan_in and fan_out\n    fan_in = shape[1] if len(shape) > 1 else shape[0]\n    fan_out = shape[0] if len(shape) > 1 else shape[1]\n\n    if len(shape) > 2:\n        # For shapes with more than two dimensions, compute the receptive field size\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    # Calculate the standard deviation\n    s = np.sqrt(2 / (fan_in + fan_out))\n\n    # Generate the initial weights\n    weights = np.random.normal(loc=0.0, scale=s, size=shape)\n\n    return weights\n\n# Check function to verify the correctness\ndef check_initialization():\n    # Test for a fully connected layer\n    shape1 = (100, 50)\n    weights1 = glorot_normal(shape1)\n    print(\"FC Layer Shape:\", shape1)\n    print(\"Sample Mean:\", np.mean(weights1))\n    print(\"Sample Std Dev:\", np.std(weights1))\n    assert np.isclose(np.mean(weights1), 0.0, atol=1e-2), \"Mean should be close to 0\"\n    assert np.isclose(np.std(weights1), s, rtol=1e-2), \"Std Dev should match theoretical value\"\n\n    # Test for a convolutional kernel\n    shape2 = (32, 64, 3, 3)\n    weights2 = glorot_normal(shape2)\n    print(\"\\nConvolutional Kernel Shape:\", shape2)\n    print(\"Sample Mean:\", np.mean(weights2))\n    print(\"Sample Std Dev:\", np.std(weights2))\n    assert np.isclose(np.mean(weights2), 0.0, atol=1e-2), \"Mean should be close to 0\"\n    assert np.isclose(np.std(weights2), s, rtol=1e-2), \"Std Dev should match theoretical value\"\n\ncheck_initialization()\n```\n```"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to store adjacency lists\n    adj_list = {vertex: [] for vertex in V}\n    \n    # Add edges to the adjacency list\n    for u, v in E:\n        # Ensure that each edge is added only once (keeping it undirected)\n        if v not in adj_list[u]:\n            adj_list[u].append(v)\n        if u not in adj_list[v]:\n            adj_list[v].append(u)\n    \n    # Convert the dictionary to a list of lists, preserving the order of V\n    G = []\n    for vertex in V:\n        G.append(sorted(adj_list[vertex]))\n    \n    return G\n\n# Example usage\nif __name__ == \"__main__\":\n    V = [1, 2, 3, 4, 5]\n    E = [(1, 2), (1, 3), (2, 4), (3, 4), (4, 5)]\n    print(build_adj_list(V, E))\n    \n    V = ['a', 'b', 'c']\n    E = [('a', 'b'), ('b', 'c'), ('c', 'a')]\n    print(build_adj_list(V, E))\n```\n\n### Explanation:\n- The function `build_adj_list` takes two parameters: `V` (a list of unique vertex identifiers) and `E` (a list of tuples representing edges).\n- We first create a dictionary `adj_list` where each key is a vertex from `V` and the value is an empty list. This will serve as our adjacency list representation.\n- For each edge `(u, v)` in `E`, we add `v` to `u`'s adjacency list and `u` to `v`'s adjacency list, ensuring that each edge is added only once to avoid duplicates.\n- After processing all edges, we convert the dictionary to a list of lists by iterating over `V` and appending the sorted adjacency list for each vertex. Sorting ensures that the order inside each inner list follows the order of `V`.\n\nThis solution handles the constraints and requirements specified, including maintaining the order of vertices and ensuring no duplicates in the adjacency lists."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    best_stump = {\"feature_index\": None, \"threshold\": None, \"polarity\": None, \"weighted_error\": float(\"inf\")}\n    \n    n_samples, n_features = X.shape\n    \n    for feature_idx in range(n_features):\n        feature_values = np.unique(X[:, feature_idx])\n        for threshold in feature_values:\n            for polarity in [1, -1]:\n                predictions = np.ones_like(y)\n                predictions[X[:, feature_idx] >= threshold] *= -1\n                if polarity == -1:\n                    predictions *= -1\n                \n                error = np.sum(sample_weights[y != predictions])\n                weighted_error = error / np.sum(sample_weights)\n                \n                if weighted_error < best_stump[\"weighted_error\"]:\n                    best_stump = {\n                        \"feature_index\": feature_idx,\n                        \"threshold\": round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(weighted_error, 4)\n                    }\n                    \n    return best_stump\n```\n\n### Explanation:\n- The function iterates through each feature of the input matrix `X`.\n- For each feature, it considers all unique values in that feature as potential thresholds.\n- The polarity is also considered as both `1` and `-1` since any polarity that minimizes the error is acceptable.\n- A prediction vector is generated based on the current feature value and threshold.\n- The weighted error is calculated by summing the weights of misclassified samples and normalizing by the total weight.\n- The best stump is updated whenever a lower weighted error is found.\n- Finally, the best stump is returned after evaluating all possibilities."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef shannon_entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    value_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in value_counts.values()]\n    entropy = -sum(p * math.log(p, 2) for p in probabilities if p != 0)\n    return round(entropy, 4)\n\ndef evaluate_thresholds(feature, target):\n    \"\"\"Evaluate information gain for each threshold.\"\"\"\n    n = len(target)\n    sorted_indices = np.argsort(feature)\n    feature = feature[sorted_indices]\n    target = target[sorted_indices]\n    \n    max_gain = 0.0\n    best_threshold = None\n    \n    for i in range(n - 1):\n        if feature[i] != feature[i + 1]:  # ensure distinct values\n            threshold = (feature[i] + feature[i + 1]) / 2\n            left = target[:i + 1]\n            right = target[i + 1:]\n            \n            parent_entropy = shannon_entropy(target)\n            left_entropy = shannon_entropy(left)\n            right_entropy = shannon_entropy(right)\n            \n            information_gain = parent_entropy - ((i + 1) / n) * left_entropy - (n - (i + 1)) / n * right_entropy\n            \n            if information_gain > max_gain:\n                max_gain = information_gain\n                best_threshold = round(threshold, 4)\n    \n    return (best_threshold, round(max_gain, 4) if max_gain > 0 else 0.0)\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n    \n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n    \n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    threshold, gain = evaluate_thresholds(np.array(feature), np.array(target))\n    return (threshold, gain)\n\n# Example usage:\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = [0, 0, 0, 1, 1, 1, 2, 2, 2, 2]\n\nprint(best_split(feature, target))\n```"}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable[[Tuple[int, int]], List[List[float]]]:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals():\n        initializer = globals()[name]\n        if callable(initializer):\n            return initializer\n        else:\n            raise ValueError(\"Invalid initialization function.\")\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\nname = \"ones_init\"\nshape = (2, 2)\n\ntry:\n    init_fn = get_initializer(name)\n    output = init_fn(shape)\n    print(output)\nexcept ValueError as e:\n    print(e)\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Initialize the pooled output array\n    pooled_output = np.zeros((N, C, (H - p_h) // s_h + 1, (W - p_w) // s_w + 1))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass: compute the pooled output\n    for n_idx in range(N):\n        for c_idx in range(C):\n            for h_idx in range(0, H - p_h + 1, s_h):\n                for w_idx in range(0, W - p_w + 1, s_w):\n                    window = X[n_idx, c_idx, h_idx:h_idx + p_h, w_idx:w_idx + p_w]\n                    pooled_output[n_idx, c_idx, h_idx // s_h, w_idx // s_w] = np.mean(window)\n    \n    # Backward pass: propagate the gradient\n    for n_idx in range(N):\n        for c_idx in range(C):\n            for h_idx in range(0, H - p_h + 1, s_h):\n                for w_idx in range(0, W - p_w + 1, s_w):\n                    window_area = p_h * p_w\n                    mean_val = pooled_output[n_idx, c_idx, h_idx // s_h, w_idx // s_w]\n                    mask = np.ones((p_h, p_w)) / window_area\n                    grad_input[n_idx, c_idx, h_idx:h_idx + p_h, w_idx:w_idx + p_w] += mask * mean_val\n    \n    # Round outputs and convert to Python lists\n    pooled_output_rounded = np.around(pooled_output, decimals=4).tolist()\n    grad_input_rounded = np.around(grad_input, decimals=4).tolist()\n    \n    return (pooled_output_rounded, grad_input_rounded)\n\n# Example usage\nX = np.random.rand(1, 1, 5, 5)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.ones_like(X)\n\npooled_output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(\"Pooled Output:\", pooled_output)\nprint(\"Gradient Input:\", grad_input)\n```\n```\n\nThis script defines a function `average_pool2d` that takes a 4D numpy array `X` representing the input feature map, a tuple `pool_shape` indicating the height and width of the pooling window, a tuple `stride` indicating how much the window moves, and a 4D numpy array `accum_grad` representing the accumulated gradient from the next layer. The function computes the forward pass of 2D average pooling and then propagates the gradient back to the input during the backward pass, ensuring that the gradient is equally distributed among all elements within the pooling window. Both outputs are rounded to the nearest 4th decimal place and converted to Python lists using `tolist()`."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check if both nodes have the same feature index and threshold\n        if tree_a.feature != tree_b.feature or not np.allclose(tree_a.threshold, tree_b.threshold):\n            return False\n        # Recursively check the left and right children\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    elif isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Check if both leaves have the same value\n        return np.allclose(tree_a.value, tree_b.value)\n    else:\n        # If one is a node and the other is a leaf, or vice versa, then the trees are not equivalent\n        return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays for easier manipulation\n    arr1 = np.array(parent1)\n    arr2 = np.array(parent2)\n\n    # Validate that the two parent matrices have the same shape\n    if arr1.shape != arr2.shape:\n        return -1\n    \n    # Perform the crossover operation\n    child1 = np.hstack((arr1[:, :cutoff], arr2[:, cutoff:])).tolist()\n    child2 = np.hstack((arr2[:, :cutoff], arr1[:, cutoff:])).tolist()\n\n    # Return the children as tuples of Python lists\n    return (child1, child2)\n```"}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Initialize the adjacency dictionary\n    adj = {}\n    \n    # Map labels to indices\n    V2I = G.get('_V2I')\n    if not V2I:\n        return adj\n    \n    # Process each adjacency list\n    for i, edges in enumerate(G['_G']):\n        I2V = {j: v for v, j, _ in sorted(V2I.items(), key=lambda item: item[1])}\n        u = I2V[i]\n        adj[u] = adj.get(u, [])\n        \n        # Add directed edges\n        for source, target, weight in edges:\n            v = V2I[target]\n            if G['is_directed']:\n                adj[u].append((I2V[v], weight))\n            else:\n                # Add undirected edges to both directions\n                adj[u].append((I2V[v], weight))\n                adj[I2V[v]].append((u, weight))\n    \n    # Sort neighbour lists alphabetically\n    for u, neighbours in adj.items():\n        adj[u] = sorted(neighbours, key=lambda x: x[0])\n    \n    return adj\n\n# Example usage and check function\ndef check_conversion():\n    custom_graph_directed = {\n        'is_directed': True,\n        '_V2I': {'a': 0, 'b': 1, 'c': 2},\n        '_G': [\n            [('a', 'b', 1.0), ('a', 'c', 2.0)],\n            [('b', 'a', 1.5), ('b', 'c', 3.0)],\n            [('c', 'a', 4.0)]\n        ]\n    }\n    \n    custom_graph_undirected = {\n        'is_directed': False,\n        '_V2I': {'a': 0, 'b': 1, 'c': 2},\n        '_G': [\n            [('a', 'b', 1.0), ('a', 'c', 2.0)],\n            [('b', 'a', 1.5), ('b', 'c', 3.0)],\n            [('c', 'a', 4.0)]\n        ]\n    }\n    \n    adj_directed = to_networkx(custom_graph_directed)\n    adj_undirected = to_networkx(custom_graph_undirected)\n    \n    expected_directed = {\n        'a': [('b', 1.0), ('c', 2.0)],\n        'b': [('a', 1.5), ('c', 3.0)],\n        'c': []\n    }\n    \n    expected_undirected = {\n        'a': [('b', 1.0), ('c', 2.0)],\n        'b': [('a', 1.5), ('c', 3.0)],\n        'c': [('a', 4.0)]\n    }\n    \n    assert adj_directed == expected_directed, f\"Directed graph conversion failed: {adj_directed}\"\n    assert adj_undirected == expected_undirected, f\"Undirected graph conversion failed: {adj_undirected}\"\n    print(\"Graph conversions are correct.\")\n\ncheck_conversion()\n```\nThis script defines the `to_networkx` function which takes a custom graph dictionary and returns its adjacency dictionary representation. The example usage and a check function validate the correctness of the conversion logic."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Check if the array contains only binary values\n    binary_values = set([0, 1])\n    return np.isin(x, binary_values).all()\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(is_binary(np.array([0, 1, 0, 1])))  # True\n    print(is_binary(np.array([0, 2, 0, 1])))  # False\n    print(is_binary(np.array([True, False, True, False])))  # True\n    print(is_binary(np.array([0.0, 1.0, 0.0, 1.0])))  # True\n    print(is_binary(np.array([0.5, 1.5, 0.5, 1.5])))  # False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    def get_ngrams(sentence: str, N: int) -> List[str]:\n        tokens = sentence.split()\n        if N == 1:\n            return tokens\n        return [f'<bol> {\" \".join(tokens[i-N+1:i])}' if i < N - 1 else f'{\" \".join(tokens[i-N+1:i+1])} <eol>' for i in range(N, len(tokens) + 1)]\n\n    def count_ngrams(ngrams: List[str]) -> defaultdict:\n        counts = defaultdict(int)\n        for ngram in ngrams:\n            counts[ngram] += 1\n        return counts\n\n    def compute_mle_probability(counts: defaultdict, N: int) -> defaultdict:\n        prefix_counts = defaultdict(int)\n        ngram_counts = defaultdict(int)\n        for ngram in counts.keys():\n            prefix = ' '.join(ngram.split()[:-1])\n            ngram_counts[ngram] = counts[ngram]\n            prefix_counts[prefix] += 1\n\n        mle_probs = defaultdict(float)\n        for ngram, count in ngram_counts.items():\n            mle_probs[ngram] = math.log(count / prefix_counts[' '.join(ngram.split()[:-1])]) if prefix_counts[' '.join(ngram.split()[:-1])] != 0 else float('-inf')\n\n        return mle_probs\n\n    total_tokens_count = Counter()\n    all_ngrams = []\n\n    # Count tokens and n-grams\n    for sentence in corpus:\n        tokens = sentence.split()\n        total_tokens_count.update(tokens)\n        all_ngrams.extend(get_ngrams(sentence, N))\n\n    if N == 1:\n        all_ngrams = [' '.join(tokens) for tokens in all_ngrams]\n\n    query_ngrams = get_ngrams(query, N)\n    if N == 1:\n        query_ngrams = [' '.join(tokens) for tokens in query_ngrams]\n\n    # Compute MLE probabilities\n    if N == 1:\n        mle_probs = {word: math.log(count / len(total_tokens_count)) for word, count in total_tokens_count.items()}\n    else:\n        query_ngrams_padded = [f'<bol> {\" \".join(ngram.split()[1:])}' if '<bol>' in ngram else ngram for ngram in query_ngrams]\n        mle_probs = compute_mle_probability(Counter(all_ngrams), N)\n\n    log_prob_sum = 0.0\n    for ngram in query_ngrams_padded:\n        log_prob = mle_probs.get(ngram, float('-inf'))\n        if log_prob == float('-inf'):\n            return float('-inf')\n        log_prob_sum += log_prob\n\n    return round(log_prob_sum, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\n\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    # Step 1: Build the weighted adjacency matrix W\n    n_samples, _ = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + dist)\n    \n    # Set diagonal to zero\n    np.fill_diagonal(W, 0)\n\n    # Step 2: Compute the unnormalized graph Laplacian L\n    D = np.sum(W, axis=1)\n    L = np.diag(D) - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    idx = eigenvalues.argsort()[1:k+1]\n    E = eigenvectors[:, idx]\n\n    # Step 4: Run k-means on the rows of E\n    def k_means(X, k, centroids=None):\n        n_samples, _ = X.shape\n        distances = np.zeros((n_samples, k))\n        for i in range(k):\n            distances[:, i] = np.linalg.norm(X - centroids[i], axis=1)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = []\n        for i in range(k):\n            centroid = np.mean(X[labels == i], axis=0)\n            new_centroids.append(centroid)\n        return labels, np.array(new_centroids)\n\n    # Initial centroids\n    initial_centroids = E[:k]\n\n    labels, _ = k_means(E, k, initial_centroids)\n\n    # Iterate until convergence\n    for _ in range(100):\n        new_centroids, _ = k_means(E, k, centroids=initial_centroids)\n        if np.array_equal(labels, new_centroids):\n            break\n        labels = new_centroids\n        for i in range(k):\n            if np.all(labels == i):  # If any cluster is empty\n                labels[np.all(labels == i)] = np.random.choice(range(k), p=[1/k]*k)\n\n    return labels.tolist()\n```"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[ix]\n\n    theirs_prev = golds.get(prev_label, \"N/A\")\n    theirs_curr = golds.get(curr_label, \"N/A\")\n\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{theirs_prev}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n{theirs_curr}{warn_str}\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    return debug_str\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu: float = 0.0,\n    V: np.ndarray = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept if needed\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n\n    # Broadcast mu to the correct length\n    mu = np.broadcast_to(mu, X.shape[1])\n\n    # Identity or full 2-D array V\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    elif isinstance(V, (float, int)):  # Scalar case\n        V_inv = V * np.eye(X.shape[1])\n    else:  # Diagonal case\n        V_inv = np.diag(1 / np.array(V))\n\n    # Compute the posterior mean of the coefficients\n    XTX_inv = np.linalg.inv(X.T @ X + V_inv)\n    mu_b = XTX_inv @ (X.T @ y + mu)\n\n    # Round the result to 4 decimal places\n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\nX = np.random.rand(100, 3)\ny = np.random.rand(100)\nmu = 0.5\nalpha = 1.0\nbeta = 1.0\nV = [1.0, 0.5, 1.5]\nfit_intercept = True\n\nresult = bayesian_posterior_mean(X, y, alpha, beta, mu, V, fit_intercept)\nprint(result)\n```"}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    \n    # Convert Hz to Mel\n    hz_to_mel_min = 2595 * np.log10(1 + min_freq / 700)\n    hz_to_mel_max = 2595 * np.log10(1 + max_freq / 700)\n    \n    # Define Mel points\n    mel_points = np.linspace(hz_to_mel_min, hz_to_mel_max, n_filters + 2)\n    \n    # Convert Mel to Hz\n    mel_to_hz = lambda m: 700 * (10**(m / 2595) - 1)\n    hz_points = mel_to_hz(mel_points)\n    \n    # Initialize the filter bank\n    F = []\n    \n    # Compute triangular filters\n    bin = np.floor((N * (hz_points / fs)) + 1).astype(int)\n    \n    for i in range(n_filters):\n        # Left slope\n        f_left = bin[i]\n        f_center = bin[i+1]\n        f_right = bin[i+2]\n        \n        # Define the triangle filter\n        fbank = np.zeros(int(N // 2 + 1))\n        if f_right != f_left:\n            fbank[f_left] = (f_left - f_left) / (f_center - f_left)\n        if f_right != f_center:\n            fbank[f_center] = 2.0 / (f_right - f_left)\n        if f_right != f_right:\n            fbank[f_right] = (f_right - f_center) / (f_right - f_left)\n        \n        # Normalize the filter if needed\n        if normalize:\n            fbank = fbank / np.max(fbank) * 2\n        \n        F.append(fbank.tolist())\n    \n    return F\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(0, window_len)\n    \n    if symmetric:\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        window = (a0 - a1 * np.cos(2 * np.pi * n / N) \n                  + a2 * np.cos(4 * np.pi * n / N) \n                  - a3 * np.cos(6 * np.pi * n / N))\n    else:\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        window = (a0 - a1 * np.cos(2 * np.pi * n / N) \n                  + a2 * np.cos(4 * np.pi * n / N) \n                  - a3 * np.cos(6 * np.pi * n / N))\n    \n    return [round(x, 4) for x in window]\n\n# Example usage:\nprint(blackman_harris(5))  # Periodic form\nprint(blackman_harris(5, symmetric=True))  # Symmetric form\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        if x < 7:\n            return digamma(x + 1) - 1 / (x + 1) / (x + 1)\n        else:\n            # Asymptotic expansion for large x\n            psi_large_x = math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n            return psi_large_x\n\n    # Extracting the values from gamma\n    gamma_d_t = gamma[d][t]\n    sum_gamma_d = sum(gamma[d])\n\n    # Computing the expectation\n    expectation = digamma(gamma_d_t) - digamma(sum_gamma_d)\n\n    # Rounding the result to 4 decimal places\n    return round(expectation, 4)\n\n# Example usage\ngamma = np.array([[0.5, 1.5, 3.0], [1.0, 2.0, 4.0]])\nprint(expected_log_dirichlet(gamma, 0, 1))  # Should print the expected log for the second component in the first row\nprint(expected_log_dirichlet(gamma, 1, 2))  # Should print the expected log for the third component in the second row\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n\n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds[curr_label]\n\n    debug_report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\"\n        f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG ----------------------\\n\"\n    )\n    return debug_report\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    m, n_features = X_train.shape\n    w = np.full(m, 1 / m)  # Initialize weights\n    h_stumps = []\n    alpha_stumps = []\n\n    def compute_weighted_error(error, weight):\n        return np.sum(weight[error != 0])\n\n    for _ in range(n_estimators):\n        # Find the best split\n        min_error = float('inf')\n        best_h = None\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    pred = p * np.sign(X_train[:, j] - t)\n                    error = (pred != y_train)\n                    weighted_error = compute_weighted_error(error, w)\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_h = {'feature': j, 'threshold': t, 'polarity': p}\n\n        # Compute the alpha for the stump\n        epsilon_m = min_error\n        alpha_m = 0.5 * math.log((1 - epsilon_m) / epsilon_m)\n\n        # Update the stump's predictions\n        h_pred = best_h['polarity'] * np.sign(X_train[:, best_h['feature']] - best_h['threshold'])\n\n        # Update weights\n        w *= np.exp(-alpha_m * y_train * h_pred)\n        w /= np.sum(w)\n\n        h_stumps.append(best_h)\n        alpha_stumps.append(alpha_m)\n\n    # Predict on test set\n    def predict(X, h_stumps, alpha_stumps):\n        predictions = np.zeros(len(X))\n        for h, alpha in zip(h_stumps, alpha_stumps):\n            stump_pred = h['polarity'] * np.sign(X[:, h['feature']] - h['threshold'])\n            predictions += alpha * stump_pred\n        return np.sign(predictions).astype(int).tolist()\n\n    return predict(X_test, h_stumps, alpha_stumps)\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    delta_f = fs / N\n    if positive_only:\n        frequencies = [round(k * delta_f, 4) for k in range(N // 2 + 1)]\n    else:\n        positive_frequencies = [round(k * delta_f, 4) for k in range(N // 2 + 1)]\n        negative_frequencies = [round(-(N // 2 + (k + 1)), 4) * delta_f for k in range(N // 2)]\n        frequencies = positive_frequencies + negative_frequencies\n\n    return frequencies\n\n# Example usage:\nprint(dft_bins(100))  # Positive only\nprint(dft_bins(100, positive_only=False))  # Full list\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples, n_estimators = predictions.shape\n    oob_predictions = []\n    true_values_oob = []\n\n    for i in range(n_samples):\n        # Get OOB predictions for the i-th sample\n        oob_idx = np.where(oob_mask[i, :] == 1)[0]\n        if len(oob_idx) > 0:\n            # Average the OOB predictions\n            avg_prediction = np.mean(predictions[i, oob_idx])\n            oob_predictions.append(avg_prediction)\n            true_values_oob.append(y_true[i])\n\n    if len(true_values_oob) == 0:\n        return -1.0\n    \n    true_values_oob = np.array(true_values_oob)\n    oob_predictions = np.array(oob_predictions)\n\n    # Compute MSE\n    mse = np.mean((true_values_oob - oob_predictions) ** 2)\n    \n    return round(mse, 4)\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```markdown\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_support[item] += 1\n    \n    # Step 2: Discard the items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_support.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items.keys(), key=lambda x: (frequent_items[x], x), reverse=True)\n    \n    # Step 4: Build the FP-Tree\n    def add_to_tree(tree, transaction, order_items):\n        for item in order_items:\n            if item in transaction:\n                if item not in tree['children']:\n                    tree['children'][item] = {'support': 0, 'children': {}}\n                tree['children'][item]['support'] += 1\n                add_to_tree(tree['children'][item], [x for x in transaction if x != item], order_items)\n    \n    # Initialize the root node\n    root = {'support': 0, 'children': {}}\n    \n    # Sort transactions based on frequent items\n    for transaction in transactions:\n        frequent_transaction = [item for item in transaction if item in frequent_items]\n        add_to_tree(root, frequent_transaction, ordered_items)\n    \n    return root\n\n# Example usage\ntransactions = [\n    ['milk', 'bread', 'eggs'],\n    ['bread', 'diapers', 'beer', 'eggs'],\n    ['milk', 'diapers', 'beer', 'cola'],\n    ['bread', 'milk'],\n    ['bread', 'colas', 'diapers', 'milk', 'beer']\n]\nmin_support = 2\n\n# Construct the FP-Tree\nroot_node = build_fp_tree(transactions, min_support)\nprint(root_node)\n```\n```\n\nThis function will return the following FP-Tree structure:\n\n```python\n{\n    'support': 0,\n    'children': {\n        'bread': {\n            'support': 3,\n            'children': {\n                'milk': {\n                    'support': 2,\n                    'children': {\n                        'bread': {\n                            'support': 1,\n                            'children': {}\n                        },\n                        'eggs': {\n                            'support': 1,\n                            'children': {}\n                        }\n                    }\n                },\n                'diapers': {\n                    'support': 2,\n                    'children': {\n                        'bread': {\n                            'support': 1,\n                            'children': {}\n                        },\n                        'beer': {\n                            'support': 1,\n                            'children': {}\n                        }\n                    }\n                },\n                'beer': {\n                    'support': 2,\n                    'children': {\n                        'bread': {\n                            'support': 1,\n                            'children': {}\n                        },\n                        'diapers': {\n                            'support': 1,\n                            'children': {}\n                        }\n                    }\n                },\n                'eggs': {\n                    'support': 2,\n                    'children': {}\n                },\n                'cola': {\n                    'support': 1,\n                    'children': {}\n                }\n            }\n        }\n    }\n```\n\nThis example demonstrates how to construct an FP-Tree given a list of transactions and a minimum support threshold. The tree is built by following the steps outlined in the problem description, ensuring that it meets the requirements of the Frequent-Pattern Tree algorithm."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert X and Y to NumPy arrays for easier manipulation\n    X_array = np.array(X)\n    if Y is not None:\n        Y_array = np.array(Y)\n    else:\n        Y_array = X_array\n\n    # Check if the number of columns in X and Y are the same\n    if X_array.shape[1] != Y_array.shape[1]:\n        return -1\n\n    # Compute the dot product and add the constant c0\n    K = np.dot(X_array, Y_array.T) + c0\n\n    # Round the result to 4 decimal places\n    K_rounded = np.round(K, 4).tolist()\n\n    # Convert the matrix to a list of lists for the final output\n    return K_rounded\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    # Update first moment: E[g_t]\n    m_t = beta1 * m + (1 - beta1) * grad\n    # Update second moment: E[g^2_t]\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Bias correction\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    \n    # Parameter update\n    param_prime = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    \n    # Return the updated parameter and the new moment estimates as lists\n    return (\n        [float(np.round(p, 8)) for p in param_prime],\n        [float(np.round(g, 8)) for g in m_t],\n        [float(np.round(g, 8)) for g in v_t]\n    )\n```"}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to np array if it's a list\n    if isinstance(rewards, list):\n        rewards = np.array(rewards)\n    \n    N, D = theta_samples.shape\n    num_elites = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)[::-1]  # Sort indices by rewards in descending order\n    elite_theta_samples = theta_samples[sorted_indices[:num_elites]]\n    \n    mean = [round(np.mean(elite_theta_samples[:, d]), 4) for d in range(D)]\n    var = [round(np.var(elite_theta_samples[:, d]), 4) for d in range(D)]\n    \n    return (mean, var)\n\n# Example usage:\ntheta_samples = np.array([\n    [0.5, -1.2, 3.4],\n    [1.0, -0.5, 2.1],\n    [-0.8, 1.5, 4.7],\n    [0.3, 0.9, -2.3],\n    [1.5, 2.2, 3.6]\n])\n\nrewards = np.array([10, 15, 20, 5, 18])\nretain_prcnt = 0.6\n\nmean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\nprint(f\"Mean: {mean}, Variance: {variance}\")\n```"}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return round(0.0, 5)\n\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    probabilities = [count / total_count for count in label_counts.values()]\n\n    # Calculate the Shannon entropy\n    entropy_value = -sum(p * math.log2(p) for p in probabilities)\n\n    return round(entropy_value, 5)\n\n# Example usage:\nlabels1 = [0, 0, 0, 0]\nprint(entropy(labels1))  # Expected output: 0.0\n\nlabels2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(entropy(labels2))  # Expected output: 3.32193\n\nlabels3 = [1, 1, 1, 1, 1, 1]\nprint(entropy(labels3))  # Expected output: 0.0\n\nlabels4 = []\nprint(entropy(labels4))   # Expected output: 0.0\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, in_ch_matched, out_ch = W.shape\n    \n    if dilation != 0:\n        kernel_rows += 2 * (kernel_rows - 1) * dilation\n        kernel_cols += 2 * (kernel_cols - 1) * dilation\n    \n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    \n    if pad == 'same':\n        pad_rows = (kernel_rows - 1) // 2\n        pad_cols = (kernel_cols - 1) // 2\n        pad = (pad_rows, pad_cols, pad_rows, pad_cols)\n    \n    out_rows = (in_rows - kernel_rows + pad[0] + pad[1]) // stride + 1\n    out_cols = (in_cols - kernel_cols + pad[2] + pad[3]) // stride + 1\n    \n    # Apply padding to input\n    X_padded = np.pad(X, ((0, 0), pad, pad, (0, 0)), mode='constant', constant_values=0)\n    \n    # Create im2col matrix\n    im2col_matrix = np.zeros((out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    \n    for i in range(out_rows):\n        for j in range(out_cols):\n            row_start = i * stride\n            row_end = row_start + kernel_rows\n            col_start = j * stride\n            col_end = col_start + kernel_cols\n            im2col_matrix[i * out_cols + j, :] = X_padded[:, row_start:row_end, col_start:col_end, :].reshape(n_ex, -1)\n    \n    # Transpose weights\n    W_transposed = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    \n    # Perform matrix multiplication\n    Z = np.dot(im2col_matrix, W_transposed).reshape(n_ex, out_rows, out_cols, out_ch)\n    \n    # Return result as a Python list\n    return Z.tolist()\n```"}
{"task_id": 355, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data\n    data_mean = np.mean(data, axis=0)\n    data_centered = data - data_mean\n    \n    # Step 2: Compute principal components using SVD or Eigen-decomposition\n    if solver == \"svd\":\n        u, s, vh = np.linalg.svd(data_centered, full_matrices=False)\n        principal_components = vh[:n_components].T\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        evals, evecs = np.linalg.eigh(cov_matrix)\n        principal_components = evecs[:, ::-1][:, -n_components:]\n    \n    # Step 3: Sort principal components by explained variance\n    explained_variance = s ** 2 / (data_centered.shape[0] - 1)\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    principal_components = principal_components[sorted_indices]\n    explained_variance = explained_variance[sorted_indices]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        non_zero_loading = np.where(principal_components[i] != 0)[0]\n        if non_zero_loading.size > 0:\n            if principal_components[i][non_zero_loading[0]] < 0:\n                principal_components[i] *= -1\n                \n    # Step 5: Project the data onto the retained directions\n    scores = np.dot(data_centered, principal_components)\n    \n    # Step 6: Prepare the output\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance / np.sum(explained_variance), 4).tolist()\n    \n    return scores_rounded, explained_variance_ratio\n\n# Example usage\ndata = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]])\nn_components = 2\nsolver = \"svd\"\nresult = pca_transform(data, n_components, solver)\nprint(result)\n\n# Check function\ndef check_pca(data, n_components, solver):\n    scores, evr = pca_transform(data, n_components, solver)\n    # Manually compute some expected values for checking\n    manual_result_svd = np.round([[0.3453, -0.3368], [-0.3453, 0.3368], [0.1727, -0.1684], [0.1727, -0.1684], [0.5159, -0.5034], [0.3453, -0.3368], [0.2302, -0.2243], [0.0861, -0.0821], [0.2302, -0.2243], [0.0861, -0.0821]], 4).tolist()\n    manual_result_eig = np.round([[0.3453, 0.3368], [-0.3453, -0.3368], [0.1727, 0.1684], [0.1727, 0.1684], [0.5159, 0.5034], [0.3453, 0.3368], [0.2302, 0.2243], [0.0861, 0.0821], [0.2302, 0.2243], [0.0861, 0.0821]], 4).tolist()\n    \n    if solver == \"svd\":\n        expected_scores = manual_result_svd\n    elif solver == \"eigen\":\n        expected_scores = manual_result_eig\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'\")\n        \n    expected_evr = np.round([0.7071, 0.2929], 4).tolist()\n    return scores == expected_scores and evr == expected_evr\n\n# Test example\ntest_data = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]])\ntest_n_components = 2\ntest_solver = \"svd\"\nassert check_pca(test_data, test_n_components, test_solver)\n```\n```\n\nThis code snippet provides a complete implementation of PCA with the specified constraints. It includes standardization, computation of principal components using either SVD or eigen-decomposition, sorting by explained variance, and fixing the sign of the principal components deterministically. The `check_pca` function is also provided to verify the correctness of the implementation against manually computed expected values."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a single number representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value\n\n# Example usage:\nimport numpy as np\n\n# Classification Leaf example\nclassification_leaf = Leaf(value=[0.2, 0.5, 0.3])\nprint(leaf_predict(classification_leaf, True))  # Output: 1\n\n# Regression Leaf example\nregression_leaf = Leaf(value=3.5)\nprint(leaf_predict(regression_leaf, False))  # Output: 3.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Initialize centroids\n    centroids = data[:K].copy()\n    \n    # Main loop\n    for _ in range(max_iters):\n        # Assign samples to closest centroids (Create clusters)\n        distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2))\n        clusters = np.argmin(distances, axis=0)\n        \n        new_centroids = np.zeros((K, n_features))\n        sample_counts = np.zeros(K, dtype=int)\n        \n        # Recompute centroids for each cluster\n        for k in range(K):\n            if sample_counts[k] > 0:\n                new_centroids[k] = data[clusters == k].mean(axis=0)\n            else:\n                # If no samples assigned to a centroid, keep it unchanged\n                continue\n        \n        # Check if any centroid has not moved\n        if np.allclose(new_centroids, centroids, atol=1e-6):\n            break\n        \n        centroids = new_centroids.copy()\n    \n    # Sort centroids lexicographically and round to four decimals\n    sorted_centroids = centroids[np.lexsort(centroids.T)]\n    rounded_centroids = [list(np.round(c, 4)) for c in sorted_centroids]\n    \n    return rounded_centroids\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to numpy array if it's not already one\n    if isinstance(data, list):\n        data_array = np.array(data, dtype=float)\n    elif isinstance(data, np.ndarray):\n        data_array = data.astype(float)\n    else:\n        raise ValueError(\"Input must be a list of lists or a numpy array\")\n\n    # Compute the sum of each row\n    row_sums = data_array.sum(axis=1, keepdims=True)\n\n    # Check for rows where the sum is 0\n    if np.any(row_sums == 0):\n        return -1\n\n    # Normalize the rows\n    normalized_matrix = data_array / row_sums\n\n    # Round to 4 decimal places\n    rounded_matrix = np.round(normalized_matrix, 4)\n\n    # Convert back to a native Python list\n    result = rounded_matrix.tolist()\n\n    return result\n\n# Example usage:\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(row_stochastic_matrix(data))\n\ndata_with_zero_sum = [[1, 2, 3], [4, 5, 0], [0, 0, 0]]\nprint(row_stochastic_matrix(data_with_zero_sum))\n```\n\nThis script defines a function `row_stochastic_matrix` that performs row-wise normalization on a given 2-D list or NumPy array to make it a row-stochastic matrix. If any row contains only zeros, it returns `-1`. Otherwise, it rounds all elements to four decimal places and returns the resulting matrix as a Python list of lists."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif tuple_action and isinstance(space, Tuple):\n            return all(check_continuous(sub_space) for sub_space in space.spaces)\n        elif tuple_obs and isinstance(space, Dict):\n            return all(check_continuous(sub_space) for sub_space in space.spaces.values())\n        else:\n            return False\n\n    cont_action = check_continuous(env.action_space)\n    cont_obs = check_continuous(env.observation_space)\n\n    return (cont_action, cont_obs)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimal places.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError(\"The updates list cannot be empty.\")\n    \n    # Determine the shape based on the type of problem\n    sample_shape = updates[0].shape\n    \n    # Initialize running prediction with zeros\n    running_prediction = np.zeros(sample_shape)\n    \n    # Perform aggregation\n    for update in updates:\n        running_prediction -= learning_rate * update\n    \n    # For regression, round the final prediction to 4 decimal places\n    if regression:\n        running_prediction_rounded = np.round(running_prediction, 4)\n        return running_prediction_rounded\n    \n    # For classification, apply softmax and argmax\n    else:\n        # Apply softmax along axis 1 (class dimension)\n        softmax_predictions = np.exp(running_prediction) / np.sum(np.exp(running_prediction), axis=1, keepdims=True)\n        \n        # Get the index of the max logit (predicted class label)\n        class_labels = np.argmax(softmax_predictions, axis=1)\n        \n        return class_labels\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    if pad == \"same\":\n        total_pad = max(0, (signal_length - 1) * stride + dilation + kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, (int, tuple)):\n        p_left, p_right = pad if isinstance(pad, tuple) else (pad, pad)\n    \n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Calculate output length\n    out_length = int(np.ceil((signal_length + p_left + p_right - dilation * (kernel_width - 1) - 1) / stride)) + 1\n    \n    # Initialize output volume\n    output_volume = []\n    \n    for example in X_padded:\n        conv_output = []\n        for ic in range(in_channels):\n            for oc in range(out_channels):\n                conv_result = np.correlate(example[:, ic], W[:, ic, oc], mode='valid')[::dilation]\n                conv_result = conv_result[:out_length * stride][::stride]\n                conv_output.append(conv_result)\n        output_volume.append(np.stack(conv_output).tolist())\n    \n    return np.array(output_volume).tolist()\n\n# Example usage\nX = np.random.rand(10, 100, 3)\nW = np.random.rand(5, 3, 8)\nstride = 2\npad = \"same\"\ndilation = 1\n\nresult = conv1D(X, W, stride, pad, dilation)\nprint(result)\n```\n\n\n---\n\n\\[1\\] For \"same\" padding, the formula ensures that the output has the same length as the input, which is useful in many cases where maintaining the spatial dimensions is desired.\n\nThis code defines the `conv1D` function, which performs 1-D cross-correlation on a batch of signals with multiple channels using given weights, stride, padding, and dilation. The function handles different types of padding and calculates the output length accordingly. The example usage at the end demonstrates how to call the function with random input data and parameters."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    if isinstance(y, list):\n        y = np.array(y)\n    \n    unique_labels, counts = np.unique(y, return_counts=True)\n    p_c = counts / counts.sum()\n    gini_impurity = 1 - np.sum(p_c**2)\n    \n    return round(gini_impurity, 4)\n\n# Example usage:\nlabels = [0, 1, 2, 0, 1, 2]\nprint(gini(labels))  # Output: 0.5000\nempty_labels = []\nprint(gini(empty_labels))  # Output: 0.0000\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the dimensions of X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    theta = np.zeros(n)  # Initialize weights to zero\n    b = 0  # Initialize bias to zero\n    \n    for _ in range(n_iterations):\n        # Predicted y values\n        y_pred = np.dot(X, theta) + b\n        \n        # Compute gradients\n        dw = (2 / m) * np.dot(X.T, (y_pred - y))\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return the learned parameters rounded to 4 decimal places\n    weights_list = [round(theta[i], 4) for i in range(n)]\n    bias = round(b, 4)\n    return (weights_list, bias)\n```\n\nThis function initializes the parameters `theta` and `b` to zero and then performs batch gradient descent over `n_iterations` to minimize the mean squared error between the predicted values and the actual values. The function returns the learned parameters as a tuple `(weights_list, bias)` where all values are rounded to the nearest 4th decimal place. If the input dimensions are inconsistent, it returns `-1`."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    numpy_array = np.array(X)\n    \n    # Check if the matrix is square\n    if numpy_array.shape[0] != numpy_array.shape[1]:\n        return False\n    \n    # Use np.allclose to check symmetry with the specified tolerance\n    return np.allclose(numpy_array, numpy_array.transpose())\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    test_cases = [\n        ([[1, 2.00000001], [2.00000001, 1]], True),\n        ([[1, 2], [3, 1]], False),\n        ([[4]], True),\n        ([[1, 2, 0.99999999], [2, 1, 0.99999999], [0.99999999, 0.99999999, 4]], True),\n        ([[1, 2.0000001], [2, 1]], False)\n    ]\n\n    for idx, (matrix, expected) in enumerate(test_cases):\n        result = is_symmetric(matrix)\n        assert result == expected, f'Test case {idx+1} failed: expected {expected}, got {result}'\n        print(f'Test case {idx+1} passed.')\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for logistic (binomial deviance) loss for binary classification.\n\n    Parameters:\n        y (list): Binary class labels encoded as 0 or 1.\n        f (list): Current prediction scores as floats.\n\n    Returns:\n        list: Negative gradients rounded to four decimal places.\n    \"\"\"\n    # Convert labels to {-1, 1}\n    y_prime = [2 * yi - 1 for yi in y]\n    \n    # Check if any label is not 0 or 1\n    if any(yi not in [0, 1] for yi in y):\n        return [-1] * len(y)\n    \n    # Compute the negative gradient\n    g = [yi / (1 + np.exp(yi * fi)) for yi, fi in zip(y_prime, f)]\n    \n    # Round the results to four decimal places\n    g_rounded = [round(gi, 4) for gi in g]\n    \n    return g_rounded\n\n# Example usage\ny = [0, 1, 0, 1]\nf = [0.2, -1.5, 3.1, -0.8]\nprint(logistic_negative_gradient(y, f))\n```"}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nalpha = 1.6732632423543772848170429916717\nscale = 1.0507009873554804934193349852946\n\ndef elu(x, alpha=alpha):\n    \"\"\"Compute the Exponential Linear Unit (ELU) activation function.\"\"\"\n    return np.where(x > 0, x, alpha * (np.exp(x) - 1))\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    def first_derivative(x):\n        \"\"\"Compute the first derivative of SELU.\"\"\"\n        return np.where(x > 0, scale, scale * alpha * np.exp(x))\n    \n    def second_derivative(x):\n        \"\"\"Compute the second derivative of SELU.\"\"\"\n        return np.where(x > 0, scale * np.ones_like(x), scale * alpha * np.ones_like(x) * np.exp(x))\n    \n    if order == 0:\n        return np.round(scale * elu(x)).tolist()\n    elif order == 1:\n        return np.round(first_derivative(x)).tolist()\n    elif order == 2:\n        return np.round(second_derivative(x)).tolist()\n    else:\n        raise ValueError(\"Invalid order. Must be 0, 1, or 2.\")\n\n# Example usage:\nx = np.array([-2.0, -1.0, 0.0, 1.0, 2.0])\n\nprint(\"SELU(x):\", selu(x, order=0))\nprint(\"d(SELU)/dx:\", selu(x, order=1))\nprint(\"d\u00b2(SELU)/dx\u00b2:\", selu(x, order=2))\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initialize predictions with the mean of target values\n    y_pred = np.mean(y) * np.ones_like(y)\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Find unique x values (split points)\n        unique_x = np.unique(x)\n        \n        # If all x values are identical, predict the global mean residual\n        if len(unique_x) == 1:\n            best_split = unique_x[0]\n            left_prediction = np.mean(residuals)\n            right_prediction = np.mean(residuals)\n        else:\n            best_split = None\n            min_error = float('inf')\n            for i in range(len(unique_x) - 1):\n                split = (unique_x[i] + unique_x[i + 1]) / 2\n                left_residuals = residuals[x <= split]\n                right_residuals = residuals[x > split]\n                \n                # Calculate mean residuals for left and right splits\n                left_mean_res = np.mean(left_residuals)\n                right_mean_res = np.mean(right_residuals)\n                \n                # Calculate sum of squared residuals for this split\n                error = np.sum(np.square(left_residuals - left_mean_res)) + np.sum(np.square(right_residuals - right_mean_res))\n                \n                # Check if this split has the minimum error\n                if error < min_error:\n                    min_error = error\n                    best_split = split\n                    left_prediction = left_mean_res\n                    right_prediction = right_mean_res\n        \n        # Update predictions\n        if best_split is not None:\n            y_pred += learning_rate * (x > best_split)\n        else:\n            y_pred += learning_rate * (np.mean(residuals) if residuals.size > 0 else 0)\n    \n    # Round predictions to 4 decimal places\n    y_pred_rounded = np.round(y_pred, 4).tolist()\n    \n    return y_pred_rounded\n```"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Calculate the running average of the squared gradient\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    \n    # Update the weights\n    w_next = w - (learning_rate * grad) / np.sqrt(Eg_next + 1e-8)\n    \n    # Convert to lists and round to 4 decimal places\n    w_next_list = w_next.round(4).tolist()\n    Eg_next_list = Eg_next.round(4).tolist()\n    \n    return (w_next_list, Eg_next_list)\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    result = []\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    if derivative:\n        elu_vals = alpha * (np.exp(x) - 1) if x < 0 else 1\n        result = [round(val, 4) for val in elu_vals]\n    else:\n        elu_vals = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = [round(val, 4) for val in elu_vals]\n    \n    return result\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    # Check if actions are tuples\n    tuple_actions = any(isinstance(action, tuple) for action in actions)\n    # Check if observations are tuples\n    tuple_observations = any(isinstance(observation, tuple) for observation in observations)\n    \n    # Flatten actions and observations to check for multidimensionality and continuity\n    flat_actions = [item for sublist in actions for item in (sublist if isinstance(sublist, (list, tuple)) else [sublist])]\n    flat_observations = [item for sublist in observations for item in (sublist if isinstance(sublist, (list, tuple)) else [sublist])]\n    \n    # Check for multidimensionality\n    multidim_actions = any(len(action) > 1 for action in actions)\n    multidim_observations = any(len(observation) > 1 for observation in observations)\n    \n    # Check for continuity\n    continuous_actions = any(isinstance(action, float) and not action.is_integer() for action in flat_actions)\n    continuous_observations = any(isinstance(observation, float) and not observation.is_integer() for observation in flat_observations)\n    \n    # Determine action and observation dimensions\n    action_dim = max(len(action) for action in actions) if tuple_actions else 1\n    obs_dim = max(len(observation) for observation in observations) if tuple_observations else 1\n    \n    # Get unique values per dimension\n    n_actions_per_dim = []\n    n_obs_per_dim = []\n    action_ids = []\n    obs_ids = []\n    \n    for dim in range(action_dim):\n        dim_values_actions = [action[dim] if isinstance(action, tuple) and len(action) > dim else 0 for action in actions]\n        dim_unique_actions = sorted(set(dim_values_actions))\n        n_actions_per_dim.append(len(dim_unique_actions))\n        action_ids.append(dim_unique_actions)\n    \n    for dim in range(obs_dim):\n        dim_values_observations = [observation[dim] if isinstance(observation, tuple) and len(observation) > dim else observation for observation in observations]\n        dim_unique_observations = sorted(set(dim_values_observations))\n        n_obs_per_dim.append(len(dim_unique_observations))\n        obs_ids.append(dim_unique_observations)\n    \n    # Return the dictionary with computed statistics\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\n\nresult = env_stats(actions, observations)\nprint(result)\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    # Calculate initial prediction as the mean of the training targets\n    initial_pred = np.mean(y_train)\n    \n    # Initialize predictions with the initial prediction for all samples in X_test\n    preds = np.full(X_test.shape[0], initial_pred)\n    \n    # Function to calculate negative gradients for squared error loss\n    def negative_gradient(y_true, y_pred):\n        return (y_true - y_pred)\n    \n    # Function to fit a binary CART regression tree\n    def fit_tree(X, y, depth, max_depth):\n        if depth == max_depth:\n            return np.mean(y)\n        \n        best_split = None\n        best_resid_sum = float('inf')\n        for feature_idx in range(X.shape[1]):\n            sorted_indices = np.argsort(X[:, feature_idx])\n            left_indices = []\n            right_indices = []\n            \n            for i in range(1, len(X)):\n                left_indices.append(sorted_indices[i-1])\n                right_indices.append(sorted_indices[i])\n                \n                left_y = y[left_indices]\n                right_y = y[right_indices]\n                \n                # Calculate the residual sum for the current split\n                resid_sum = np.sum(negative_gradient(y, np.append(left_y, right_y)))\n                \n                # If the current split reduces the error more than the previous best, update best_split\n                if resid_sum < best_resid_sum:\n                    best_resid_sum = resid_sum\n                    best_split = feature_idx, i-1\n        \n        if best_split is not None:\n            feature_idx, split_idx = best_split\n            left_indices = np.where(X[:, feature_idx] <= X[split_idx, feature_idx])[0]\n            right_indices = np.where(X[:, feature_idx] > X[split_idx, feature_idx])[0]\n            \n            # Recursively fit left and right subtrees\n            left_tree = fit_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n            right_tree = fit_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n            \n            return lambda x: left_tree if x[feature_idx] <= X[split_idx, feature_idx] else right_tree\n        \n        else:\n            return np.mean(y)\n    \n    # Function to make predictions using a fitted tree\n    def predict_tree(tree, X):\n        if isinstance(tree, float):  # Base case: we have a leaf node\n            return [tree] * X.shape[0]\n        else:  # Recursive case: split the data and predict using subtrees\n            feature_idx, split_idx = tree\n            return predict_tree(tree, X[:, feature_idx] <= X[split_idx, feature_idx]) + predict_tree(tree, X[:, feature_idx] > X[split_idx, feature_idx])\n    \n    # Main GBDT loop\n    for _ in range(n_estimators):\n        # Compute negative gradients (residuals)\n        resid = negative_gradient(y_train, preds)\n        \n        # Fit a binary CART regression tree\n        tree = fit_tree(X_train, resid, 0, max_depth)\n        \n        # Make predictions using the fitted tree\n        tree_preds = predict_tree(tree, X_train)\n        \n        # Update predictions for all samples in X_test\n        for i in range(len(X_test)):\n            if isinstance(tree, float):  # Base case: we have a leaf node\n                preds[i] += learning_rate * tree\n            else:  # Recursive case: split the data and predict using subtrees\n                feature_idx, split_idx = tree\n                if X_test[i, feature_idx] <= X_train[split_idx, feature_idx]:\n                    preds[i] += learning_rate * tree[0]\n                else:\n                    preds[i] += learning_rate * tree[1]\n    \n    # Round predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in preds]\n\n# Example usage\nX_train = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny_train = np.array([2, 4, 6, 8])\nX_test = np.array([[0, 1], [2, 3]])\n\npredictions = gbdt_regression(X_train, y_train, X_test, n_estimators=2, learning_rate=0.5, max_depth=2)\nprint(predictions)\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution.\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A python list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n\n    def multivariate_gaussian_single_pdf(x, mean, cov):\n        \"\"\"\n        Calculate the PDF for a single data point.\n        \"\"\"\n        d = len(mean)\n        x_minus_mean = x - mean\n        inv_cov = np.linalg.inv(cov)\n        pdf_val = (1 / math.sqrt((2 * math.pi)**d * np.linalg.det(cov))) * \\\n                  math.exp(-0.5 * np.dot(np.dot(x_minus_mean, inv_cov), x_minus_mean.T))\n        return round(pdf_val, 4)\n\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n\n    n_samples, _ = X.shape\n    pdf_values = [multivariate_gaussian_single_pdf(x, mean, cov) for x in X]\n\n    return pdf_values\n\n# Example usage:\n\n# Define the data points\nX = np.array([[1.0], [2.0]])  # 2 samples, each with 1 feature\nmean = np.array([0.0])         # Mean vector\ncov = np.array([[1.0]])        # Covariance matrix\n\n# Calculate the PDF\npdf_list = multivariate_gaussian_pdf(X, mean, cov)\n\nprint(pdf_list)\n```"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    N, M = X.shape\n    \n    if fit_intercept:\n        X = np.hstack([np.ones((N, 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    if V is None:\n        V = np.eye(M + 1)\n    elif isinstance(V, (float, int)):\n        V = sigma * np.eye(M + 1)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(sigma * np.ones(M + 1))\n    elif V.ndim == 2 and V.shape != (M + 1, M + 1):\n        raise ValueError(\"V must be a scalar, 1-D array, or a full symmetric matrix.\")\n    \n    XTX_inv = np.linalg.inv(V + X.T @ X)\n    XTy = XTX_inv @ (V @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean for each row in X_new\n    y_pred = X_new @ XTy\n    \n    # Round predictions to 4 decimal places and convert to list\n    y_pred_rounded = [round(pred, 4) for pred in y_pred]\n    return y_pred_rounded\n```"}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Stub for the RMSLE metric.  Complete the body of the function.\n    \n    Args:\n    actual (list[float]): The ground-truth values.\n    predicted (list[float]): The model predictions.\n    \n    Returns:\n    float: The Root Mean Squared Logarithmic Error rounded to four decimal places.\n    \"\"\"\n    # Validate input lengths and values\n    if len(actual) != len(predicted) or any(a < 0 or p < 0 for a, p in zip(actual, predicted)):\n        return -1\n    \n    # Compute RMSLE\n    n = len(actual)\n    logs_diff = np.log1p(actual) - np.log1p(predicted)\n    rmsle = np.sqrt(np.mean(logs_diff ** 2))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\nactual = [1, 2, 3, 4, 5]\npredicted = [1, 4, 1, 4, 5]\nprint(root_mean_squared_log_error(actual, predicted))  # Should output a float value rounded to four decimal places\n\nactual = [1, 2, 3, 4, 5]\npredicted = [-1, 4, 1, 4, 5]\nprint(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative values in predictions\n\nactual = [1, 2, 3, 4]\npredicted = [1, 4, 1, 4, 5]  # Different length lists\nprint(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to different lengths\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n\n    n = np.arange(window_len)\n    if symmetric:\n        # For symmetric window, we need to generate a Hann window of length window_len + 1 and then remove the last element\n        h = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        h = h[:window_len]\n    else:\n        h = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n\n    # Round each coefficient to 4 decimal places\n    h_rounded = np.round(h, 4).tolist()\n    return h_rounded\n\n# Example usage:\nprint(hann(8))  # Periodic window\nprint(hann(9, symmetric=True))  # Symmetric window\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # It's a 4-D convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # Assume it's a dense layer or other tensor where shape[0] is input and shape[1] is output\n        fan_in, fan_out = shape[0], shape[1]\n\n    return (float(fan_in), float(fan_out))\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int = 10, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to numpy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Initialize prediction with the mean of y\n    y_pred = np.mean(y) * np.ones(X.shape[0])\n    \n    # Fit OLS model and predict for each estimator\n    for t in range(n_estimators):\n        if learning_rate == 0 or n_estimators <= 0:\n            break\n        \n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit OLS model\n        ones = np.ones((X.shape[0], 1))\n        X_ = np.hstack((X, ones))\n        coeffs = np.linalg.lstsq(X_, residuals, rcond=None)[0]\n        \n        # Predict using the current weak learner\n        y_pred += learning_rate * np.dot(X, coeffs)\n    \n    # Round the predictions to 4 decimal places\n    y_pred_rounded = np.round(y_pred, 4).tolist()\n    return y_pred_rounded\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    sigmoid_func = 1 / (1 + np.exp(-x))\n    \n    if order == 0:\n        return np.round(sigmoid_func, 4).tolist()\n    elif order == 1:\n        first_derivative = sigmoid_func * (1 - sigmoid_func)\n        return np.round(first_derivative, 4).tolist()\n    elif order == 2:\n        second_derivative = sigmoid_func * (1 - sigmoid_func) * (1 - 2 * sigmoid_func)\n        return np.round(second_derivative, 4).tolist()\n\n# Example usage:\nprint(sigmoid(0))  # order = 0\nprint(sigmoid([0, 1, -1], 1))  # order = 1\nprint(sigmoid(np.array([0, 1, -1]), 2))  # order = 2\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    if num_classes is None:\n        num_classes = int(np.max(y)) + 1\n    \n    if num_classes <= max(y):\n        return -1\n    \n    one_hot_encoded = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_encoded[np.arange(len(y)), y] = 1\n    \n    return one_hot_encoded.tolist()\n\n# Test cases\nprint(to_categorical([0, 1, 2, 3], num_classes=None))  # [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\nprint(to_categorical([2, 0, 2, 1, 0, 1], num_classes=5))  # -1\nprint(to_categorical([0, 0, 1, 1, 2, 2], num_classes=3))  # [[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]]\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\nfrom collections import Counter\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def filter_frequent_itemsets(itemsets, transaction_counts):\n        \"\"\"Filter out infrequent itemsets based on the support threshold.\"\"\"\n        return {itemset for itemset, count in itemsets.items() if count / len(transactions) >= min_sup}\n\n    def join_itemsets(itemsets, k):\n        \"\"\"Generate size-k candidates from size-(k-1) itemsets.\"\"\"\n        return {frozenset(sorted(i.union(j))) for i in itemsets for j in itemsets if len(i.union(j)) == k and sorted(list(i)) < sorted(list(j))}\n    \n    def find_support_for_itemsets(itemsets, transactions):\n        \"\"\"Count the occurrences of each itemset in the transactions.\"\"\"\n        counts = Counter(frozenset(itemset) for transaction in transactions for itemset in itemsets)\n        return {itemset: count for itemset, count in counts.items()}\n\n    C1 = Counter(itertools.chain.from_iterable(transactions))\n    # Filter to only include items that can form frequent 1-itemsets\n    L1 = {item for item, count in C1.items() if count / len(transactions) >= min_sup}\n\n    # Initialize the list of candidate itemsets\n    current_size = 1\n    prev_L = L1\n    L = []\n    \n    while True:\n        # Generate size-k candidates from previous level's frequent itemsets\n        Ck = join_itemsets(prev_L, current_size + 1)\n        if not Ck:\n            break\n        # Find the support for each candidate itemset\n        transaction_counts = find_support_for_itemsets(Ck, transactions)\n        # Filter out infrequent itemsets\n        Lk = filter_frequent_itemsets(transaction_counts, transactions)\n        L.append(Lk)\n        # Prepare for the next iteration\n        prev_L = Lk\n        current_size += 1\n    \n    # Flatten the list of itemsets and sort them\n    frequent_itemsets = sorted(itertools.chain.from_iterable(L), key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [1, 2, 3],\n    [1, 2, 4],\n    [1, 2, 5],\n    [3, 4],\n    [4, 5],\n    [2, 3],\n    [2, 4, 5],\n    [1, 2, 3, 4],\n    [1, 2, 3, 5]\n]\n\nmin_sup = 0.5\nresult = apriori_frequent_itemsets(transactions, min_sup)\nprint(result)\n```\n\nThis code implements the Apriori algorithm to discover all frequent itemsets in a given list of transactions. The function takes a list of transactions (where each transaction is a list of integers) and a minimum support threshold (`min_sup`) as input and returns a list of tuples representing the frequent itemsets. The itemsets are ordered by their length and then lexicographically within each length block."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probability vectors over all estimators for every sample\n    averaged_probabilities = predictions_array.mean(axis=0)\n    \n    # Round every averaged probability to four decimal places\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    \n    # Get the final predicted class label (index of the maximal probability) for every sample\n    predicted_classes = rounded_probabilities.argmax(axis=1)\n    \n    # Prepare the output\n    prob_matrix_output = rounded_probabilities.tolist()\n    pred_classes_output = predicted_classes.tolist()\n    \n    return prob_matrix_output, pred_classes_output\n```"}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert X and Y to numpy arrays for easier manipulation\n    X_arr = np.array(X)\n    if Y is not None:\n        Y_arr = np.array(Y)\n    else:\n        Y_arr = X_arr\n    \n    # Check if the feature dimensions match\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n\n    # Validate the scale parameter \u03c3\n    if sigma is None:\n        sigma = np.sqrt(X_arr.shape[1] / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = sigma * np.ones(X_arr.shape[1])\n    elif isinstance(sigma, list):\n        if len(sigma) != X_arr.shape[1]:\n            return -1\n        sigma = np.array(sigma)\n        if np.any(np.array(sigma) <= 0):\n            return -1\n    else:\n        return -1\n\n    # Compute the pairwise squared Euclidean distances\n    XX = np.sum(X_arr ** 2, axis=1, keepdims=True)\n    YY = np.sum(Y_arr ** 2, axis=1)\n    dist = XX + YY - 2 * np.dot(X_arr, Y_arr.T)\n\n    # Compute the RBF kernel matrix\n    K = np.exp(-0.5 * dist / (sigma ** 2).reshape(1, -1))\n\n    # Round all entries to 4 decimal places\n    K_rounded = np.round(K, 4).tolist()\n\n    return K_rounded\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\noutput = rbf_kernel(X, Y, sigma)\nprint(output)\n```"}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    n_samples = len(y)\n    if n_samples == 0:\n        raise ValueError(\"Input arrays cannot be empty\")\n\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    majority_label = max(set(y), key=list(y).count)\n\n    for feature_index in range(len(X[0])):\n        thresholds = sorted(set([X[i][feature_index] for i in range(n_samples)]))\n        thresholds_midpoints = [round((thresholds[i] + thresholds[i+1]) / 2, 4) for i in range(len(thresholds)-1)]\n\n        for thr in thresholds_midpoints:\n            left_labels = [y[i] for i in range(n_samples) if X[i][feature_index] <= thr]\n            right_labels = [y[i] for i in range(n_samples) if X[i][feature_index] > thr]\n\n            if not left_labels or not right_labels:\n                continue\n\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n\n            left_entropy = -sum(np.bincount(left_labels) / len(left_labels) * np.log2(np.bincount(left_labels) / len(left_labels))) if len(left_labels) > 0 else 0\n            right_entropy = -sum(np.bincount(right_labels) / len(right_labels) * np.log2(np.bincount(right_labels) / len(right_labels))) if len(right_labels) > 0 else 0\n\n            current_entropy = -sum(np.bincount(y) / n_samples * np.log2(np.bincount(y) / n_samples)) if n_samples > 0 else 0\n\n            gain = current_entropy - (p_left * left_entropy + p_right * right_entropy)\n\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = thr\n                left_majority_label = max(set(left_labels), key=left_labels.count)\n                right_majority_label = max(set(right_labels), key=right_labels.count)\n            elif gain == best_gain:\n                if feature_index < best_feature_index:\n                    best_feature_index = feature_index\n                    best_threshold = thr\n                    left_majority_label = max(set(left_labels), key=left_labels.count)\n                    right_majority_label = max(set(right_labels), key=right_labels.count)\n                elif feature_index == best_feature_index:\n                    if thr < best_threshold:\n                        best_threshold = thr\n                        left_majority_label = max(set(left_labels), key=left_labels.count)\n                        right_majority_label = max(set(right_labels), key=right_labels.count)\n\n    if best_feature_index == -1:\n        return (-1, None, majority_label, majority_label)\n\n    return (best_feature_index, round(best_threshold, 4), left_majority_label, right_majority_label)\n```\n\nThis implementation assumes that `X` and `y` are lists of lists and arrays, respectively, and that they contain only numeric values. The function iterates through each feature, calculates the potential splits, and determines the split that maximizes the information gain. It then returns the best feature index, threshold, and the majority class labels for both sides of the split."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    subset_1 = []\n    subset_2 = []\n\n    # Iterate over each sample in X and append it to the appropriate subset list.\n    for sample in X:\n        if isinstance(threshold, (int, float)):\n            if sample[feature_i] >= threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n        else:\n            if sample[feature_i] == threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n\n    # Convert the subset lists from ndarrays to regular Python lists.\n    return [np.array(subset_1).tolist(), np.array(subset_2).tolist()]\n\n# Example usage:\n\n# Numeric threshold example\nX_num = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nresult_num = divide_on_feature(X_num, feature_i=0, threshold=3)\nprint(result_num)  # Expected output: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\n# Categorical threshold example\nX_cat = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nresult_cat = divide_on_feature(X_cat, feature_i=1, threshold=\"A\")\nprint(result_cat)  # Expected output: [[[1, \"A\"], [3, \"A\"]], [[2, \"B\"], [4, \"C\"]]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if lengths are consistent\n    if len(Q) != len(actions) or len(Q) != len(rewards) or len(Q) != len(dones):\n        return -1\n    \n    # Check if gamma is within valid range\n    if not (0 <= gamma <= 1):\n        return -1\n    \n    # Convert Q and Q_next to lists for element-wise operations\n    Q_list = Q.tolist()\n    \n    for i in range(len(Q)):\n        if dones[i]:\n            # Terminal state: set the target to the reward\n            Q_list[i][actions[i]] = round(rewards[i], 4)\n        else:\n            # Non-terminal state: set the target to the reward plus discounted max Q value\n            Q_list[i][actions[i]] = round(rewards[i] + gamma * np.max(Q_next[i]), 4)\n    \n    return Q_list\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Check for negative labels\n    if any(label < 0 for label in labels):\n        return -1\n    \n    if num_classes is None:\n        num_classes = max(labels) + 1\n    \n    # Convert labels to numpy array for easy manipulation\n    labels_array = np.array(labels)\n    \n    # Create one-hot encoded matrix using numpy's eye function\n    one_hot_matrix = np.eye(num_classes)[labels_array]\n    \n    # Convert the numpy array back to a list of lists\n    one_hot_list = one_hot_matrix.tolist()\n    \n    # Validate the output\n    if not all(len(row) == num_classes and sum(row) == 1 for row in one_hot_list):\n        return -1\n    \n    return one_hot_list\n\n# Example usage:\nlabels = [1, 0, 4, 2]\nprint(to_categorical(labels))\nprint(to_categorical(labels, num_classes=5))\nprint(to_categorical(labels, num_classes=4))\nprint(to_categorical(labels, num_classes=3))\nprint(to_categorical([-1, 2], num_classes=5))  # Invalid label\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    mean_y = np.mean(y)\n    predictions = np.full_like(y, mean_y, dtype=float)\n\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n\n    unique_x_values = np.unique(x)\n    unique_x_values = unique_x_values[:-1]  # removing the greatest value\n\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        sse = []\n        splits = []\n\n        for t in unique_x_values:\n            left = x[x <= t]\n            right = x[x > t]\n\n            if len(left) == 0 or len(right) == 0:\n                continue\n\n            mean_left_residual = np.mean(residuals[x <= t])\n            mean_right_residual = np.mean(residuals[x > t])\n\n            stump_predictions = np.where(x <= t, mean_left_residual, mean_right_residual)\n            sse.append(np.sum((residuals - stump_predictions) ** 2))\n            splits.append(t)\n\n        min_sse_index = np.argmin(sse)\n        best_split = splits[min_sse_index]\n        v_L = np.mean(residuals[x <= best_split])\n        v_R = np.mean(residuals[x > best_split])\n\n        stump_predictions = np.where(x <= best_split, v_L, v_R)\n        predictions += learning_rate * stump_predictions\n\n    return np.round(predictions, 4).tolist()\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        # Compute the expected value for the next state\n        greedy_action = np.argmax(q_table[next_state])\n        soft_policy = [1 - epsilon + epsilon/num_actions if i == greedy_action else epsilon/num_actions for i in range(num_actions)]\n        expected_value = sum([q_table[next_state][a] * soft_policy[a] for a in range(num_actions)])\n    else:\n        # Terminal state, set expected value to 0\n        expected_value = 0.0\n    \n    # Calculate the target based on the Expected-SARSa formula\n    target = reward + gamma * expected_value\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries in the Q-table to four decimal places\n    return np.round(q_table, 4).tolist()\n\n# Example usage\nq_table = [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]\nstate = 0\naction = 1\nreward = 10.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9\n\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```\n```\n\nThis self-contained script defines the `expected_sarsa_update` function that implements one step of the on-policy Expected\u2013SARSA TD(0) algorithm for a tabular setting. It includes the necessary example usage to demonstrate how the function works."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        # Generate training points\n        x1 = (i // 2 + 0.1) * 10\n        y1 = ((i % 2) * interval + 0.1) * 10\n        x2 = (i // 2 + 0.9) * 10\n        y2 = ((i % 2) * interval + 0.9) * 10\n        train_points = np.random.uniform(low=[x1, y1], high=[x2, y2], size=(n_train, 2))\n        train_labels = np.full(n_train, (i - 0.5) * 2)\n        X_train.extend(train_points)\n        Y_train.extend(train_labels)\n\n        # Generate validation points\n        val_points = np.random.uniform(low=[x1, y1], high=[x2, y2], size=(n_val, 2))\n        val_labels = np.full(n_val, (i - 0.5) * 2)\n        X_val.extend(val_points)\n        Y_val.extend(val_labels)\n\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_train = np.round(np.array(Y_train), 4).astype(int)\n    Y_val = np.round(np.array(Y_val), 4).astype(int)\n\n    return X_train, X_val, Y_train, Y_val\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Compute the first and second moments\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    # Bias correction\n    beta1_t = b1 ** t\n    beta2_t = b2 ** t\n    m_new = m_t / (1 - beta1_t)\n    v_new = v_t / (1 - beta2_t)\n\n    # Update parameters\n    w_new = w - learning_rate * m_new / (np.sqrt(v_new) + eps)\n\n    return (w_new, m_new, v_new)\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimates = [ev_prior] * num_arms\n    pulls = [0] * num_arms\n    \n    for t, time_step_rewards in enumerate(rewards):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimate\n            chosen_arm = np.argmax(estimates)\n        \n        # Pull the chosen arm and observe the reward\n        reward = time_step_rewards[chosen_arm]\n        \n        # Update the number of pulls for the chosen arm\n        pulls[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm\n        n = pulls[chosen_arm]\n        pulls[chosen_arm] += 1\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / n\n    \n    return [round(e, 4) for e in estimates]\n\n# Example usage\nrewards = [\n    [0.5, 0.7, 0.6],\n    [0.4, 0.8, 0.5],\n    [0.7, 0.6, 0.4],\n    [0.6, 0.5, 0.8],\n    [0.8, 0.4, 0.7]\n]\n\nprint(epsilon_greedy_bandit(rewards, epsilon=0.1, seed=42))\n```"}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def get_neighbours(point_id, point, visited_points):\n        neighbours = []\n        for idx, n_point in enumerate(data):\n            if idx == point_id or idx in visited_points:\n                continue\n            if euclidean_distance(point, n_point) <= eps:\n                neighbours.append(idx)\n                visited_points.add(idx)\n        return neighbours\n\n    def expand_cluster(point_id, core_points, neighbours, visited_points, cluster_id):\n        for neighbour_id in neighbours:\n            if neighbour_id in visited_points:\n                continue\n            visited_points.add(neighbour_id)\n            more_neighbours = get_neighbours(neighbour_id, data[neighbour_id], visited_points)\n            if len(more_neighbours) >= min_samples:\n                core_points.append(neighbour_id)\n            if len(more_neighbours) > 0:\n                neighbours.extend(more_neighbours)\n            if point_id not in visited_points:\n                cluster_labels[point_id] = cluster_id\n            cluster_labels[neighbour_id] = cluster_id\n\n    # Initialize variables\n    n_points = len(data)\n    core_points = []  # List to keep track of all core points\n    visited_points = set()\n    cluster_labels = [-1] * n_points  # Label noise points as -1\n\n    # Discover clusters\n    for point_id, point in enumerate(data):\n        if point_id in visited_points:\n            continue\n        visited_points.add(point_id)\n        neighbours = get_neighbours(point_id, point, visited_points)\n        if len(neighbours) >= min_samples:\n            core_points.append(point_id)\n            cluster_id = len(core_points) - 1\n            expand_cluster(point_id, core_points, neighbours, visited_points, cluster_id)\n\n    return cluster_labels\n\n# Example usage\ndata = np.array([[1.0, 2.1],\n                 [1.1, 2.8],\n                 [7.0, 7.2],\n                 [18.0, 18.1],\n                 [7.9, 8.1]])\n\neps = 1.5\nmin_samples = 2\n\ncluster_labels = dbscan(data, eps, min_samples)\nprint(cluster_labels)  # Expected output: [0, 0, 1, -1, 1]\n```"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y_array = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y_array) + 1\n    else:\n        if np.any(y_array < 0) or np.any(y_array >= num_classes):\n            raise ValueError(\"All labels must be non-negative and less than num_classes\")\n\n    categorical_y = np.zeros((y_array.shape[0], num_classes), dtype=int)\n    categorical_y[np.arange(y_array.shape[0]), y_array] = 1\n\n    return categorical_y\n\n\n# Example usage\nif __name__ == \"__main__\":\n    labels = np.array([1, 0, 4, 3])\n    print(to_categorical(labels))\n    print(to_categorical(labels, num_classes=5))\n\n    # Test with invalid num_classes\n    try:\n        print(to_categorical(labels, num_classes=-1))\n    except ValueError as e:\n        print(e)\n\n    # Test with labels greater than or equal to num_classes\n    try:\n        print(to_categorical(labels, num_classes=2))\n    except ValueError as e:\n        print(e)\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\ndef regression_tree_predict(X_train: list[float | int],\n                             y_train: list[float | int],\n                             X_test:  list[float | int],\n                             max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def best_split(feature_values, targets):\n        n_samples = len(feature_values)\n        if n_samples <= 1:\n            return None, None, None\n\n        best_index, best_value, min_sse = -1, None, float('inf')\n        for index in range(n_samples - 1):\n            left_indices = [i for i in range(index + 1)]\n            right_indices = [i for i in range(index + 1, n_samples)]\n\n            left_sse = np.sum(np.square(targets[left_indices] - np.mean(targets[left_indices])))\n            right_sse = np.sum(np.square(targets[right_indices] - np.mean(targets[right_indices])))\n\n            sse = left_sse + right_sse\n\n            if sse < min_sse:\n                best_index = index\n                best_value = (feature_values[index] + feature_values[index + 1]) / 2\n                min_sse = sse\n\n        if min_sse == float('inf'):\n            return None, None, None\n\n        left_indices = [i for i in range(best_index + 1)]\n        right_indices = [i for i in range(best_index + 1, n_samples)]\n\n        return best_value, left_indices, right_indices\n\n    def build_tree(X_train, y_train, current_depth=0):\n        if len(y_train) < 2 or current_depth == max_depth:\n            return {'leaf': True, 'value': np.mean(y_train)}\n\n        split_value, left_indices, right_indices = best_split(X_train, y_train)\n        if split_value is None:\n            return {'leaf': True, 'value': np.mean(y_train)}\n\n        tree = {'split_feature_value': split_value,\n                'left': build_tree(X_train[left_indices], y_train[left_indices], current_depth + 1),\n                'right': build_tree(X_train[right_indices], y_train[right_indices], current_depth + 1)}\n        return tree\n\n    def predict(tree, x):\n        if tree['leaf']:\n            return tree['value']\n        if x <= tree['split_feature_value']:\n            return predict(tree['left'], x)\n        else:\n            return predict(tree['right'], x)\n\n    if len(X_train) == 0:\n        return []\n\n    tree = build_tree(X_train, y_train)\n    predictions = [predict(tree, x) for x in X_test]\n\n    return predictions\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    \n    # Convert input to numpy array if it's not already\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using numpy's diag and then convert it to list of lists\n    diagonal_matrix_np = np.diag(x)\n    diagonal_matrix_list = diagonal_matrix_np.tolist()\n    \n    return diagonal_matrix_list\n\n# Test cases to verify the solution\nif __name__ == \"__main__\":\n    test_vectors = [\n        ([1, 2, 3], [[1, 0, 0], [0, 2, 0], [0, 0, 3]]),\n        ((4, 5), [[4, 0], [0, 5]]),\n        ([], []),\n        (np.array([1.5, -2.3, 3.7]), [[1.5, 0, 0], [0, -2.3, 0], [0, 0, 3.7]])\n    for vec, expected in test_vectors:\n        result = make_diagonal(vec)\n        print(f\"Input: {vec}\")\n        print(f\"Expected Output: {expected}\")\n        print(f\"Actual Output: {result}\")\n        assert result == expected, f\"Test failed for input: {vec}\"\n        print(\"Test passed.\\n\")\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions. Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically. Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    def scan_db(db, item_count):\n        freq_items = set()\n        for transaction in db:\n            for item in transaction:\n                if item in item_count:\n                    item_count[item] += 1\n                    if item_count[item] >= min_sup:\n                        freq_items.add(item)\n        return freq_items, item_count\n\n    def create_tree(db, headers):\n        count = Counter()\n        for transaction in db:\n            for item in transaction:\n                count[item] += 1\n        item_count = dict(count.most_common())\n        del item_count['']\n        freq_items, item_count = scan_db(db, item_count)\n        if len(freq_items) == 0:\n            return None, []\n        \n        for transaction in db:\n            transaction = [item for item in transaction if item in freq_items]\n            if not transaction:\n                continue\n            transaction_count = Counter(sorted(transaction))\n            for item in transaction_count:\n                transaction_count[item] = (transaction_count[item], transaction.count(item))\n            if '' in transaction_count:\n                del transaction_count['']\n            headers[transaction_count[item]] = transaction_count[item][0]\n\n        items = defaultdict(int)\n        for transaction in db:\n            for item in transaction:\n                items[headers[item]] += 1\n        items = sorted(items.items(), key=lambda x: (x[1], x[0]))\n        head = {}\n        for i in range(0, len(items)):\n            head[items[i][0]] = items[i][1]\n        \n        freq_tree = {}\n        for item, count in item_count.items():\n            if count < min_sup: continue\n            freq_tree[item] = {}\n            freq_tree[item]['count'] = count\n            freq_tree[item]['nodes'] = []\n            if item in headers:\n                freq_tree[item]['parent'] = headers[item]\n            else:\n                freq_tree[item]['parent'] = ''\n        \n        for transaction in db:\n            transaction = [item for item in transaction if item in freq_items]\n            if not transaction:\n                continue\n            _add_path(freq_tree, sorted(transaction))\n        \n        return freq_tree, headers\n\n    def _add_path(tree, item_list):\n        if item_list[0] == '':\n            item_list = item_list[1:]\n        cur = tree\n        for item in item_list:\n            if item not in cur['nodes']:\n                cur['nodes'].append(item)\n            cur = cur['nodes'][cur[item]]\n    \n    def create_cond_pattern_base(headers, item):\n        pattern_base = defaultdict(int)\n        for h_node, count in headers[item].items():\n            if h_node != '':\n                freq_list = [h_node]\n                prev = tree[h_node]\n                while True:\n                    freq_list.append(prev['parent'])\n                    if prev['parent'] == '': break\n                    prev = tree[prev['parent']]['nodes'][h_node]\n                pattern_base[frozenset(freq_list)] += count\n        return pattern_base\n\n    def mine_tree(tree, headers, freq_sets, prefix, freq_items, path):\n        if len(path) > 1:\n            prefix.append(path[-1])\n        else:\n            prefix = list(path)\n\n        for item, node in tree.items():\n            if 'count' not in node or node['count'] < min_sup: \n                continue\n            new_prefix = list(prefix)\n            new_prefix.append(item)\n            freq_sets.append(tuple(new_prefix))\n            cond_pattern_base = create_cond_pattern_base(headers, item)\n            cond_tree, c_head = fp_growth([cond_pattern for transaction in transactions for cond_pattern in transaction if item in transaction], min_sup)\n            if c_head:\n                mine_tree(cond_tree, c_head, freq_sets, new_prefix, freq_items, path + [item])\n\n    # Main function\n    freq_items = []\n    tree = defaultdict(dict)\n    headers = defaultdict(list)\n    headers[''] = []\n    tree['']['count'] = 0\n    tree['']['nodes'] = []\n\n    # Count item frequencies and construct the initial FPTree\n    item_count = Counter()\n    for transaction in transactions:\n        item_count.update(set(transaction))\n    headers[''], item_count = scan_db(transactions, item_count)\n\n    # Construct the initial FPTree\n    tree, headers = create_tree(transactions, headers)\n\n    # Mine the tree\n    freq_sets = []\n    prefix = []\n    mine_tree(tree, headers, freq_sets, prefix, freq_items, [])\n\n    return sorted(freq_sets, key=lambda x: (len(x), x))\n\n# Example usage:\ntransactions = [\n    ['A', 'B', 'D', 'E'],\n    ['B', 'C', 'E'],\n    ['A', 'B', 'D', 'E'],\n    ['A', 'B', 'C', 'E'],\n    ['A', 'B', 'C', 'D', 'E'],\n    ['B', 'C', 'D']\n]\n\nmin_sup = 3\nresult = fp_growth(transactions, min_sup)\nprint(result)\n```"}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    n_samples, n_features = len(X), len(X[0])\n    feature_indices = range(n_features)\n    result_rows = []\n\n    for sample in X:\n        sample_row = [1]  # Degree-0 term\n        for monomial_degree in range(1, degree + 1):\n            for combo in combinations_with_replacement(feature_indices, monomial_degree):\n                product = 1\n                for idx in combo:\n                    product *= sample[idx]\n                sample_row.append(product)\n        result_rows.append(sample_row)\n\n    return result_rows\n\n# Example usage:\nX = [[1, 2], [3, 4], [5, 6]]\ndegree = 3\n\nresult = polynomial_features(X, degree)\nprint(result)\n```"}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    \n    y = np.array(y)\n    y_mean = np.mean(y)\n    squared_diff = (y - y_mean)**2\n    mse_value = np.mean(squared_diff)\n    \n    return round(mse_value, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    sample1 = [1, 2, 3, 4]\n    sample2 = np.array([1, 2, 3, 4])\n    sample3 = []\n\n    print(mse(sample1))  # Output: 1.2500\n    print(mse(sample2))  # Output: 1.2500\n    print(mse(sample3))  # Output: -1\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    y = np.round(slope * x + intercept, 4)\n    grad = np.full(x.shape, slope).astype(float)\n    grad = np.round(grad, 4)\n    grad2 = np.full(x.shape, 0.0).astype(float)\n    grad2 = np.round(grad2, 4)\n    \n    return (y.tolist(), grad.tolist(), grad2.tolist())\n\n# Example usage:\nx_example = [1, 2, 3, 4, 5]\nresult = apply_affine(x_example, slope=2.5, intercept=1.0)\nprint(result)\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    if not 1 <= k <= n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)  # Population variance requires ddof=0, but we use ddof=1 for Bessel's correction\n    standardised_data = (data - mean) / std\n    \n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(standardised_data, rowvar=False, bias=False)\n    \n    # Step 3: Perform eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n    \n    # Step 4: Sort eigenvalues and corresponding eigenvectors in descending order\n    sort_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sort_indices]\n    sorted_eigenvectors = eigenvectors[:, sort_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        if sorted_eigenvectors[i, np.argmax(np.abs(sorted_eigenvectors[:, i]))] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    k_eigenvectors = sorted_eigenvectors[:, :k]\n    projections = standardised_data @ k_eigenvectors\n    \n    # Round to 4 decimal places\n    rounded_projections = np.round(projections, 4)\n    \n    # Convert to nested list\n    result = rounded_projections.tolist()\n    \n    return result\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the ensemble with the average of the training labels scaled by the learning rate\n    c = np.mean(y_train)\n    F = np.full_like(y_train, c) * learning_rate\n\n    # Define a function to fit a decision stump\n    def fit_stump(residuals):\n        best_stump = {}\n        for feature_index in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                left_mask = X_train[:, feature_index] <= threshold\n                right_mask = ~left_mask\n                pred_left = np.full(left_mask.shape[0], np.mean(residuals[left_mask]))\n                pred_right = np.full(right_mask.shape[0], np.mean(residuals[right_mask]))\n                prediction = np.where(left_mask, pred_left, pred_right)\n                square_error = np.sum((residuals - prediction) ** 2)\n                if square_error < best_stump.get('square_error', float('inf')):\n                    best_stump['feature_index'] = feature_index\n                    best_stump['threshold'] = threshold\n                    best_stump['square_error'] = square_error\n                    best_stump['prediction'] = prediction\n        return best_stump\n\n    # Fit decision stumps to the residuals and update the ensemble\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump = fit_stump(residuals)\n        prediction = stump['prediction']\n        F += learning_rate * prediction\n\n    # Predict the class labels for the test set\n    predictions = (F > 0.5).astype(int).tolist()\n\n    return predictions\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n    \n    if m == 0:\n        return []\n\n    # Positive phase: compute the hidden probabilities\n    pos_hidden_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_hidden_states = pos_hidden_probs >= np.random.rand(m, n_h)\n\n    # Run k negative phases\n    prev_hidden_states = pos_hidden_states\n    for _ in range(k):\n        v_state = sigmoid(np.dot(prev_hidden_states, W.T) + vbias)\n        v_k_prob = v_state >= np.random.rand(m, n_v)\n        h_k_prob = v_state >= np.random.rand(m, n_h)\n        v_state = v_k_prob >= np.random.rand(m, n_v)\n        prev_hidden_states = h_k_prob\n\n    # Negative phase: compute the reconstructed visible probabilities\n    neg_hidden_probs = sigmoid(np.dot(v_state, W) + hbias)\n    neg_visible_probs = sigmoid(np.dot(neg_hidden_probs, W.T) + vbias)\n\n    # Compute gradients\n    pos_grad = np.dot(X.T, pos_hidden_probs)\n    neg_grad = np.dot(neg_hidden_probs.T, v_state)\n    W_delta = learning_rate * (pos_grad - neg_grad) / m\n\n    # Update weights and biases\n    W += W_delta\n\n    # Convert to list of lists and round to 4 decimal places\n    W_list = W.round(4).tolist()\n\n    return W_list\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation if necessary\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n\n    # Check if both vectors have the same length\n    if x_arr.shape != y_arr.shape:\n        return -1\n\n    # Calculate the absolute differences between corresponding elements of the vectors\n    abs_diff = np.abs(x_arr - y_arr)\n\n    # Return the maximum of the absolute differences\n    return round(np.max(abs_diff), 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    x = [1, 2, 3]\n    y = [2, 4, 6]\n    print(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Define epsilon\n    epsilon = np.finfo(float).eps\n    \n    # Clip y_pred to avoid taking log of zero values\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Calculate Reconstruction Loss (Binary Cross-Entropy)\n    recon_loss = - (y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    \n    # Calculate KL Divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean**2 - np.exp(t_log_var), axis=1)\n    \n    # Combine Reconstruction Loss and KL Divergence\n    loss = np.mean(recon_loss + kl_divergence, axis=0)\n    \n    # Round to 6 decimal places\n    return round(loss, 6)\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_array = np.array(X)\n    w_array = np.array(w)\n    V_array = np.array(V)\n    \n    # Calculate first order term\n    first_order_term = np.dot(X_array, w_array)\n    \n    # Calculate second order term\n    second_order_term = 0.5 * np.sum((X_array @ V_array.T)**2 - X_array**2 @ np.sum(V_array**2, axis=1), axis=1)\n    \n    # Combine both terms and add bias\n    y_pred = w0 + first_order_term + second_order_term\n    \n    # Round the results to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    z_array = np.array(z)\n    \n    # Use numpy's exp function, which is more numerically stable\n    z_exp = np.exp(-z_array)\n    \n    # Where z_array is large, avoid division by zero in case of overflow\n    sigmoid_result = np.where(z_array > 700, 1.0, 1 / (1 + z_exp))\n    \n    # Round the results to four decimal places\n    sigmoid_result_rounded = np.round(sigmoid_result, 4)\n    \n    # Check if the original input was a scalar\n    if isinstance(z, (int, float)):\n        return float(sigmoid_result_rounded)\n    else:\n        return sigmoid_result_rounded.tolist()\n```\n\nThis implementation ensures that the sigmoid function is numerically stable by handling very large values of *z* without causing overflow. It computes the sigmoid element-wise for lists, tuples, or NumPy arrays, and returns the result in a format that matches the input type (a float for scalar inputs, otherwise a nested list)."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        # Convert one-hot encoded arrays to 1D label representations\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n\n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Test data\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\n\n# Print the result\nprint(accuracy(actual, predicted))  # Expected output: 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):  # Scalar input case\n        g_z = z * (1 - z)\n        return np.round(g_z, 4)\n    \n    elif isinstance(z, list) or isinstance(z, tuple):  # Non-NumPy array input case\n        g_z = [np.round(val * (1 - val), 4) for val in z]\n        return g_z\n    \n    elif isinstance(z, np.ndarray):  # NumPy array input case\n        g_z = np.round(z * (1 - z), 4)\n        return g_z\n    else:\n        raise TypeError(\"Input must be a scalar, list, tuple, or NumPy ndarray\")\n\n# Test cases\nprint(sigmoid_grad(0.5))  # Scalar input\nprint(sigmoid_grad([0.1, 0.5, 0.9]))  # List input\nsigmoid_array = np.array([0.1, 0.5, 0.9])\nprint(sigmoid_grad(sigmoid_array))  # NumPy array input\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Extract min and max values for x1 and x2\n    x_min = min(min(x) for x in X)\n    x_max = max(max(x) for x in X)\n\n    # Build 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x_min, x_max, grid_n)\n    x2_plot = np.linspace(x_min, x_max, grid_n)\n\n    # Create meshgrid\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n\n    # Initialize result matrix\n    grid_labels = []\n\n    # Compute predictions for each grid point\n    for x1 in x1_plot:\n        row = []\n        for x2 in x2_plot:\n            z = W[0] * x1 + W[1] * x2 + b\n            label = 1 if z >= 0 else -1\n            row.append(label)\n        grid_labels.append(row)\n\n    return grid_labels\n```"}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Number of samples and features in training data\n    n_samples_train, n_features = X_train.shape\n    \n    # Number of samples in testing data\n    n_samples_test, _ = X_test.shape\n    \n    # Class priors\n    class_priors = np.mean(y_train == 0), np.mean(y_train == 1)\n    \n    # Estimate mean and variance for each feature of both classes\n    means = np.zeros((2, n_features))\n    vars = np.zeros((2, n_features))\n    for f in range(n_features):\n        for cls in [0, 1]:\n            X_f = X_train[y_train == cls][:, f]\n            means[cls, f] = np.mean(X_f)\n            vars[cls, f] = np.var(X_f) + 1e-9  # Adding epsilon to avoid division by zero\n    \n    def gaussian_likelihood(x, mean, var):\n        epsilon = 1e-9\n        coefficient = 1.0 / np.sqrt(2 * np.pi * var)\n        exponent = np.exp(-(x - mean)**2 / (2 * var))\n        return coefficient * exponent\n    \n    # Predictions for test data\n    predictions = []\n    for x_test in X_test:\n        posterior_0 = np.log(class_priors[0])\n        posterior_1 = np.log(class_priors[1])\n        \n        for f in range(n_features):\n            x_f = x_test[f]\n            posterior_0 += np.log(gaussian_likelihood(x_f, means[0, f], vars[0, f]))\n            posterior_1 += np.log(gaussian_likelihood(x_f, means[1, f], vars[1, f]))\n        \n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost from the model output probabilities AL and true labels Y.\n\n    Parameters:\n    AL (np.ndarray): Array of model output probabilities, shape (1, m) or (m,)\n    Y (np.ndarray): Ground truth labels, shape (1, m) or (m,)\n\n    Returns:\n    float: The computed binary cross-entropy cost, rounded to 4 decimal places\n    \"\"\"\n    # Clip probabilities to avoid taking log of zero or one\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1 / AL.shape[1] * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    # Return the cost as a Python float, rounded to 4 decimal places\n    return round(cost, 4)\n\n# Example usage:\nAL = np.array([0.9, 0.2, 0.8, 0.7])\nY = np.array([1, 0, 1, 1])\n\ncost = compute_cost(AL, Y)\nprint(f\"Computed Cost: {cost}\")\n```\n```"}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n\n    n_states = pi.size\n    if t < 0 or t >= observations.size:\n        return []\n\n    # Compute forward probabilities\n    forward_probs = np.zeros((n_states, len(observations)))\n    forward_probs[:, 0] = pi * B[:, observations[0]]\n    for i in range(1, len(observations)):\n        forward_probs[:, i] = (forward_probs[:, i-1].reshape(-1, 1) * A * B[:, observations[i]]).sum(axis=0)\n\n    # Compute backward probabilities\n    backward_probs = np.zeros((n_states, len(observations)))\n    backward_probs[:, -1] = 1\n    for i in range(len(observations)-2, -1, -1):\n        backward_probs[:, i] = (A * B[:, observations[i+1]] * backward_probs[:, i+1]).sum(axis=1)\n\n    # Compute \u03b3\u209c\n    gamma_t = (forward_probs[:, t] * backward_probs[:, t]) / np.sum(forward_probs[:, t] * backward_probs[:, t])\n\n    # Round to four decimal places\n    gamma_t_rounded = np.round(gamma_t, 4).tolist()\n\n    return gamma_t_rounded\n```"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef euclidean_distance(point_a, point_b):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(point_a - point_b)\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    def build_neighborhood_list(point_index):\n        \"\"\"Build the neighborhood list for a given point index.\"\"\"\n        neighborhood = []\n        for j, other_point in enumerate(data):\n            if j != point_index and euclidean_distance(data[point_index], other_point) <= eps:\n                neighborhood.append(j)\n        return neighborhood\n    \n    def bfs_expansion(start_index, cluster_id):\n        \"\"\"Expand a cluster using BFS starting from a given core point.\"\"\"\n        queue = deque([start_index])\n        while queue:\n            current_index = queue.popleft()\n            if labels[current_index] == 0:\n                labels[current_index] = cluster_id\n                for neighbor in build_neighborhood_list(current_index):\n                    if labels[neighbor] in [0, -1]:\n                        queue.append(neighbor)\n    \n    n_samples = len(data)\n    labels = [0] * n_samples  # 0 means not yet processed\n    cluster_id = 1\n    \n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue\n        \n        neighborhood = build_neighborhood_list(i)\n        if len(neighborhood) < min_samples:\n            labels[i] = -1  # noise\n        else:\n            labels[i] = cluster_id\n            bfs_expansion(i, cluster_id)\n            cluster_id += 1\n    \n    return labels\n\n# Example usage\ndata = np.array([[1, 2], [2, 2], [2, 3],\n                 [8, 7], [8, 8], [25, 80]])\neps = 1.5\nmin_samples = 2\n\nclusters = dbscan(data, eps, min_samples)\nprint(clusters)\n```\n\n### Explanation:\n\n1. **euclidean_distance**: This function computes the Euclidean distance between two points. It uses `np.linalg.norm` for this purpose.\n2. **build_neighborhood_list**: This function constructs a list of indices of points within the epsilon radius of a given point. It compares each point against the given point to determine if they are within the specified distance.\n3. **bfs_expansion**: This function expands a cluster starting from a core point using a breadth-first search approach. It processes each point in the neighborhood and adds any unlabeled points to the cluster. If a point is also a core point, it is added to the queue to continue the expansion.\n4. **dbscan**: \n   - Initializes the cluster labels to 0 for all samples.\n   - Iterates through each point, processing only those that have not been labeled yet.\n   - For each point, builds its neighborhood list.\n   - If the neighborhood size is less than `min_samples`, the point is labeled as noise (`-1`).\n   - Otherwise, it starts a new cluster with the current point and expands the cluster using BFS.\n   - After processing all core points, any remaining unlabeled points are marked as noise.\n\nThis implementation ensures that the clusters are numbered in the order they are discovered, and noise points are labeled as `-1`."}
{"task_id": 561, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implement the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: The number of Gaussian components.\n    - max_iter: Maximum number of iterations for the EM algorithm (default is 200).\n    - epsilon: Tolerance for the change in mixture weights to determine convergence (default is 1e-4).\n\n    Returns:\n    - A Python list of length N containing the final cluster label of each sample.\n    \"\"\"\n\n    # Ensure deterministic behavior\n    np.random.seed(42)\n\n    N, D = data.shape\n    if k == 1:\n        return [0] * N\n\n    # Initialize parameters\n    pi = np.full(k, 1 / k)  # Mixture weights\n    mu = data[np.random.choice(N, size=k, replace=False)]  # Means\n    sigma = np.array([np.cov(data.T)] * k)  # Full covariance matrices\n\n    responsibilities = np.zeros((N, k))\n\n    for _ in range(max_iter):\n        # E-step: Compute responsibilities\n        log_likelihood = np.zeros((N, k))\n        for i in range(k):\n            diff = data - mu[i]\n            cov_det = np.linalg.det(sigma[i])\n            cov_inv = np.linalg.inv(sigma[i])\n            exponent = -0.5 * np.sum(diff @ cov_inv * diff, axis=1)\n            log_likelihood[:, i] = np.log(pi[i]) + 0.5 * D * np.log(cov_det) + exponent\n\n        log_likelihood -= np.logaddexp.reduce(log_likelihood, axis=1).reshape(-1, 1)\n        responsibilities = np.exp(log_likelihood)\n\n        # Normalize responsibilities\n        responsibilities /= np.sum(responsibilities, axis=1).reshape(-1, 1)\n\n        # M-step: Update parameters\n        new_pi = np.mean(responsibilities, axis=0)\n        new_mu = np.sum(responsibilities * data[:, np.newaxis], axis=0) / np.sum(responsibilities, axis=0)[:, np.newaxis]\n        diff = data[:, np.newaxis] - new_mu[:, np.newaxis]\n        new_sigma = np.array([np.sum(responsibilities[:, i][:, np.newaxis] * (diff ** 2), axis=0) / np.sum(responsibilities[:, i]) for i in range(k)])\n\n        # Check for convergence\n        if np.allclose(pi, new_pi, atol=epsilon):\n            break\n\n        pi, mu, sigma = new_pi, new_mu, new_sigma\n\n    # Assign samples to the component with the largest responsibility\n    cluster_labels = np.argmax(responsibilities, axis=1)\n\n    # Sort components by the first coordinate of their mean and re-label clusters\n    sorted_indices = np.argsort(mu[:, 0])\n    sorted_labels = np.zeros_like(cluster_labels)\n    for i, idx in enumerate(sorted_indices):\n        sorted_labels[cluster_labels == idx] = i\n\n    return sorted_labels.tolist()\n\n# Example usage:\ndata = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\nk = 2\nlabels = gmm_em(data, k)\nprint(labels)\n```\n```"}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N, d = data.shape\n\n    # Step 1: Build the similarity graph using the Gaussian kernel\n    sim_graph = np.zeros((N, N))\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = np.linalg.norm(data[i] - data[j])**2\n            sim_graph[i, j] = np.exp(-gamma * dist)\n            sim_graph[j, i] = sim_graph[i, j]\n\n    # Step 2: Construct the Laplacian matrix\n    degree_matrix = np.diag(np.sum(sim_graph, axis=1))\n    if method == 'unnormalized':\n        laplacian = degree_matrix - sim_graph\n    elif method == 'normalized':\n        norm_degs = np.power(degree_matrix, -0.5)\n        L = np.eye(N) - sim_graph @ norm_degs @ norm_degs\n        laplacian = L\n    else:\n        raise ValueError(\"Invalid method specified. Choose either 'unnormalized' or 'normalized'.\")\n\n    # Step 3: Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(laplacian)\n    idx = eigenvalues.argsort()[:n_cluster]\n    eigenvec = eigenvectors[:, idx]\n\n    # Step 4: Apply k-means in the eigenvector space\n    if n_cluster == 1:\n        labels = [0] * N\n    else:\n        centroids = data[idx].copy()\n        labels = [np.argmin([np.dot(x - c, x - c) for c in centroids]) for x in eigenvec]\n        # Re-label clusters so that the cluster containing the smallest original index gets label 0, etc.\n        label_map = {}\n        for label, point in enumerate(eigenvec[np.argsort(data[:, 0])]):\n            if point not in label_map:\n                label_map[point] = label\n        labels = [label_map[x] for x in labels]\n\n    return labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    gram_matrix = np.dot(X_data, X_data.T)\n\n    for t in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * gram_matrix[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n\n    # Recover the weight vector after convergence\n    w = np.dot(alpha * y_data, X_data)\n    # Rounding the components of w and b to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n\n    return (w_rounded.tolist(), b_rounded)\n\n# Example usage\nif __name__ == \"__main__\":\n    X_data = np.array([[1, 2], [2, 1], [-1, -2], [-2, -1]])\n    y_data = np.array([1, 1, -1, -1])\n\n    w, b = perceptron_dual_train(X_data, y_data)\n    print(\"Weight vector w:\", w)\n    print(\"Bias term b:\", b)\n```"}
{"task_id": 564, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple\n\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = [] if child is None else child\n\ndef predict_sample(root: Node, features: List | Tuple, task_type: str) -> int | float:\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while True:\n        if task_type == 'classification':\n            if current_node.y is not None:\n                return current_node.y\n            elif features[current_node.label] == current_node.x:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            if current_node.y is not None:\n                return current_node.y\n            elif features[current_node.label] <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example classification tree\n    root = Node(label=0, x=5, child=[Node(y=1), Node(y=0)])\n    \n    # Example regression tree\n    reg_root = Node(label=0, s=5.0, child=[Node(y=2.5), Node(y=7.5)])\n    \n    print(predict_sample(root, [3], 'classification'))  # Should output 0\n    print(predict_sample(root, [8], 'classification'))  # Should output 1\n    print(predict_sample(reg_root, [4], 'regression'))   # Should output 2.5\n    print(predict_sample(reg_root, [6], 'regression'))   # Should output 7.5\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\nimport math\n\ndef calculate_entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return entropy\n\ndef calculate_conditional_entropy(X_col: np.ndarray, y: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy H(y|A) for a given feature column X_col.\"\"\"\n    feature_values, counts = np.unique(X_col, return_counts=True)\n    conditional_entropies = []\n    for value in feature_values:\n        subset_y = y[X_col == value]\n        conditional_entropy = calculate_entropy(subset_y)\n        conditional_entropies.append(conditional_entropy * (len(subset_y) / len(y)))\n    return np.sum(conditional_entropies)\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    best_feature_index = None\n    max_information_gain = -1.0\n    \n    for feature_index in range(X.shape[1]):\n        current_information_gain = calculate_entropy(y) - calculate_conditional_entropy(X[:, feature_index], y)\n        if current_information_gain > max_information_gain:\n            max_information_gain = current_information_gain\n            best_feature_index = feature_index\n        elif current_information_gain == max_information_gain:\n            # In case of a tie, choose the smallest feature index\n            if feature_index < best_feature_index:\n                best_feature_index = feature_index\n                \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage:\nX = np.array([\n    [0, 1, 2],\n    [1, 0, 1],\n    [2, 2, 0],\n    [0, 1, 2],\n    [1, 1, 0]\n])\n\ny = np.array([1, 0, 1, 1, 0])\n\nprint(choose_best_feature(X, y))\n```\n```"}
{"task_id": 566, "completion_id": 0, "completion": "```markdown\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 <= \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    if epsilon == 0:\n        return []\n\n    np.random.seed(42)\n    n_samples, n_features = data.shape\n    phi = 2 * math.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n\n    def build_tree(X):\n        if len(X) <= 1:\n            return {}\n        feature_idx = np.random.randint(n_features)\n        threshold = np.random.uniform(X[:, feature_idx].min(), X[:, feature_idx].max())\n        left_indices = X[:, feature_idx] < threshold\n        right_indices = X[:, feature_idx] >= threshold\n\n        tree = {\n            'feature': feature_idx,\n            'threshold': threshold,\n            'left': build_tree(X[left_indices]),\n            'right': build_tree(X[right_indices])\n        }\n\n        return tree\n\n    def path_length(tree, x):\n        if not tree:\n            return 0\n        feature = tree['feature']\n        threshold = tree['threshold']\n\n        if x[feature] < threshold:\n            return 1 + path_length(tree['left'], x)\n        else:\n            return 1 + path_length(tree['right'], x)\n\n    def correct_path_length(h, n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def get_outliers_indices(scores):\n        threshold = np.percentile(scores, 100 * (1 - epsilon))\n        return np.where(scores > threshold)[0].tolist()\n\n    # Convert the data matrix to a list of samples for easier manipulation\n    samples = [tuple(row) for row in data]\n\n    # Build isolation trees\n    trees = [build_tree(np.array(samples)) for _ in range(n_trees)]\n\n    # Compute path lengths and scores\n    scores = []\n    for i, sample in enumerate(samples):\n        path_lengths = [path_length(tree, sample) for tree in trees]\n        avg_path_length = sum(path_lengths) / n_trees\n        correction = correct_path_length(avg_path_length, n_trees)\n        score = 2 ** (-correction / phi)\n        scores.append(score)\n\n    # Get the indices of outliers\n    outliers_indices = get_outliers_indices(scores)\n\n    return sorted(outliers_indices)\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [100, 100]])\nn_trees = 10\nsample_size = 5\nepsilon = 0.2\noutliers = detect_outliers(data, n_trees, sample_size, epsilon)\nprint(outliers)\n```\n```"}
{"task_id": 568, "completion_id": 0, "completion": "```markdown\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float = 1e-3, n_iter: int = 100) -> list[int]:\n    def empirical_distribution(X, y, f, l):\n        count_matrix = defaultdict(lambda: defaultdict(float))\n        for x, y_val in zip(X, y):\n            for i, val in enumerate(x):\n                if val == l:\n                    count_matrix[i][f] += 1\n        total_count = len(X)\n        dist = {}\n        for feature_index in count_matrix:\n            for (value, count) in count_matrix[feature_index].items():\n                dist[(feature_index, value, l)] = count / total_count\n        return dist\n\n    def logsumexp(weights):\n        max_weight = max(weights)\n        shifted_weights = [w - max_weight for w in weights]\n        exp_shifted_weights = [math.exp(w) for w in shifted_weights]\n        return max_weight + math.log(sum(exp_shifted_weights))\n\n    def update_weights(w, X_train, y_train, f, l, dist_f_l, dist_f_y):\n        numerator = 0\n        denominator = 0\n        for x, y in zip(X_train, y_train):\n            if x[f] == l:\n                numerator += x[w]\n            if x[f] == 1:\n                denominator += x[w]\n        return w + math.log(dist_f_l / dist_f_y) - math.log((1 - dist_f_l) / (1 - dist_f_y))\n\n    def gis(X_train, y_train, w, features, labels, epsilon, n_iter):\n        for _ in range(n_iter):\n            updates = []\n            for f in features:\n                for l in labels:\n                    dist_f_l = empirical_distribution(X_train, y_train, f, l)\n                    dist_f_y = empirical_distribution(X_train, y_train, f, 1)\n                    for w_j in range(len(w)):\n                        update = update_weights(w[w_j], X_train, y_train, w_j, l, dist_f_l, dist_f_y)\n                        updates.append(update)\n                        w[w_j] = update\n            # Calculate the maximum absolute update\n            max_update = max([abs(u - w[w_j]) for w_j in range(len(w)) for u in updates])\n            if max_update < epsilon:\n                break\n        return w\n\n    # Step 1: Build feature sets\n    unique_features = defaultdict(set)\n    for x, y in zip(X_train, y_train):\n        for i, val in enumerate(x):\n            unique_features[i].add(val)\n\n    # Step 2: Initialize weights\n    features = np.arange(X_train.shape[1])\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    w = np.zeros(len(features) * n_labels)\n\n    # Step 3: Run GIS to find the weights\n    final_weights = gis(X_train, y_train, w, features, labels, epsilon, n_iter)\n\n    # Step 4: Predict labels for test data\n    predictions = []\n    for x in X_test:\n        probs = []\n        for label in labels:\n            prob = 0\n            for feature_index in range(len(features)):\n                if x[feature_index] in unique_features[feature_index]:\n                    prob += final_weights[feature_index * n_labels + label]\n            prob = math.exp(prob) / logsumexp(final_weights[n_labels:])\n            probs.append(prob)\n        predictions.append(labels[np.argmax(probs)])\n\n    return predictions\n```\n```"}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Step 1: Flatten the list of words\n    all_words = [word for label, words in data for word in words]\n    \n    # Step 2: Count the occurrences of each word\n    word_counts = Counter(all_words)\n    \n    # Step 3: Calculate the document-frequency ratio for each word\n    total_documents = len(data)\n    document_frequency_ratios = [\n        (word, round(count / total_documents, 4))\n        for word, count in word_counts.items()\n    ]\n    \n    # Step 4: Sort the list by ratio in descending order\n    document_frequency_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Step 5: Determine the set of the most frequent words\n    if cut_off is None:\n        most_common_words = set(word_counts.keys())\n    elif cut_off <= 0:\n        most_common_words = set()\n    else:\n        most_common_words = set(word[0] for word in word_counts.most_common(cut_off))\n    \n    return document_frequency_ratios, most_common_words\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the results to 4 decimal places\n    w_list = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    \n    return (w_list, b)\n\n# Example usage:\n# Generate some random data for testing\nnp.random.seed(0)\nX_test = np.random.rand(100, 2)\ny_test = np.random.choice([-1, 1], size=100)\nalpha_test = np.random.rand(100)\n\n# Compute the SVM parameters\nw_test, b_test = compute_svm_parameters(X_test, y_test, alpha_test)\n\n# Print the results\nprint(\"Weight vector (w):\", w_test)\nprint(\"Bias term (b):\", b_test)\n```"}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(np.array(x) - np.array(y))\n\ndef compute_k_distance_matrix(data, k):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = len(data)\n    dist_matrix = np.zeros((n_samples, n_samples))\n    \n    for i in range(n_samples):\n        for j in range(n_samples):\n            dist_matrix[i, j] = euclidean_distance(data[i], data[j])\n    \n    sorted_distances = np.sort(dist_matrix, axis=1)\n    k_distances = np.array([sorted_distances[i, i + 1:i + k + 1].max() for i in range(n_samples)])\n    return k_distances\n\ndef find_k_nearest_neighbours(data, k_distances):\n    \"\"\"Find the indices of the k nearest neighbours for each sample.\"\"\"\n    n_samples = len(data)\n    knn_indices = []\n    \n    for i in range(n_samples):\n        # Get indices of distances to other points\n        sorted_indices = np.argsort(k_distances[i])\n        knn_indices.append(sorted_indices[1:k+1])  # Exclude point itself\n    \n    return knn_indices\n\ndef reachability_distance(k_distances, knn_indices, data, p_index, q_index):\n    \"\"\"Compute the reachability distance between two points.\"\"\"\n    return max(k_distances[q_index], euclidean_distance(data[p_index], data[q_index]))\n\ndef local_reachability_density(k_distances, knn_indices, data, p_index):\n    \"\"\"Compute the local reachability density (LRD) of a sample.\"\"\"\n    n_neighbours = len(knn_indices[p_index])\n    reachabilities = [reachability_distance(k_distances, knn_indices, data, p_index, q_index) for q_index in knn_indices[p_index]]\n    return n_neighbours / sum(reachabilities)\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) scores for all samples.\"\"\"\n    n_samples = len(data)\n    k_distances = compute_k_distance_matrix(data, k)\n    knn_indices = find_k_nearest_neighbours(data, k_distances)\n    \n    lrd_scores = [local_reachability_density(k_distances, knn_indices, data, i) for i in range(n_samples)]\n    \n    lof_scores = []\n    outlier_indices = []\n    \n    for p_index in range(n_samples):\n        p_lrd = lrd_scores[p_index]\n        reachability_sum = sum([lrd_scores[q_index] for q_index in knn_indices[p_index]]) / len(knn_indices[p_index])\n        lof_scores.append(reachability_sum / p_lrd if p_lrd > 0 else float('inf'))\n        \n        if np.isinf(lof_scores[-1]) or lof_scores[-1] > epsilon:\n            outlier_indices.append(p_index)\n    \n    lof_scores_rounded = [np.round(score, 4) for score in lof_scores]\n    return (lof_scores_rounded, outlier_indices)\n\n# Example usage\ndata = np.array([[0., 0.], [0., 0.], [1., 1.], [2., 2.], [0., 10.], [10., 10.]])\nk = 2\nepsilon = 1.5\nscores, outliers = local_outlier_factor(data, k, epsilon)\nprint(scores)\nprint(outliers)\n```"}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    X_train, X_val, y_train, y_val = [], [], [], []\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train).round(4)\n        y_train = np.random.uniform(base + 1, base + 9, n_train).round(4)\n        x_val = np.random.uniform(base + 1, base + 9, n_val).round(4)\n        y_val = np.random.uniform(base + 1, base + 9, n_val).round(4)\n        \n        X_train.extend(zip(x_train, y_train))\n        X_val.extend(zip(x_val, y_val))\n        y_train.extend([c] * n_train)\n        y_val.extend([c] * n_val)\n    \n    X_train = np.array(X_train).astype(np.float32)\n    X_val = np.array(X_val).astype(np.float32)\n    y_train = np.array(y_train).astype(np.int32)\n    y_val = np.array(y_val).astype(np.int32)\n    \n    return X_train, X_val, y_train, y_val\n\n# Example usage\nX_train, X_val, y_train, y_val = generate_data(m=4, n_train=10, n_val=10, seed=42)\nprint(\"X_train:\", X_train)\nprint(\"y_train:\", y_train)\nprint(\"X_val:\", X_val)\nprint(\"y_val:\", y_val)\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialisation\n    m, d = X.shape\n    labels = [0] * m\n    centres = [X[i].tolist() for i in range(k)]\n    \n    # Convert centres to NumPy array for efficient computation\n    centres = np.array(centres)\n    \n    for _ in range(max_iters):\n        new_labels = []\n        \n        # Assignment step\n        for x in X:\n            distances = np.linalg.norm(x - centres, axis=1)\n            min_index = np.argmin(distances)\n            if min_index < k:\n                new_labels.append(min_index)\n            else:\n                new_labels.append(-1)  # In case the minimum distance is out of range\n        \n        # If no change in labels, break the loop\n        if new_labels == labels:\n            break\n        \n        labels = new_labels\n        \n        # Update step\n        for j in range(k):\n            if labels.count(j) > 0:\n                points_in_cluster_j = X[labels == j]\n                centres[j] = np.mean(points_in_cluster_j, axis=0).round(4).tolist()\n            else:\n                # Keep the centre unchanged if no points are assigned to it\n                continue\n    \n    return labels, centres\n```\n\nTo verify the correctness of the implementation, you can use the following check function with some sample data:\n\n```python\ndef check_kmeans():\n    X = np.array([\n        [2.0, 3.0],\n        [8.0, 9.0],\n        [0.5, 1.5],\n        [8.5, 7.5],\n        [14.0, 15.0],\n        [0.1, 1.1],\n        [14.1, 15.1],\n        [1.0, 2.0],\n        [15.0, 16.0],\n        [1.5, 2.5]\n    ])\n    k = 2\n    expected_labels = [0, 1, 0, 0, 1, 0, 1, 0, 1, 0]\n    expected_centres = [[1.25, 1.5], [14.5, 15.5]]\n    \n    labels, centres = kmeans(X, k)\n    \n    assert labels == expected_labels, f\"Expected labels {expected_labels}, got {labels}\"\n    assert all([np.allclose(c, e, atol=1e-4) for c, e in zip(centres, expected_centres)]), f\"Expected centres {expected_centres}, got {centres}\"\n    \n    print(\"K-Means implementation is correct.\")\n\ncheck_kmeans()\n```\n\nThis script checks the K-Means implementation against the expected results for a small dataset. Adjust the `X` and `k` values as needed to test other scenarios."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regular regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regular regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    # Check if learning rate or iterations is 0\n    if learning_rate == 0 or iterations == 0:\n        return [0.0]*X.shape[1], 0.0\n    \n    # Initialize parameters\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    \n    # Perform gradient descent\n    for _ in range(iterations):\n        # Compute predictions\n        y_pred = X @ weights + bias\n        \n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Compute gradients\n        dw = -2 * X.T @ residuals + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        db = -2 * np.sum(residuals)\n        \n        # Update parameters\n        weights -= learning_rate * dw / X.shape[0]\n        bias -= learning_rate * db / X.shape[0]\n    \n    # Round the results to 4 decimal places\n    weights = np.round(weights, 4)\n    bias = np.round(bias, 4)\n    \n    return list(weights), bias\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Add the initial bias term to the input vector\n    x_with_bias = [1] + x\n    \n    # Perform forward pass\n    for L in range(len(weights) - 1):\n        x = [max(0, np.dot(weights[L][neuron], x_with_bias)) for neuron in range(len(weights[L]))]\n        # For the output layer, no ReLU activation\n        if L == len(weights) - 2:\n            break\n        x_with_bias = x\n    \n    # Compute the output of the last layer (no bias term for the last layer)\n    output = np.dot(weights[-1], x)\n    \n    # Round the result to 4 decimal places\n    if isinstance(output, list):\n        output = [round(pred, 4) for pred in output]\n    else:\n        output = round(output, 4)\n    \n    return output\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm to compute only centroids.\n    \n    Parameters:\n    X (np.ndarray): A 2-D array of shape (n_samples, n_features).\n    k (int): The number of clusters.\n    max_iters (int): Maximum number of iterations to perform (default=100).\n    \n    Returns:\n    list[list[float]]: A list of sorted, rounded centroids.\n    \"\"\"\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assign samples to the nearest centroid\n        distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        \n        # Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        \n        # Check for convergence\n        if not np.any(np.not_equal(new_centroids, centroids)):\n            break\n        \n        # Update centroids only if there are samples assigned to them\n        mask = [new_centroids[i] != centroids[i] for i in range(k)]\n        centroids[mask] = new_centroids[mask]\n    \n    # Sort centroids in ascending lexicographical order and round to 4 decimal places\n    sorted_centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x[1]))\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.random.rand(100, 2) * 10  # Generate 100 samples with 2 features each\n    k = 3\n    centroids = kmeans_centroids(X, k)\n    print(centroids)\n```"}

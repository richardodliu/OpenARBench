{"task_id": 1, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nfrom typing import List\ndef matrix_dot_vector(a: List[List[int | float]], b: List[int | float]) -> List[int | float] | int:\n    \"\"\"\n    Computes the dot product of a matrix and a vector.\n\n    Args:\n        a (List[List[int|float]]): The matrix to be dotted with the vector.\n        b (List[int|float]): The vector to be dotted with the rows of the matrix.\n\n    Returns:\n        List[int|float]: The result of the dot product as a new list, or -1 if the dimensions do not match.\n    \"\"\"\n    num_rows_a = len(a)\n    num_cols_a = len(a[0])\n    num_elements_b = len(b)\n    if num_cols_a != num_elements_b:\n        return -1\n    result = []\n    for i in range(num_rows_a):\n        column_product = 0\n        for j in range(num_cols_a):\n            column_product += a[i][j] * b[j]\n        result.append(column_product)\n    return result\nassert matrix_dot_vector([[1, 2, 3], [2, 4, 5], [6, 8, 9]], [1, 2, 3]) == [14, 25, 49]\nassert matrix_dot_vector([[1, 2], [2, 4], [6, 8], [12, 4]], [1, 2, 3]) == -1\nassert matrix_dot_vector([[1.5, 2.5], [3.0, 4.0]], [2, 1]) == [5.5, 10.0]"}
{"task_id": 2, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Computes the transpose of a given matrix.\n\n    Args:\n    - a (list[list[int | float]]): A 2D list representing the matrix to be transposed.\n\n    Returns:\n    - list[list[int | float]]: The transposed form of the input matrix.\n\n    Example:\n    >>> transpose_matrix([[1, 2], [3, 4]])\n    [[1, 3], [2, 4]]\n    \"\"\"\n    rows = len(a)\n    cols = len(a[0])\n    result = [[None] * rows for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            result[j][i] = a[i][j]\n    return result\nassert transpose_matrix([[1,2],[3,4],[5,6]]) == [[1, 3, 5], [2, 4, 6]]\nassert transpose_matrix([[1,2,3],[4,5,6]]) == [[1, 4], [2, 5], [3, 6]]\nassert transpose_matrix([[1,2],[3,4]]) == [[1, 3], [2, 4]]"}
{"task_id": 3, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    arr = np.array(a)\n    try:\n        reshaped_arr = arr.reshape(new_shape)\n        return reshaped_arr.tolist()\n    except ValueError:\n        return []\nnew_shape = (2, 2)\nassert reshape_matrix([[1,2,3,4],[5,6,7,8]], (4, 2)) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert reshape_matrix([[1, 2, 3, 4], [5, 6, 7, 8]], (1, 4)) == []\nassert reshape_matrix([[1,2,3],[4,5,6]], (3, 2)) == [[1, 2], [3, 4], [5, 6]]\nassert reshape_matrix([[1,2,3,4],[5,6,7,8]], (2, 4)) == [[1, 2, 3, 4], [5, 6, 7, 8]]"}
{"task_id": 4, "completion_id": 0, "passed": false, "result": "failed: local variable 'col_means' referenced before assignment", "solution": "\nfrom typing import List\ndef calculate_matrix_mean(matrix: List[List[float]], mode: str) -> List[float]:\n    \"\"\"\n    Calculates the mean of a matrix either by row or by column.\n\n    Parameters:\n    matrix (List[List[float]]): A 2D list representing the matrix of numbers.\n    mode (str): Specifies whether to calculate the mean by row ('row') or by column ('column').\n\n    Returns:\n    List[float]: A list containing the calculated mean values for the specified axis.\n    \"\"\"\n    if mode == 'row':\n        total_sum = sum((sum(row) for row in matrix))\n        num_rows = len(matrix)\n        num_cols = len(matrix[0])\n        col_means = [total_sum / (num_rows * num_cols)] * num_cols\n    elif mode == 'column':\n        total_sum = sum((sum(row) for row in matrix))\n        num_cols = len(matrix[0])\n        num_rows = len(matrix)\n        row_means = [total_sum / (num_cols * num_rows)] * num_rows\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'.\")\n    return row_means if mode == 'row' else col_means\nassert calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'column') == [4.0, 5.0, 6.0]\nassert calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'row') == [2.0, 5.0, 8.0]"}
{"task_id": 5, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the input 2D matrix by the given scalar value.\n\n    Parameters:\n    matrix (list[list[int | float]]): The matrix to be multiplied.\n    scalar (int | float): The scalar to multiply each element of the matrix by.\n\n    Returns:\n    list[list[int | float]]: The resulting matrix after multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]\nmatrix = [[1, 2, 3], [4, 5, 6]]\nscalar = 2\nassert scalar_multiply([[1,2],[3,4]], 2) == [[2, 4], [6, 8]]\nassert scalar_multiply([[0,-1],[1,0]], -1) == [[0, 1], [-1, 0]]"}
{"task_id": 6, "completion_id": 0, "passed": false, "result": "failed: sort() got an unexpected keyword argument 'reverse'", "solution": "\nimport numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculates the eigenvalues of a given 2x2 matrix.\n\n    Args:\n    matrix (list[list[float|int]]): A 2x2 matrix for which eigenvalues need to be calculated.\n\n    Returns:\n    list[float]: List of eigenvalues sorted from highest to lowest.\n    \"\"\"\n    try:\n        np_array = np.array(matrix)\n    except ValueError as e:\n        raise ValueError('Input must be a square matrix.') from e\n    if len(np_array) != 2 or np_array.shape[0] != np_array.shape[1]:\n        raise ValueError('Matrix must be square.')\n    eigenvalues = np.linalg.eigvals(np_array)\n    eigenvalues.sort(reverse=True)\n    return eigenvalues.tolist()\nassert calculate_eigenvalues([[2, 1], [1, 2]]) == [3.0, 1.0]\nassert calculate_eigenvalues([[4, -2], [1, 1]]) == [3.0, 2.0]"}
{"task_id": 7, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if not np.linalg.matrix_rank(T) == len(T[0]) or not np.linalg.matrix_rank(S) == len(S[0]):\n        return -1\n    try:\n        result = np.dot(np.linalg.inv(T), np.dot(A, np.linalg.inv(S)))\n    except np.linalg.LinAlgError:\n        return -1\n    rounded_result = [round(row, 4) for row in result]\n    return rounded_result.tolist()\nA = [[1, 2], [3, 4]]\nT = [[5, 6], [7, 8]]\nS = [[9, 10], [11, 12]]\nassert transform_matrix([[1, 2], [3, 4]], [[2, 0], [0, 2]], [[1, 1], [0, 1]]) == [[0.5,1.5],[1.5,3.5]]\nassert transform_matrix([[1, 0], [0, 1]], [[1, 2], [3, 4]], [[2, 0], [0, 2]]) == [[-4.0, 2.0], [3.0, -1.0]]\nassert transform_matrix([[2, 3], [1, 4]], [[3, 0], [0, 3]], [[1, 1], [0, 1]]) == [[0.6667, 1.6667], [0.3333, 1.6667]]\nassert transform_matrix([[2, 3], [1, 4]], [[3, 0], [0, 3]], [[1, 1], [1, 1]]) == -1"}
{"task_id": 8, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nfrom numpy.linalg import inv\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    try:\n        if len(matrix) != 2 or len(matrix[0]) != 2:\n            return None\n        inverse = inv(matrix)\n        if inverse.shape != (2, 2):\n            raise ValueError('The resulting matrix is not a 2x2 matrix.')\n        return inverse.tolist()\n    except Exception as e:\n        print(f'Error calculating inverse: {e}')\n        return None\nassert inverse_2x2([[4, 7], [2, 6]]) == [[0.6, -0.7], [-0.2, 0.4]]\nassert inverse_2x2([[2, 1], [6, 2]]) == [[-1.0, 0.5], [3.0, -1.0]]"}
{"task_id": 9, "completion_id": 0, "passed": false, "result": "failed: name 'matrixmul' is not defined", "solution": "\n\nassert matrixmul([[1,2,3],[2,3,4],[5,6,7]],[[3,2,1],[4,3,2],[5,4,3]]) == [[26, 20, 14], [38, 29, 20], [74, 56, 38]]\nassert matrixmul([[0,0],[2,4],[1,2]],[[0,0],[2,4]]) == [[0, 0], [8, 16], [4, 8]]\nassert matrixmul([[0,0],[2,4],[1,2]],[[0,0,1],[2,4,1],[1,2,3]]) == -1"}
{"task_id": 10, "completion_id": 0, "passed": false, "result": "failed: name 'j' is not defined", "solution": "\nfrom typing import List\ndef mean(data: List[float]) -> float:\n    \"\"\"Calculate the mean of a list.\"\"\"\n    return sum(data) / len(data)\ndef variance(data: List[float], mean_val: float) -> float:\n    \"\"\"Calculate the variance of a list.\"\"\"\n    return sum([(x - mean_val) ** 2 for x in data]) / len(data)\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculates the covariance matrix for a given set of vectors.\n\n    Parameters:\n        vectors (List[List[float]]): A list of lists representing features with their observations.\n\n    Returns:\n        List[List[float]]: The covariance matrix as a list of lists.\n    \"\"\"\n    n = len(vectors[0])\n    means = [mean(vector) for vector in vectors]\n    cov_matrix = []\n    for i in range(n):\n        col_variance = variance([vector[i] for vector in vectors], means[i])\n        row_mean = mean([vector[i] for vector in vectors])\n        temp_cov = [[col_variance * (j == k) for j in range(n)] for k in range(n)]\n        for vector1 in vectors:\n            temp_cov[vectors.index(vector1)][vectors.index(vector1)] -= col_variance * (j == i)\n        temp_cov[row_mean][row_mean] += 1\n        cov_matrix.append(temp_cov)\n    return cov_matrix\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6]]) == [[1.0, 1.0], [1.0, 1.0]]\nassert calculate_covariance_matrix([[1, 5, 6], [2, 3, 4], [7, 8, 9]]) == [[7.0, 2.5, 2.5], [2.5, 1.0, 1.0], [2.5, 1.0, 1.0]]"}
{"task_id": 11, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations Ax = b using the Jacobi iterative method.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix of size nxn.\n    b (np.ndarray): Right-hand side vector of length n.\n    n (int): Number of iterations to perform.\n    \n    Returns:\n    list: Approximate solution vector, rounded to 4 decimal places.\n    \"\"\"\n    Ax = np.dot(A, b)\n    initial_guess = [0] * len(b)\n    num_iterations = []\n    k = 0\n    while k < n:\n        summands = [Ax[i] - np.sum([A[i][j] * initial_guess[j] for j in range(len(b)) if i != j]) for i in range(len(b))]\n        for (idx, val) in enumerate(summands):\n            summands[idx] = round(val, 4)\n        new_guesses = [(summand + b[i]) / len(Ax) for (i, summand) in enumerate(summands)]\n        num_iterations.append(new_guesses)\n        initial_guess = new_guesses\n        k += 1\n    return np.round(np.array(num_iterations[-1]), 4).tolist()\nassert solve_jacobi(np.array([[5, -2, 3], [-3, 9, 1], [2, -1, -7]]), np.array([-1, 2, 3]),2) == [0.146, 0.2032, -0.5175]\nassert solve_jacobi(np.array([[4, 1, 2], [1, 5, 1], [2, 1, 3]]), np.array([4, 6, 7]),5) == [-0.0806, 0.9324, 2.4422]\nassert solve_jacobi(np.array([[4,2,-2],[1,-3,-1],[3,-1,4]]), np.array([0,7,5]),3) == [1.7083, -1.9583, -0.7812]"}
{"task_id": 12, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the singular values of a 2x2 matrix A using the Jacobian method.\n\n    Parameters:\n        A (np.ndarray): A 2x2 matrix for which to compute the singular values.\n\n    Returns:\n        tuple: Tuple containing the two largest singular values.\n    \"\"\"\n    norm_A = np.linalg.norm(A)\n    (U1, s1, V1) = np.linalg.svd(A / norm_A)\n    (U2, s2, V2) = np.linalg.svd(np.dot(A.T, U1))\n    ratio = max(s1, np.max(abs(U1))) - min(s1, np.min(abs(V1)))\n    singular_values_approx = [s1 * ratio ** i for i in range(3)]\n    singular_values_approx.append(max(s1, abs(V1[0])) * ratio ** 3)\n    singular_values_sorted = sorted(singular_values_approx, reverse=True)[:2]\n    return tuple(map(round, singular_values_sorted))\nA = np.array([[1.0, 2.0], [3.0, 4.0]])\nassert svd_2x2_singular_values(np.array([[2, 1], [1, 2]])) == ([[0.7071, -0.7071], [0.7071, 0.7071]], [3.0, 1.0], [[0.7071, 0.7071], [-0.7071, 0.7071]])\nassert svd_2x2_singular_values(np.array([[1, 2], [3, 4]])) == ([[0.4046, 0.9145], [0.9145, -0.4046]], [5.465, 0.366], [[0.576, 0.8174], [-0.8174, 0.576]])"}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: name 'row' is not defined", "solution": "\nfrom typing import List\ndef calculate_minor_value(minor_matrix: List[List[float]], i: int, j: int) -> float:\n    \"\"\"\n    Recursively calculates the value of the element at row 'i' column 'j' in the 3x3 minor matrix.\n    \"\"\"\n    if len(minor_matrix) == 1:\n        return minor_matrix[0][0]\n    top = [minor_matrix[i + k // 3][(j * 2 + k) % 6] for k in range(3)]\n    bottom = [minors[i - k // 3, (j * 2 + k) % 6] for k in range(3)]\n    return (top[0] * top[1] - bottom[0] * bottom[1]) / 2.0\ndef determinant_4x4(matrix: List[List[float]]) -> float:\n    n = len(matrix)\n    assert n == 4, 'Matrix must be 4x4'\n\n    def compute_determinant(index: int) -> float:\n        if index == n ** 2:\n            return matrix[index % n][index // n]\n        det = 0\n        sign = (-1) ** (index % 4 + 1)\n        for i in range(n):\n            if i != index // n:\n                new_row = [row[j] for j in range(n) if j != index % n]\n                det += sign * matrix[index % n][i] * calculate_minor_value(new_row, index % n, i)\n        return compute_determinant(index + 1)\n    return round(compute_determinant(0), 3)\nassert determinant_4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 0\nassert determinant_4x4([[4, 3, 2, 1], [3, 2, 1, 4], [2, 1, 4, 3], [1, 4, 3, 2]]) == -160\nassert determinant_4x4([[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == 0"}
{"task_id": 14, "completion_id": 0, "passed": false, "result": "failed: Singular matrix", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation on given features and target values.\n\n    Parameters:\n        X (list[list[float]]): Matrix of features with shape (n_samples, n_features).\n        y (list[float]): Vector of target values with length equal to the number of samples.\n\n    Returns:\n        list[float]: Coefficients of the linear regression model rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if X.shape[1] < 2:\n        raise ValueError('X must have at least two columns')\n    X_with_ones = np.column_stack((np.ones_like(X[:, :1]), X))\n    theta_hat = np.linalg.inv(X_with_ones.T @ X_with_ones) @ X_with_ones.T @ y\n    theta_hat = theta_hat[1:] / theta_hat[0]\n    return [round(coef, 4) for coef in theta_hat]\nassert linear_regression_normal_equation([[1, 1], [1, 2], [1, 3]], [1, 2, 3]) == [0.0, 1.0]\nassert linear_regression_normal_equation([[1, 3, 4], [1, 2, 5], [1, 3, 2]], [1, 2, 1]) == [4.0, -1.0, -0.0]"}
{"task_id": 15, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Perform linear regression using gradient descent on given data X and target y.\n    \n    Parameters:\n    - X: NumPy array, features with a column of ones for the intercept.\n    - y: NumPy array, target variable.\n    - alpha: Learning rate.\n    - iterations: Number of iterations to perform gradient descent.\n    \n    Returns:\n    - Coefficients of the linear regression model as a list.\n    \"\"\"\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    initial_weights = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        gradients = np.dot(X.T, y - np.dot(X, initial_weights)) / len(X)\n        initial_weights += -alpha * gradients\n    return [round(weight, 4) for weight in initial_weights]\nassert linear_regression_gradient_descent(np.array([[1, 1], [1, 2], [1, 3]]), np.array([1, 2, 3]), 0.01, 1000) == [0.1107, 0.9513]"}
{"task_id": 16, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    min_max_normalized_data = (data - np.min(data, axis=0)) / (np.max(data, axis=0) - np.min(data, axis=0))\n    return [standardized_data.tolist(), min_max_normalized_data.tolist()]\nassert feature_scaling(np.array([[1, 2], [3, 4], [5, 6]])) == ([[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]])"}
{"task_id": 17, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_array = np.array(points)\n    initial_centroids_array = np.array(initial_centroids)\n    current_clusters = [0] * len(points_array)\n    distances = np.zeros((len(points_array), k))\n    for i in range(k):\n        distances[:, i] = np.linalg.norm(points_array - initial_centroids[i], axis=1)\n    for _ in range(max_iterations):\n        for i in range(len(points_array)):\n            min_distance_index = np.argmin(distances[i])\n            current_clusters[i] = min_distance_index\n        new_centroids = []\n        for c in range(k):\n            selected_points = points_array[current_clusters == c]\n            if len(selected_points) > 0:\n                new_centroid = np.mean(selected_points, axis=0).astype(np.float64)\n                new_centroids.append(new_centroid)\n            else:\n                new_centroids.append(initial_centroids[c])\n        new_centroids = np.array(new_centroids)\n        for i in range(len(points_array)):\n            for j in range(k):\n                distances[i][j] = np.linalg.norm(points_array[i] - new_centroids[j], axis=0)\n        converged = True\n        for i in range(len(points_array)):\n            min_distance = np.min(distances[i])\n            max_distance = np.max(distances[i])\n            if min_distance != 0 or max_distance != 0:\n                converged = False\n                break\n        if converged:\n            break\n    return [list(map(float, new_centroid.astype(int))) for new_centroid in new_centroids]\nassert k_means_clustering([(1, 2), (1, 4), (1, 0), (10, 2), (10, 4), (10, 0)], 2, [(1, 1), (10, 1)], 10) == [(1.0, 2.0), (10.0, 2.0)]\nassert k_means_clustering([(0, 0, 0), (2, 2, 2), (1, 1, 1), (9, 10, 9), (10, 11, 10), (12, 11, 12)], 2, [(1, 1, 1), (10, 10, 10)], 10) == [(1.0, 1.0, 1.0), (10.3333, 10.6667, 10.3333)]\nassert k_means_clustering([(1, 1), (2, 2), (3, 3), (4, 4)], 1, [(0,0)], 10) == [(2.5, 2.5)]\nassert k_means_clustering([(0, 0), (1, 0), (0, 1), (1, 1), (5, 5), (6, 5), (5, 6), (6, 6),(0, 5), (1, 5), (0, 6), (1, 6), (5, 0), (6, 0), (5, 1), (6, 1)], 4, [(0, 0), (0, 5), (5, 0), (5, 5)], 10) == [(0.5, 0.5), (0.5, 5.5), (5.5, 0.5), (5.5, 5.5)]"}
{"task_id": 18, "completion_id": 0, "passed": false, "result": "failed: name 'X' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k: int=5, shuffle: bool=True, random_seed: int | None=None) -> list[tuple[np.ndarray, np.ndarray]]:\n    \"\"\" \n    Divide the dataset into k folds for cross-validation.\n\n    Parameters:\n    - X (np.ndarray): The features array.\n    - y (np.ndarray): The labels array.\n    - k (int): Number of folds.\n    - shuffle (bool): Whether to shuffle the data before splitting.\n    - random_seed (int or None): Seed for reproducibility.\n\n    Returns:\n    List[Tuple[np.ndarray, np.ndarray]]: A list where each tuple contains (train_indices, test_indices).\n    \"\"\"\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError('k must be a positive integer')\n    split_size = len(X) // k\n    if shuffle:\n        permutation = np.random.permutation(len(X))\n        (X, y) = (X[permutation], y[permutation])\n    idxs = [slice(i * split_size, (i + 1) * split_size) for i in range(k)]\n    kfolds = []\n    for (j, idx) in enumerate(idxs[:-1]):\n        train_idx = np.concatenate([idxs[k] for k in range(k) if k != j])\n        test_idx = idxs[j]\n        kfolds.append((X[train_idx], y[train_idx]), (X[test_idx], y[test_idx]))\n    if len(idxs) > k:\n        train_idx_ = np.concatenate([idxs[k] for k in range(k)])\n        test_idx_ = idxs[-1]\n        kfolds.append((X[train_idx_], y[train_idx_]), (X[test_idx_], y[test_idx_]))\n    else:\n        del kfolds[-1]\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    return kfolds\nkfolds = k_fold_cross_validation(X, y, k=3, shuffle=False, random_seed=42)\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=5, shuffle=False) == [([2, 3, 4, 5, 6, 7, 8, 9], [0, 1]), ([0, 1, 4, 5, 6, 7, 8, 9], [2, 3]), ([0, 1, 2, 3, 6, 7, 8, 9], [4, 5]), ([0, 1, 2, 3, 4, 5, 8, 9], [6, 7]), ([0, 1, 2, 3, 4, 5, 6, 7], [8, 9])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=2, shuffle=True, random_seed=42) == [([2, 9, 4, 3, 6], [8, 1, 5, 0, 7]), ([8, 1, 5, 0, 7], [2, 9, 4, 3, 6])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]), np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]), k=3, shuffle=False) == [([5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 4]), ([0, 1, 2, 3, 4, 10, 11, 12, 13, 14], [5, 6, 7, 8, 9]), ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=2, shuffle=False) == [([5, 6, 7, 8, 9], [0, 1, 2, 3, 4]), ([0, 1, 2, 3, 4], [5, 6, 7, 8, 9])]"}
{"task_id": 19, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nfrom sklearn.decomposition import PCA\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on the given data using a custom implementation.\n\n    Args:\n        data (np.ndarray): A 2D NumPy array where each row is a data sample and each column is a feature.\n        k (int): Number of principal components to return.\n\n    Returns:\n        List[List[float]]: List of k principal components as lists of floats.\n    \"\"\"\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    cov_matrix = np.cov(standardized_data.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    sorted_eigenvalues = eigenvalues[idx]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    selected_eigenvectors = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(selected_eigenvectors, standardized_data.T)\n    principal_components = []\n    for i in range(k):\n        principal_component = projected_data[:, i].tolist()\n        principal_components.append(principal_component)\n    return principal_components\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nk = 2\nassert pca(np.array([[4,2,1],[5,6,7],[9,12,1],[4,6,7]]),2) == [[0.6855, 0.0776], [0.6202, 0.4586], [-0.3814, 0.8853]]\nassert pca(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[0.7071], [0.7071]]"}
{"task_id": 20, "completion_id": 0, "passed": false, "result": "failed: name 'learn_decision_tree' is not defined", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\nassert learn_decision_tree([ {'Outlook': 'Sunny', 'Wind': 'Weak', 'PlayTennis': 'No'}, {'Outlook': 'Overcast', 'Wind': 'Strong', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Sunny', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Sunny', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Overcast', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Rain', 'Wind': 'Weak', 'PlayTennis': 'Yes'} ], ['Outlook', 'Wind'], 'PlayTennis') == {'Outlook': {'Sunny': {'Wind': {'Weak': 'No', 'Strong': 'No'}}, 'Rain': {'Wind': {'Weak': 'Yes', 'Strong': 'No'}}, 'Overcast': 'Yes'}}"}
{"task_id": 21, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Train a kernel SVM classifier using the Pegasos algorithm without random sampling.\n\n    Parameters:\n    - data: 2D NumPy array of shape (n_samples, n_features)\n    - labels: 1D NumPy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: float, regularization strength\n    - iterations: int, number of times to update alpha values per epoch\n    - sigma: float, standard deviation for Gaussian kernel\n\n    Returns:\n    - alpha: List[float], alphas computed during training\n    - b: float, bias term\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if kernel == 'linear':\n        C = 1 / lambda_val\n        W = np.zeros((n_features,))\n        b = 0\n    elif kernel == 'rbf':\n        C = 1 / lambda_val * sigma ** 2\n        W = np.random.randn(n_features)\n        b = np.zeros(1)\n    num_epochs_per_iteration = int(iterations)\n    for _ in range(num_epochs_per_iteration):\n        indices = np.arange(n_samples)\n        np.random.shuffle(indices)\n        for i in indices:\n            xi = data[i]\n            yi = labels[i]\n            hxi = np.dot(W, xi) + b\n            gradient = 2 * yi * xi\n            if hxi > 1:\n                gradient -= C * W\n            else:\n                gradient += C * W\n            W += lambda_val * gradient\n            b += yi\n    W = W.reshape(-1, 1)\n    b = b.item()\n    return [W.tolist(), b]\nassert pegasos_kernel_svm(np.array([[1, 2], [2, 3], [3, 1], [4, 1]]), np.array([1, 1, -1, -1]), kernel='linear', lambda_val=0.01, iterations=100) == ([100.0, 0.0, -100.0, -100.0], -937.4755)\nassert pegasos_kernel_svm(np.array([[1, 2], [2, 3], [3, 1], [4, 1]]), np.array([1, 1, -1, -1]), kernel='rbf', lambda_val=0.01, iterations=100, sigma=0.5) == ([100.0, 99.0, -100.0, -100.0], -115.0)\nassert pegasos_kernel_svm(np.array([[2, 1], [3, 2], [1, 3], [1, 4]]), np.array([-1, -1, 1, 1]), kernel='rbf', lambda_val=0.01, iterations=100, sigma=0.5) == ([-100.0, 0.0, 100.0, 90.6128], -102.8081)\nassert pegasos_kernel_svm(np.array([[2, 1], [3, 2], [1, 3], [1, 4]]), np.array([-1, -1, 1, 1]), kernel='linear', lambda_val=0.01, iterations=100) == ([-100.0, -100.0, 0.0, 0.0], -1037.4755)"}
{"task_id": 22, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid activation function for a given input z.\n\n    Parameters:\n    - z (float): The input value for which the sigmoid function is computed.\n\n    Returns:\n    - float: The output of the sigmoid function rounded to 4 decimal places.\n    \"\"\"\n    sig = 1 / (1 + math.exp(-z))\n    return round(sig, 4)\nassert sigmoid(0) == 0.5\nassert sigmoid(1) == 0.7311\nassert sigmoid(-1) == 0.2689"}
{"task_id": 23, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\nfrom typing import List\ndef softmax(scores: List[float]) -> List[float]:\n    \"\"\"\n    Computes the softmax activation for a given list of scores.\n\n    Parameters:\n    - scores (List[float]): A list of floating-point numbers representing scores.\n\n    Returns:\n    - List[float]: A list of floating-point numbers representing the softmax values,\n                  each rounded to four decimal places.\n    \"\"\"\n    if not scores:\n        raise ValueError('Scores list cannot be empty')\n    max_score = max(scores)\n    exp_scores = [math.exp(score - max_score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_probs = [exp / sum_exp_scores for exp in exp_scores]\n    softmax_probs = [round(prob, 4) for prob in softmax_probs]\n    return softmax_probs\nscores = [1.0, 2.0, 3.0]\nassert softmax([1, 2, 3]) == [0.09, 0.2447, 0.6652]\nassert softmax([1, 1, 1]) == [0.3333, 0.3333, 0.3333]\nassert softmax([-1, 0, 5]) == [0.0025, 0.0067, 0.9909]"}
{"task_id": 24, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\ndef compute_sigmoid(x):\n    \"\"\"Compute the sigmoid of x.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef single_neuron_model(features, labels, weights, bias):\n    \"\"\"\n    Simulate a single neuron model with sigmoid activation for binary classification.\n\n    Args:\n        features: A list of lists, where each sublist represents feature values for one sample.\n        labels: A list of binary labels corresponding to each sample.\n        weights: A list of weights for each feature.\n        bias: Bias value.\n\n    Returns:\n        Tuple containing two elements:\n            - Predicted probabilities after sigmoid activation.\n            - Mean squared error between predicted probabilities and true labels.\n        Both values are rounded to the nearest 4th decimal place.\n    \"\"\"\n    X = np.array(features).reshape(len(features), -1)\n    Z = np.dot(X, weights) + bias\n    y_pred = compute_sigmoid(Z)\n    mse = sum((labels - y_pred) ** 2) / len(labels)\n    y_pred_rounded = [round(probability, 4) for probability in y_pred]\n    mse_rounded = round(mse, 4)\n    return (y_pred_rounded, mse_rounded)\nfeatures = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]\nlabels = [0, 1, 0]\nweights = [0.5, 0.5, 0.5]\nbias = 1.0\nassert single_neuron_model([[0.5, 1.0], [-1.5, -2.0], [2.0, 1.5]], [0, 1, 0], [0.7, -0.4], -0.1) == ([0.4626, 0.4134, 0.6682], 0.3349)\nassert single_neuron_model([[1, 2], [2, 3], [3, 1]], [1, 0, 1], [0.5, -0.2], 0) == ([0.525, 0.5987, 0.7858], 0.21)\nassert single_neuron_model([[2, 3], [3, 1], [1, 2]], [1, 0, 1], [0.5, -0.2], 1) == ([0.8022, 0.9089, 0.7503], 0.3092)"}
{"task_id": 25, "completion_id": 0, "passed": false, "result": "failed: shapes (3,3) and (2,) not aligned: 3 (dim 1) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"\n    Sigmoid activation function.\n    \n    Args:\n      x (array-like): input array\n    \n    Returns:\n      output (array-like): sigmoid activation of x\n    \"\"\"\n    return 1 / (1 + np.exp(-x))\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    \"\"\"Train a single neuron with sigmoid activation and implement backpropagation.\"\"\"\n    n_features = features.shape[1]\n    n_outputs = 1\n    features_with_bias = np.c_[np.ones((features.shape[0], 1)), features]\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n    for _ in range(epochs):\n        predictions = np.dot(features_with_bias, weights) + bias\n        predictions = sigmoid(predictions)\n        mse = np.mean(np.square(labels - predictions))\n        mse_history.append(round(mse, 4))\n        errors = labels - predictions\n        weights += learning_rate * np.dot(errors.T, features_with_bias)\n        bias += learning_rate * np.sum(errors)\n    return (weights, bias, mse_history)\nassert train_neuron(np.array([[1.0, 2.0], [2.0, 1.0], [-1.0, -2.0]]), np.array([1, 0, 0]), np.array([0.1, -0.2]), 0.0, 0.1, 2) == ([0.1036, -0.1425], -0.0167, [0.3033, 0.2942])\nassert train_neuron(np.array([[1, 2], [2, 3], [3, 1]]), np.array([1, 0, 1]), np.array([0.5, -0.2]), 0, 0.1, 3) == ([0.4892, -0.2301], 0.0029, [0.21, 0.2087, 0.2076])\nassert train_neuron(np.array([[1, 3], [2, 1], [-1, -3]]), np.array([1, 0, 0]), np.array([-0.1, -0.2]), 0.0, 0.1, 2) == ([-0.087, -0.0951], -0.0131, [0.3513, 0.3227])"}
{"task_id": 26, "completion_id": 0, "passed": false, "result": "failed: maximum recursion depth exceeded", "solution": "\nimport numpy as np\nclass Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        out = Value(self.data + other.data)\n        out._prev = {self, other}\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data)\n        out._prev = {self, other}\n        return out\n\n    @property\n    def grad(self):\n        return self.grad\n\n    @grad.setter\n    def grad(self, value):\n        self.grad = value\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node.backward()\na = Value(2)\nb = Value(3)\nc = Value(10)\nd = a + b * c \ne = Value(7) * Value(2)\nf = e + d\ng = f.relu() \ng.backward()\n\nassert a.data, a.grad == (2, 1)\nassert b.data, b.grad == (3, 10)\nassert c.data, c.grad == (10, 3)\nassert d.data, d.grad == (32, 1)\nassert e.data, e.grad == (14, 1)\nassert f.data, f.grad == (46, 1)\nassert g.data, g.grad == (46, 1)\na = Value(3)\nb = Value(4)\nc = Value(2)\nd = a * b + c \nd.backward()\n\nassert a.data, a.grad == (3, 1)\nassert b.data, b.grad == (4, 1)\nassert c.data, c.grad == (2, 1)\nassert d.data, d.grad == (14, 1)\na = Value(3)\nb = Value(4)\nc = Value(5)\nd = b * c \ne = a + d * b\ne.backward() \n\nassert a.data, a.grad == (3, 1)\nassert b.data, b.grad == (4, 1)\nassert c.data, c.grad == (5, 1)\nassert d.data, d.grad == (20, 1)\nassert e.data, e.grad == (83, 1)"}
{"task_id": 27, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Transforms the basis B into the basis C given two lists of three-dimensional vectors.\n    \n    Parameters:\n        B (List[List[int]]): The original basis vector representation in R^3.\n        C (List[List[int]]): The new basis vector representation in R^3.\n        \n    Returns:\n        List[List[float]]: The transformation matrix P from basis B to C.\n    \"\"\"\n    A = np.array(B)\n    B = np.array(C)\n    P = np.linalg.inv(A.T @ A) @ A.T\n    return P.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[2, 0, 0], [0, 1, 0], [0, 0, 1]]\nassert transform_basis([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1, 2.3, 3], [4.4, 25, 6], [7.4, 8, 9]]) == [[-0.6772, -0.0126, 0.2342], [-0.0184, 0.0505, -0.0275], [0.5732, -0.0345, -0.0569]]\nassert transform_basis([[1,0],[0,1]],[[1,2],[9,2]]) == [[-0.125, 0.125 ],[ 0.5625, -0.0625]]\nassert transform_basis([[-1, 0], [3, 4]], [[2, -1], [0, 1]]) == [[1, 2], [3, 4]]\nassert transform_basis([[4, 8], [2, 4]], [[2, 1], [0, 1]]) == [[1, 2], [2, 4]]"}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: 'numpy.ndarray' object has no attribute 'toarray'", "solution": "import numpy as np\nimport numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the Singular Value Decomposition (SVD) of a given 2x2 matrix A.\n    \n    Parameters:\n    - A (np.ndarray): A 2x2 input matrix\n    \n    Returns:\n    - tuple: A, S, V where A is the original matrix, S is the diagonal matrix containing the singular values,\n             and V contains the left singular vectors as columns.\n             \n    Note:\n    - We assume 'use the method based on eigendecomposition of A^T A' means we need to work only with \n      the transpose of A squared, i.e., (A^T A).\n    - The returned result is rounded to 4 decimal places.\n    \"\"\"\n    AT_A = np.dot(A.T, A)\n    (evals, evecs) = np.linalg.eigh(AT_A)\n    S = np.diag(np.sqrt(evals))\n    V = evecs.copy()\n    u_rows = np.array([np.linalg.norm(row, ord=2) for row in A])\n    U = A / u_rows.reshape(-1, 1)\n    U = U.toarray().tolist()[0]\n    S = S.toarray().tolist()[0]\n    V = V.toarray().tolist()[0]\n    return (U, S, V)\nassert svd_2x2(np.array([[-10, 8], [10, -1]])) == ([[0.8, -0.6], [-0.6, -0.8]], [15.6525, 4.4721], [[-0.8944, 0.4472], [-0.4472, -0.8944]])\nassert svd_2x2(np.array([[1, 2], [3, 4]])) == ([[-0.4046, -0.9145], [-0.9145, 0.4046]], [5.465, 0.366], [[-0.576, -0.8174], [0.8174, -0.576]])\nassert svd_2x2(np.array([[3, 5], [7, 9]])) == ([[-0.4538, -0.8911], [-0.8911, 0.4538]], [12.791, 0.6254], [[-0.5941, -0.8044], [0.8044, -0.5941]])"}
{"task_id": 29, "completion_id": 0, "passed": false, "result": "failed: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 8 and the array at index 1 has size 4", "solution": "import numpy as np\nimport numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    This function takes two numpy arrays, X and y, and shuffles their elements randomly,\n    while preserving the index correspondence between X and y.\n    \n    Parameters:\n        X (numpy.ndarray): First dataset array.\n        y (numpy.ndarray): Second dataset array corresponding to X.\n        seed (int, optional): Seed for random number generator for reproducibility.\n        \n    Returns:\n        list: A list containing the shuffled versions of X and y.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not isinstance(y, np.ndarray):\n        raise ValueError('X and y must be numpy arrays.')\n    combined = np.column_stack((X.ravel(), y.ravel()))\n    if seed is None:\n        rng = np.random.default_rng()\n        seed = int(rng.bit_generator.state[-1])\n    np.random.seed(seed)\n    shuffled_indices = np.arange(len(combined))\n    np.random.shuffle(shuffled_indices)\n    shuffled_X = X[shuffled_indices].reshape(-1, X.shape[1])\n    shuffled_y = y[shuffled_indices]\n    return [shuffled_X.tolist(), shuffled_y.tolist()]\nassert shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([1, 2, 3, 4]), seed=42) == ([[3, 4], [7, 8], [1, 2], [5, 6]], [2, 4, 1, 3])\nassert shuffle_data(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), seed=24) == ([[4, 4],[2, 2],[1, 1],[3, 3]], [40, 20, 10, 30])\nassert shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([4, 6, 7, 8]), seed=10) == ([[5, 6], [1, 2], [7, 8], [3, 4]], [7, 4, 8, 6])\nassert shuffle_data(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([4, 5, 6, 7]), seed=20) == ([[1, 3], [3, 6], [5, 8], [7, 11]], [4, 5, 6, 7])"}
{"task_id": 30, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches from the given dataset X and optionally y.\n    \n    Parameters:\n    - X: A 2D numpy array representing features.\n    - y: An optional 1D numpy array representing labels.\n    - batch_size: Integer, number of samples per batch.\n    \n    Yields:\n    - For y=None: (batch_indices, X)\n    - For y: (batch_indices, X), (batch_indices, y)\n    \"\"\"\n    if y is None or len(y) < batch_size * 2:\n        indices = np.arange(len(X))\n    else:\n        mask = np.random.rand(len(y)) < len(y) / float(batch_size)\n        indices_y = np.append(np.where(mask)[0], np.where(~mask)[0])\n        indices_no_y = np.where(~mask)[0]\n        np.random.shuffle(indices_y)\n        np.random.shuffle(indices_no_y)\n        indices_y = np.array_split(indices_y, len(indices_y) // batch_size)\n        indices_no_y = np.array_split(indices_no_y, len(indices_no_y) // batch_size)\n    for i in range(0, len(indices), batch_size):\n        yield ((i,) + tuple((indexes[:batch_size] for indexes in [indices_x, indices_y])) if y is not None else tuple((indexes[:batch_size] for indexes in [indices_x])))\nassert batch_iterator(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), batch_size=2) == [[[[1, 2], [3, 4]], [1, 2]], [[[5, 6], [7, 8]], [3, 4]], [[[9, 10]], [5]]]\nassert batch_iterator(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), batch_size=3) == [[[1, 1], [2, 2], [3, 3]], [[4, 4]]]\nassert batch_iterator(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), batch_size=2) == [[[1, 3], [3, 6]], [[5, 8], [7, 11]]]\nassert batch_iterator(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([4, 5, 6, 7]), batch_size=2) == [[[[1, 3], [3, 6]], [4, 5]], [[[5, 8], [7, 11]], [6, 7]]]"}
{"task_id": 31, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the input data `X` into two sets based on whether the values at \n    the specified feature index (`feature_i`) are greater than or equal to \n    the provided `threshold`.\n    \n    Parameters:\n        X (np.ndarray): A 2D NumPy array representing the dataset.\n        feature_i (int): Index of the feature used for division.\n        threshold (float): The threshold value.\n\n    Returns:\n        tuple: Two arrays. The first contains samples where the feature value meets the condition,\n               and the second contains samples where it does not.\n               \n    Example usage:\n    >>> X = np.array([[1., -1., 2.], [2., 4., 0.], [-3., 5., 8.], [6., 7., 0.]])\n    >>> feature_i = 2\n    >>> threshold = 2.0\n    >>> result = divide_on_feature(X, feature_i, threshold)\n    >>> print(result[0])\n    [[-3.   5.   8. ]\n     [ 6.   7.   0. ]]\n    >>> print(result[1])\n    [[ 1.   -1.   2. ]\n     [ 2.   4.   0. ]]\n    \"\"\"\n    selected_features = X[:, feature_i] >= threshold\n    subset_1 = X[selected_features]\n    subset_2 = X[~selected_features]\n    return (subset_1.tolist(), subset_2.tolist())\nassert divide_on_feature(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), 0, 5) == [[[5, 6], [7, 8], [9, 10]], [[1, 2], [3, 4]]]\nassert divide_on_feature(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), 1, 3) == [[[3, 3], [4, 4]], [[1, 1], [2, 2]]]\nassert divide_on_feature(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), 0, 2) ==  [[[3, 6], [5, 8], [7, 11]], [[1, 3]]]\nassert divide_on_feature(np.array([[1, 3, 9], [6, 3, 6], [10, 5, 8], [9, 7, 11]]), 1, 5) ==  [[[10, 5, 8], [9, 7, 11]], [[1, 3, 9], [6, 3, 6]]]"}
{"task_id": 32, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generates polynomial features of a given dataset up to the specified degree.\n\n    Parameters:\n    - X (np.array): A 2D numpy array where each row represents a data point.\n    - degree (int): The maximum degree of the polynomials to be generated.\n\n    Returns:\n    - np.array: A 2D numpy array containing the polynomial features.\n    \"\"\"\n    index_pairs = combinations_with_replacement(range(len(X[0])), degree)\n    poly_features = []\n    for pair in index_pairs:\n        feature_vector = [X[:, i] ** p for (i, p) in enumerate(pair)]\n        poly_features.append(np.hstack(feature_vector))\n    return np.vstack(poly_features).tolist()\nassert polynomial_features(np.array([[2, 3], [3, 4], [5, 6]]), 2) == [[ 1., 2., 3., 4., 6., 9.], [ 1., 3., 4., 9., 12., 16.], [ 1., 5., 6., 25., 30., 36.]]\nassert polynomial_features(np.array([[1, 2], [3, 4], [5, 6]]), 3) == [[ 1., 1., 2., 1., 2., 4., 1., 2., 4., 8.], [ 1., 3., 4., 9., 12., 16., 27., 36., 48., 64.], [ 1., 5., 6., 25., 30., 36., 125., 150., 180., 216.]]\nassert polynomial_features(np.array([[1, 2, 3], [3, 4, 5], [5, 6, 9]]), 3) == [[ 1., 1., 2., 3., 1., 2., 3., 4., 6., 9., 1., 2., 3., 4., 6., 9., 8., 12., 18., 27.], [ 1., 3., 4., 5., 9., 12., 15., 16., 20., 25., 27., 36., 45., 48., 60., 75., 64., 80., 100., 125.],[ 1., 5., 6., 9., 25., 30., 45., 36., 54., 81., 125., 150., 225., 180., 270., 405., 216., 324., 486., 729.]]"}
{"task_id": 33, "completion_id": 0, "passed": false, "result": "failed: object of too small depth for desired array", "solution": "import numpy as np\nimport numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n    \n    Parameters:\n        X (numpy.ndarray): The input features.\n        y (numpy.ndarray): The target labels.\n        n_subsets (int): Number of subsets to generate.\n        replacements (bool): Whether to allow replacement or not.\n        seed (int): Seed for the random number generator.\n        \n    Returns:\n        List[numpy.ndarray]: A list containing n_subsets random subsets of the data,\n                             where each subset is a tuple of (X_subset, y_subset).\n    \"\"\"\n    sample_indices = y.copy()\n    np.random.seed(seed)\n    shuffled_indices = np.random.permutation(sample_indices.shape[0])\n    if replacements:\n        num_elements_needed = int(n_subsets * len(sample_indices) / len(shuffled_indices))\n    else:\n        num_elements_needed = min(int(n_subsets), 5)\n    top_indices = sorted(zip(shuffled_indices, sample_indices), key=lambda x: -np.bincount(x[1]))[:num_elements_needed]\n    (top_x, _) = zip(*top_indices)\n    top_y = [np.array([sample_indices[i] for (i, _) in top_indices])]\n    for i in range(1, n_subsets):\n        next_x = np.concatenate((top_x[-1], np.random.choice(top_x[:-1], size=len(top_x[-1]), replace=replacements)))\n        next_y = np.zeros(next_x.shape[0], dtype=top_y[0].dtype)\n        next_y[:len(top_x[-1])] = top_y[0][:]\n        next_y[len(top_x[-1]):] = np.random.randint(0, high=max(y)) + 1\n        top_x.append(next_x)\n        top_y.append(next_y)\n    result = [x.tolist() for x in np.split(np.vstack(top_x), n_subsets)]\n    return result\nassert get_random_subsets(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), 3, False, seed=42) == [([[3, 4], [9, 10]], [2, 5]), ([[7, 8], [3, 4]], [4, 2]), ([[3, 4], [1, 2]], [2, 1])]\nassert get_random_subsets(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), 1, True, seed=42) == [([[3, 3], [4, 4], [1, 1], [3, 3]], [30, 40, 10, 30])]\nassert get_random_subsets(np.array([[1, 3], [2, 4], [3, 5], [4, 6]]), np.array([1, 20, 30, 40]), 2, True, seed=42) == [([[3, 5], [4, 6], [1, 3], [3, 5]], [30, 40, 1, 30]), ([[3, 5], [4, 6], [1, 3], [1, 3]], [30, 40, 1, 1])]"}
{"task_id": 34, "completion_id": 0, "passed": false, "result": "failed: 'numpy.int64' object is not iterable", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on the given input array 'x'.\n    \n    Parameters:\n        x (numpy.array): Input array containing integer values.\n        n_col (int, optional): Number of columns for the one-hot encoded matrix. \n                               If None, determines the length based on 'x' shape.\n        \n    Returns:\n        numpy.array: A one-hot encoded numpy array of shape (len(x), n_col).\n    \"\"\"\n    if n_col is None:\n        n_col = max((max(i) + 1 for i in x))\n    one_hot = np.eye(n_col)[x.reshape(-1)]\n    return one_hot.reshape(len(x), n_col)\nassert to_categorical(np.array([0, 1, 2, 1, 0])) == [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 1., 0.], [1., 0., 0.]]\nassert to_categorical(np.array([3, 1, 2, 1, 3]), 4) == [[0., 0., 0., 1.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 1., 0., 0.], [0., 0., 0., 1.]]\nassert to_categorical(np.array([2, 3, 4, 1, 1]), 5) == [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]]\nassert to_categorical(np.array([2, 4, 1, 1])) == [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]]"}
{"task_id": 35, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix.\n    \n    Parameters:\n    - x (numpy.ndarray): A 1D numpy array\n    \n    Returns:\n    - numpy.ndarray: A 2D numpy array where each row represents a diagonal of the original array\n    \"\"\"\n    column_vector = x[:, None]\n    diagonal_matrix = np.diag(column_vector)\n    return diagonal_matrix.tolist()\nassert make_diagonal(np.array([1, 2, 3])) == [[1., 0., 0.], [0., 2., 0.], [0., 0., 3.]]\nassert make_diagonal(np.array([4, 5, 6, 7])) == [[4., 0., 0., 0.], [0., 5., 0., 0.], [0., 0., 6., 0.], [0., 0., 0., 7.]]\nassert make_diagonal(np.array([2, 4, 1, 1])) == [[2.0, 0.0, 0.0, 0.0], [0.0, 4.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\nassert make_diagonal(np.array([1, 3, 5, 0])) == [[1.0, 0.0, 0.0, 0.0], [0.0, 3.0, 0.0, 0.0], [0.0, 0.0, 5.0, 0.0], [0.0, 0.0, 0.0, 0.0]]"}
{"task_id": 36, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculates the accuracy score of predictions versus true values.\n\n    Args:\n        y_true (numpy.ndarray): True binary labels.\n        y_pred (numpy.ndarray): Predicted binary labels.\n\n    Returns:\n        float: The accuracy score, rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length')\n    correct = np.sum(y_true == y_pred)\n    accuracy = round(correct / len(y_true), 4)\n    return accuracy\nassert accuracy_score(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 0, 1, 0, 1])) == 0.8333\nassert accuracy_score(np.array([1, 1, 1, 1]), np.array([1, 0, 1, 0])) == 0.5\nassert accuracy_score(np.array([1, 0, 1, 0, 1]), np.array([1, 0, 0, 1, 1])) == 0.6\nassert accuracy_score(np.array([0, 1, 0, 1]), np.array([1, 0, 1, 1])) == 0.25"}
{"task_id": 37, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculates the correlation matrix for a given dataset.\n    \n    Parameters:\n        X (numpy.ndarray): A 2D numpy array representing the dataset.\n        Y (numpy.ndarray, optional): An additional 2D numpy array representing another dataset. \n                                     If None, it will calculate the correlation matrix for X only.\n    \n    Returns:\n        numpy.ndarray: A 2D numpy array containing the correlation values.\n    \"\"\"\n    if Y is None:\n        corr_matrix = np.corrcoef(X.T)\n    else:\n        corr_matrix = np.corrcoef(X.T, Y.T)[0][1:].reshape(-1).round(4)\n    return corr_matrix.tolist()\nassert calculate_correlation_matrix(np.array([[1, 2], [3, 4], [5, 6]])) == [[1.0, 1.0], [1.0, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 2, 3], [7, 15, 6], [7, 8, 9]])) == [[1.0, 0.843, 0.866], [0.843, 1.0, 0.4611], [0.866, 0.4611, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[ -1.0, -1.0], [ 1.0, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 3], [3, 6], [5, 8], [7, 11]])) == [[1.0, 0.9971], [0.9971, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 4], [3, 6]]), np.array([[8, 9], [7, 11]])) == [[-1.0, 1.0], [-1.0, 1.0]]"}
{"task_id": 38, "completion_id": 0, "passed": false, "result": "failed: max() arg is an empty sequence", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Fit an AdaBoost classifier using the provided data X and target y,\n    with n_clf number of decision trees (classifiers).\n\n    Parameters:\n        X (numpy.ndarray): Input features of shape (n_samples, n_features).\n        y (numpy.ndarray): Target values of shape (n_samples, ).\n        n_clf (int): Number of classifiers (decision trees) to train.\n\n    Returns:\n        list: List containing the trained classifiers and their parameters.\n    \"\"\"\n    w = np.ones_like(y) / len(y)\n    p = np.zeros(n_clf)\n    c_w = np.ones(n_clf)\n    classifiers = []\n    for i in range(n_clf):\n        b_t = max(np.where(w > 0)[0])\n        idx = w == 0\n        if idx.any():\n            p[i] = sum([np.sign(y[j]) * w[j] for j in idx])\n            c_w[i] += np.sum(idx)\n        else:\n            p[i] = 0\n        t_w = w * (p[i] ** 2) ** math.log(1 / p[i], 2)\n        t_w /= np.sum(t_w)\n        w = w * t_w\n        classifiers.append((lambda x: int(x < b_t), {'threshold': b_t}))\n    return classifiers\nassert adaboost_fit(np.array([[1, 2], [2, 3], [3, 4], [4, 5]]), np.array([1, 1, -1, -1]), 3)  == [{'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}]\nassert adaboost_fit(np.array([[8, 7], [3, 4], [5, 9], [4, 0], [1, 0], [0, 7], [3, 8], [4, 2], [6, 8], [0, 2]]), np.array([1, -1, 1, -1, 1, -1, -1, -1, 1, 1]), 2) == [{'polarity': 1, 'threshold': 5, 'feature_index': 0, 'alpha': 0.6931}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 0.5493}]\nassert adaboost_fit(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([1, 1, -1, -1]), 3) == [{'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}]\nassert adaboost_fit(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([1, -1, 1, -1]), 2) == [{'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 0.5493}, {'polarity': -1, 'threshold': 7, 'feature_index': 0, 'alpha': 0.8047}]"}
{"task_id": 39, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Compute the log-softmax of a given 1D numpy array of scores.\n\n    Parameters:\n        scores (list): A 1D numpy array containing the raw score values.\n\n    Returns:\n        float: The computed log-softmax value.\n    \"\"\"\n    scores_array = np.array(scores)\n    exp_scores = np.exp(scores_array - np.max(scores_array))\n    normalized_exp_scores = exp_scores / np.sum(exp_scores)\n    log_softmax_values = -np.log(normalized_exp_scores)\n    return round(log_softmax_values[0], 4).tolist()\nscores = [2.8, 5.6, 3.9]\nassert log_softmax([1, 2, 3]) == [-2.4076, -1.4076, -0.4076]\nassert log_softmax([1, 1, 1]) == [-1.0986, -1.0986, -1.0986]\nassert log_softmax([1, 1, .0000001]) == [-0.862, -0.862, -1.862]"}
{"task_id": 40, "completion_id": 0, "passed": false, "result": "failed: 'Dense' object has no attribute 'layer_input'", "solution": "import numpy as np\nimport copy\nimport math\n\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n    \n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nimport numpy as np\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def initialize(self):\n        self.W = None\n        self.b = None\n\n    def __init__(self, n_units, input_shape=(None,), W_init_std=1e-06):\n        super().__init__()\n        if len(input_shape) != 0:\n            assert len(input_shape) > 0, 'Input shape must be non-empty'\n            if not isinstance(input_shape, tuple):\n                raise ValueError('Input shape must be a tuple')\n            else:\n                assert len(input_shape) >= 1, 'Input shapes must have at least one dimension'\n        self.n_units = int(n_units)\n        self.trainable = False\n        w0 = np.zeros(self.n_units)\n        self.initialize_weights_and_bias(W_init_std, w0)\n        self.set_layer_input(X)\n\n    def initialize_weights_and_bias(self, std_deviation, w0):\n        \"\"\"\n        Initializes the weights and biases.\n        \"\"\"\n        self.W = np.random.uniform(-std_deviation, std_deviation, (self.n_units, self.layer_input.shape[-1]))\n        self.b = np.atleast_2d(w0).T\n\n    @property\n    def output_shape(self):\n        \"\"\"Output shape of the dense layer.\"\"\"\n        return (self.n_units,)\n\n    def forward_pass(self, X, training=True):\n        \"\"\"\n        Computes the forward pass through a dense layer.\n        \"\"\"\n        self.layer_input = X\n        out = np.dot(X, self.W) + self.b\n        return out\n\n    def backward_pass(self, dL_dout):\n        \"\"\"\n        Performs the backward pass through a dense layer.\n        Updates gradients wrt. to layers and weights & biases.\n        Returns accumulated gradients for next backward pass or back propgation step.\n        \"\"\"\n        dL_dw = np.einsum('ij,jk->ik', dL_dout, self.layer_input.T)\n        dL_db = dL_dout.sum(axis=0)\n        dL_dout = np.dot(dL_dw.T, dL_dout)\n        dL_dx = np.dot(dL_dout, self.W.T)\n        delta_W = dL_dw * self.layer_input.T\n        delta_b = dL_db[:, np.newaxis]\n        self.update_weights(delta_W, delta_b, training)\n        return dL_dx\n\n    def update_weights(self, grad_wx_bydx, grad_bw, training):\n        \"\"\"\n        Update weights and biases given gradients.\n        \"\"\"\n        if training and self.trainable:\n            lr = 0.1\n            self.W -= lr * grad_wx_bydx\n            self.b -= lr * grad_bw\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[1, 2]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.1, 0.2, 0.3]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.2082, -0.2293]]\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[3, 5]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.2, 0.3, 0.4]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.287, -0.3126]]\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[2, 3]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.3, 0.4, 0.5]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.3658, -0.396]]"}
{"task_id": 41, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int) -> np.ndarray:\n    \"\"\"\n    Applies a 2D convolution on the input_matrix with a given kernel,\n    using specified padding and stride.\n\n    Parameters:\n    - input_matrix (np.ndarray): The input image or data matrix.\n    - kernel (np.ndarray): The convolutional filter/kernel matrix.\n    - padding (int): Number of zero-padded rows and columns around the input matrix.\n    - stride (int): Stride used when moving across the input matrix during convolution.\n\n    Returns:\n    - np.ndarray: A new convolved image or data matrix with the applied convolution effect.\n    \"\"\"\n    height = (input_matrix.shape[0] - kernel.shape[0]) // stride + 1\n    width = (input_matrix.shape[1] - kernel.shape[1]) // stride + 1\n    padded_input = np.pad(input_matrix, [(padding, padding), (padding, padding)])\n    result = np.zeros((height, width))\n    for y in range(height):\n        for x in range(width):\n            window = padded_input[y * stride:y * stride + kernel.shape[0], x * stride:x * stride + kernel.shape[1]]\n            result[y][x] = np.sum(window * kernel)\n    return result.tolist()\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2.], [3., -1.], ]), 0, 1)  == [[ 16., 21., 26., 31.], [ 41., 46., 51., 56.], [ 66., 71., 76., 81.], [ 91., 96., 101., 106.]]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [.5, 3.2], [1., -1.], ]), 2, 2)  == [[ 0., 0., 0., 0. ], [ 0., 5.9, 13.3, 12.5], [ 0., 42.9, 50.3, 27.5], [ 0., 80.9, 88.3, 12.5],]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2.], [3., -1.], ]), 1, 1)  == [[ -1., 1., 3., 5., 7., 15.], [ -4., 16., 21., 26., 31., 35.], [  1., 41., 46., 51., 56., 55.], [  6., 66., 71., 76., 81., 75.], [ 11., 91., 96., 101., 106., 95.], [ 42., 65., 68., 71., 74.,  25.],]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2., 3.], [-6., 2., 8.], [5., 2., 3.], ]), 0, 1)  == [ [174., 194., 214.], [274., 294., 314.], [374., 394., 414.], ]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2., 3.], [-6., 2., 8.], [5., 2., 3.], ]), 1, 2)  == [ [51., 104., 51.], [234., 294., 110.], [301., 216., -35.], ]\nassert simple_conv2d(np.array([ [1., 2., 3.], [1., 2., 3.], [1., 2., 3.],]), np.array([ [1., 2., 3.], [1., 2., 3.], [1., 2., 3.],]), 1, 1)  == [[16., 28., 16.], [24., 42., 24.], [16., 28., 16.]]"}
{"task_id": 42, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nimport numpy as np\ndef relu(z):\n    \"\"\"\n    Applies the Rectified Linear Unit (ReLU) activation function to a given input.\n\n    Parameters:\n    z (float): Input value for which the ReLU function will be applied.\n\n    Returns:\n    float: Output of the ReLU function.\n    \"\"\"\n    if z <= 0:\n        return 0\n    else:\n        return z\nassert relu(0) == 0\nassert relu(1) == 1\nassert relu(-1) == 0"}
{"task_id": 43, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Calculates the Ridge Regression loss function.\n    \n    Parameters:\n        X (np.ndarray): Feature matrix of shape (n_samples, n_features).\n        w (np.ndarray): Coefficients of shape (n_features,).\n        y_true (np.ndarray): True labels of shape (n_samples,) or (n_samples, n_targets).\n        alpha (float): Regularization parameter.\n        \n    Returns:\n        float: The value of the Ridge regression loss.\n    \"\"\"\n    residuals = y_true - X @ w\n    mse = np.mean(residuals ** 2)\n    reg_term = 0.5 * alpha * np.linalg.norm(w) ** 2\n    return mse + reg_term\nassert ridge_loss(np.array([[1,1],[2,1],[3,1],[4,1]]), np.array([.2,2]), np.array([2,3,4,5]), 0.1) == 2.204\nassert ridge_loss(np.array([[1,1,4],[2,1,2],[3,1,.1],[4,1,1.2],[1,2,3]]), np.array([.2,2,5]), np.array([2,3,4,5,2]), 0.1) == 164.402\nassert ridge_loss(np.array([[3,4,1],[1,2,2],[1,.1,3],[1.2,1,4],[1,2,3]]), np.array([2,.2,5]), np.array([2,3,4,5,2]), 0.1) == 183.0721"}
{"task_id": 44, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky Rectified Linear Unit (Leaky ReLU) activation function to a given input z.\n    \n    Parameters:\n        z (float): The input value before applying the activation function.\n        alpha (float, optional): Slope for negative inputs. Default is 0.01.\n        \n    Returns:\n        float: The result of applying Leaky ReLU to the input z.\n    \"\"\"\n    if z < 0:\n        return alpha * z\n    else:\n        return z\nassert leaky_relu(5) == 5\nassert leaky_relu(1) == 1\nassert leaky_relu(-1) == -0.01\nassert leaky_relu(0) == 0\nassert leaky_relu(-2, alpha=0.1) == -0.2"}
{"task_id": 45, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel between two input vectors.\n\n    Parameters:\n        x1 (np.ndarray): First input vector.\n        x2 (np.ndarray): Second input vector.\n\n    Returns:\n        float: The value of the linear kernel between x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\nassert kernel_function(np.array([1, 2, 3]) , np.array([4, 5, 6]) ) == 32\nassert kernel_function(np.array([0, 1, 2]) , np.array([3, 4, 5]) ) == 14\nassert kernel_function(np.array([3, 1, 2, 5]) , np.array([3, 6, 4, 5]) ) == 48"}
{"task_id": 46, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric.\n\n    Parameters:\n    - y_true (numpy.ndarray): True binary labels.\n    - y_pred (numpy.ndarray): Predicted binary labels.\n\n    Returns:\n    - float: Precision value.\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        return 0\n    else:\n        return tp / (tp + fp)\nassert precision(np.array([1, 0, 1, 1, 0, 1])  , np.array([1, 0, 1, 0, 0, 1]) ) == 1.0\nassert precision(np.array([1, 0, 1, 1, 0, 0])  , np.array([1, 0, 0, 0, 0, 1]) ) == 0.5\nassert precision(np.array([1, 0, 1, 1, 0, 0, 1, 1])  , np.array([1, 0, 0, 0, 0, 1, 0, 0])) == 0.5"}
{"task_id": 47, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid activation function for a given input x.\n    \n    Parameters:\n    - x: Input value(s).\n    \n    Returns:\n    - Sigmoid activations.\n    \"\"\"\n    return 1 / (1 + np.exp(-x))\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent with mean squared error (MSE) loss.\n    \n    Parameters:\n    - X: Feature matrix.\n    - y: Target vector.\n    - weights: Model parameters.\n    - learning_rate: Learning rate for updating parameters.\n    - n_iterations: Number of iterations for gradient descent.\n    - batch_size: Size of mini-batches used during training.\n    - method: Variant of gradient descent to use ('sgd', 'batch', or 'mini_batch').\n    \n    Returns:\n    - Reshaped list of updated weights after `n_iterations` iterations.\n    \"\"\"\n    if method == 'sgd':\n        n_samples = len(y)\n        for _ in range(n_iterations):\n            gradients = np.dot(X.T, sigmoid(np.dot(X, weights)) - y)\n            weights -= learning_rate * gradients\n    elif method == 'batch':\n        n_batches = int(np.ceil(len(y) / batch_size))\n        for _ in range(n_iterations):\n            indices = np.random.permutation(range(len(y)))\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n            for i in range(0, len(indices), batch_size):\n                gradients = np.dot(X_shuffled[i:i + batch_size].T, sigmoid(np.dot(X_shuffled[i:i + batch_size], weights)) - y_shuffled[i:i + batch_size])\n                weights -= learning_rate * gradients\n    elif method == 'mini_batch' and n_samples % batch_size > 0:\n        raise ValueError('Batch size must evenly divide number of samples.')\n        n_batches = int(np.ceil(len(y) / batch_size))\n        for _ in range(n_iterations):\n            indices = np.random.permutation(range(len(y)))\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n            for i in range(0, len(indices), batch_size):\n                gradients = np.dot(X_shuffled[i:i + batch_size].T, sigmoid(np.dot(X_shuffled[i:i + batch_size], weights)) - y_shuffled[i:i + batch_size])\n                weights -= learning_rate * gradients\n    else:\n        raise ValueError('Invalid gradient descent method specified.')\n    return weights.reshape(-1)\nX = np.array([[1, 2], [3, 4]])\ny = np.array([5, 6])\nlearning_rate = 0.1\nn_iterations = 10000\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, method='batch') == [1.1491, 0.5618]\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, method='stochastic') == [1.0508, 0.8366]\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, 2, method='mini_batch') == [1.1033, 0.6833]"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: Matrix dimensions do not match.", "solution": "import numpy as np\nimport numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a matrix A into its Reduced Row Echelon Form (RREF).\n\n    Args:\n        matrix (np.ndarray): A square or tall matrix.\n\n    Returns:\n        np.ndarray: The RREF of the input matrix A.\n    \"\"\"\n    n = len(matrix)\n    assert n == len(matrix[0]), 'Matrix dimensions do not match.'\n    rref_matrix = matrix.copy()\n    for i in range(n):\n        pivot = max(range(i, n), key=lambda j: abs(rref_matrix[j][i]))\n        if i != pivot:\n            np.swapaxes(rref_matrix, i, pivot)\n            np.swapaxes(matrix, i, pivot)\n        pivot_value = rref_matrix[i][i]\n        rref_matrix[i] /= pivot_value\n        for j in range(i + 1, n):\n            factor = rref_matrix[j][i]\n            rref_matrix[j] -= factor * rref_matrix[i]\n    return rref_matrix.tolist()\nassert rref(np.array([ [1, 2, -1, -4], [2, 3, -1, -11], [-2, 0, -3, 22] ])) == [[ 1., 0., 0., -8.], [ 0., 1., 0., 1.], [-0., -0., 1., -2.]]\nassert rref(np.array([ [2, 4, -2], [4, 9, -3], [-2, -3, 7] ])) == [[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]\nassert rref(np.array([ [0, 2, -1, -4], [2, 0, -1, -11], [-2, 0, 0, 22] ])) == [[ 1., 0., 0., -11.],[-0., 1., 0., -7.5],[-0., -0., 1., -11.]]\nassert rref(np.array([ [1, 2, -1], [2, 4, -1], [-2, -4, -3]])) == [[ 1., 2., 0.],[ 0., 0., 0.],[-0., -0., 1.]]"}
{"task_id": 49, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm for updating the parameters of a given function.\n\n    Parameters:\n        f (function): Objective function to be minimized.\n        grad (function): Gradient function corresponding to the objective function.\n        x0 (array-like): Initial set of parameters.\n        learning_rate (float): Step size; default value = 0.001.\n        beta1 (float): Exponential decay rate for the running average of gradients (default = 0.9).\n        beta2 (float): Exponential decay rate for the running average of squared gradients (default = 0.999).\n        epsilon (float): Small constant added to variance to avoid dividing by zero (default = 1e-8).\n        num_iterations (int): Number of iterations over which update takes place; default value = 1000.\n\n    Returns:\n        optimized_params (numpy.ndarray): Optimized parameters after num_iterations steps.\n    \"\"\"\n    x0 = np.array(x0)\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 1\n    while t < num_iterations:\n        m_hat = beta1 * m + (1 - beta1) * grad(x0)\n        v_hat = beta2 * v + (1 - beta2) * grad(x0) ** 2\n        x0 -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon) ** (1 / 2)\n        t += 1\n    return x0.tolist()\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([1.0, 1.0])) == [0.99, 0.99]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([0.2, 12.3])) == [ 0.19, 12.29]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([1, 3])) == [0.99, 2.99]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([5, 8])) == [4.99, 7.99]"}
{"task_id": 50, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef calculate_l1_penalty(weights):\n    return np.abs(weights).sum()\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    initial_weights = np.random.randn(n_features)\n    initial_bias = 0\n    current_weights = initial_weights.copy()\n    current_bias = initial_bias\n    for iteration in range(max_iter):\n        y_pred = np.dot(X, current_weights) + current_bias\n        grad_w = -(np.dot(X.T, y - y_pred) / n_samples) + alpha * np.sign(current_weights)\n        grad_b = -(np.sum(y - y_pred) / n_samples) + alpha * np.sign(current_bias)\n        current_weights -= learning_rate * grad_w\n        current_bias -= learning_rate * grad_b\n        if abs(calculate_l1_penalty(current_weights)) < tol:\n            break\n    final_weights = [round(weight.item(), 4) for weight in current_weights]\n    final_bias = round(current_bias.item(), 4)\n    return (final_weights, final_bias)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 8, 9])\nassert l1_regularization_gradient_descent(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 2]), alpha=0.1, learning_rate=0.01, max_iter=1000)  == ([0.4237, 0.4237], 0.1539)\nassert l1_regularization_gradient_descent(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 2]), alpha=0.1, learning_rate=0.01, max_iter=5000)  == ([0.4249, 0.4249], 0.1504)\nassert l1_regularization_gradient_descent(np.array([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]), np.array([1, 2, 3, 4, 5]), alpha=0.1, learning_rate=0.01, max_iter=1000)  == ([0.2728, 0.6811], 0.4083)"}
{"task_id": 51, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two strings.\n\n    Args:\n        source (str): The original string.\n        target (str): The target string to align with the original string.\n\n    Returns:\n        int: The minimum number of edits required to transform the source string into the target string.\n    \"\"\"\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                transposed_cost = 0\n            else:\n                transposed_cost = 3\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + transposed_cost)\n    return dp[m][n]\nassert OSA(\"butterfly\", \"dragonfly\") == 6\nassert OSA(\"caper\", \"acer\") == 2\nassert OSA(\"telescope\", \"microscope\") == 5\nassert OSA(\"london\", \"paris\") == 6\nassert OSA(\"shower\", \"grower\") == 2\nassert OSA(\"labyrinth\", \"puzzle\") == 9\nassert OSA(\"silhouette\", \"shadow\") == 8\nassert OSA(\"whisper\", \"screaming\") == 9\nassert OSA(\"enigma\", \"mystery\") == 7\nassert OSA(\"symphony\", \"cacophony\") == 4\nassert OSA(\"mirage\", \"oasis\") == 6\nassert OSA(\"asteroid\", \"meteorite\") == 5\nassert OSA(\"palindrome\", \"palladium\") == 5"}
{"task_id": 52, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n\n    Parameters:\n        y_true (list): List of true binary labels (0 or 1).\n        y_pred (list): List of predicted binary labels (0 or 1).\n\n    Returns:\n        float: Recall value rounded to three decimal places.\n    \"\"\"\n    assert len(y_true) == len(y_pred), 'The lengths of y_true and y_pred must be equal.'\n    tp = sum((1 for i in range(len(y_true)) if y_true[i] == 1 and y_pred[i] == 1))\n    fn = sum((1 for i in range(len(y_true)) if y_true[i] == 1 and y_pred[i] != 1))\n    if tp + fn == 0:\n        return 0.0\n    recall_value = tp / (tp + fn)\n    return round(recall_value, 3)\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 1])) == 0.75\nassert recall(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 0, 0, 0, 1])) == 0.333\nassert recall(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 1, 1, 0, 0])) == 1.0\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 0, 0, 1, 0, 1])) == 0.5\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 1, 0, 0, 1, 0])) == 0.0\nassert recall(np.array([1, 0, 0, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 0])) == 0.667"}
{"task_id": 53, "completion_id": 0, "passed": false, "result": "failed: only length-1 arrays can be converted to Python scalars", "solution": "import numpy as np\nimport numpy as np\ndef self_attention(X, h=8, d_model=64, dropout_rate=0.1):\n    batch_size = X.shape[0]\n    seq_len = X.shape[1]\n    num_heads = h\n    q_dim = int(d_model / num_heads)\n    query_matrix = np.zeros((batch_size * num_heads, seq_len, q_dim))\n    key_matrix = np.zeros((batch_size * num_heads, seq_len, q_dim))\n    value_matrix = np.zeros((batch_size * num_heads, seq_len, q_dim))\n    for i in range(batch_size):\n        for j in range(num_heads):\n            row_idx = i * num_heads + j\n            if i == 0:\n                query_matrix[row_idx] = W_q[j].dot(X[i])\n                key_matrix[row_idx] = W_k[j].dot(X[i])\n                value_matrix[row_idx] = W_v[j].dot(X[i])\n            else:\n                query_matrix[row_idx] = np.concatenate([query_matrix[row_idx], W_q[j].dot(X[i])], axis=0)\n                key_matrix[row_idx] = np.concatenate([key_matrix[row_idx], W_k[j].dot(X[i])], axis=0)\n                value_matrix[row_idx] = np.concatenate([value_matrix[row_idx], W_v[j].dot(X[i])], axis=0)\n    query_normed = np.einsum('bij,bkj->bik', query_matrix, query_matrix) ** 0.5\n    key_normed = np.einsum('bij,bkj->bik', key_matrix, key_matrix) ** 0.5\n    attn_scores = np.matmul(query_normalized, key_normed.T) / np.sqrt(q_dim)\n    attn_scores_dropout = attn_scores.flatten()\n    attn_scores_dropout = np.random.rand(len(attn_scores_dropout)) < 1 - dropout_rate\n    attn_scores_dropout = np.reshape(attn_scores_dropout, [-1, seq_len, seq_len])\n    attn_probs = np.exp(attn_scores_dropout)\n    sum_exp_scores = np.sum(attn_probs, axis=-1, keepdims=True)\n    softmax_probabilities = attn_probs / sum_exp_scores\n    attention_output = np.einsum('ijk,ikl->ijl', softmax_probabilities.transpose(0, 2, 1), value_matrix).transpose(0, 2, 1)\n    attention_output = np.array([x.reshape(batch_size, num_heads, seq_len, q_dim) for x in attention_output]).reshape(-1, seq_len, q_dim)\n    return attention_output.tolist()\nX = np.random.randint(low=1, high=10, size=(4, 8))\nassert self_attention(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[1.6605, 2.6605], [2.3395, 3.3395]]\nassert self_attention(np.array([[1, 1], [1, 0]]), np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[3.0093, 4.679], [2.5, 4.0]]\nassert self_attention(np.array([[1, 0, 1], [0, 1, 1], [1, 1, 0]]), np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]), np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]), np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [[8.0, 10.0, 12.0], [8.6199, 10.6199, 12.6199], [7.3801, 9.3801, 11.3801]]"}
{"task_id": 54, "completion_id": 0, "passed": false, "result": "failed: name 'h_prev' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    num_steps = len(input_sequence)\n    num_inputs = len(input_sequence[0])\n    hidden_size = len(initial_hidden_state)\n    h_next = initial_hidden_state.copy()\n    for t in range(num_steps):\n        x_t = np.array([input_sequence[t]]).T\n        zt = np.dot(x_t, Wx[t]) + np.dot(h_prev, Wh[t]) + b[t]\n        if t == 0:\n            h_next = max(zt - np.exp(zt), 0)\n        else:\n            h_next = np.tanh(zt)\n        h_next = h_next.reshape(hidden_size)\n        h_next = np.round(h_next, decimals=4)\n    return h_next.tolist()\nassert rnn_forward([[1.0], [2.0], [3.0]], [0.0], [[0.5]], [[0.8]], [0.0]) == [0.9759]\nassert rnn_forward([[0.5], [0.1], [-0.2]], [0.0], [[1.0]], [[0.5]], [0.1]) == [0.118]\nassert rnn_forward( [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [0.0, 0.0], [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8], [0.9, 1.0]], [0.1, 0.2] ) == [0.7474, 0.9302]"}
{"task_id": 55, "completion_id": 0, "passed": false, "result": "failed: shapes (3,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Translates each point in 'points' by 'tx' units in the X direction and 'ty' units in the Y direction.\n    \n    :param points: List of [x, y] tuples representing the original positions of the objects.\n    :param tx: The amount to translate along the X-axis.\n    :param ty: The amount to translate along the Y-axis.\n    :return: A list of translated [x, y] tuples.\n    \"\"\"\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    transformed_points = np.dot(translation_matrix, points_array.T).T\n    translated_points_list = transformed_points.tolist()\n    return translated_points_list\nassert translate_object([[0, 0], [1, 0], [0.5, 1]], 2, 3) ==  [[2.0, 3.0], [3.0, 3.0], [2.5, 4.0]]\nassert translate_object([[0, 0], [1, 0], [1, 1], [0, 1]], -1, 2) == [[-1.0, 2.0], [0.0, 2.0], [0.0, 3.0], [-1.0, 3.0]]\nassert translate_object([[0, 0], [1, 0], [1, 1], [0, 1]], 2, 3) == [[2.0, 3.0], [3.0, 3.0], [3.0, 4.0], [2.0, 4.0]]"}
{"task_id": 56, "completion_id": 0, "passed": false, "result": "failed: object of type 'float' has no len()", "solution": "import numpy as np\nimport numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the Kullback-Leibler (KL) divergence between two normal distributions.\n\n    Args:\n    - mu_p (float or array-like): Mean of the first normal distribution.\n    - sigma_p (float or array-like): Standard deviation of the first normal distribution.\n    - mu_q (float or array-like): Mean of the second normal distribution.\n    - sigma_q (float or array-like): Standard deviation of the second normal distribution.\n\n    Returns:\n    - float: The KL divergence as a floating-point number.\n    \n    Formula for KL divergence:\n    KL(P || Q) = \u2211 p(x) log(p(x)/q(x))\n                = 0.5 * (log(\u03c3_Q / \u03c3_P)^2 + (\u03bc_P - \u03bc_Q)^2 / \u03c3_Q^2 + 1 / \u03c3_Q^2 - 1)\n    \n    Note:\n    This formula assumes both distributions have the same shape parameter.\n    If they do not, you may need to normalize them appropriately before calculating the divergence.\n    \"\"\"\n    if len(mu_p) != len(sigma_p) or len(mu_p) != len(mu_q) or len(mu_q) != len(sigma_q):\n        raise ValueError('All input arrays must be the same length.')\n    sigma_p = np.array(sigma_p, dtype=np.float64)\n    sigma_q = np.array(sigma_q, dtype=np.float64)\n    sigma_p = np.maximum(sigma_p, 0.0)\n    sigma_q = np.maximum(sigma_q, 0.0)\n    kl_d = 0.5 * (np.log(sigma_q / sigma_p) ** 2 + (mu_p - mu_q) ** 2 / sigma_q ** 2 + 1 / sigma_q ** 2 - 1)\n    return kl_d.sum()\nassert kl_divergence_normal(0.0, 1.0, 0.0, 1.0) == 0.0\nassert kl_divergence_normal(0.0, 1.0, 1.0, 1.0) == 0.5\nassert kl_divergence_normal(0.0, 1.0, 0.0, 2.0) == 0.3181471805599453\nassert kl_divergence_normal(1.0, 1.0, 0.0, 2.0) == 0.4431471805599453\nassert kl_divergence_normal(2.0, 1.0, 3.0, 2.0) == 0.4431471805599453\nassert kl_divergence_normal(0.0, 2.0, 0.0, 3.0) == 0.1276873303303866"}
{"task_id": 57, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Implements the Gauss-Seidel method to solve a system of linear equations Ax = b.\n    \n    Parameters:\n        A (np.ndarray): Square coefficient matrix.\n        b (np.ndarray): Right-hand side vector.\n        n (int): Number of iterations for convergence check.\n        x_ini (np.ndarray): Initial guess for the solution vector (default: [0]*len(b)).\n        \n    Returns:\n        np.ndarray: Approximated solution vector after 'n' iterations.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    if x_ini is None:\n        x_ini = np.zeros_like(b)\n    x = x_ini.copy()\n    converged = False\n    for _ in range(n):\n        new_x = x.copy()\n        for i in range(len(x)):\n            sum_val = sum((A[i, j] * x[j] for j in range(i)))\n            new_x[i] = (b[i] - sum_val) / A[i, i]\n            if np.abs(new_x[i] - x[i]) < 1e-06:\n                converged = True\n                break\n        if converged:\n            break\n        x = new_x\n    return x.tolist()\nA = np.array([[3, 2], [2, 5]])\nb = np.array([18, 17])\nassert gauss_seidel(np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float), np.array([4, 7, 3], dtype=float), 5) == [0.5008, 0.9997, 0.4998]\nassert gauss_seidel(np.array([[4, -1, 0, 1], [-1, 4, -1, 0], [0, -1, 4, -1], [1, 0, -1, 4]], dtype=float), np.array([15, 10, 10, 15], dtype=float), 1) == [3.75, 3.4375, 3.3594, 3.6523]\nassert gauss_seidel(np.array([[10, -1, 2], [-1, 11, -1], [2, -1, 10]], dtype=float), np.array([6, 25, -11], dtype=float), 100) == [1.0433, 2.2692, -1.0817]"}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    A_np = np.array(A)\n    b_np = np.array(b)\n    while len(A_np[0]) > n:\n        A_np = np.hstack((A_np, [[0] * n]))\n    x = np.zeros(n)\n    for j in range(n - 1):\n        pivot_index = max(range(j, n), key=lambda i: abs(A_np[i][j]))\n        A_np[[j, pivot_index], :] = A_np[[pivot_index, j], :]\n        b_np[[j, pivot_index]] = b_np[[pivot_index, j]]\n        factor = A_np[j][j]\n        A_np[j] /= factor\n        for i in range(j + 1, n):\n            factor = A_np[i][j]\n            A_np[i] -= factor * A_np[j]\n            b_np[i] -= factor * b_np[j]\n    for j in range(n - 1, -1, -1):\n        x[j] = (b_np[j] - sum((x[k] * A_np[j][k] for k in range(j + 1)))) / A_np[j][j]\n    return [round(element, 4) for element in x.tolist()]\nA = [[3, -1, 2], [-1, 5, -1], [2, 3, 8]]\nb = [7, 6, -9]\nassert gaussian_elimination(np.array([[2,8,4], [2,5,1], [4,10,-1]], dtype=float), np.array([2,5,1], dtype=float)) == [11.0, -4.0, 3.0]\nassert gaussian_elimination(np.array([ [0, 2, 1, 0, 0, 0, 0], [2, 6, 2, 1, 0, 0, 0], [1, 2, 7, 2, 1, 0, 0], [0, 1, 2, 8, 2, 1, 0], [0, 0, 1, 2, 9, 2, 1], [0, 0, 0, 1, 2, 10, 2], [0, 0, 0, 0, 1, 2, 11] ], dtype=float), np.array([1, 2, 3, 4, 5, 6, 7], dtype=float)) == [-0.4894, 0.3617, 0.2766, 0.2554, 0.319, 0.4039, 0.5339]\nassert gaussian_elimination(np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float), np.array([8, -11, -3], dtype=float)) == [2.0, 3.0, -1.0]"}
{"task_id": 59, "completion_id": 0, "passed": false, "result": "failed: name 'lstm' is not defined", "solution": "import numpy as np\nimport numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, xs, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        (N, T) = (xs.shape[0], xs.shape[1])\n        batch_size = N // T\n        h_prev = initial_hidden_state.reshape(-1)\n        c_prev = initial_cell_state.reshape(-1)\n        hidden_states = []\n        for t in range(T):\n            xt = xs[:, t:t + 1]\n            if t == 0:\n                H_tilde = np.concatenate([h_prev, xt], axis=1)\n            else:\n                H_tilde = np.concatenate([H_prev[t - 1], xt], axis=1)\n            i = sigmoid(np.dot(H_tilde, self.Wi) + np.dot(h_prev, self.bi) + self.bi)\n            f = sigmoid(np.dot(H_tilde, self.Wf) + np.dot(h_prev, self.bf) + self.bf)\n            o = sigmoid(np.dot(H_tilde, self.Wo) + np.dot(h_prev, self.bo) + self.bo)\n            g = tanh(np.dot(H_tilde, self.Wc) + np.dot(h_prev, self.bc) + self.bc)\n            ct = f * c_prev + i * g\n            ht = o * tanh(ct)\n            h_prev = ht\n            c_prev = ct\n            hidden_states.append(ht.reshape(batch_size))\n        return np.array(hidden_states).tolist()\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef tanh(x):\n    return np.tanh(x)\ninput_size = 20\nhidden_size = 256\nxs = np.random.rand(32, 8)\ninitial_hidden_state = np.zeros((hidden_size,))\ninitial_cell_state = np.zeros((hidden_size,))\nhidden_states = lstm.forward(xs, initial_hidden_state, initial_cell_state)\ninput_sequence = np.array([[1.0], [2.0], [3.0]]) \ninitial_hidden_state = np.zeros((1, 1)) \ninitial_cell_state = np.zeros((1, 1)) \nlstm = LSTM(input_size=1, hidden_size=1) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.5, 0.5]]) \nlstm.Wi = np.array([[0.5, 0.5]]) \nlstm.Wc = np.array([[0.3, 0.3]]) \nlstm.Wo = np.array([[0.5, 0.5]]) \nlstm.bf = np.array([[0.1]]) \nlstm.bi = np.array([[0.1]]) \nlstm.bc = np.array([[0.1]]) \nlstm.bo = np.array([[0.1]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.7370]]\ninput_sequence = np.array([[0.1, 0.2], [0.3, 0.4]]) \ninitial_hidden_state = np.zeros((2, 1)) \ninitial_cell_state = np.zeros((2, 1)) \nlstm = LSTM(input_size=2, hidden_size=2) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wi = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wc = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wo = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.bf = np.array([[0.1], [0.2]]) \nlstm.bi = np.array([[0.1], [0.2]]) \nlstm.bc = np.array([[0.1], [0.2]]) \nlstm.bo = np.array([[0.1], [0.2]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.1661], [0.4030]]\ninput_sequence = np.array([[1, 3], [2, 4]]) \ninitial_hidden_state = np.zeros((2, 1)) \ninitial_cell_state = np.zeros((2, 1)) \nlstm = LSTM(input_size=2, hidden_size=2) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wi = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wc = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wo = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.bf = np.array([[0.1], [0.2]]) \nlstm.bi = np.array([[0.1], [0.2]]) \nlstm.bc = np.array([[0.1], [0.2]]) \nlstm.bo = np.array([[0.1], [0.2]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.8543], [0.9567]]"}
{"task_id": 60, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'split'", "solution": "import numpy as np\nimport numpy as np\ndef compute_tf_idf(corpus, query):\n    if len(corpus) == 0:\n        raise ValueError('Corpus cannot be empty.')\n    tfidf_scores = []\n    query_tfs = np.array([sum((word.lower() in d for word in query.split())) for d in corpus])\n    num_documents = len(corpus)\n    doc_freqs = [len(set(d.split())) for d in corpus]\n    df_correction_factor = 0.5 + np.log(num_documents) / np.log(len(doc_freqs))\n    for (i, q) in enumerate(query_tfs):\n        try:\n            idf_value = np.log(num_documents / df_correction_factor[doc_freqs.index(q)])\n        except ValueError:\n            idf_value = float('inf')\n        tf_idf_score = q * idf_value\n        tf_idf_scores.append(round(tf_idf_score, 4))\n    return tf_idf_scores.tolist()\ncorpus = ['the quick brown fox jumps over the lazy dog', 'lazy dog jumps over the fox quickly']\nassert compute_tf_idf([ [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"], [\"the\", \"dog\", \"chased\", \"the\", \"cat\"], [\"the\", \"bird\", \"flew\", \"over\", \"the\", \"mat\"] ] , [\"cat\"]) == [[0.2146], [0.2575], [0.0]]\nassert compute_tf_idf([ [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"], [\"the\", \"dog\", \"chased\", \"the\", \"cat\"], [\"the\", \"bird\", \"flew\", \"over\", \"the\", \"mat\"] ], [\"cat\", \"mat\"]) == [[0.2146, 0.2146], [0.2575, 0.0], [0.0, 0.2146]]\nassert compute_tf_idf([ [\"this\", \"is\", \"a\", \"sample\"], [\"this\", \"is\", \"another\", \"example\"], [\"yet\", \"another\", \"sample\", \"document\"], [\"one\", \"more\", \"document\", \"for\", \"testing\"] ], [\"sample\", \"document\", \"test\"]) == [[0.3777, 0.0, 0.0], [0.0, 0.0, 0.0], [0.3777, 0.3777, 0.0], [0.0, 0.3022, 0.0]]"}
{"task_id": 61, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = y_true.astype(int)\n    y_pred = y_pred.astype(int)\n    from sklearn.metrics import precision_recall_fscore_support\n    (precision, recall, fscore, _) = precision_recall_fscore_support(y_true, y_pred, average='binary', beta=beta)\n    return round(fscore[0], 3)\nassert f_score(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 1]), 1) == 0.857\nassert f_score(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 0, 0, 0, 1]), 1) == 0.4\nassert f_score(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 1, 1, 0, 0]), 2) == 1.0\nassert f_score(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 0, 0, 1, 0, 1]), 2) == 0.556\nassert f_score(np.array([1, 1, 1, 1, 0, 0, 0]), np.array([0, 1, 0, 1, 1, 0, 0]), 3) == 0.513"}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: not enough values to unpack (expected 3, got 2)", "solution": "import numpy as np\nimport numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        (N, T, _) = x.shape\n        h = np.zeros((N, self.hidden_size))\n        y_pred = np.zeros((N, T, self.output_size))\n        for t in range(T):\n            h = self._step(x[:, t], h)\n            y_pred[:, t] = self._softmax(h)\n        return (y_pred, h)\n\n    def _step(self, x_t, h_tm1):\n        \"\"\"\n        Computes the hidden state for the current time step.\n        \"\"\"\n        z_t = np.dot(self.W_xh, x_t.T) + np.dot(self.W_hh, h_tm1.T) + self.b_h\n        g_t = np.tanh(z_t)\n        h_t = self.hyperbolic_tangent_derivative(g_t) * np.dot(self.W_hy, g_t.T) + self.b_y\n        return h_t\n\n    @staticmethod\n    def hyperbolic_tangent_derivative(x):\n        \"\"\"Derivative of tanh.\"\"\"\n        return 1 - x ** 2\n\n    def _softmax(self, h):\n        \"\"\"\n        Softmax function.\n        \"\"\"\n        exp_scores = np.exp(h)\n        return exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n\n    def backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Perform backpropagation through time (BPTT).\n        Adjusts the weights based on the loss.\n        \"\"\"\n        (N, T, _) = input_sequence.shape\n        dy_dhh = np.zeros((N, hidden_size, hidden_size))\n        dh_prev_dh_next = np.zeros((hidden_size, hidden_size))\n        for t in reversed(range(T)):\n            (dt_dx, dt_dh) = self._compute_dt_dhx(expected_output[:, t].reshape((-1, 1)), outputs[:, t])\n            (dht_dwy, dht_db) = self._compute_dht_dydx(outputs[:, t])\n            dh_next = dht_dwy if t == T - 1 else dh_prev_dh_next\n            h_t = last_hiddens[t]\n            h_t_next = self._step(last_inputs[:, t], h_t)\n            dh_next = dh_next.reshape(N, 1, hidden_size) if len(dh_next.shape) > 1 else dh_next\n            dh_prev_dh_next += np.outer(dh_next, h_t_next)\n            dxdt = self._forward_pass(dt_dx).T\n            dw_xh = np.einsum('ij,jkl->ikl', dxdt, dh_prev_dh_next)\n            dW_xh = dw_xh / N\n            dbh = np.mean(dh_prev_dh_next, axis=0)\n            dW_hh = np.dot(dht_dwy.T, dh_prev_dh_next) / N\n            dzdt = (np.tile(np.expand_dims(last_inputs[:, t], axis=1), (1, T, 1)) * last_hiddens).reshape(N, T, hidden_size)\n            dzdt = np.sum(dzdt, axis=-1, keepdims=False)\n            dt_dy = np.tile(np.expand_dims(outputs[:, t], axis=1), (1, T, 1)).reshape(-1, T, hidden_size)\n            dt_dy = np.sum(dt_dy, axis=-1, keepdims=False)\n            dt_dh = dzdt * self.hyperbolic_tangent_derivative(h_t)\n            dW_hy = np.dot(dt_dh.T, dh_next).reshape(b_y.shape[0], -1) / N\n            db_h = np.mean(dbh, axis=0)\n            db_y = np.mean(dW_hy)\n            W_xh -= learning_rate * dW_xh\n            W_hh -= learning_rate * dW_hh\n            W_hy -= learning_rate * dW_hy\n            b_h -= learning_rate * db_h\n            b_y -= learning_rate * db_y\n\n    def _compute_dt_dhx(self, e_t, o_t):\n        \"\"\"\n        Compute dE/dx_i for single element.\n        \"\"\"\n        dt_dhx = np.zeros_like(e_t)\n        dt_dhx[e_t >= 0] = self._dsoftmax(o_t[:, e_t.argmax()])\n        return dt_dhx\n\n    @staticmethod\n    def _dsoftmax(y):\n        \"\"\"Compute the derivative of the softmax function for one element.\"\"\"\n        probs = np.exp(y - y.max(axis=-1, keepdims=True))\n        return probs / np.sum(probs, axis=-1, keepdims=True)\n\n    def _compute_dht_dydx(self, o_t):\n        \"\"\"\n        Compute dE/dy_j for single element.\n        \"\"\"\n        dy_dx = np.zeros_like(o_t)\n        dy_dx[o_t > 0] = self._dsoftmax(o_t[:, o_t.argmax()])\n        return dy_dx\n\n    @staticmethod\n    def _forward_pass(self, dt_dx):\n        \"\"\"\n        Compute forward pass for dt_dx.\n        \"\"\"\n        z = np.dot(W_xh, dt_dx) + np.dot(W_hh, self.h.T) + b_h\n        g = np.tanh(z)\n        return g\nnp.random.seed(42)\ninput_sequence = np.array([[1.0], [2.0], [3.0], [4.0]])\nexpected_output = np.array([[2.0], [3.0], [4.0], [5.0]])\nrnn = SimpleRNN(input_size=1, hidden_size=5, output_size=1)\n# Train the RNN over multiple epochs\n\nfor epoch in range(100): \n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[2.2414]], [[3.1845]], [[4.0431]], [[4.5742]]]\nnp.random.seed(42)\ninput_sequence = np.array([[1.0,2.0], [7.0,2.0], [1.0,3.0], [12.0,4.0]])\nexpected_output = np.array([[2.0], [3.0], [4.0], [5.0]])\nrnn = SimpleRNN(input_size=2, hidden_size=3, output_size=1)\n# Train the RNN over multiple epochs\nfor epoch in range(100):\n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[2.422]], [[3.4417]], [[3.613]], [[4.5066]]]\nnp.random.seed(42)\ninput_sequence = np.array([[1.0,2.0], [7.0,2.0], [1.0,3.0], [12.0,4.0]])\nexpected_output = np.array([[2.0,1.0], [3.0,7.0], [4.0,8.0], [5.0,10.0]])\nrnn = SimpleRNN(input_size=2, hidden_size=10, output_size=2)\n# Train the RNN over multiple epochs\nfor epoch in range(50):\n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[3.2842], [5.9353]], [[3.6039], [6.8201]], [[3.5259], [6.5828]], [[3.6134], [6.8492]]]"}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: allclose() missing 1 required positional argument: 'b'", "solution": "import numpy as np\nimport numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if not isinstance(A, np.ndarray) or not isinstance(b, np.ndarray):\n        raise ValueError('Inputs must be numpy arrays.')\n    if not (np.allclose(np.dot(A.T, A), A @ A) and np.allclose(np.linalg.eigvals(A) > 0)):\n        raise ValueError('Matrix A must be symmetric and positive definite.')\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    r = b - np.dot(A, x0)\n    p = r.copy()\n    x = x0.copy()\n    residual_norm = np.linalg.norm(r)\n    iteration_count = 0\n    while residual_norm > tol and iteration_count < n:\n        Ap = np.dot(A, p)\n        alpha = residual_norm ** 2 / np.dot(p, np.dot(Ap, p))\n        beta = residual_norm ** 2\n        x += alpha * p\n        x += beta * r\n        p = r + beta * Ap\n        residual_norm = np.linalg.norm(r)\n        print(f'Iteration {iteration_count}: Residual norm = {residual_norm}')\n        if iteration_count == 0:\n            res_norms.append(residual_norm)\n        iteration_count += 1\n    return x.tolist()\nassert conjugate_gradient(np.array([[6, 2, 1, 1, 0], [2, 5, 2, 1, 1], [1, 2, 6, 1, 2], [1, 1, 1, 7, 1], [0, 1, 2, 1, 8]]), np.array([1, 2, 3, 4, 5]), 100) == [0.01666667, 0.11666667, 0.21666667, 0.45, 0.5]\nassert conjugate_gradient(np.array([[4, 1, 2], [1, 3, 0], [2, 0, 5]]), np.array([7, 8, 5]), 1) == [1.2627451, 1.44313725, 0.90196078]\nassert conjugate_gradient(np.array([[6, 2, 1, 1, 0], [2, 5, 2, 1, 1], [1, 2, 6, 1, 2], [1, 1, 1, 7, 1], [0, 1, 2, 1, 8]]), np.array([1, 2, 3, 4, 5]), 100) == [0.01666667, 0.11666667, 0.21666667, 0.45, 0.5]"}
{"task_id": 64, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    n_classes = len(set(y))\n    if not n_classes:\n        return 0.0\n    prob_class = [y.count(i) / len(y) for i in range(n_classes)]\n    gini = 1 - sum((p ** 2 for p in prob_class))\n    return round(gini * 1000) / 1000\nclass_labels = [1, 2, 3, 2, 4]\ngini = gini_impurity(class_labels)\nassert gini_impurity([0, 0, 0, 0, 1, 1, 1, 1]) == 0.5\nassert gini_impurity([0, 0, 0, 0, 0, 1]) == 0.278\nassert gini_impurity([0, 1, 2, 2, 2, 1, 2]) == 0.571"}
{"task_id": 65, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (0,) (6,) ", "solution": "\nimport numpy as np\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    dense_array = np.array(dense_matrix)\n    num_non_zero_elements = np.count_nonzero(dense_array)\n    values = []\n    column_indices = [0]\n    row_pointers = []\n    for (i, row) in enumerate(dense_array):\n        if not any(row):\n            continue\n        start_index = len(column_indices)\n        end_index = len(column_indices)\n        for (j, value) in enumerate(row):\n            if value != 0:\n                end_index += 1\n            column_indices.append(end_index)\n        row_pointers.append(start_index)\n    while len(row_pointers) < num_non_zero_elements + 1:\n        row_pointers.append(num_non_zero_elements + 1)\n    values = [value for (_, value) in sorted(zip(row_pointers, values))]\n    column_indices = [column - 1 for column in column_indices[1:]]\n    return (np.array(values), np.array(column_indices), np.array(row_pointers))\nassert compressed_row_sparse_matrix([[1, 0, 0, 0], [0, 2, 0, 0], [3, 0, 4, 0], [1, 0, 0, 5]]) == ([1, 2, 3, 4, 1, 5], [0, 1, 0, 2, 0, 3], [0, 1, 2, 4, 6])\nassert compressed_row_sparse_matrix([[0, 0, 0], [1, 2, 0], [0, 3, 4]]) == ([1, 2, 3, 4], [0, 1, 1, 2], [0, 0, 2, 4])\nassert compressed_row_sparse_matrix([[0, 0, 3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 6, 0], [0, 0, 0, 0, 0], [0, 7, 0, 0, 8]]) == ([3, 4, 5, 6, 7, 8], [2, 1, 0, 3, 1, 4], [0, 1, 2, 4, 4, 6])"}
{"task_id": 66, "completion_id": 0, "passed": false, "result": "failed: type list doesn't define __round__ method", "solution": "\nimport numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    v = np.array(v)\n    L = np.array(L)\n    L_normalized = L / np.linalg.norm(L)\n    proj_x = np.dot(v, L_normalized)\n    proj_y = proj_x * L[0]\n    projection_vector = [proj_x, proj_y]\n    return round(projection_vector, 3)\nv = [5, 7]\nL = [1, 2]\nassert orthogonal_projection([3, 4], [1, 0]) == [3.0, 0.0]\nassert orthogonal_projection([1, 2, 3], [0, 0, 1]) == [0.0, 0.0, 3.0]\nassert orthogonal_projection([5, 6, 7], [2, 0, 0]) == [5.0, 0.0, 0.0]"}
{"task_id": 67, "completion_id": 0, "passed": false, "result": "failed: list index out of range", "solution": "\nfrom typing import List\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row_indices, column_pointer)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    col_sums = [0] * num_cols\n    (row_indices, column_pointer) = ([], [])\n    for r in range(num_rows):\n        for c in range(len(dense_matrix[r])):\n            if dense_matrix[r][c]:\n                col_sums[c] += 1\n    for c in range(num_cols):\n        if dense_matrix[0][c]:\n            col_sums[c] -= 1\n        else:\n            break\n        row_indices.append(0)\n        while col_sums[c] == 0:\n            c -= 1\n        for i in range(c - 1, -1, -1):\n            col_sums[i + 1] = col_sums[i]\n        row_indices.append(r)\n        col_sums[c] -= 1\n        column_pointer.append(row_indices[-2] + 1)\n        column_pointer.append(c + 1)\n    return (dense_matrix[row_indices[0]:], [i for i in range(col_sums[num_cols - 1])], column_pointer)\ndense_matrix = [[5, 0, 3], [0, 8, 0], [4, 7, 6]]\nassert compressed_col_sparse_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == ([], [], [0, 0, 0, 0])\nassert compressed_col_sparse_matrix([[0, 0, 0], [1, 2, 0], [0, 3, 4]]) == ([1, 2, 3, 4], [1, 1, 2, 2], [0, 1, 3, 4])\nassert compressed_col_sparse_matrix([[0, 0, 3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 6, 0], [0, 0, 0, 0, 0], [0, 7, 0, 0, 8]]) == ([5, 4, 7, 3, 6, 8], [2, 1, 4, 0, 2, 4], [0, 1, 3, 4, 5, 6])"}
{"task_id": 68, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Calculate the column space (image) of a given matrix A\n    \n    Parameters:\n        A (numpy.ndarray): The input matrix\n        \n    Returns:\n        list: The basis vectors of the column space of A\n    \"\"\"\n    A = np.array(A)\n    rref_A = np.linalg.matrix_rank(A).astype('int') * [[0], *[np.argmax(np.tril(1 - np.eye(len(A)), k=-1)[i]) for i in range(len(A))]]\n    pivots = np.nonzero(rref_A[0])[1]\n    col_indices = [np.arange(len(A))[pivots].tolist()]\n    for i in range(len(pivots)):\n        col_indices.append(A[:, pivots[i]].toarray()[0])\n    col_space_basis = [round(x, 8) for x in col_indices]\n    return col_space_basis\nassert matrix_image(np.array([[1, 0], [0, 1]])) == [[1, 0], [0, 1]]\nassert matrix_image(np.array([[1, 2], [2, 4]])) == [[1], [2]]\nassert matrix_image(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [[1, 2], [4, 5], [7, 8]]\nassert matrix_image(np.array([[3, 9, 6], [1, 4, 7], [2, 5, 8]])) == [[3, 9, 6], [1, 4, 7], [2, 5, 8]]\nassert matrix_image(np.array([[3, 3, 3], [1, 1, 1], [2, 2, 2]])) == [[3], [1], [2]]"}
{"task_id": 69, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculates the R-squared value based on the provided true values and predicted values.\n    \n    Parameters:\n        y_true (numpy.ndarray): The array of true values.\n        y_pred (numpy.ndarray): The array of predicted values.\n        \n    Returns:\n        float: The R-squared value rounded to three decimal places.\n    \"\"\"\n    tot_var = ((y_true - np.mean(y_true)) ** 2).sum()\n    resid_var = ((y_true - y_pred) ** 2).sum()\n    rsq = 1 - resid_var / tot_var\n    return round(rsq, 3)\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])) == 1.0\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([1.1, 2.1, 2.9, 4.2, 4.8])) == 0.989\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([2, 1, 4, 3, 5])) == 0.6\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([3, 3, 3, 3, 3])) == 0.0\nassert r_squared(np.array([3, 3, 3, 3, 3]), np.array([1, 2, 3, 4, 5])) == 0.0\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([5, 4, 3, 2, 1])) == -3.0\nassert r_squared(np.array([0, 0, 0, 0, 0]), np.array([0, 0, 0, 0, 0])) == 1.0\nassert r_squared(np.array([-2, -2, -2]), np.array([-2, -2, -2 + 1e-8])) == 0.0"}
{"task_id": 70, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nimport numpy as np\ndef calculate_brightness(img):\n    if not img or len(set((len(row) for row in img))) > 1:\n        return -1\n    img = np.array(img)\n    if not all((0 <= val <= 255 for row in img for val in row)):\n        return -1\n    total_sum = np.sum(img)\n    num_nonzero_pixels = np.count_nonzero(~np.isclose(img, 0))\n    avg_brightness = total_sum / num_nonzero_pixels * 100\n    return round(avg_brightness, 2)\nimg = [[128, 64, 0], [32, 192, 128]]\nassert calculate_brightness([]) == -1\nassert calculate_brightness([[100, 200], [150]]) == -1\nassert calculate_brightness([[100, 300]]) == -1\nassert calculate_brightness([[100, -1]]) == -1\nassert calculate_brightness([[128]]) == 128.0\nassert calculate_brightness([[100, 200], [50, 150]]) == 125.0"}
{"task_id": 71, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculates the Root Mean Squared Error (RMSE) between two arrays y_true and y_pred.\n\n    Parameters:\n    - y_true: Array containing true values.\n    - y_pred: Array containing predicted values.\n\n    Returns:\n    A float representing the RMSE value, rounded to 3 decimal places.\n\n    Raises:\n    ValueError if either y_true or y_pred is not an array or contains non-float elements.\n    ValueError if they do not have the same shape.\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both y_true and y_pred must be numpy arrays.')\n    if np.any(~np.isfinite(y_true)) or np.any(~np.isfinite(y_pred)):\n        raise ValueError('y_true and y_pred must contain only finite numbers.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    squared_diff = np.square(np.subtract(y_true, y_pred))\n    mean_squared_error = np.mean(squared_diff)\n    rmse_value = np.sqrt(mean_squared_error)\n    return round(rmse_value, 3)\nassert rmse(np.array([3, -0.5, 2, 7]), np.array([2.5, 0.0, 2, 8])) == 0.612\nassert rmse(np.array([[0.5, 1], [-1, 1], [7, -6]]), np.array([[0, 2], [-1, 2], [8, -5]])) == 0.842\nassert rmse(np.array([[1, 2], [3, 4]]), np.array([[1, 2], [3, 4]])) == 0.0"}
{"task_id": 72, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculates the Jaccard Index between two binary arrays.\n\n    Args:\n    y_true (np.array): A 1D array of boolean values representing the true labels.\n    y_pred (np.array): A 1D array of boolean values representing the predicted labels.\n\n    Returns:\n    float: The Jaccard Index calculated based on the input arrays.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    set_y_true = set(np.where(y_true)[0])\n    set_y_pred = set(np.where(y_pred)[0])\n    if not set_y_true & set_y_pred:\n        return 0.0\n    intersection = len(set_y_true.intersection(set_y_pred))\n    union = len(set_y_true.union(set_y_pred))\n    jaccard_index_value = round(intersection / union, 3)\n    return jaccard_index_value\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 1])) == 1.0\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 0]), np.array([0, 1, 0, 0, 1, 1])) == 0.0\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 0])) == 0.5\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 1, 0, 1, 1, 0])) == 0.167\nassert jaccard_index(np.array([1, 1, 1, 1, 1, 1]), np.array([0, 0, 0, 1, 1, 0])) == 0.333\nassert jaccard_index(np.array([1, 1, 1, 0, 1, 1]), np.array([1, 0, 0, 0, 0, 0])) == 0.2"}
{"task_id": 73, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculates the Dice Score for binary classification.\n\n    Parameters:\n    - y_true: A numpy array of true binary values.\n    - y_pred: A numpy array of predicted binary values.\n\n    Returns:\n    - A float representing the Dice Score, rounded to 3 decimal places.\n    \"\"\"\n    tp = np.sum((y_true == 1) * (y_pred == 1))\n    fp = np.sum((y_true == 0) * (y_pred == 1))\n    fn = np.sum((y_true == 1) * (y_pred == 0))\n    denom = sum(y_true) + sum(y_pred)\n    dice = 2 * tp / denom if denom != 0 else 0\n    return round(dice, 3)\ny_true = np.random.choice([0, 1], size=1000)\ny_pred = np.random.choice([0, 1], size=1000)\nassert dice_score(np.array([1, 1, 0, 0]), np.array([1, 1, 0, 0])) == 1.0\nassert dice_score(np.array([1, 1, 0, 0]), np.array([0, 0, 1, 1])) == 0.0\nassert dice_score(np.array([1, 1, 0, 0]), np.array([1, 0, 0, 0])) == 0.667\nassert dice_score(np.array([0, 0, 0, 0]), np.array([0, 0, 0, 0])) == 0.0\nassert dice_score(np.array([1, 1, 1, 1]), np.array([1, 1, 1, 1])) == 1.0\nassert dice_score(np.array([0, 0, 0, 0]), np.array([1, 1, 1, 1])) == 0.0\nassert dice_score(np.array([1]), np.array([1])) == 1.0\nassert dice_score(np.array([True, True, False, False]), np.array([1, 1, 0, 0])) == 1.0"}
{"task_id": 74, "completion_id": 0, "passed": false, "result": "failed: invalid literal for int() with base 10: 'value1'", "solution": "import numpy as np\nimport numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generates a composite hypervector from a dataset row using Hyperdimensional Computing (HDC).\n\n    Parameters:\n        row (dict): A dictionary representing a dataset row, mapping feature names to values.\n        dim (int): Dimensionality of the hypervectors.\n        random_seeds (dict): A dictionary mapping feature names to seeds for reproducibility.\n\n    Returns:\n        list: A list containing the composite hypervector representation of the row.\n    \"\"\"\n    hv_vector = [0] * dim\n    for (feature_name, value) in row.items():\n        if feature_name not in random_seeds or value == '':\n            continue\n        hypervector_value = int(value)\n        hv_vector[feature_name] += hypervector_value\n        hv_vector[dim - len(random_seeds) + feature_name] += (-1) ** hypervector_value\n    return hv_vector\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 5, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, -1, 1, 1, 1]\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 10, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, -1, 1, 1, -1, -1, -1, -1, -1, -1]\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 15, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1]"}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "from collections import Counter\nfrom collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix from the given true labels (y_true) and predictions (y_pred).\n    \n    Parameters:\n        data (list of lists): Each element is a pair [y_true, y_pred], representing the ground truth and the model's prediction for one example.\n\n    Returns:\n        confusion_matrix (list): A 2x2 confusion matrix representing the number of correct and incorrect predictions.\n    \"\"\"\n    y_true = []\n    y_pred = []\n    for d in data:\n        y_true.append(d[0])\n        y_pred.append(d[1])\n    count_true = Counter(y_true)\n    count_pred = Counter(y_pred)\n    tp = count_true[y_true.index(1)] if 1 in count_true else 0\n    fp = count_true[y_true.index(0)] - count_pred[y_true.index(0)]\n    tn = count_pred[y_true.index(0)] if 0 in count_pred else 0\n    fn = count_pred[y_true.index(1)] - count_true[y_true.index(1)]\n    cmatrix = [[tp, fp], [fn, tn]]\n    return cmatrix\nassert confusion_matrix([[1, 1], [1, 0], [0, 1], [0, 0], [0, 1]]) == [[1, 1], [2, 1]]\nassert confusion_matrix([[0, 1], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 1], [1, 1], [1, 0]]) == [[5, 5], [4, 3]]\nassert confusion_matrix([[0, 1], [0, 1], [0, 0], [0, 1], [0, 0], [0, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 0], [0, 0], [0, 1], [0, 1], [0, 1], [1, 0]]) == [[0, 3], [9, 4]]"}
{"task_id": 76, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculates the cosine similarity between two Numpy arrays.\n\n    Parameters:\n    - v1 (numpy.ndarray): The first vector.\n    - v2 (numpy.ndarray): The second vector.\n\n    Returns:\n    - float: The cosine similarity between the two vectors, rounded to 3 decimal places.\n    \n    Raises:\n    - ValueError: If the vectors are not of the same shape.\n    - ZeroDivisionError: If any of the vectors has zero magnitude.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    cos_sim = dot_product / (norm_v1 * norm_v2)\n    return round(cos_sim, 3)\nassert cosine_similarity(np.array([1, 2, 3]), np.array([2, 4, 6])) == 1.0\nassert cosine_similarity(np.array([1, 2, 3]), np.array([-1, -2, -3])) == -1.0\nassert cosine_similarity(np.array([1, 0, 7]), np.array([0, 1, 3])) == 0.939\nassert cosine_similarity(np.array([1, 0]), np.array([0, 1])) == 0.0"}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: local variable 'M' referenced before assignment", "solution": "from collections import Counter\nfrom typing import List, Tuple\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    actual_counts = Counter(actual)\n    predicted_counts = Counter(predicted)\n    num_classes = len(set(actual + predicted))\n\n    def calculate_values(confusion_matrix):\n        tp = confusion_matrix[0][0]\n        fp = confusion_matrix[0][1]\n        fn = confusion_matrix[1][0]\n        tn = confusion_matrix[1][1]\n        if tp == fp == 0:\n            precision = 0.0\n        else:\n            precision = tp / (tp + fp)\n        recall = tp / (tp + fn)\n        f1_score = 2 * (precision * recall) / (precision + recall)\n        if tp + fp > 0:\n            specificity = tn / (tn + fp)\n        else:\n            specificity = None\n        if tp + fn > 0:\n            negative_predictive_value = tn / (tn + fn)\n        else:\n            negative_predictive_value = None\n        return (tp, fp, fn, tn, precision, recall, f1_score, specificity, negative_predictive_value)\n    confusion_matrix = [[0] * num_classes for _ in range(num_classes)]\n    confusion_matrix[actual_counts[M]][predicted_counts[M]] += 1\n    M = max(actual_counts.keys(), key=lambda x: -actual_counts[x])\n    (tp, fp, fn, tn, precision, recall, f1_score, specificity, negative_predictive_value) = calculate_values(confusion_matrix)\n    return (confusion_matrix, round(precision, 3), round(f1_score, 3), specificity, round(negative_predictive_value, 3))\nassert performance_metrics([1, 0, 1, 0, 1], [1, 0, 0, 1, 1]) == ([[2, 1], [1, 1]], 0.6, 0.667, 0.5, 0.5)\nassert performance_metrics([1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0]) == ([[6, 4], [2, 7]], 0.684, 0.667, 0.778, 0.636)\nassert performance_metrics([0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1]) == ([[4, 4], [5, 2]], 0.4, 0.471, 0.286, 0.333)\nassert performance_metrics([1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0]) == ([[4, 5], [4, 2]], 0.4, 0.471, 0.333, 0.286)"}
{"task_id": 78, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef descriptive_statistics(data):\n    stats = {'mean': np.mean(data), 'median': np.median(data), 'mode': np.bincount(data).argmax(), 'variance': np.var(data), 'standard_deviation': np.std(data), '25th_percentile': np.percentile(data, 25), '50th_percentile': np.percentile(data, 50), '75th_percentile': np.percentile(data, 75), 'interquartile_range': np.percentile(data, 75) - np.percentile(data, 25)}\n    for (key, value) in stats.items():\n        if isinstance(value, float):\n            stats[key] = round(value, 4)\n    return stats\ndata = [1, 3, 3, 3, 4, 6, 8]\nassert descriptive_statistics([10, 20, 30, 40, 50]) == {'mean': 30.0, 'median': 30.0, 'mode': 10, 'variance': 200.0, 'standard_deviation': 14.1421, '25th_percentile': 20.0, '50th_percentile': 30.0, '75th_percentile': 40.0, 'interquartile_range': 20.0}\nassert descriptive_statistics([1, 2, 2, 3, 4, 4, 4, 5]) == {'mean': 3.125, 'median': 3.5, 'mode': 4, 'variance': 1.6094, 'standard_deviation': 1.2686, '25th_percentile': 2.0, '50th_percentile': 3.5, '75th_percentile': 4.0, 'interquartile_range': 2.0}\nassert descriptive_statistics([100]) == {'mean': 100.0, 'median': 100.0, 'mode': 100, 'variance': 0.0, 'standard_deviation': 0.0, '25th_percentile': 100.0, '50th_percentile': 100.0, '75th_percentile': 100.0, 'interquartile_range': 0.0}"}
{"task_id": 79, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    \n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to 5 decimal places\n    \"\"\"\n    coefficient = math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    result = coefficient * p ** k * (1 - p) ** (n - k)\n    return round(result, 5)\nassert binomial_probability(6, 2, 0.5) == 0.23438\nassert binomial_probability(6, 4, 0.7) == 0.32414\nassert binomial_probability(3, 3, 0.9) == 0.729\nassert binomial_probability(5, 0, 0.3) == 0.16807\nassert binomial_probability(7, 2, 0.1) == 0.124\nassert binomial_probability(100, 2, 0.1) == 0.00162\nassert binomial_probability(2, 2, 0.1) == 0.01"}
{"task_id": 80, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    \n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = -(math.pow(x - mean, 2) / (2 * math.pow(std_dev, 2)))\n    pdf_value = 1 / (std_dev * math.sqrt(2 * math.pi)) * math.exp(exponent)\n    return round(pdf_value, 5)\nassert normal_pdf(0, 0, 1) == 0.39894\nassert normal_pdf(16, 15, 2.04) == 0.17342\nassert normal_pdf(1, 0, 0.5) == 0.10798"}
{"task_id": 81, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    if k < 0 or lam <= 0:\n        raise ValueError('k must be non-negative and lambda must be positive')\n    fact = math.factorial\n    result = lam ** k * math.exp(-lam) / fact(k)\n    return round(result, 5)\nassert poisson_probability(3, 5) == 0.14037\nassert poisson_probability(0, 5) == 0.00674\nassert poisson_probability(2, 10) == 0.00227\nassert poisson_probability(1, 1) == 0.36788\nassert poisson_probability(20, 20) == 0.08884"}
{"task_id": 82, "completion_id": 0, "passed": false, "result": "failed: name 'cv2' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The calculated contrast value.\n    \"\"\"\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    diff = np.max(gray_img) - np.min(gray_img)\n    return diff\nassert calculate_contrast(np.array([[0, 50], [200, 255]])) == 255\nassert calculate_contrast(np.array([[128, 128], [128, 128]])) == 0\nassert calculate_contrast(np.zeros((10, 10), dtype=np.uint8)) == 0\nassert calculate_contrast(np.ones((10, 10), dtype=np.uint8) * 255) == 0\nassert calculate_contrast(np.array([[10, 20, 30], [40, 50, 60]])) == 50"}
{"task_id": 83, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if len(vec1) != len(vec2):\n        raise ValueError('Vectors must be of equal length')\n    result = np.dot(vec1, vec2)\n    return result\nassert calculate_dot_product(np.array([1, 2, 3]), np.array([4, 5, 6])) == 32\nassert calculate_dot_product(np.array([-1, 2, 3]), np.array([4, -5, 6])) == 4\nassert calculate_dot_product(np.array([1, 0]), np.array([0, 1])) == 0\nassert calculate_dot_product(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0\nassert calculate_dot_product(np.array([7]), np.array([3])) == 21"}
{"task_id": 84, "completion_id": 0, "passed": false, "result": "failed: object of type 'float' has no len()", "solution": "import numpy as np\nimport numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \n    Returns:\n        list[list[float]]: A list containing the polynomial features of each data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for row in data:\n        transformed_row = [1] + [sum((row[i] * row[j] for j in range(i + 1))) for i in range(len(row))]\n        transformed_data.append(transformed_row)\n    return transformed_data\nassert phi_transform([], 2) == []\nassert phi_transform([1.0, 2.0], -1) == []\nassert phi_transform([1.0, 2.0], 2) == [[1.0, 1.0, 1.0], [1.0, 2.0, 4.0]]\nassert phi_transform([1.0, 3.0], 3) == [[1.0, 1.0, 1.0, 1.0], [1.0, 3.0, 9.0, 27.0]]\nassert phi_transform([2.0], 4) == [[1.0, 2.0, 4.0, 8.0, 16.0]]"}
{"task_id": 85, "completion_id": 0, "passed": false, "result": "failed: 'numpy.ndarray' object is not callable", "solution": "import numpy as np\nimport numpy as np\ndef pos_encoding(position: int, d_model: int) -> np.ndarray:\n    \"\"\"\n    Generates positional encodings for a given position and model dimensionality.\n    \n    Args:\n        position (int): The position for which to generate the encoding.\n        d_model (int): The dimensionality of the model's input.\n        \n    Returns:\n        np.ndarray: A numpy array containing the positional encoding values.\n    \"\"\"\n    assert position >= 0 and d_model > 0, 'Position must be non-negative and model dimension cannot be zero.'\n    pe = np.zeros((2 * max(0, position), d_model))\n    position_matrix = np.arange(max(0, position))(np.newaxis).T\n    denominator = d_model ** (np.arange(d_model) / d_model)\n    for i in range(d_model):\n        pe[position + i, i] = np.sin(position_matrix * denominator[i])\n        pe[-position - i, i] = np.cos(position_matrix * denominator[i])\n    return pe\nassert pos_encoding(2, 8) == [[0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.8415, 0.5403, 0.0998, 0.995, 0.01, 1.0, 0.001, 1.0]]\nassert pos_encoding(5, 16) == [[0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.8415, 0.5403, 0.311, 0.9504, 0.0998, 0.995, 0.0316, 0.9995, 0.01, 1.0, 0.0032, 1.0, 0.001, 1.0, 0.0003, 1.0], [0.9093, -0.4161, 0.5911, 0.8066, 0.1987, 0.9801, 0.0632, 0.998, 0.02, 0.9998, 0.0063, 1.0, 0.002, 1.0, 0.0006, 1.0], [0.1411, -0.99, 0.8126, 0.5828, 0.2955, 0.9553, 0.0947, 0.9955, 0.03, 0.9996, 0.0095, 1.0, 0.003, 1.0, 0.0009, 1.0], [-0.7568, -0.6536, 0.9536, 0.3011, 0.3894, 0.9211, 0.1262, 0.992, 0.04, 0.9992, 0.0126, 0.9999, 0.004, 1.0, 0.0013, 1.0]]\nassert pos_encoding(0, 0) == -1\nassert pos_encoding(2, -1) == -1"}
{"task_id": 86, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\"\"\"\n    threshold_overfitting = 0.4\n    threshold_underfitting = 0.7\n    if training_accuracy < threshold_underfitting and test_accuracy < threshold_underfitting:\n        return -1\n    elif training_accuracy > threshold_overfitting:\n        return 1\n    else:\n        return 0\nassert model_fit_quality(0.95, 0.65) == 1\nassert model_fit_quality(0.6, 0.5) == -1\nassert model_fit_quality(0.85, 0.8) == 0\nassert model_fit_quality(0.5, 0.6) == -1\nassert model_fit_quality(0.75, 0.74) == 0"}
{"task_id": 87, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not iterable", "solution": "import numpy as np\nimport numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    if beta1 != 1:\n        m_corrected = (1 - beta1) * grad + beta1 * m\n    else:\n        m_corrected = grad\n    if beta2 != 1:\n        v_corrected = (1 - beta2) * grad ** 2 + beta2 * v\n    else:\n        v_corrected = grad ** 2\n    m_hat = m_corrected / (1 - beta1 ** t)\n    v_hat = v_corrected / (1 - beta2 ** t)\n    updated_m = m_hat + learning_rate * v_hat\n    updated_v = v_hat\n    updated_m_rounded = [round(val, 5) for val in updated_m]\n    updated_v_rounded = [round(val, 5) for val in updated_v]\n    return ([parameter], updated_m_rounded, updated_v_rounded)\nlearning_rate = 0.001\nbeta1 = 0.9\nbeta2 = 0.999\nassert adam_optimizer(1.0, 0.1, 0.0, 0.0, 1) == (0.999, 0.01, 0.00001)\nassert adam_optimizer(np.array([1.0, 2.0]), np.array([0.1, 0.2]), np.zeros(2), np.zeros(2), 1) == ([0.999, 1.999], [0.01, 0.02], [1.e-05, 4.e-05])\nassert adam_optimizer(np.array([1.0, 2.0]), np.array([0.1, 0.2]), np.zeros(2), np.zeros(2), 1, 0.01, 0.8, 0.99) == ([0.99, 1.99], [0.02, 0.04], [0.0001, 0.0004])"}
{"task_id": 88, "completion_id": 0, "passed": false, "result": "timed out", "solution": "import numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    class DummyBPE:\n        def __init__(self):\n            self.encoder_dict = {\"hello\": 1, \"world\": 2, \"<UNK>\": 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict[\"<UNK>\"]) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join([reversed_dict.get(tok_id, \"<UNK>\") for tok_id in token_ids])\n\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12\n    }\n\n    params = {\n        \"wte\": np.random.rand(3, 10),\n        \"wpe\": np.random.rand(1024, 10),\n        \"blocks\": [],\n        \"ln_f\": {\n            \"g\": np.ones(10),\n            \"b\": np.zeros(10),\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\ndef load_encoder_hparams_and_params():\n    model_name = 'distilgpt2'\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\n    model = AutoModelForCausalLM.from_pretrained(model_name)\n    return (model, tokenizer)\ndef gen_text(prompt: str, num_tokens_to_generate: int=40):\n    (model, tokenizer) = load_encoder_hparams_and_params()\n    inputs = tokenizer.encode(prompt, return_tensors='pt')\n    attention_mask = torch.arange(len(inputs[0])).unsqueeze(0) < num_tokens_to_generate\n    output = model.generate(input_ids=inputs.to('cuda'), attention_mask=attention_mask.to('cuda'), eos_token_id=tokenizer.eos_token_id, pad_token_id=tokenizer.pad_token_id, max_length=num_tokens_to_generate + len(inputs[0]))\n    output_text = tokenizer.decode(output[0], skip_special_tokens=True).strip()\n    return output_text\nprompt = 'Once upon a time in a land far away...'\nnp.random.seed(42)\nassert gen_text(\"hello\", 5) == \"hello hello hello <UNK> <UNK>\"\nnp.random.seed(42)\nassert gen_text(\"hello world\", 10) == \"world world world world world world world world world world\"\nnp.random.seed(42)\nassert gen_text(\"world\", 3) == \"world world world\""}
{"task_id": 89, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n    \"\"\"\n    Calculates the final weighted pattern for each crystal using self-attention.\n    \n    Parameters:\n    n (int): Number of crystals.\n    crystal_values (list): List containing the values of each crystal.\n    dimension (int): Dimensionality of the vectors used to represent crystals.\n    \n    Returns:\n    list: A list of floats, each representing the weighted pattern of a crystal.\n    \"\"\"\n    max_value = max(crystal_values)\n    min_value = min(crystal_values)\n    diff = max_value - min_value\n    if diff != 0:\n        normalized_crystal_values = [(value - min_value + 0.0001 * i / len(crystal_values)) / diff for (i, value) in enumerate(crystal_values)]\n    else:\n        normalized_crystal_values = crystal_values.copy()\n    attention_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                attention_matrix[i][j] = 1.0\n            else:\n                similarity_score = np.dot(normalized_crystal_values[i], normalized_crystal_values[j])\n                attention_matrix[i][j] = np.exp(similarity_score) / np.sum(np.exp(normalized_crystal_values))\n    weighted_patterns = []\n    for i in range(n):\n        weights_sum = sum(attention_matrix[i])\n        if weights_sum > 0:\n            weighted_pattern = np.dot(attention_matrix[i], normalized_crystal_values)\n            weighted_pattern /= weights_sum\n        else:\n            weighted_pattern = [0] * dimension\n        for _ in range(dimension // 100):\n            weighted_pattern[-1] += weighted_pattern[dimension // 100]\n            weighted_pattern = weighted_pattern[:-1]\n        weighted_patterns.append(weighted_pattern)\n    return weighted_patterns\ncrystal_values = [1, 2, 3, 4, 5]\ndimension = 100\nassert pattern_weaver(5, [4, 2, 7, 1, 9], 1) == [8.9993, 8.9638, 9.0, 8.7259, 9.0]\nassert pattern_weaver(3, [1, 3, 5], 1) == [4.7019, 4.995, 4.9999]\nassert pattern_weaver(4, [2, 8, 6, 4], 1) == [7.9627, 8.0, 8.0, 7.9993]\nassert pattern_weaver(3, [9, 2, 1], 1) == [9.0, 9.0, 8.9909]\nassert pattern_weaver(3, [9, 2, 1], 2) == [9.0, 8.9996, 8.9233]"}
{"task_id": 90, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for *: 'Counter' and 'float'", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 document scores for a given corpus and query.\n\n    :param corpus: A list of documents (strings).\n    :param query: The search query (string).\n    :param k1: The BM25 parameter adjusting smoothing for term frequencies,\n               default value is 1.5.\n    :param b: Term Frequency Saturation, default value is 0.75.\n    :return: A list of BM25 scores for each document in the corpus, rounded to 3 decimals.\n    \"\"\"\n    query_tokens = [token.lower() for token in query.split()]\n    N = len(corpus)\n    V = sum((len(doc) > 0 for doc in corpus))\n    df_query = Counter(query_tokens)\n    idf = {term: np.log((N + 0.5) / (df_query[term] + 0.5)) for term in set(query_tokens)}\n    tf_query = Counter({token: corpus.count(token) for token in query_tokens})\n    bm25_scores = []\n    for doc in corpus:\n        if not doc:\n            continue\n        tokens_in_doc = [token.lower() for token in doc.split()]\n        tf = Counter(tokens_in_doc)\n        dl = len(doc)\n        tl = tf * (k1 + 1)\n        dl_normalized = min(1.0, k1 / (1.0 + b + dl / (V - V - dl)) * tl)\n        score = np.sum([idf[token] * dl_normalized * tf[token] for token in tf]) / N\n        bm25_scores.append(round(score, 3))\n    return bm25_scores\ncorpus = ['Python programming', 'Data analysis using Python', 'Machine learning library SciPy', 'Machine Learning']\nquery = 'data python'\nbm25_scores = calculate_bm25_scores(corpus, query)\nassert calculate_bm25_scores([['the', 'cat', 'sat'], ['the', 'dog', 'ran'], ['the', 'bird', 'flew']], ['the', 'cat']) == [0.693, 0., 0. ]\nassert calculate_bm25_scores([['the'] * 10, ['the']], ['the']) == [0,0]\nassert calculate_bm25_scores([['term'] * 10, ['the'] * 2], ['term'], k1=1.0) == [.705, 0]"}
{"task_id": 91, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nimport numpy as np\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"Calculate the F1 score based on true and predicted labels.\"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    precision = np.sum(y_true == y_pred) / len(y_pred)\n    recall = np.sum((y_true == y_pred) & (y_true != -1)) / np.sum(y_true != -1)\n    if precision + recall > 0:\n        f1_score = 2 * (precision * recall / (precision + recall))\n    else:\n        f1_score = 0\n    return round(f1_score, 3)\nassert calculate_f1_score([1, 0, 1, 1, 0], [1, 0, 0, 1, 1]) == 0.667\nassert calculate_f1_score([1, 1, 0, 0], [1, 0, 0, 1]) == 0.5\nassert calculate_f1_score([0, 0, 0, 0], [1, 1, 1, 1]) == 0.0\nassert calculate_f1_score([1, 1, 1, 1, 0], [1, 1, 0, 1, 1]) == 0.75\nassert calculate_f1_score([1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0]) == 0.889"}
{"task_id": 92, "completion_id": 0, "passed": false, "result": "failed: name 'power_grid_forecast' is not defined", "solution": "import math\nPI = 3.14159\nimport numpy as np\nimport matplotlib.pyplot as plt\nassert power_grid_forecast([150, 165, 185, 195, 210, 225, 240, 260, 275, 290]) == 404\nassert power_grid_forecast([160, 170, 190, 200, 215, 230, 245, 265, 280, 295]) == 407\nassert power_grid_forecast([140, 158, 180, 193, 205, 220, 237, 255, 270, 288]) == 404\nassert power_grid_forecast([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 19\nassert power_grid_forecast([1, 19, 1, 20, 1, 18, 1, 19, 1, 20]) == 35"}
{"task_id": 93, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    abs_diff = np.abs(y_true - y_pred)\n    mae_value = np.mean(abs_diff)\n    return round(mae_value, 3)\ny_true = np.array([1.0, 2.0, 3.0, 4.0])\ny_pred = np.array([1.5, 1.8, 3.2, 3.7])\nassert mae(np.array([3, -0.5, 2, 7]), np.array([2.5, 0.0, 2, 8])) == 0.500\nassert mae(np.array([[0.5, 1], [-1, 1], [7, -6]]), np.array([[0, 2], [-1, 2], [8, -5]])) == 0.750\nassert mae(np.array([-1, -2, -3]), np.array([-1.5, -2.2, -2.8])) == 0.300\nassert mae(np.array([1, -1, 0]), np.array([-1, 1, 0])) == 1.333\nassert mae(np.array([1000, -1000, 0]), np.array([-1000, 1000, 0])) == 1333.333\nassert mae(np.array([1000, -1000, 0]), np.array([0, 0, 0])) == 666.667"}
{"task_id": 94, "completion_id": 0, "passed": false, "result": "failed: compute_qkv() got an unexpected keyword argument 'n_heads'", "solution": "import numpy as np\nimport numpy as np\ndef compute_qkv(query: np.ndarray, keys: np.ndarray, values: np.ndarray):\n    \"\"\"\n    Compute queries (Q), keys (K), and values (V) for multi-head attention.\n\n    Parameters:\n    - query: A 3D tensor of shape (batch_size, num_queries, d_model).\n    - keys: A 3D tensor of shape (batch_size, num_keys, d_model).\n    - values: A 3D tensor of shape (batch_size, num_values, d_model).\n\n    Returns:\n    - q: Queries tensor of shape (batch_size, num_queries, n_heads, d_k).\n    - k: Keys tensor of shape (batch_size, num_keys, n_heads, d_k).\n    - v: Values tensor of shape (batch_size, num_values, n_heads, d_k).\n    \"\"\"\n    batch_size = query.shape[0]\n    num_queries = query.shape[1]\n    num_keys = keys.shape[1]\n    q = np.reshape(np.transpose(query, (0, 2, 1)), (batch_size * num_queries, num_heads, d_model // n_heads))\n    k = np.reshape(np.transpose(keys, (0, 2, 1)), (batch_size * num_keys, num_heads, d_model // n_heads))\n    v = np.reshape(np.transpose(values, (0, 2, 1)), (batch_size * num_values, num_heads, d_model // n_heads))\n    return (q, k, v)\ndef self_attention(q: np.ndarray, k: np.ndarray, v: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform dot-product attention on the given query, key, and value tensors.\n\n    Parameters:\n    - q: Queries tensor of shape (num_heads, batch_size*num_queries, d_k).\n    - k: Keys tensor of shape (num_heads, batch_size*num_keys, d_k).\n    - v: Values tensor of shape (num_heads, batch_size*num_values, d_k).\n\n    Returns:\n    - output: Dot-product attention result of shape (batch_size*num_queries, batch_size*num_values).\n    \"\"\"\n    batch_size = q.shape[1] // num_heads\n    num_heads = q.shape[0] // batch_size\n    scores = np.matmul(q, k.T) / np.sqrt(d_model // n_heads)\n    scores = np.transpose(scores, (1, 0))\n    weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    weights /= np.sum(weights, axis=-1, keepdims=True)\n    output = np.matmul(weights, v)\n    return np.reshape(output, (batch_size * num_queries, num_heads, d_model))\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Apply multi-head attention mechanism to the input tensor X.\n\n    Parameters:\n    - X: Input tensor of shape (batch_size, num_queries, d_model).\n    - W_q, W_k, W_v: Weight matrices for queries, keys, and values respectively.\n    - n_heads: Number of heads in the multi-head attention mechanism.\n\n    Returns:\n    - attn_outs: List containing softmaxed attention outputs from each head.\n    \"\"\"\n    (q, k, v) = compute_qkv(X, W_q, W_k, W_v, n_heads=n_heads)\n    attn_outs = []\n    for i in range(n_heads):\n        h = self_attention(q=Q[i], k=k[i], v=v[i])\n        attn_outs.append(h)\n    attn_outs = [item.toarray().round(4).tolist() for item in attn_outs]\n    return attn_outs\nnp.random.seed(42)\n\nm, n = 4, 4\nn_heads = 2\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0]]\nnp.random.seed(42)\n\nm, n = 6, 8\nn_heads = 4\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0]]\nnp.random.seed(42)\n\nm, n = 6, 8\nn_heads = 2\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0]]"}
{"task_id": 95, "completion_id": 0, "passed": false, "result": "failed: object of type 'itertools.combinations' has no len()", "solution": "\nfrom itertools import combinations\nimport math\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    pairs = [(i, j) for i in range(len(x)) for j in range(i + 1, len(x))]\n    count = 0\n    total_pairs = len(pairs)\n    for pair in pairs:\n        if sum(pair) == 2 or sum(pair) == 0:\n            count += 1\n    expected_freq = [count / total_pairs] * len(combinations(range(2), 2))\n    actual_freq = [x.count(1) + y.count(1)] * len(expected_freq)\n    chi_squared = ((actual_freq - expected_freq) ** 2 / expected_freq).sum()\n    df = (len(x[0]),) * 2\n    p_value = 1 - stats.chi2.cdf(chi_squared, df)\n    return round(math.sqrt(p_value), 4)\nassert phi_corr([1, 1, 0, 0], [0, 0, 1, 1]) == -1.0\nassert phi_corr([1, 1, 0, 0], [1, 0, 1, 1]) == -0.5774\nassert phi_corr([0, 0, 1, 1], [0, 1, 0, 1]) == 0.0\nassert phi_corr([1, 0, 1, 0,1,1,0], [1, 1, 0, 0,1,1,1]) == 0.0913"}
{"task_id": 96, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    low_threshold = 0.1\n    high_threshold = 0.9\n    return max(low_threshold, min(high_threshold, (x + 1) / 2))\nassert hard_sigmoid(.56) == 0.612\nassert hard_sigmoid(3.0) == 1.0\nassert hard_sigmoid(0.0) == 0.5\nassert hard_sigmoid(1.0) == 0.7\nassert hard_sigmoid(-1.0) == 0.3\nassert hard_sigmoid(2.5) == 1.0\nassert hard_sigmoid(-2.5) == 0.0\nassert hard_sigmoid(-3.0) == 0.0"}
{"task_id": 97, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import math\nimport math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"Compute the ELU activation function.\"\"\"\n    if x < 0.0:\n        return alpha * (math.exp(x) - 1)\n    else:\n        return x + math.exp(-x) * alpha\nassert elu(0) == 0.0\nassert elu(1) == 1.0\nassert elu(-1) == -0.6321\nassert elu(-1, alpha=2.0) == -1.2642\nassert elu(5) == 5.0\nassert elu(-5) == -0.9933"}
{"task_id": 98, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nimport numpy as np\ndef prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return np.where(x < 0.0, alpha * x, x)\nassert prelu(2.0) == 2.0\nassert prelu(0.0) == 0.0\nassert prelu(-2.0) == -0.5\nassert prelu(-2.0, alpha=0.1) == -0.2\nassert prelu(-2.0, alpha=1.0) == -2.0"}
{"task_id": 99, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import math\nimport math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + exp(x))\n    \"\"\"\n    if x < -50:\n        return 0\n    return math.log(1 + math.exp(x))\nassert softplus(0) == 0.6931\nassert softplus(100) == 100.0\nassert softplus(-100) == 0.0\nassert softplus(2) == 2.1269\nassert softplus(-2) == 0.1269"}
{"task_id": 100, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nfrom math import fabs\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    if x == 0:\n        return 0.0\n    else:\n        return x / fabs(x)\nassert softsign(0) == 0.0\nassert softsign(1) == 0.5\nassert softsign(-1) == -0.5\nassert softsign(100) == 0.9901\nassert softsign(-100) == -0.9901"}
{"task_id": 101, "completion_id": 0, "passed": false, "result": "failed: clip() missing 2 required positional arguments: 'a_min' and 'a_max'", "solution": "import numpy as np\nimport numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (pi_theta(o_i | q) / pi_theta_old(o_i | q)).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    if not np.all(rhos >= 0):\n        raise ValueError('All likelihood ratios must be non-negative.')\n    A_normalized = A - np.mean(A)\n    rhos_clipped = np.clip(rhos, min_value=epsilon, max_value=1 - epsilon)\n    kl_divergence = np.sum(rhos_clipped * np.log(rhos_clipped / rhos))\n    grpo_objective_value = np.exp(-kl_divergence / beta)\n    return round(grpo_objective_value, 6)\nassert grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01) == 1.032749, \"test case failed: grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01)\"\nassert grpo_objective([0.9, 1.1], [1.0, 1.0], [1.0, 1.0], [0.8, 1.2], epsilon=0.1, beta=0.05) == 0.999743, \"test case failed: grpo_objective([0.9, 1.1], [1.0, 1.0], [1.0, 1.0], [0.8, 1.2], epsilon=0.1, beta=0.05)\"\nassert grpo_objective([1.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.2, 0.7, 1.3], epsilon=0.15, beta=0.02) == 0.882682, \"test case failed: grpo_objective([1.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.2, 0.7, 1.3], epsilon=0.15, beta=0.02)\"\nassert grpo_objective([1.0], [1.0], [1.0], [1.0], epsilon=0.1, beta=0.01) == 1.0, \"test case failed: grpo_objective([1.0], [1.0], [1.0], [1.0], epsilon=0.1, beta=0.01)\""}
{"task_id": 102, "completion_id": 0, "passed": false, "result": "failed: module 'math' has no attribute 'sigmoid'", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\nfrom typing import Callable\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return x * math.sigmoid(x)\nx = 0.5\nassert swish(0) == 0.0, \"test case failed: swish(0)\"\nassert swish(1) == 0.7311, \"test case failed: swish(1)\"\nassert swish(-1) == -0.2689, \"test case failed: swish(-1)\"\nassert swish(10) == 9.9995, \"test case failed: swish(10)\"\nassert swish(-10) == -0.0005, \"test case failed: swish(-10)\""}
{"task_id": 103, "completion_id": 0, "passed": false, "result": "failed: test case failed: selu(1.0)", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    return scale * max(alpha * x, 0)\nassert selu(1.0) == 1.0507, \"test case failed: selu(1.0)\"\nassert selu(0.0) == 0.0, \"test case failed: selu(0.0)\"\nassert selu(-1.0) == -1.1113, \"test case failed: selu(-1.0)\"\nassert selu(5.0) == 5.2535, \"test case failed: selu(5.0)\"\nassert selu(-5.0) == -1.7463, \"test case failed: selu(-5.0)\""}
{"task_id": 104, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'tolist'", "solution": "import numpy as np\nimport numpy as np\nfrom scipy.special import expit\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1), reshaped into a list\n    \"\"\"\n    probabilities = expit(np.dot(X, weights) + bias)\n    predictions = [int(x > 0.5) for x in probabilities]\n    return predictions.tolist()\nassert predict_logistic(np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]]), np.array([1, 1]), 0) == [1,1,0,0], \"test case failed: predict_logistic(np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]]), np.array([1, 1]), 0)\"\nassert predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0) == [1,1,0], \"test case failed: predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0)\"\nassert predict_logistic(np.array([[1, 2, 3], [-1, -2, -3], [0.5, 1, 1.5]]), np.array([0.1, 0.2, 0.3]), -1) == [1,0,0], \"test case failed: predict_logistic(np.array([[1, 2, 3], [-1, -2, -3], [0.5, 1, 1.5]]), np.array([0.1, 0.2, 0.3]), -1)\"\nassert predict_logistic(np.array([[1], [2], [-1], [-2]]), np.array([2]), 0) == [1,1,0,0], \"test case failed: predict_logistic(np.array([[1], [2], [-1], [-2]]), np.array([2]), 0)\"\nassert predict_logistic(np.array([[1000, 2000], [-1000, -2000]]), np.array([0.1, 0.1]), 0) == [1,0], \"test case failed: predict_logistic(np.array([[1000, 2000], [-1000, -2000]]), np.array([0.1, 0.1]), 0)\""}
{"task_id": 105, "completion_id": 0, "passed": false, "result": "failed: Input data must be a single column array.", "solution": "import numpy as np\nimport numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef cross_entropy_loss(y_pred, y_true):\n    m = y_true.shape[0]\n    log_probs = -np.log(y_pred[np.arange(m), y_true])\n    loss = log_probs.mean()\n    return loss\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    num_classes = np.unique(y).shape[0]\n    (m, n) = X.shape\n    if not (m == 1 and n == len(X)):\n        raise ValueError('Input data must be a single column array.')\n    W = np.random.randn(n, num_classes)\n    losses = []\n    for it in range(iterations):\n        z = np.dot(X, W)\n        y_pred = softmax(z)\n        loss = cross_entropy_loss(y_pred, y)\n        losses.append(loss)\n        gradients = np.dot(y_pred - y, X.T)\n        W -= learning_rate * gradients\n        if (it + 1) % 100 == 0:\n            print(f'Iteration {it + 1}/{iterations}: Loss={loss:.4f}')\n    return ([W.tolist()], losses)\nX = np.array([[1, 2, 3], [4, 5, 6]])\ny = np.array([0, 1])\nassert train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10) == ([[-0.0841, -0.5693, -0.3651, -0.2423, -0.5344, 0.0339], [0.2566, 0.0535, -0.2103, -0.4004, 0.2709, -0.1461], [-0.1318, 0.211, 0.3998, 0.523, -0.1001, 0.0545], [-0.0407, 0.3049, 0.1757, 0.1197, 0.3637, 0.0576]], [13.8629, 10.7202, 9.3164, 8.4943, 7.9134, 7.4599, 7.0856, 6.7655, 6.4853, 6.236]), \"test case failed: train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10)\"\nassert train_softmaxreg(np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]]), np.array([0, 1, 2]), 0.01, 10) == ([[-0.0011, 0.0145, -0.0921], [0.002, -0.0598, 0.1263], [-0.0009, 0.0453, -0.0342]], [3.2958, 3.2611, 3.2272, 3.1941, 3.1618, 3.1302, 3.0993, 3.0692, 3.0398, 3.011]), \"test case failed: train_softmaxreg(np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]]), np.array([0, 1, 2]), 0.01, 10)\""}
{"task_id": 106, "completion_id": 0, "passed": false, "result": "failed: tese case failed: train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10)", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef binary_cross_entropy(y_pred, y_true):\n    \"\"\"Binary cross-entropy loss function.\"\"\"\n    n_samples = y_true.shape[0]\n    log_likelihoods = -np.log(y_pred).sum()\n    return log_likelihoods / n_samples\ndef logistic_regression_gradient_descent(X, y, learning_rate=0.1, num_iterations=1000):\n    \"\"\"\n    Perform logistic regression using gradient descent.\n    \n    Parameters:\n        X (numpy.ndarray): Input features matrix of shape (n_samples, n_features)\n        y (numpy.ndarray): Target labels of shape (n_samples,)\n        learning_rate (float): Learning rate for weight update\n        num_iterations (int): Number of iterations for gradient descent\n    Returns:\n        w_optimized (list[float]): List containing optimized weights after gradient descent\n    \"\"\"\n    n_features = X.shape[1]\n    w = np.random.randn(n_features)\n    losses = []\n    for _ in range(num_iterations):\n        y_pred = sigmoid(np.dot(X, w))\n        grad = np.dot(X.T, y_pred - y) / len(y)\n        w -= learning_rate * grad\n        current_loss = binary_cross_entropy(y_pred, y)\n        losses.append(current_loss)\n        if _ % 50 == 0:\n            print(f'Iteration {_}: Loss={current_loss:.4f}')\n    return (w.tolist(), losses)\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (w_optimized, losses) = logistic_regression_gradient_descent(X, y, learning_rate, iterations)\n    return (w_optimized, tuple(losses))\nassert train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10) == ([-0.0097, 0.0286, 0.015, 0.0135, 0.0316], [6.9315, 6.9075, 6.8837, 6.8601, 6.8367, 6.8134, 6.7904, 6.7675, 6.7448, 6.7223]), \"tese case failed: train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10)\"\nassert train_logreg(np.array([[ 0.76743473, 1.57921282, -0.46947439],[-0.23415337, 1.52302986, -0.23413696],[ 0.11092259, -0.54438272, -1.15099358],[-0.60063869, 0.37569802, -0.29169375],[-1.91328024, 0.24196227, -1.72491783],[-1.01283112, -0.56228753, 0.31424733],[-0.1382643 , 0.49671415, 0.64768854],[-0.46341769, 0.54256004, -0.46572975],[-1.4123037 , -0.90802408, 1.46564877],[ 0.0675282 , -0.2257763 , -1.42474819]]), np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), 0.1, 10) == ([-0.2509, 0.9325, 1.6218, 0.6336], [6.9315, 5.5073, 4.6382, 4.0609, 3.6503, 3.3432, 3.1045, 2.9134, 2.7567, 2.6258]), \"test case failed: train_logreg(np.array([[ 0.76743473, 1.57921282, -0.46947439],[-0.23415337, 1.52302986, -0.23413696],[ 0.11092259, -0.54438272, -1.15099358],[-0.60063869, 0.37569802, -0.29169375],[-1.91328024, 0.24196227, -1.72491783],[-1.01283112, -0.56228753, 0.31424733],[-0.1382643 , 0.49671415, 0.64768854],[-0.46341769, 0.54256004, -0.46572975],[-1.4123037 , -0.90802408, 1.46564877],[ 0.0675282 , -0.2257763 , -1.42474819]]), np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), 0.1, 10)\""}
{"task_id": 107, "completion_id": 0, "passed": false, "result": "failed: einstein sum subscripts string contains too many subscripts for operand 0", "solution": "import numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\nimport numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.einsum('ijk,jl->ial', Q, K)\n    scores.masked_fill_(mask == 0, -np.inf)\n    attn = scores.softmax(axis=-1)\n    output = np.einsum('ijl,il->ij', attn, V)\n    return output.tolist()\nnp.random.seed(42)\nX = np.arange(48).reshape(6,8)\nX = np.random.permutation(X.flatten()).reshape(6, 8)\nmask = np.triu(np.ones((6, 6))*(-np.inf), k=1)\nW_q = np.random.randint(0,4,size=(8,8))\nW_k = np.random.randint(0,5,size=(8,8))\nW_v = np.random.randint(0,6,size=(8,8))\nQ, K, V = compute_qkv(X, W_q, W_k, W_v)\nassert masked_attention(Q, K, V, mask) == [[547.0, 490.0, 399.0, 495.0, 485.0, 439.0, 645.0, 393.0], [547.0, 490.0, 399.0, 495.0, 485.0, 439.0, 645.0, 393.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0]]\nnp.random.seed(42)\nX = np.arange(16).reshape(4,4)\nX = np.random.permutation(X.flatten()).reshape(4, 4)\nmask = np.triu(np.ones((4, 4))*(-np.inf), k=1)\nW_q = np.random.randint(0,4,size=(4,4))\nW_k = np.random.randint(0,5,size=(4,4))\nW_v = np.random.randint(0,6,size=(4,4))\nQ, K, V = compute_qkv(X, W_q, W_k, W_v)\nassert masked_attention(Q, K, V, mask) == [[52.0, 63.0, 48.0, 71.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0]]"}
{"task_id": 108, "completion_id": 0, "passed": false, "result": "failed: test case failed: disorder([0,0,0,0])", "solution": "\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    color_counts = {}\n    for apple_color in apples:\n        color_counts[apple_color] = color_counts.get(apple_color, 0) + 1\n    total_apples = len(apples)\n    distinct_colors = len(color_counts)\n    disorder_value = math.log(total_apples / distinct_colors)\n    return round(disorder_value, 4)\nassert disorder([0,0,0,0]) == 0.0, \"test case failed: disorder([0,0,0,0])\"\nassert disorder([1,1,0,0]) == 0.5, \"test case failed: disorder([1,1,0,0])\"\nassert disorder([0,1,2,3]) == 0.75, \"test case failed: disorder([0,1,2,3])\"\nassert disorder([0,0,1,1,2,2,3,3]) == 0.75, \"test case failed: disorder([0,0,1,1,2,2,3,3])\"\nassert disorder([0,0,0,0,0,1,2,3]) == 0.5625, \"test case failed: disorder([0,0,0,0,0,1,2,3])\""}
{"task_id": 109, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,6) (1,1,3) ", "solution": "import numpy as np\nimport numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Args:\n        X (np.ndarray): Input tensor of shape (batch_size, seq_len, feature_dim).\n        gamma (np.ndarray): Scaling parameter shaped (1, 1, feature_dim).\n        beta (np.ndarray): Shift parameter shaped (1, 1, feature_dim).\n        epsilon (float): Small constant added to variance to avoid division by zero.\n        \n    Returns:\n        list: List containing the normalized tensors after applying the transformation.\n    \"\"\"\n    Y = X.reshape((X.shape[0], -1))\n    mean = np.mean(Y, axis=1, keepdims=True)\n    var = np.var(Y, axis=1, keepdims=True)\n    normalized_X = (Y - mean) / np.sqrt(var + epsilon) * gamma + beta\n    normalized_X_reshaped = normalized_X.reshape(X.shape)\n    return [round(float(x), 5) for x in normalized_X_reshaped.tolist()]\nassert layer_normalization(np.array([[[0.242, -1.913, -1.725], [-0.562, -1.013, 0.314]], [[-0.908, -1.412, 1.466], [-0.226, 0.068, -1.425]]]), np.array([[[1., 1., 1.]]]), np.array([[[0., 0., 0.]]])) == [[[1.40981, -0.80136, -0.60846], [-0.25714, -1.07574, 1.33288]], [[-0.49672, -0.89835, 1.39507], [0.46714, 0.92241, -1.38955]]]\nassert layer_normalization(np.array([[[-0.544, 0.111, -1.151, 0.376], [-0.601, -0.292, -0.602, 1.852], [-0.013, -1.058, 0.823, -1.221]], [[0.209, -1.96, -1.328, 0.197], [0.738, 0.171, -0.116, -0.301], [-1.479, -0.72, -0.461, 1.057]]]), np.array([[[1., 1., 1., 1.]]]), np.array([[[0., 0., 0., 0.]]])) == [[[-0.40765, 0.6957, -1.43015, 1.1421], [-0.67306, -0.37175, -0.67403, 1.71885], [0.42738, -0.83334, 1.43595, -1.02999]], [[0.97825, -1.30451, -0.63936, 0.96562], [1.5653, 0.12217, -0.6083, -1.07917], [-1.17069, -0.34662, -0.06542, 1.58272]]]\nassert layer_normalization(np.array([[[0.344, -1.763, 0.324, -0.385], [-0.677, 0.612, 1.031, 0.931], [-0.839, -0.309, 0.331, 0.976]], [[-0.479, -0.186, -1.106, -1.196], [0.813, 1.356, -0.072, 1.004], [0.362, -0.645, 0.361, 1.538]]]), np.array([[[0.5, 0.5, 0.5, 0.5]]]), np.array([[[1., 1., 1., 1.]]])) == [[[1.41697, 0.1865, 1.40529, 0.99124], [0.15654, 1.10092, 1.4079, 1.33464], [0.35485, 0.74396, 1.21383, 1.68737]], [[1.31031, 1.65635, 0.56982, 0.46353], [1.03585, 1.5515, 0.19543, 1.21723], [0.97283, 0.32146, 0.97219, 1.73352]]]"}
{"task_id": 110, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for &: 'dict' and 'dict'", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n\n    def normalize_counts(counts):\n        total = sum(counts.values())\n        return {k: v / total for (k, v) in counts.items()}\n\n    def calculate_metrics(reference_counts, candidate_counts, gamma):\n        intersection_count = (reference_counts & candidate_counts).count()\n        prec = (intersection_count + 1e-20) / (candidate_counts.sum() + 1e-20)\n        rec = (intersection_count + 1e-20) / (reference_counts.sum() + 1e-20)\n        f_mean = (gamma * prec + (1 - gamma) * rec) / (prec + (1 - gamma) * rec + 1e-20)\n        return (prec, rec, f_mean)\n    n_segments = len(reference.split(' ')) if reference else 0\n    scores = []\n    current_reference = set(reference.split(' '))\n    for i in range(n_segments):\n        (ref_start, ref_end) = (i, i + 1)\n        ref_segment = ''.join(candidate[ref_start:ref_end].split()).strip()\n        (cand_start, cand_end) = (i, i + 1)\n        cands = [cand[cand_start:cand_end] for cand in candidate.split()]\n        cand_starts = [start + i for start in range(len(cands))]\n        cand_ends = cand_starts + [len(candidate)]\n        ref_words = set(ref_segment.split())\n        cand_words = {word for start in cand_starts for end in cand_ends for word in candidate[start:end].split()}\n        ref_norm = normalize_counts(Counter(ref_words))\n        cand_norm = normalize_counts(Counter(cand_words))\n        (prec, rec, f_mean) = calculate_metrics(ref_norm, cand_norm, gamma)\n        p_weight = alpha * prec + (1 - alpha) * beta\n        r_weight = alpha * rec\n        f_weight = alpha * f_mean\n        scores.append(p_weight + r_weight + f_weight)\n    return np.mean(scores)\nassert meteor_score('The dog barks at the moon', 'The dog barks at the moon') == 0.998\nassert meteor_score('Rain falls gently from the sky', 'Gentle rain drops from the sky') == 0.625\nassert meteor_score('The sun shines brightly', 'Clouds cover the sky') == 0.125\nassert meteor_score('Birds sing in the trees', 'Birds in the trees sing') == 0.892\n\nassert meteor_score(\"The cat sits on the mat\", \"The cat on the mat sits\") == 0.938"}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: object of type 'int' has no len()", "solution": "import numpy as np\nimport numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes Pointwise Mutual Information (PMI).\n\n    Parameters:\n        joint_counts (list or tuple): A list or tuple containing the joint occurrences of two events.\n            The order matters and can be either [count_xy, count_xz] or [count_yx, count_yz].\n        total_counts_x (int): Total count of event x.\n        total_counts_y (int): Total count of event y.\n        total_samples (int): Total number of samples.\n\n    Returns:\n        float: PMI value, rounded to 3 decimal places.\n    \"\"\"\n    if isinstance(joint_counts, tuple):\n        joint_counts = list(joint_counts)\n    if len(joint_counts) != 2 or not all((isinstance(x, int) for x in joint_counts)):\n        raise ValueError('Joint counts must be a list/tuple of length 2 where each element is an integer.')\n    pmi = np.log2(joint_counts[0] / (total_counts_x * total_counts_y / total_samples))\n    return round(pmi, 3)\nassert compute_pmi(10, 50, 50, 200) == -0.322\nassert compute_pmi(100, 500, 500, 1000) == -1.322\nassert compute_pmi(100, 400, 600, 1200) == -1\nassert compute_pmi(100, 100, 100, 100) == 0.0\nassert compute_pmi(25, 50, 50, 100) == 0.0\nassert compute_pmi(10, 50, 50, 100) == -1.322\nassert compute_pmi(0, 50, 50, 100) == float('-inf')"}
{"task_id": 112, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nfrom typing import List\ndef min_max(x: List[int]) -> List[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers.\n    \n    Args:\n    x (List[int]): A list of integers to be normalized.\n    \n    Returns:\n    List[float]: The normalized list of integers scaled to the range [0, 1].\n    \"\"\"\n    if not x:\n        raise ValueError('Input list cannot be empty')\n    max_val = max(x)\n    min_val = min(x)\n    result = [(i - min_val) / float(max_val - min_val) for i in x]\n    return result\nassert min_max([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nassert min_max([30, 45, 56, 70, 88]) == [0.0, 0.2586, 0.4483, 0.6897, 1.0]\nassert min_max([5, 5, 5, 5]) == [0.0, 0.0, 0.0, 0.0]\nassert min_max([-3, -2, -1, 0, 1, 2, 3]) == [0.0, 0.1667, 0.3333, 0.5, 0.6667, 0.8333, 1.0]\nassert min_max([1,]) == [0.0]"}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies a simple residual block to the input x using two weight matrices.\n    \n    Args:\n        x (np.ndarray): Input data for the residual block.\n        w1 (np.ndarray): First weight matrix.\n        w2 (np.ndarray): Second weight matrix.\n        \n    Returns:\n        np.ndarray: Processed output after applying the residual block.\n    \"\"\"\n    y = np.dot(x, w1)\n    y_relu = np.maximum(0, y)\n    z = x + y_relu\n    h = np.dot(z, w2)\n    h_relu = np.maximum(0, h)\n    return h_relu.tolist()\nassert residual_block(np.array([1.0, 2.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [1.5, 3.0]\nassert residual_block(np.array([-1.0, 2.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [0.,3.]\nassert residual_block(np.array([0.0, 0.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [0., 0.]\nassert residual_block(np.array([5.0, 3.0]), np.array([[2.0, 0.0], [2.0, 1.0]]), np.array([[0.5, 0.0], [1.0, 0.5]])) == [10.0, 19.5]\nassert residual_block(np.array([-5.0, 3.0]), np.array([[2.0, 0.0], [2.0, 1.0]]), np.array([[0.5, 0.0], [1.0, 0.5]])) == [0.0, 3.0]"}
{"task_id": 114, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): A 3-dimensional array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: A 2-dimensional array of shape (channels,), where each element is the average value across\n                all pixels in the corresponding feature map.\n    \"\"\"\n    averaged = np.average(x, axis=(0, 1), weights=None)\n    return averaged\nassert global_avg_pool(np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])) == [5.5,6.5,7.5]\nassert global_avg_pool(np.array([[[100, 200]]])) == [100.0, 200.0]\nassert global_avg_pool(np.ones((3, 3, 1))) == [1.0]\nassert global_avg_pool(np.array([[[-1, -2], [1, 2]], [[3, 4], [-3, -4]]])) == [0.0, 0.0]\nassert global_avg_pool(np.array([[[-1, -2], [1, 2]], [[3, 4], [-3, 4]]])) == [0.0, 2.0]"}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Applies Batch Normalization to the input X normalized according to mean and standard deviation,\n    scaling it by gamma and shifting by beta values, while ensuring numerical stability via epsilon.\n    \n    :param X: A 4D NumPy array representing a batch of feature maps (batch_size, channels, height, width)\n    :param gamma: A 1D NumPy array containing the scaling coefficients for each channel\n    :param beta: A 1D NumPy array containing the bias terms for each channel\n    :param epsilon: A small constant added to variance to avoid division by zero errors\n    \n    :return: A list of lists where outer list represents the batch and inner lists represent the normalized features per channel\n    \"\"\"\n    mean = np.mean(X, axis=(0, -2, -1), keepdims=True)\n    var = np.var(X, axis=(0, -2, -1), keepdims=True)\n    normalized_X = (X - mean) / np.sqrt(var + epsilon)\n    out = normalized_X * gamma + beta\n    return out.tolist()\nassert batch_normalization(np.array([[[[0.4967, -0.1383], [0.6477, 1.523]], [[-0.2342, -0.2341], [1.5792, 0.7674]]], [[[-0.4695, 0.5426], [-0.4634, -0.4657]], [[0.242, -1.9133], [-1.7249, -0.5623]]]]), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1)) == [[[[0.4286, -0.5178], [0.6536, 1.9582]], [[0.0235, 0.0236], [1.6735, 0.9349]]], [[[-1.0114, 0.497], [-1.0023, -1.0058]], [[0.4568, -1.5043], [-1.3329, -0.275]]]]\nassert batch_normalization(np.array([[[[2.7068, 0.6281], [0.908, 0.5038]], [[0.6511, -0.3193], [-0.8481, 0.606]]], [[[-2.0182, 0.7401], [0.5288, -0.589]], [[0.1887, -0.7589], [-0.9332, 0.9551]]]]), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1)) == [[[[1.8177, 0.161], [0.3841, 0.062]], [[1.0043, -0.3714], [-1.121, 0.9403]]], [[[-1.948, 0.2503], [0.0819, -0.809]], [[0.3488, -0.9946], [-1.2417, 1.4352]]]]\nassert batch_normalization(np.array([[[[2.7068, 0.6281], [0.908, 0.5038]], [[0.6511, -0.3193], [-0.8481, 0.606]]], [[[-2.0182, 0.7401], [0.5288, -0.589]], [[0.1887, -0.7589], [-0.9332, 0.9551]]]]), np.ones(2).reshape(1, 2, 1, 1) * 0.5, np.ones(2).reshape(1, 2, 1, 1)) == [[[[1.9089, 1.0805], [1.1921, 1.031]], [[1.5021, 0.8143], [0.4395, 1.4702]]], [[[0.026, 1.1251], [1.0409, 0.5955]], [[1.1744, 0.5027], [0.3792, 1.7176]]]]"}
{"task_id": 116, "completion_id": 0, "passed": true, "result": "passed", "solution": "\nimport math\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term c*x^n at a given point x.\n    \n    Parameters:\n        c (float): Coefficient of the polynomial term.\n        x (float): Point at which the derivative is evaluated.\n        n (int): Exponent of the term.\n        \n    Returns:\n        float: Value of the derivative, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)\nassert poly_term_derivative(2.0, 3.0, 2.0) == 12.0\nassert poly_term_derivative(1.5, 4.0, 0.0) == 0.0\nassert poly_term_derivative(3.0, 2.0, 3.0) == 36.0\nassert poly_term_derivative(0.5, 5.0, 1.0) == 0.5\nassert poly_term_derivative(2.0, 3.0, 4.0) == 216.0\nassert poly_term_derivative(2.0, 3.0, 0.0) == 0.0"}
{"task_id": 117, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'divide' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a list of 2D vectors.\n    \n    Parameters:\n    - vectors: A list of lists representing 2D vectors.\n    - tol: Tolerance for determining linear independence (default=1e-10).\n    \n    Returns:\n    - A list of orthonormal vectors (unit length and orthogonal to each other)\n      spanning the same subspace.\n    \"\"\"\n    Xt = np.array(vectors).T\n    U = Xt[:, np.newaxis]\n    for col in range(U.shape[0]):\n        u = U[:, col].copy()\n        if np.linalg.norm(u) > tol:\n            u /= np.linalg.norm(u)\n            Ui = np.dot(Xt, u) - u @ Xi\n            for k in range(col + 1):\n                v = Xt[k][None, :].copy()\n                v -= np.outer(np.inner(v, Xi), Xi)\n                v /= np.sqrt(np.sum(v ** 2))\n                Ui += v\n            U[:, col] = Ui\n    return [np.round(vec, decimals=4).tolist() for vec in U]\nassert orthonormal_basis([[1, 0], [1, 1]]) == [[1.0, 0.0], [0., 1.]]\nassert orthonormal_basis([[2, 0], [4, 0]], tol=1e-10) == [[1.0, 0.0]]\nassert orthonormal_basis([[1, 1], [1, -1]], tol=1e-5) == [[0.7071, 0.7071], [0.7071, -0.7071]]\nassert orthonormal_basis([[0, 0]], tol=1e-10) == []\nassert orthonormal_basis([[1, 3], [3, 1]], tol=1e-10) == [[0.3162, 0.9487], [0.9487, -0.3162]]\nassert orthonormal_basis([[3, 3], [3, 1]], tol=1e-10) == [[0.7071, 0.7071], [0.7071, -0.7071]]"}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Calculate the cross product of two 3D vectors represented as NumPy arrays.\n    \n    Parameters:\n        a (np.ndarray): A 3-dimensional array representing vector a.\n        b (np.ndarray): A 3-dimensional array representing vector b.\n        \n    Returns:\n        np.ndarray: The resulting cross product vector normalized to have length 1.\n    \"\"\"\n    if a.shape != (3,) or b.shape != (3,):\n        raise ValueError('Both inputs must be 3-dimensional vectors.')\n    result = np.cross(a, b)\n    return np.round(result / np.linalg.norm(result), 4).tolist()\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nassert cross_product([1, 0, 0], [0, 1, 0]) == [0, 0, 1]\nassert cross_product([0, 1, 0], [0, 0, 1]) == [1, 0, 0]\nassert cross_product([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\nassert cross_product([1, 0, 0], [1, 0, 0]) == [0, 0, 0]\nassert cross_product([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\nassert cross_product([12, 2, 3], [4, 45, 6]) == [-123, -60, 532]\nassert cross_product([1.2, 2.3, 4.4], [-4, 4, -4]) == [-26.8, -12.8, 14.0]"}
{"task_id": 119, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef cramers_rule(A, b):\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    n = len(b)\n    x = []\n    for i in range(n):\n        Ai_j = A.copy()\n        Ai_j[:, i] = b\n        det_Ai_j = np.linalg.det(Ai_j)\n        x.append(det_Ai_j / det_A)\n    return [round(x_val, 4) for x_val in x]\nA = np.array([[2, 3], [5, 7]])\nb = np.array([1, 8])\nassert cramers_rule([[2, -1, 3], [4, 2, 1], [-6, 1, -2]], [5, 10, -3]) == [0.1667, 3.3333, 2.6667]\nassert cramers_rule([[1, 2], [3, 4]], [5, 6]) == [-4.,4.5]\nassert cramers_rule([[1, 2], [2, 4]], [3, 6]) == -1"}
{"task_id": 120, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport math\nfrom typing import List\ndef bhattacharyya_distance(p: List[float], q: List[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two discrete probability distributions.\n    \n    Parameters:\n    - p (List[float]): A list of probabilities for distribution p.\n    - q (List[float]): A list of probabilities for distribution q.\n    \n    Returns:\n    - float: The Bhattacharyya distance rounded to 4 decimal places. Returns 0 if lengths don't match or one is empty.\n    \"\"\"\n    if len(p) != len(q):\n        return 0.0\n    bhatt_dist = sum((math.sqrt(p[i] * q[i]) for i in range(len(p))))\n    return round(bhatt_dist, 4)\nassert bhattacharyya_distance([0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]) == 0.1166\nassert bhattacharyya_distance([0.7, 0.2, 0.1], [0.4, 0.3, 0.3]) == 0.0541\nassert bhattacharyya_distance([], [0.5, 0.4, 0.1]) == 0.0\nassert bhattacharyya_distance([0.6, 0.4], [0.1, 0.7, 0.2]) == 0.0\nassert bhattacharyya_distance([0.6, 0.2, 0.1, 0.1], [0.1, 0.2, 0.3, 0.4]) == 0.2007"}
{"task_id": 121, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nfrom typing import List\ndef vector_sum(a: List[int | float], b: List[int | float]) -> List[int | float]:\n    if len(a) != len(b):\n        return [-1]\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result\na = [1, 2, 3]\nb = [4, 5, 6]\nassert vector_sum([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert vector_sum([1, 2], [1, 2, 3]) == -1\nassert vector_sum([1.5, 2.5, 3.0], [2, 1, 4]) == [3.5, 3.5, 7.0]"}
{"task_id": 122, "completion_id": 0, "passed": false, "result": "failed: name 'discount' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]) -> np.ndarray:\n    \"\"\"\n    Computes the average gradient of the log-policy multiplied by the return at each time step.\n\n    Parameters:\n        theta (np.ndarray): The policy parameters, shape (num_states, num_actions).\n        episodes (List[List[Tuple[int, int, float]]]): A list of episodes, where each episode is a list of transitions (state, action, reward).\n\n    Returns:\n        np.ndarray: Average gradients, rounded to the nearest 4th decimal.\n    \"\"\"\n    discounts = [0.99]\n    rewards = []\n    log_prob_sum = np.zeros_like(theta)\n    for (i, episode) in enumerate(episodes):\n        current_return = 0\n        total_rewards = []\n        for (t, (state, action, reward)) in enumerate(episode):\n            current_return += discount * (1 + reward) ** (-len(rewards))\n            if t > 0:\n                total_rewards.append(current_return)\n            else:\n                total_rewards.append(current_return - rewards[-1])\n            log_prob_sum += np.log(np.exp(log_prob_sum[action] + discounts[0]) + discounts[discounts.index(total_rewards[-1])]).sum()\n            discounts = [d * 0.99 for d in discounts]\n            discounts.append(discounts[-1])\n            rewards.append(total_rewards[-1])\n    avg_grad = log_prob_sum / len(episodes)\n    return round(avg_grad, 4).tolist()\ntheta = np.array([[0.5, 0.3], [0.7, 0.4]])\nepisodes = [(0, 0, 1), (0, 1, 0), (1, 0, 1)]\nassert compute_policy_gradient(np.zeros((2,2)), [[(0,1,0), (1,0,1)], [(0,0,0)]]) == [[-0.25, 0.25], [0.25, -0.25]]\nassert compute_policy_gradient(np.zeros((2,2)), [[(0,0,0), (0,1,0)], [(1,1,0)]]) == [[0.0, 0.0], [0.0, 0.0]]\nassert compute_policy_gradient(np.zeros((2,2)), [[(1,0,1), (1,1,1)], [(1,0,0)]]) == [[0.0, 0.0], [0.25, -0.25]]"}
{"task_id": 123, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nimport math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculates the computational efficiency of an MoE layer compared to a dense layer.\n    \n    Args:\n    n_experts (int): Number of experts.\n    k_active (int): Number of active experts.\n    d_in (int): Input dimensionality.\n    d_out (int): Output dimensionality.\n    \n    Returns:\n    float: Savings percentage of FLOPs from a dense layer to MoE layer.\n    \"\"\"\n    f_ops_dense = 2 * n_experts * d_in * d_out\n    f_ops_moe = 2 * n_experts * k_active * d_in * d_out / 2\n    efficiency = round((1 - f_ops_moe / f_ops_dense) * 100, 1)\n    return efficiency\nn_experts = 8\nk_active = 4\nd_in = 36\nd_out = 51\nassert compute_efficiency(1000, 2, 512, 512) == 99.8\nassert compute_efficiency(10, 2, 256, 256) == 80.0\nassert compute_efficiency(100, 4, 512, 512) == 96.0"}
{"task_id": 124, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Compute the Noisy Top-K gating probabilities for mixed experts model.\n    \n    Parameters:\n        X (np.ndarray): Input data matrix of shape (N1 x n_features).\n        W_g (np.ndarray): Expert weights of shape (N2 x n_features).\n        W_noise (np.ndarray): Noise factors of shape (N3 x n_features).\n        N (np.ndarray): Pre-sampled noise indices of shape (N3 x N1).\n        k (int): Sparsity level for gating.\n        \n    Returns:\n        np.ndarray: Final gating probabilities matrix of shape (N2 x N1) \n    \"\"\"\n    assert isinstance(X, np.ndarray), 'X must be a NumPy array.'\n    assert isinstance(W_g, np.ndarray), 'W_g must be a NumPy array.'\n    assert isinstance(W_noise, np.ndarray), 'W_noise must be a NumPy array.'\n    assert isinstance(N, np.ndarray), 'N must be a NumPy array.'\n    G = np.zeros((len(W_g), len(X)))\n    for i in range(len(X)):\n        for j in range(len(W_g)):\n            if W_noise[j].T @ N[i] > -np.inf:\n                temp = np.tensordot(W_noise[j], N[i], axes=([0], [0]))\n                idx = W_noise[j] > np.abs(temp).max()\n                prob = np.sum(idx)\n                G[j, i] = min(k / prob, 1)\n    return G.tolist()\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.zeros((2,2)), np.zeros((1,2)), k=1) == [[0., 1.]]\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.5], [0.5, 0.5]]), np.array([[1.0, -1.0]]), k=2) == [[0.917, 0.083]]\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.25, 0.25], [0.5, 0.5]]), np.zeros((1,2)), k=2) == [[0.2689, 0.7311]]"}
{"task_id": 125, "completion_id": 0, "passed": false, "result": "failed: shapes (2,4) and (1,12) not aligned: 4 (dim 1) != 1 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Computes the output from a Mixture-of-Experts (MoE) layer given \n    an input tensor x, a set of expert weight matrices We,\n    a gating weight matrix Wg, and other parameters for the MoE.\n    \n    Args:\n        x (np.ndarray): Input tensor of shape (batch_size, sequence_length).\n        We (np.ndarray): Expert weight matrices of shape (num_experts, embedding_dim, hidden_dim).\n        Wg (np.ndarray): Gating weight matrix of shape (num_experts, hidden_dim).\n        n_experts (int): Number of experts.\n        top_k (int): Top-K routing parameter.\n        \n    Returns:\n        List[np.ndarray]: Routed outputs for each token across all experts.\n    \"\"\"\n    if len(x.shape) == 1 or x.shape[0] < x.shape[1]:\n        x = x.reshape(1, -1)\n    (batch_size, seq_len_x) = x.shape\n    out = []\n    gating_probabilities = np.exp(np.dot(Wg, x).T)\n    gating_probabilities /= np.sum(gating_probabilities, axis=0)\n    for t in range(seq_len_x):\n        exp_weights = np.einsum('be,dh->bd', We[t], gating_probabilities[:, t])\n        sorted_indices = np.argsort(exp_weights)[::-1]\n        top_k_expert_indices = sorted_indices[:top_k]\n        expert_outputs = np.sum(exp_weights[top_k_expert_indices].reshape(batch_size, -1), axis=1)\n        output_for_this_token = np.tanh(expert_outputs)\n        out.append(output_for_this_token)\n    return out\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.random.rand(4, 2, 2), np.random.rand(2, 4) , 4, 2) == [[[0.5148, 0.4329], [0.5554, 0.5447], [0.1285, 0.102 ]], [[0.339, 0.3046], [0.5391, 0.417 ], [0.3597, 0.3262]]]\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.zeros((4, 2, 2)), np.random.rand(2, 4), 4, 2) == [[[0., 0.], [0., 0.], [0., 0.]], [[0., 0.], [0., 0.], [0., 0.]]]\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.random.rand(4, 2, 2), np.random.rand(2, 4), 4, 1) == [[[0.5069, 0.4006], [0.6228, 0.3214], [0.141, 0.0789]], [[0.2886, 0.3254], [0.5747, 0.3433], [0.2959, 0.3582]]]"}
{"task_id": 126, "completion_id": 0, "passed": false, "result": "failed: 'numpy.ndarray' object has no attribute 'sqrt'", "solution": "import numpy as np\nimport numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    mean_per_feature = X.mean(axis=(2, 3), keepdims=True)\n    centered_X = X - np.tile(mean_per_feature, [1, 1, X.shape[2], X.shape[3]])\n    avg_norm_factor = (centered_X ** 2).mean(axis=(2, 3), keepdims=True).sqrt()\n    norm_factor = avg_norm_factor * np.repeat(np.expand_dims(gamma, axis=0), repeats=num_groups, axis=0)\n    normalized_X = centered_X / norm_factor\n    final_output = normalized_X + np.tile(beta, [X.shape[0], 1, 1, 1])\n    return final_output.tolist()\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 2), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[-0.2287, -1.2998], [ 0.026, 1.5025]], [[-0.926, -0.9259], [1.46, 0.3919]]], [[[-0.5848, 1.732 ], [-0.5709, -0.5762]], [[1.4005, -1.0503], [-0.8361, 0.486 ]]]]\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 1), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[1. ], [-1. ]], [[-1. ], [1. ]]], [[[-0.0026],[0.0026]], [[1. ], [-1.]]]]\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 3), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[0.2419, -0.7606, 0.4803], [1.8624, -0.912, -0.912]], [[1.7041, 0.6646, -0.9193], [0.3766, -0.9115, -0.9145]]], [[[1.173, -1.31, -1.093], [0.2464, -0.2726, 1.2563]], [[-0.4992, -1.0008, 1.8623], [0.1796, 0.4714, -1.0132]]]]"}
{"task_id": 127, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the value of x where f(x) reaches its minimum on the curve f(x) = x^4 - 3x^3 + 2.\n    \n    Parameters:\n        start_x (float): Starting point for the search.\n        learning_rate (float): Step size for each iteration of gradient descent.\n        tolerance (float): Tolerance level for convergence.\n        max_iters (int): Maximum number of iterations before giving up.\n        \n    Returns:\n        float: The value of x where f(x) reaches its minimum.\n    \"\"\"\n    x_current = start_x\n    converged = False\n    while not converged and max_iters > 0:\n        df_dx = 4 * x_current ** 3 - 9 * x_current ** 2\n        if abs(df_dx) < tolerance:\n            converged = True\n        elif df_dx >= 0:\n            break\n        x_new = x_current - learning_rate * df_dx\n        if abs(x_new - x_current) <= tolerance:\n            converged = True\n        else:\n            x_current = x_new\n        max_iters -= 1\n    return round(x_current, 4)\nassert find_treasure(-1.0) == 2.3366\nassert find_treasure(1.0) == 2.1475\nassert find_treasure(3.0) == 2.3366"}
{"task_id": 128, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Applies the Dynamic Tanh function to the input array x.\n    \n    The Dynamic Tanh function is defined as dytanh = tanh(alpha * X) + beta,\n    where alpha > 0, gamma > 0, and beta >= 0. This function avoids layer normalization \n    and still preserves the squashing behavior of the Hyperbolic Tangent activation.\n    \n    Parameters:\n        x (np.ndarray): Input data for which to compute the dynamic tanhf function.\n        alpha (float): Scaling factor for the input data.\n        gamma (float): Non-negative offset for the output range.\n        beta (float): Non-negative bias added to the output.\n        \n    Returns:\n        list[float]: A list containing the transformed values of x.\n    \"\"\"\n    dytanh = np.tanh(alpha * x) + beta\n    if len(dytanh) <= 1:\n        raise ValueError('Input array must contain at least one value.')\n    max_abs_val = np.max(np.abs(dytanh))\n    if max_abs_val == 0:\n        return [0] * len(dytanh)\n    dytanh /= max_abs_val\n    dytanh_rounded = np.round(dytanh, decimals=4)\n    dytanh_list = dytanh_rounded.tolist()\n    return dytanh_list\nassert dynamic_tanh(np.array([[[0.94378259]],[[0.97754654]],[[0.36168351]],[[0.51821078]],[[0.76961589]]]), 0.5, np.ones((1,)), np.zeros((1,))) == [[[0.4397]], [[0.4532]], [[0.1789]], [[0.2535]], [[0.3669]]]\nassert dynamic_tanh(np.array([[[0.20793482, 0.16989285, 0.03898972], [0.17912554, 0.10962205, 0.3870742], [0.00107181, 0.35807922, 0.15861333]]]), 0.5, np.ones((3,)), np.zeros((3,))) == [[[0.1036, 0.0847, 0.0195], [0.0893, 0.0548, 0.1912], [0.0005, 0.1772, 0.0791]]]\nassert dynamic_tanh(np.array([[[0.35, 0.16, 0.42], [0.17, 0.25, 0.38], [0.71, 0.35, 0.68]]]), 0.5, np.ones((3,)), np.zeros((3,))) == [[[0.1732, 0.0798, 0.207], [0.0848, 0.1244, 0.1877], [0.3408, 0.1732, 0.3275]]]"}

{"task_id": 0, "completion_id": 0, "passed": false, "result": "failed: name '_np' is not defined", "solution": "import numpy as np\nimport numpy as np\nfrom scipy.linalg import inv\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Solves Ridge Regression problem using closed-form solution.\n\n    Parameters:\n    data (np.ndarray): An array where the last column is the target y and all other columns are feature x.\n    alpha (float): The regularization strength. Default value is 0.0 for L2 regularization.\n\n    Returns:\n    list[float]: A list of coefficients rounded to 4 decimal places.\n    \"\"\"\n    intercept = data[:, -1]\n    data = np.delete(data, -1, axis=1)\n    if not np.isfinite(inv(np.dot(data.T, data) + alpha * np.eye(data.shape[1]))).all():\n        raise ValueError('Matrix is singular, cannot solve the equation.')\n    weights = inv(np.dot(data.T, data) + alpha * np.eye(data.shape[1])).dot(data.T).flatten()\n    weights += intercept\n    weights_rounded = [round(weight, 4) for weight in weights]\n    return weights_rounded\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 0) == [1.5, 0.3333], \"Failed on OLS example 1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 0) == [2.0, 1.0], \"Failed on OLS example 2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4], [3, 6]]), 0) == [2.0, 0.0], \"Failed on perfect line\"\nassert ridge_regression(_np.array([[1, 3], [2, 5], [3, 7]]), 0) == [2.0, 1.0], \"Failed on y = 2x + 1\"\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 1) == [1.3333, 0.5], \"Failed on ridge alpha=1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 2) == [1.4615, 0.9231], \"Failed on ridge alpha=2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4]]), 10) == [0.5965, 0.3509], \"Failed on high-alpha small set\"\nassert ridge_regression(_np.array([[2, 4], [4, 8], [6, 12], [8, 16]]), 0) == [2.0, 0.0], \"Failed on multiple perfect line\"\nassert ridge_regression(_np.array([[1, 1], [2, 2], [3, 5], [4, 4]]), 0) == [1.2, 0.0], \"Failed on mixed dataset\"\nassert ridge_regression(_np.array([[-1, -1], [0, 1], [1, 3]]), 0) == [2.0, 1.0], \"Failed on negative x values\""}
{"task_id": 1, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for @: 'numpy.int64' and 'numpy.int64'", "solution": "import numpy as np\nimport numpy as np\ndef dot_product(a, b):\n    return np.dot(a, b)\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    (n_samples, _) = X_train.shape\n    alpha = [0] * n_samples\n    b = 0\n    for _ in range(n_iter):\n        for i in range(n_samples):\n            z_i = dot_product(alpha, y_train) @ dot_product(X_train[i], X_train[i])\n            if y_train[i] * (dot_product(alpha, y_train) @ X_train[i]) <= -eta:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                break\n    w = []\n    for i in range(n_samples):\n        if alpha[i] > 0:\n            w.append(dot_product(X_train[i], X_train[i]))\n    w = np.array(w).astype(np.float64)\n    w = round(w.tolist(), 4)\n    return (w.tolist(), b)\nX_train = np.random.rand(100, 10)\ny_train = np.sign(np.sum(X_train, axis=1))\nassert (np.sign(np.dot(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array(perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(simple 2D separable)\"\nassert (np.sign(np.dot(np.array([[0],[1]]), np.array(perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[0])) + perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[1]) == np.array([-1,1])).all(), \"test case failed: perceptron_dual(simple 1D separable)\"\nassert (np.sign(np.dot(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array(perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(diagonal separable)\"\nassert (np.sign(np.dot(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array(perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(axis-aligned)\"\nassert (np.sign(np.dot(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array(perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(mixed cluster)\"\nassert (np.sign(np.dot(np.array([[-2],[-1],[1],[2]]), np.array(perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[0])) + perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[1]) == np.array([-1,-1,1,1])).all(), \"test case failed: perceptron_dual(1D symmetric)\"\nassert (np.sign(np.dot(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array(perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(slanted line)\"\nassert (np.sign(np.dot(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array(perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(3D axes)\"\nassert (np.sign(np.dot(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array(perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(scaled diagonal)\"\nassert (np.sign(np.dot(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array(perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(tilted)\""}
{"task_id": 2, "completion_id": 0, "passed": false, "result": "failed: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''", "solution": "import numpy as np\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity(link):\n        return lambda x: x\n\n    def log(link):\n        return lambda x: np.log(x)\n\n    def logit(link):\n        return lambda x: np.log(x / (1 - x))\n    return {'identity': {'link': identity, 'inv_link': identity, 'derivative': lambda mu: np.ones_like(mu)}, 'log': {'link': log, 'inv_link': np.exp, 'derivative': lambda mu: mu / (1 + mu)}, 'logit': {'link': logit, 'inv_link': lambda y: 1 / (1 + np.exp(-y)), 'derivative': lambda mu: eta_fn_derivative_logit(mu)}}\nmu = np.array([0.2, 0.8])\nassert np.allclose(glm_links()[\"identity\"][\"link\"](np.array([3.0,-1.0])), np.array([3.0,-1.0])), \"test case failed: identity link\"\nassert np.allclose(glm_links()[\"identity\"][\"inv_link\"](np.array([-0.5,2.6])), np.array([-0.5,2.6])), \"test case failed: identity inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link\"](np.array([1.0,2.0])), np.log(np.array([1.0,2.0]))), \"test case failed: log link\"\nassert np.allclose(glm_links()[\"log\"][\"inv_link\"](np.array([0.0,1.0])), np.exp(np.array([0.0,1.0]))), \"test case failed: log inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link_prime\"](np.array([2.0,4.0])), np.array([0.5,0.25])), \"test case failed: log link derivative\"\nassert np.allclose(glm_links()[\"logit\"][\"link\"](np.array([0.2,0.8])), np.array([-1.38629436,1.38629436])), \"test case failed: logit link\"\nassert np.allclose(glm_links()[\"logit\"][\"inv_link\"](np.array([-1.38629436,1.38629436])), np.array([0.2,0.8])), \"test case failed: logit inverse link\"\nassert np.allclose(glm_links()[\"logit\"][\"link_prime\"](np.array([0.2,0.8])), 1.0/(np.array([0.2,0.8])*(1.0-np.array([0.2,0.8])))), \"test case failed: logit link derivative\"\nimport numpy as _np; _rng=_np.random.default_rng(1); _mu=_rng.uniform(0.05,0.95,50); _eta=glm_links()[\"logit\"][\"link\"](_mu); assert _np.allclose(glm_links()[\"logit\"][\"inv_link\"](_eta), _mu), \"test case failed: random roundtrip\"\nmu_test = np.array([0.3,0.6]).reshape(1,2); eta_test = glm_links()[\"logit\"][\"link\"](mu_test); assert eta_test.shape == (1,2) and glm_links()[\"logit\"][\"inv_link\"](eta_test).shape == (1,2), \"test case failed: shape preservation\""}
{"task_id": 3, "completion_id": 0, "passed": false, "result": "failed: 'range' object has no attribute 'tolist'", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    tree_depths = []\n\n    def build_isolation_tree(node_indices, parent=None):\n        if len(node_indices) < 3:\n            return node_indices.tolist()\n        feature_index = np.random.randint(n_features)\n        down_value = np.min(data[node_indices, feature_index])\n        up_value = np.max(data[node_indices, feature_index])\n        threshold = np.random.uniform(down_value, up_value)\n        left_child = []\n        right_child = []\n        for i in range(len(node_indices)):\n            if data[i, feature_index] <= threshold:\n                left_child.append(i)\n            else:\n                right_child.append(i)\n        depths = [build_isolation_tree(left_child, parent=parent), build_isolation_tree(right_child, parent=parent + 1)]\n        if parent is None:\n            depths = depths[:1]\n        return depths\n    build_isolation_tree(range(n_samples))\n    return [tree_depth - 1 for tree_depth in Counter(map(max, build_isolation_tree(range(n_samples)))).values()]\ndata = np.array([[0, 1], [1, 2], [2, 3], [3, 4]])\nassert isolation_tree_path_length(np.arange(1).reshape(-1, 1)) == [0], \"test case failed: n=1\"\nassert isolation_tree_path_length(np.arange(2).reshape(-1, 1)) == [0, 0], \"test case failed: n=2\"\nassert isolation_tree_path_length(np.arange(3).reshape(-1, 1)) == [1, 1, 1], \"test case failed: n=3\"\nassert isolation_tree_path_length(np.arange(4).reshape(-1, 1)) == [1, 1, 1, 1], \"test case failed: n=4\"\nassert isolation_tree_path_length(np.arange(5).reshape(-1, 1)) == [2, 2, 2, 1, 1], \"test case failed: n=5\"\nassert isolation_tree_path_length(np.arange(6).reshape(-1, 1)) == [2, 2, 2, 2, 2, 2], \"test case failed: n=6\"\nassert isolation_tree_path_length(np.arange(7).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2], \"test case failed: n=7\"\nassert isolation_tree_path_length(np.arange(8).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2], \"test case failed: n=8\"\nassert isolation_tree_path_length(np.arange(9).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2, 2], \"test case failed: n=9\"\nassert isolation_tree_path_length(np.arange(10).reshape(-1, 1)) == [3, 3, 3, 2, 2, 3, 3, 3, 2, 2], \"test case failed: n=10\""}
{"task_id": 7, "completion_id": 0, "passed": false, "result": "failed: test case failed: bread/milk data set", "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import *\nfrom functools import reduce\ndef find_frequent_itemsets(transactions: List[List[Union[int, str]]], minsup: float) -> Dict[Tuple[Union[int, str], ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (integers or strings).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    n_transactions = len(transactions)\n    min_count = math.ceil(minsup * n_transactions)\n    filtered_items = {item: count for (item, count) in item_counts.items() if count >= min_count}\n    supports = {}\n    for size in range(1, len(filtered_items) + 1):\n        for itemset in combinations(filtered_items.keys(), size):\n            supported = sum((item_counts[item] for item in itemset))\n            supports[tuple(sorted(itemset))] = supported\n    return dict(sorted(supports.items(), key=lambda x: -x[1]))\nassert find_frequent_itemsets([['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']], 0.6) == {('bread',): 4, ('milk',): 4, ('diaper',): 4, ('beer',): 3, ('bread', 'milk'): 3, ('bread', 'diaper'): 3, ('diaper', 'milk'): 3, ('beer', 'diaper'): 3}, \"test case failed: bread/milk data set\"\nassert find_frequent_itemsets([[1, 2, 3], [1, 2], [1, 3], [2, 3], [1, 2, 3]], 0.6) == {(1,): 4, (2,): 4, (3,): 4, (1, 2): 3, (1, 3): 3, (2, 3): 3}, \"test case failed: numeric data set\"\nassert find_frequent_itemsets([['a', 'b'], ['b', 'c'], ['a', 'c']], 1.0) == {}, \"test case failed: no frequent itemset data set\"\nassert find_frequent_itemsets([[1], [1], [1], [2], [3]], 0.6) == {(1,): 3}, \"test case failed: single frequent item data set\"\nassert find_frequent_itemsets([], 0.4) == {}, \"test case failed: empty data set\"\nassert find_frequent_itemsets([['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']], 0.5) == {('a',): 5, ('b',): 5, ('c',): 5, ('a', 'b'): 4, ('a', 'c'): 4, ('b', 'c'): 4, ('a', 'b', 'c'): 3}, \"test case failed: mixed letters data set\"\nassert find_frequent_itemsets([[1, 2], [2, 3], [3, 4], [1, 4]], 0.5) == {(1,): 2, (2,): 2, (3,): 2, (4,): 2}, \"test case failed: four-numbers data set\"\nassert find_frequent_itemsets([['x'] for _ in range(100)], 0.95) == {('x',): 100}, \"test case failed: 100 identical transactions data set\"\nassert find_frequent_itemsets([['p', 'q', 'r'], ['p', 'q'], ['p', 'r'], ['q', 'r'], ['p', 'q', 'r', 's']], 0.4) == {('p',): 4, ('q',): 4, ('r',): 4, ('p', 'q'): 3, ('p', 'r'): 3, ('q', 'r'): 3, ('p', 'q', 'r'): 2}, \"test case failed: p/q/r data set\"\nassert find_frequent_itemsets([['a'], ['b']], 1.0) == {}, \"test case failed: high minsup no frequent items\""}
{"task_id": 11, "completion_id": 0, "passed": false, "result": "failed: axis 1 is out of bounds for array of dimension 1", "solution": "import numpy as np\nimport numpy as np\ndef initialize_centers(data, k):\n    \"\"\"Initialize centers by selecting k samples randomly\"\"\"\n    idx = np.random.choice(data.shape[0], size=k, replace=False)\n    return data[idx]\ndef calculate_distance(row, centroid):\n    \"\"\"Euclidean Distance\"\"\"\n    return np.linalg.norm(np.array(row) - np.array(centroid))\ndef calculate_centroid(data, indices):\n    \"\"\"Calculate new center based on indices\"\"\"\n    if len(indices) == 0:\n        raise ValueError('No samples assigned to cluster')\n    return np.mean(data[indices], axis=0)\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Implements the K-means algorithm.\"\"\"\n    assert k <= data.shape[0]\n    centroids = initialize_centers(data, k)\n    old_centroids = []\n    while True:\n        distances = np.apply_along_axis(calculate_distance, 1, data, centroids)\n        assignment_indices = np.argmin(distances, axis=1)\n        old_centroids.append(list(centroids))\n        if len(old_centroids) > 0:\n            new_centroids = [calculate_centroid(data, assignment_indices == i) for i in range(k)]\n        else:\n            new_centroids = [centroids]\n        diff = np.sum([abs(x - y) / x for (x, y) in zip(new_centroids, old_centroids)])\n        if diff < epsilon or len(old_centroids) >= max_iter:\n            break\n        centroids = new_centroids\n    clusters = {i: [] for i in range(k)}\n    for label in set(assignment_indices):\n        clusters[label].append(data[assignment_indices == label])\n    final_centroids = [[round(cluster[i][j], 4) for j in range(len(centroids[0]))] for (i, cluster) in clusters.items()]\n    return (final_centroids, [assign_idx + 1 for assign_idx in assignment_indices])\nassert kmeans(np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]), 2) == ([[5.5, 1.0], [5.5, 4.0]], [0, 1, 0, 0, 1, 0]), \"test case failed: basic two-cluster example\"\nassert kmeans(np.array([[0, 0], [0, 2], [10, 0], [10, 2]]), 2) == ([[5.0, 0.0], [5.0, 2.0]], [0, 1, 0, 1]), \"test case failed: symmetric rectangle\"\nassert kmeans(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[3.0, 4.0]], [0, 0, 0]), \"test case failed: single cluster mean\"\nassert kmeans(np.array([[0, 0], [1, 1], [2, 2]]), 3) == ([[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]], [0, 1, 2]), \"test case failed: k equals number of samples\"\nassert kmeans(np.array([[0], [10]]), 2) == ([[0.0], [10.0]], [0, 1]), \"test case failed: one-dimensional data\"\nassert kmeans(np.zeros((3, 2)), 1) == ([[0.0, 0.0]], [0, 0, 0]), \"test case failed: all identical samples\"\nassert kmeans(np.array([[0, 0], [10, 10], [20, 20]]), 3) == ([[0.0, 0.0], [10.0, 10.0], [20.0, 20.0]], [0, 1, 2]), \"test case failed: three isolated samples\"\nassert kmeans(np.array([[0, 0], [1, 0], [0, 1], [1, 1]]), 1) == ([[0.5, 0.5]], [0, 0, 0, 0]), \"test case failed: square to single centre\"\nassert kmeans(np.array([[2, 2], [2, 2], [2, 2]]), 1) == ([[2.0, 2.0]], [0, 0, 0]), \"test case failed: duplicate points single centre\"\nassert kmeans(np.array([[0, 0], [1, 1], [0, 0], [1, 1]]), 2) == ([[0.0, 0.0], [1.0, 1.0]], [0, 1, 0, 1]), \"test case failed: duplicates two centres\""}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: name 'D1' is not defined", "solution": "import numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing positive ratings;\n        a value of *0* means not rated.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either `'cosine'` (default) or `'pearson'`.\n\n    Returns\n    -------\n    list[int]\n        A list with at most `k` item indices ordered from the highest to the lowest predicted score.\n    \"\"\"\n    item_counts = np.sum(data, axis=1)\n    item_rated_mask = data[user_ind] != 0\n    if np.any(item_rated_mask):\n        item_ratings_mean = data[item_rated_mask].sum(axis=0) / item_counts[item_rated_mask]\n        item_ratings_std = np.sqrt(np.sum((data[item_rated_mask] - item_ratings_mean[:, None]) ** 2, axis=0))\n        if any((i <= 0.001 for i in item_ratings_std)):\n            mean_centered = False\n        else:\n            mean_centered = True\n        item_similarities = []\n        for i in range(item_counts.shape[0]):\n            for j in range(item_counts.shape[0]):\n                sim = 0.0\n                if i != j and data[i][j] != 0:\n                    similarities = []\n                    ratings_i = data[item_rated_mask & (data[:, i] > 0), :]\n                    ratings_j = data[item_rated_mask & (data[:, j] > 0), :]\n                    if criterion == 'cosine':\n                        ratings_i -= item_ratings_mean[i][:, None]\n                        ratings_j -= item_ratings_mean[j][:, None]\n                        cos_sim = ratings_i.dot(ratings_j.T) / (np.linalg.norm(ratings_i, axis=0) * np.linalg.norm(ratings_j, axis=0))\n                        if mean_centered:\n                            if np.linalg.norm(ratings_i, ord=1) < 0.001:\n                                ratings_i += 0.0001 * np.ones_like(ratings_i)\n                            if np.linalg.norm(ratings_j, ord=1) < 0.001:\n                                ratings_j += 0.0001 * np.ones_like(ratings_j)\n                            ratings_i /= np.linalg.norm(ratings_i, ord=1)\n                            ratings_j /= np.linalg.norm(ratings_j, ord=1)\n                        elif criterion == 'pearson':\n                            cos_sim = np.corrcoef(ratings_i, ratings_j)[0, 1]\n                    elif criterion == 'euclidean':\n                        eucl_dist_sq = ((data[:, i] - data[:, j]) ** 2).mean(axis=-1)\n                        cos_sim = 1 - eucl_dist_sq.mean()\n                    similarities.append(cos_sim if criterion == 'cosine' else cos_sim * (ratings_i.shape[1] > 1))\n                    if len(similarities) > 0:\n                        sim = sum(similarities) / len(similarities)\n                    else:\n                        sim = float('NaN')\n                item_similarities.append(sim)\n    already_rated = [i for (i, v) in enumerate(data[user_ind]) if v > 0]\n\n    def predict_score(target_index):\n        target_rating_vector = np.zeros(len(already_rated))\n        for i in already_rated:\n            if target_index == i:\n                continue\n            target_rating_vector[i] = data[user_ind][target_index]\n        numerator = np.dot(target_rating_vector, item_similarities[target_index])\n        denominator = np.abs(sum(item_similarities[target_index]))\n        return float(numerator) / max(denominator, 1.0)\n    item_scores = [(score, idx) for (idx, score) in sorted(zip([predict_score(idx) for idx in range(data.shape[1])], range(data.shape[1])))]\n    top_k_items = [idx for (val, idx) in reversed(item_scores[:min(k, len(top_k_items))])]\n    if len(set(data[user_ind])) == data.shape[1]:\n        return []\n    return top_k_items\nassert knn_recommend(D1, 0, 1) == [1], \"failed: knn_recommend(D1,0,1)\"\nassert knn_recommend(D1, 2, 1) == [0], \"failed: knn_recommend(D1,2,1)\"\nassert knn_recommend(D1, 0, 1, 'pearson') == [1], \"failed: pearson D1 user0\"\nassert knn_recommend(D1, 1, 1) == [1], \"failed: knn_recommend(D1,1,1)\"\nassert knn_recommend(D1, 3, 1) == [0], \"failed: knn_recommend(D1,3,1)\"\nassert knn_recommend(D1, 0, 2) == [1], \"failed: k larger than unrated items\"\nassert knn_recommend(D2, 0, 1) == [0], \"failed: knn_recommend(D2,0,1)\"\nassert knn_recommend(D2, 1, 1) == [1], \"failed: knn_recommend(D2,1,1)\"\nassert knn_recommend(D2, 2, 1) == [2], \"failed: knn_recommend(D2,2,1)\"\nassert knn_recommend(D3, 0, 1) == [0], \"failed: knn_recommend(D3,0,1)\""}
{"task_id": 19, "completion_id": 0, "passed": false, "result": "failed: index 4 is out of bounds for axis 0 with size 4", "solution": "import numpy as np\nimport numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    max_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    (n_samples, n_features) = (X.shape[0], X.shape[1])\n    for i in range(n_features):\n        unique_values = np.unique(X[:, i])\n        if len(unique_values) < 2:\n            continue\n        for val in unique_values:\n            left_idx = X[:, i] <= val\n            right_idx = ~left_idx\n            left_rows = X[left_idx]\n            right_rows = X[right_idx]\n            left_g = g[left_rows]\n            left_h = h[left_rows]\n            right_g = g[right_rows]\n            right_h = h[right_rows]\n            left_loss = -(left_g ** 2 / (left_h @ left_h + lam)) + gamma\n            right_loss = -(right_g ** 2 / (right_h @ right_h + lam)) + gamma\n            gain = left_loss.sum() + right_loss.sum()\n            if gain > max_gain:\n                max_gain = gain\n                best_feature = i\n                best_threshold = val\n    if max_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\nassert best_split(np.array([[2],[4],[6],[8]]), np.array([ 1, 1,-1,-1]), np.array([1,1,1,1]), 0.1, 1.0)==(0,4), \"test-case 1 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([5,4,3,2,1]), np.ones(5), 0.2, 1.0)==(0,3), \"test-case 2 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([-5,-4,-3,-2,-1]), np.ones(5), 0.2, 0.5)==(0,3), \"test-case 3 failed\"\nassert best_split(np.array([[1],[2],[3],[4]]), np.array([1,-1,1,-1]), np.ones(4), 0.8, 1.0) is None, \"test-case 4 failed\"\nassert best_split(np.array([[0,0],[1,1],[2,2],[3,3],[4,4]]), np.array([1,1,1,-1,-1]), np.ones(5), 0.1, 1.0)==(0,2), \"test-case 5 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,0,0,0]), np.ones(6), 0.1, 1.0) is None, \"test-case 7 failed\"\nassert best_split(np.array([[10],[20],[30],[40]]), np.array([10,-5,-5,0]), np.ones(4), 0.05, 1.0)==(0,20), \"test-case 8 failed\"\nassert best_split(np.array([[2],[2],[2],[2]]), np.array([1,1,1,1]), np.ones(4), 0.1, 1.0) is None, \"test-case 10 failed\""}
{"task_id": 20, "completion_id": 0, "passed": false, "result": "failed: failed on scalar 0", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x).flatten()\n    elif isinstance(x, int) or isinstance(x, float):\n        pass\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    rounded_sigmoid_x = round(sigmoid_x, 4)\n    rounded_gradient_x = round(gradient_x, 4)\n    return (rounded_sigmoid_x, [rounded_gradient_x]) if np.isscalar(x) else (rounded_sigmoid_x.tolist(), rounded_gradient_x.tolist())\nassert sigmoid_activation(0) == (0.5, 0.25), \"failed on scalar 0\"\nassert sigmoid_activation([-1, 0, 1]) == ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966]), \"failed on list [-1,0,1]\"\nassert sigmoid_activation(np.array([-3, 3])) == ([0.0474, 0.9526], [0.0452, 0.0452]), \"failed on np.array([-3,3])\"\nassert sigmoid_activation([10]) == ([1.0], [0.0]), \"failed on list [10]\"\nassert sigmoid_activation(10) == (1.0, 0.0), \"failed on scalar 10\"\nassert sigmoid_activation(-1000) == (0.0, 0.0), \"failed on large negative scalar\"\nassert sigmoid_activation([0]) == ([0.5], [0.25]), \"failed on list [0]\""}
{"task_id": 21, "completion_id": 0, "passed": false, "result": "failed: 1.5 is not in list", "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    num_samples = len(y_train)\n    w = np.ones(num_samples) / num_samples\n    alpha = [0] * num_samples\n    n_iter = 0\n    while True:\n        all_stumps = []\n        thresholds = [(x_train[i] + x_train[j]) / 2 for i in range(len(x_train)) for j in range(i + 1, len(x_train))]\n        sorted_thresholds = sorted(thresholds, key=lambda t: x_train.index(t))\n        min_weight_error = float('inf')\n        best_index = -1\n        for index in range(len(sorted_thresholds)):\n            stump = {'threshold': sorted_thresholds[index], 'prediction': int(index % 2)}\n            if stump['prediction'] == 1:\n                prediction_sign = 1\n            else:\n                prediction_sign = -1\n            positive_indices = [i for i in range(num_samples) if y_train[i] == prediction_sign]\n            negative_indices = [i for i in range(num_samples) if y_train[i] != prediction_sign]\n            weight_sum_positive = sum(w[positive_indices])\n            weight_sum_negative = sum(w[negative_indices])\n            weighted_error = abs(weight_sum_positive / weight_sum_negative)\n            if weighted_error < min_weight_error:\n                min_weight_error = weighted_error\n                best_index = index\n        stump = {'threshold': sorted_thresholds[best_index], 'prediction': int(best_index % 2)}\n        model_coeffs.append(stump)\n        new_weights = np.array([1 / len(x_train)] * num_samples)\n        for i in range(num_samples):\n            if y_train[i] == stump['prediction']:\n                new_weights[i] *= math.exp(-alpha[i])\n        for i in range(num_samples):\n            if y_train[i] != stump['prediction']:\n                new_weights[i] *= math.exp(alpha[i])\n        sum_of_weights = sum(new_weights)\n        updated_weights = new_weights / sum_of_weights\n        if max(updated_weights) > 1 - epsilon:\n            break\n        w = updated_weights.copy()\n        for i in range(num_samples):\n            alpha[i] = alpha[i] * -math.log(update_err)\n        n_iter += 1\n    predicted_labels = np.sign(np.sum([model_coeffs[i]['prediction'] * w[i] for i in range(num_samples)], axis=0))\n    return predicted_labels.tolist()\ndef update_err(predicted_label, actual_label):\n    err = 0\n    for i in range(len(actual_label)):\n        if predicted_label[i] != actual_label[i]:\n            err += 1\n    return err / len(actual_label)\nassert adaboost_1d_predict([1,2,3,4],[1,1,-1,-1],[1.5,3.5])==[1,-1],\"failed on basic separable set\"\nassert adaboost_1d_predict([1,2,3,4,5],[1,1,1,-1,-1],[1,5])==[1,-1],\"failed on unbalanced set\"\nassert adaboost_1d_predict([0,1,2,3],[1,1,-1,-1],[0.5,2.5])==[1,-1],\"failed on shift threshold\"\nassert adaboost_1d_predict([-3,-2,-1,0],[-1,-1,1,1],[-2.5,-0.5])==[-1,1],\"failed on negative values\"\nassert adaboost_1d_predict([10,20,30,40],[1,1,-1,-1],[15,35])==[1,-1],\"failed on large values\"\nassert adaboost_1d_predict([1,3,5,7],[1,1,-1,-1],[2,6])==[1,-1],\"failed on odd spacing\"\nassert adaboost_1d_predict([2,4,6,8],[1,1,-1,-1],[3,7],epsilon=0)==[1,-1],\"failed with explicit epsilon\"\nassert adaboost_1d_predict([0.1,0.2,0.8,0.9],[1,1,-1,-1],[0.15,0.85])==[1,-1],\"failed on float inputs\"\nassert adaboost_1d_predict([5,6,7,8,9,10],[1,1,1,-1,-1,-1],[5.5,9.5])==[1,-1],\"failed on bigger set\"\nassert adaboost_1d_predict([-5,-4,-3,-2,-1,0],[1,1,1,-1,-1,-1],[-4.5,-0.5])==[1,-1],\"failed on negative range\""}
{"task_id": 25, "completion_id": 0, "passed": false, "result": "failed: name 'gaussian_svm_predict' is not defined", "solution": "import numpy as np\nimport math\n\nassert gaussian_svm_predict(np.array([[1,2],[2,3]]),np.array([1,-1]),np.array([0.6,0.4]),0.1,0.5,np.array([[1.5,2.5]]))==[1],\"Failed on single test sample.\"\nassert gaussian_svm_predict(np.array([[1,0],[0,1]]),np.array([1,-1]),np.array([0.9,0.9]),0.0,2.0,np.array([[0.9,0.1],[0.1,0.9]]))==[1,-1],\"Failed orthogonal samples.\"\nassert gaussian_svm_predict(np.array([[1,2],[3,4]]),np.array([1,1]),np.array([0.5,0.5]),-0.6,0.3,np.array([[2,3]]))==[-1],\"Bias impact failed.\"\nassert gaussian_svm_predict(np.array([[0,0],[0,1],[1,0],[1,1]]),np.array([1,-1,-1,1]),np.array([0.3,0.3,0.3,0.3]),0.0,1.0,np.array([[0.5,0.5],[1.5,1.5]]))==[1,1],\"Failed on XOR-like points.\"\nassert gaussian_svm_predict(np.array([[2]]),np.array([-1]),np.array([0.9]),0.0,1.0,np.array([[1],[3]]))==[-1,-1],\"Failed 1-D input.\"\nassert gaussian_svm_predict(np.array([[1,2,3],[4,5,6]]),np.array([1,-1]),np.array([0.4,0.6]),0.0,0.2,np.array([[1,2,3],[4,5,6]]))==[1,-1],\"Failed predictions identical to training points.\"\nassert gaussian_svm_predict(np.array([[1,2]]),np.array([1]),np.array([1.0]),-1.5,0.1,np.array([[10,20]]))==[-1],\"Far away point should follow bias.\""}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: name 'a' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    if not isinstance(X, list) or any((not isinstance(row, list) for row in X)):\n        raise ValueError(\"Input 'X' must be a list of lists.\")\n    if len(X) == 0 or len(X[0]) == 0:\n        raise ValueError(\"Input 'X' must contain non-empty rows.\")\n    if not all((isinstance(num, (int, float)) for row in X for num in row)):\n        raise TypeError(\"All elements in 'X' must be numbers.\")\n    if k < 1 or k > min(len(X), len(X[0])):\n        return (-1, None)\n    (m, n) = (len(X), len(X[0]))\n    cov_matrix = np.cov([x.flatten() for x in X])\n    (_, eigvals, _) = np.linalg.svd(cov_matrix)\n    sorted_indices = np.argsort(eigvals)[::-1][:k]\n    u_sorted = eigenvectors[selected_indices]\n    U = np.dot(np.diag(u_sorted[:, [True]]), np.diag(1 / u_sorted[:, selected_indices]))\n    if not isinstance(U, np.ndarray):\n        raise RuntimeError('Error computing SVD')\n    X_hat = np.dot(U, np.dot(X, U.T))\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat_rounded = round(X_hat, 4)\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded.tolist(), mse_rounded)\nassert a([[1, 0], [0, 1]], 1) == ([[1.0, 0.0], [0.0, 0.0]], 0.25), \"test case failed: a([[1,0],[0,1]],1)\"\nassert a([[2, 2], [2, 2]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 0.0), \"test case failed: a([[2,2],[2,2]],1)\"\nassert a([[3, 1], [1, 3]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 1.0), \"test case failed: a([[3,1],[1,3]],1)\"\nassert a([[4, 0], [0, 2]], 1) == ([[4.0, 0.0], [0.0, 0.0]], 1.0), \"test case failed: a([[4,0],[0,2]],1)\"\nassert a([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2) == ([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]], 0.1111), \"test case failed: a(I3,2)\"\nassert a([[1, 2], [3, 4]], 2) == ([[1.0, 2.0], [3.0, 4.0]], 0.0), \"test case failed: a([[1,2],[3,4]],2)\"\nassert a([[1, 0], [0, 1]], 0) == -1, \"test case failed: a(k=0)\"\nassert a([[1, 0], [0, 1]], 3) == -1, \"test case failed: a(k>min(m,n))\"\nassert a([[1, 2, 3], [2, 4, 6]], 1) == ([[1.0, 2.0, 3.0], [2.0, 4.0, 6.0]], 0.0), \"test case failed: a(rank-1 2x3,1)\"\nassert a([[5], [10], [15], [20]], 1) == ([[5.0], [10.0], [15.0], [20.0]], 0.0), \"test case failed: a(single column,1)\""}
{"task_id": 29, "completion_id": 0, "passed": false, "result": "failed: name 'stump_to_add' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    n_samples = len(x_train)\n    splits = [x_train[i] + (x_train[i + 1] - x_train[i]) / 2 for i in range(n_samples - 1)]\n\n    def residual_sum_of_squares(stump):\n        (_, _, _) = stump\n        return sum(((y_train[i] - np.dot(x_train[i], stump)) ** 2 for i in range(n_samples)))\n    min_stump = None\n    best_residual_sum = float('inf')\n    for split in splits:\n        (_, c1, c2) = stump_to_add(split)\n        new_residual_sum = residual_sum_of_squares((split, c1, c2))\n        if new_residual_sum < best_residual_sum:\n            min_stump = (split, c1, c2)\n            best_residual_sum = new_residual_sum\n    prediction = np.dot(x_query, min_stump[1])\n    if x_query <= min_stump[0]:\n        prediction += min_stump[1]\n    else:\n        prediction += min_stump[2]\n    return round(prediction, 4)\nx_train = np.array([1, 2, 3, 4, 5])\ny_train = np.array([1, 2, 3, 4, 5])\nx_query = 3.5\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],3)==3.5, \"failed: piece-wise constant right side\"\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],2)==1.5, \"failed: piece-wise constant left side\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],5)==4.0, \"failed: split at 3.0, right prediction\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],2)==2.0, \"failed: split at 3.0, left prediction\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],6)==20.0, \"failed: right side prediction 20\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],2)==10.0, \"failed: left side prediction 10\"\nassert predict_boosting_tree([1,2,3,4],[0,0,0,0],3)==0.0, \"failed: all zeros\"\nassert predict_boosting_tree([1,1.5,2],[2,2,2],1.2)==2.0, \"failed: identical targets\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],4)==2.0, \"failed: two-segment data, right\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],2)==1.0, \"failed: two-segment data, left\""}
{"task_id": 34, "completion_id": 0, "passed": false, "result": "failed: test failed: shape (2,3), sparsity 0.3, seed 42", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Produces a binary tensor of specified shape with given sparsity level.\n    \n    Parameters:\n        shape (tuple): Shape of the tensor.\n        sparsity (float): Probability of filling each cell with 1 (default: 0.5).\n        seed (int or None): Seed for random number generator (default: None).\n        \n    Returns:\n        np.array: A binary tensor with the specified sparsity level.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    tensor = np.zeros(shape)\n    if seed is not None:\n        np.random.seed(seed)\n    for i in range(tensor.shape[0]):\n        for j in range(tensor.shape[1]):\n            if np.random.uniform(0, 1) < sparsity:\n                tensor[i][j] = 1.0\n    return tensor.astype(float)\nassert (random_binary_tensor((2,3),0.3,42)==np.array([[0.,1.,1.],[0.,0.,0.]])).all(), \"test failed: shape (2,3), sparsity 0.3, seed 42\"\nassert (random_binary_tensor((3,),0.8,1)==np.array([1.,1.,0.])).all(), \"test failed: shape (3,), sparsity 0.8, seed 1\"\nassert (random_binary_tensor((2,2),0)==np.zeros((2,2))).all(), \"test failed: all zeros when sparsity 0\"\nassert (random_binary_tensor((2,2),1)==np.ones((2,2))).all(), \"test failed: all ones when sparsity 1\"\nassert random_binary_tensor((1,),-0.1)==-1, \"test failed: invalid sparsity -0.1\"\nassert random_binary_tensor((1,),1.1)==-1, \"test failed: invalid sparsity 1.1\"\narr=random_binary_tensor((1000,),0.4,123); assert abs(arr.mean()-0.4)<0.05, \"test failed: empirical sparsity deviates >5% for seed 123\"\nassert random_binary_tensor((5,4),0.5).shape==(5,4), \"test failed: incorrect shape (5,4)\"\ntensor=random_binary_tensor((2,3,4),0.6,7); assert tensor.dtype.kind=='f' and set(np.unique(tensor)).issubset({0.0,1.0}), \"test failed: dtype or values incorrect for 3-D shape\"\nassert random_binary_tensor((10,),0.25,55).sum()==(random_binary_tensor((10,),0.25,55)).sum(), \"test failed: function must be deterministic with same seed\""}
{"task_id": 39, "completion_id": 0, "passed": false, "result": "failed: axis 1 is out of bounds for array of dimension 1", "solution": "import numpy as np\nimport numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, np.ndarray, np.ndarray]:\n    \"\"\"Perform a median split on a two-dimensional NumPy array along column *d*.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        Input 2D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n        \n    Returns\n    -------\n    tuple\n        A 3-tuple containing:\n        - pivot_idx: int, the row index of the median value in column *d*\n        - left_indices: np.ndarray, the row indices of elements less than or equal to the median\n        - right_indices: np.ndarray, the row indices of elements greater than the median\n        \n    \"\"\"\n    med_val = np.median(data[:, d])\n    partitioned_data = np.partition(data[:, d], kth=abs(len(data) - 1), axis=0)[:len(data) // 2]\n    left_indices = np.all(partitioned_data < med_val, axis=1)\n    left_indices = np.where(left_indices)[0]\n    right_indices = ~left_indices\n    right_indices = np.where(right_indices)[0]\n    left_indices.sort()\n    right_indices.sort()\n    return (np.searchsorted(np.partition(data[:, d], kth=len(data) // 2), med_val), left_indices, right_indices)\ndata = np.array([[5, 2], [6, 4], [7, 8], [9, 3]])\nd = 0\nassert get_split(np.array([[2,3],[1,5],[4,1],[0,2],[3,4]]),0) == (0,[1,3],[2,4]), \"failed on example 1\"\nassert get_split(np.array([[10],[20],[30],[40]]),0) == (2,[0,1],[3]), \"failed on even n, single column\"\nassert get_split(np.array([[1,9],[2,8],[3,7],[4,6],[5,5]]),1) == (2,[3,4],[0,1]), \"failed on different column\"\nassert get_split(np.arange(1,11).reshape(-1,1),0) == (5,[0,1,2,3,4],[6,7,8,9]), \"failed on 10 sequential numbers\"\nassert get_split(np.array([[8],[3],[6],[2],[7],[4]]),0) == (2,[1,3,5],[0,4]), \"failed on shuffled unique values\"\nassert get_split(np.array([[5,1],[4,2],[3,3],[2,4],[1,5]]),1) == (2,[0,1],[3,4]), \"failed on descending column 1\"\nassert get_split(np.array([[10],[20],[30],[40],[50],[60],[70]]),0) == (3,[0,1,2],[4,5,6]), \"failed on 7 items\"\nassert get_split(np.array([[100],[200]]),0) == (1,[0],[]), \"failed on two elements\"\nassert get_split(np.array([[42]]),0) == (0,[],[]), \"failed on single element\"\nassert get_split(np.array([[1,5,9],[2,6,8],[3,7,7],[4,4,6],[5,3,5]]),2) == (2,[3,4],[0,1]), \"failed on 3rd column split\""}
{"task_id": 40, "completion_id": 0, "passed": false, "result": "failed: mismatch in length of strides and shape", "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Data must be one dimensional.'\n    assert stride >= 1, 'Stride must be greater than or equal to 1.'\n    N = len(x)\n    if N < frame_width:\n        raise AssertionError('Length of signal less than frame width.')\n    n_frames = (N - frame_width) // stride + 1\n    if not writeable:\n        shape = (n_frames, frame_width)\n        strides = tuple(np.cumprod((1,) + x.shape[1:], dtype=np.int64)[::-1])\n        view = as_strided(x, shape=shape, strides=strides)\n        return view.view(np.ndarray).copy()\n    return as_strided(x, shape=(n_frames, frame_width), strides=(stride,) + x.strides)\n# 1\nx = np.arange(6)\nassert np.array_equal(to_frames(x, 5, 1), np.array([[0,1,2,3,4],[1,2,3,4,5]])), 'test case failed: to_frames(np.arange(6),5,1)'\n# 2\nassert np.array_equal(to_frames(np.arange(10),3,2), np.array([[0,1,2],[2,3,4],[4,5,6],[6,7,8]])), 'test case failed: to_frames(np.arange(10),3,2)'\n# 3\nassert np.array_equal(to_frames(np.arange(10),4,4), np.array([[0,1,2,3],[4,5,6,7]])), 'test case failed: to_frames(np.arange(10),4,4)'\n# 4\nassert to_frames(np.arange(8),4,2).flags.writeable is False, 'test case failed: writeable flag when default False'\n# 5\nx = np.arange(8)\nframes = to_frames(x,4,2,writeable=True)\nframes[0,0]=123\nassert x[0]==123, 'test case failed: writeable True reflection'\n# 6\nrand = np.random.randn(17)\nframes = to_frames(rand,5,3)\nassert frames.shape == ((17-5)//3+1,5), 'test case failed: random shape'\n# 7\nassert np.array_equal(to_frames(np.arange(10),10,1), np.arange(10).reshape(1,-1)), 'test case failed: single frame'\n# 8\nassert np.array_equal(to_frames(np.arange(9),4,3), np.array([[0,1,2,3],[3,4,5,6]])), 'test case failed: tail trimming'\n# 9\nx = np.arange(4)\nassert np.array_equal(to_frames(x,1,1), x.reshape(-1,1)), 'test case failed: frame width 1'\n# 10\nx = np.arange(25)\nframes = to_frames(x,5,6)\nassert frames.shape == ((25-5)//6+1,5), 'test case failed: stride > width'"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, (list, np.ndarray)) or len(X) == 0 or (not all((isinstance(row, list) for row in X))):\n        raise ValueError('Input must be a non-empty list of lists.')\n    X = np.array(X)\n    if X.ndim != 2:\n        raise ValueError('Matrix must be two-dimensional.')\n    if not np.all(np.isclose(X, round(X))):\n        raise ValueError('All elements must be within the range [0, 1].')\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True\nassert is_stochastic([[1.0]]) is True, \"Failed on 1\u00d71 identity\"\nassert is_stochastic([[0.5, 0.5], [0.1, 0.9]]) is True, \"Failed on simple 2\u00d72 matrix\"\nassert is_stochastic([[0.2, 0.5], [0.3, 0.3]]) is False, \"Rows do not sum to 1\"\nassert is_stochastic([[0.2, -0.2], [0.4, 0.6]]) is False, \"Negative entry allowed\"\nassert is_stochastic([[1.2, -0.2], [0.4, 0.6]]) is False, \"Entry greater than 1 allowed\"\nassert is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) is True, \"Failed on 3\u00d73 identity\"\nassert is_stochastic([[0.3333, 0.3333, 0.3334]]) is True, \"Tolerance handling failed\"\nassert is_stochastic([[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]) is True, \"Failed on 2\u00d73 valid matrix\"\nassert is_stochastic([[0.2, 0.3, 0.6], [0.1, 0.1, 0.8]]) is False, \"First row sums to 1.1\"\nassert is_stochastic(np.array([[0.7, 0.2, 0.1]])) is True, \"Failed on NumPy input\""}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\"\"\"\n\n    def compute_gradient(X, y, w):\n        return 1 / X.shape[0] * np.dot(np.transpose(X), np.dot(X, w) - y)\n    w = np.zeros((X.shape[1],))\n    s = np.zeros_like(w)\n    prev_grad_norm = np.inf\n    for _ in range(max_iter):\n        grad = compute_gradient(X, y, w)\n        s = rho * s + (1 - rho) * grad ** 2\n        if np.linalg.norm(grad) > np.sqrt(epsilon):\n            grad /= np.linalg.norm(grad)\n        update_step = -(eta * grad / np.sqrt(s + eps_station))\n        w += update_step\n        if np.linalg.norm(grad) < epsilon:\n            print('Converged at iteration:', _, 'with gradient norm:', np.linalg.norm(grad))\n            break\n        prev_grad_norm = np.linalg.norm(grad)\n        assert not np.isnan(prev_grad_norm), f'NaN encountered in RMSprop update'\n    return [round(float(w[i]), 4) for i in range(w.size)]\nimport numpy as np\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([1,3,5,7],float)),[1,2])), \"Failed on y = 1+2x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3],[1,4]],float),np.array([3,7,11,15,19],float)),[3,4])), \"Failed on y = 3+4x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2]],float),np.array([5,5,5],float)),[5,0])), \"Failed on constant function\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([10,8,6,4],float)),[10,-2])), \"Failed on y = 10-2x\"\nX8=np.array([[1,-1],[1,0],[1,1],[1,2]],float);y8=np.array([4,5,6,7],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X8,y8),[5,1])), \"Failed on negative to positive x\"\nX9=np.array([[1,2],[1,4],[1,6],[1,8]],float);y9=np.array([5,9,13,17],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X9,y9),[1,2])), \"Failed on even x\"\nX10=np.array([[1,3],[1,6],[1,9]],float);y10=np.array([2,4,6],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X10,y10),[0,0.6667])), \"Failed on small sample 10\""}
{"task_id": 56, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Compute the SoftPlus function either directly or its gradient.\n\n    Parameters:\n    x (scalar | List[float] | np.ndarray): Input data.\n    deriv (bool): Whether to compute the gradient instead of the SoftPlus function.\n\n    Returns:\n    List[float]: The computed SoftPlus values if no gradient requested,\n                 or the gradient itself if gradient is requested.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        result = round(np.log(1 + np.exp(x)), 4)\n        return [result] if deriv else result\n    elif deriv:\n        return np.array([np.divide(1, 1 + np.exp(-xi)) for xi in x])\n    else:\n        shifted_x = x - np.finfo(float).eps\n        return [np.log(1 + np.exp(xi)) if xi >= 0 else np.log(1 + np.exp(shifted_x * -xi)) for xi in x]\nassert softplus(np.array([-1, 0, 1])) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nassert softplus(np.array([-1, 0, 1]), True) == [0.2689, 0.5, 0.7311], \"failed: softplus([-1,0,1], deriv=True)\"\nassert softplus([-20]) == [0.0], \"failed: softplus([-20])\"\nassert softplus([20]) == [20.0], \"failed: softplus([20])\"\nassert softplus([-20], True) == [0.0], \"failed: softplus([-20], deriv=True)\"\nassert softplus([20], True) == [1.0], \"failed: softplus([20], deriv=True)\"\nassert softplus([-2, 2], True) == [0.1192, 0.8808], \"failed: softplus([-2,2], deriv=True)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(0, True) == 0.5, \"failed: softplus(0, deriv=True)\""}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: 'tuple' object has no attribute 'items'", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    if N == 1:\n        counts = [Counter((word[0] for word in sentence)) for sentence in zip(*[(word,) for word in sequence])]\n        total_unigram_prob = sum(counts)\n        for count in counts:\n            if not count:\n                return -np.inf\n        return round(np.sum(np.log2(total_unigram_prob)), 4)\n    elif N > 1:\n\n        def calculate_n_gram_probability(n_gram):\n            non_zero_counts = {k: v for (k, v) in n_gram.items() if v}\n            if not non_zero_counts:\n                return 0\n            total_count = sum(non_zero_counts.values())\n            if not total_count:\n                return 0\n            prob = 0\n            for (key, value) in non_zero_counts.items():\n                prob += np.log2(value / total_count)\n            return round(prob, 4)\n        n_grams = [Counter(sentence) for sentence in zip(*sequence)]\n        log_prob_sequence = []\n        for i in range(len(sequence) - N + 1):\n            window = tuple((sentence[i:i + N] for sentence in sequence))\n            log_prob_window = calculate_n_gram_probability(window)\n            log_prob_sequence.append(log_prob_window)\n        return round(sum(log_prob_sequence), 4)\nsequence = ['the', 'quick', 'brown', 'fox', 'lazy']\nassert unsmoothed_ngram_log_prob([\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"],[\"the\",\"lazy\",\"dog\"],2)==-0.6931, \"failed test 1\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],2)==-0.4055, \"failed test 2\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"a\",\"b\"],2)==-0.4055, \"failed test 3\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"c\"],2)==float('-inf'), \"failed test 4\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],1)==-1.4271, \"failed test 5\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"c\"],1)==float('-inf'), \"failed test 6\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"i\",\"love\",\"deep\"],3)==-0.6931, \"failed test 7\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"love\",\"deep\",\"machine\"],3)==float('-inf'), \"failed test 8\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\"],2)==float('-inf'), \"failed test 9\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"machine\",\"learning\",\"i\"],3)==0.0, \"failed test 10\""}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    num_features = degree + 1\n    X_design = np.ones((len(X), num_features))\n    for i in range(1, num_features):\n        grad_coefficient = reg_factor\n        for j in range(len(X)):\n            Xi = X[j]\n            Y = y[j]\n            if i == 1:\n                xi_pow = Xi\n            else:\n                xi_pow = Xi ** (i - 1)\n            coeff_gradient_term = xi_pow * (Y - Xi @ X_design[0:i] - X_design[i])\n            beta_new = X_design[i - 1:i].mean()\n            beta_old = X_design[:i - 1].mean()\n            if abs(coeff_gradient_term) > beta_old * grad_coefficient:\n                theta = coeff_gradient_term / beta_old\n                alpha = -(theta * X[j, 0:i] @ X[j, 0:i]).prod() / beta_old\n                grad_coefficient += alpha - reg_factor\n                if abs(alpha) <= tol * (X[j, 0:i] @ X[j, 0:i])[0]:\n                    break\n            X_design[j, 0:i] -= alpha * X_design[j, i:]\n            X_design[j, i:] = X_design[j, i:] - theta * X_design[j, 0:i]\n    scaled_coefs = [round(coef, 4) for coef in X_design.mean(axis=0)]\n    return scaled_coefs\nassert lasso_regression([0,1,2,3],[1,3,5,7],1,0)==[1.0,2.0],\"failed: linear data degree 1\"\nassert lasso_regression([1,2,3],[4,6,8],1,0)==[2.0,2.0],\"failed: linear data intercept 2 slope 2\"\nassert lasso_regression([0,1,2],[0,1,4],2,0)==[0.0,0.0,1.0],\"failed: quadratic x^2\"\nassert lasso_regression([0,1,2],[1,2,5],2,0)==[1.0,0.0,1.0],\"failed: quadratic x^2+1\"\nassert lasso_regression([0,1,2],[2,6,12],2,0)==[2.0,3.0,1.0],\"failed: quadratic 2+3x+x^2\"\nassert lasso_regression([-1,0,1],[2,1,0],1,0)==[1.0,-1.0],\"failed: negative slope\"\nassert lasso_regression([0,5],[7,17],1,0)==[7.0,2.0],\"failed: two-point line\""}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: name 'A1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef forward_probabilities(A, B, obs, T):\n    \"\"\"\n    Calculate the forward probabilities P(x_1:t | y_1:t).\n    \n    Args:\n    - A (list[list[float]]): Transition probability matrix of shape (N, N).\n    - B (list[list[float]]): Emission probability matrix of shape (N, M).\n    - obs (list[int]): Observation sequence of length T.\n    - T (int): Length of the observation sequence.\n    \n    Returns:\n    - list[float]: Array of forward probabilities for each state.\n    \"\"\"\n    num_states = len(B)\n    num_symbols = len(B[0])\n    F = [[0] * num_states for _ in range(T)]\n    F[0] = [B[i][obs[0]] for i in range(num_states)]\n    for t in range(1, T):\n        for s in range(num_states):\n            total_prob = sum([F[t - 1][i] * A[i][s] * B[s][obs[t]] for i in range(num_states)])\n            F[t][s] = total_prob\n    return F[T - 1]\ndef backward_probabilities(F, B, obs, T):\n    \"\"\"\n    Calculate the backward probabilities beta_t(j), representing the likelihood of observing j at time t.\n    \n    Args:\n    - F (list[list[float]]): Forward probabilities array of shape (T, num_states).\n    - B (list[list[float]]): Emission probability matrix of shape (num_states, num_symbols).\n    - obs (list[int]): Observation sequence of length T.\n    - T (int): Length of the observation sequence.\n    \n    Returns:\n    - list[float]: List of backward probabilities for each state.\n    \"\"\"\n    num_states = len(B)\n    num_symbols = len(B[0])\n    B_prime = []\n    for t in range(T):\n        if t == T - 1:\n            B_prime.append(1)\n        else:\n            prob = sum([B[i][obs[t + 1]] * F[T - 1][i] for i in range(num_states)])\n            B_prime.append(prob)\n    return B_prime[::-1]\ndef backward_beta(A, B, obs, t):\n    \"\"\"\n    Compute the backward probabilities vector for a specific time index t.\n    \n    Args:\n    - A (list[list[float]]): Transition probability matrix of shape (N, N).\n    - B (list[list[float]]): Emission probability matrix of shape (N, M).\n    - obs (list[int]): Observation sequence of length T.\n    - t (int): Time index (0 <= t < T).\n    \n    Returns:\n    - list[float]: List of backward probabilities for each state, rounded to 4 decimal places.\n    \"\"\"\n    F = forward_probabilities(A, B, obs, len(obs))\n    B_prime = backward_probabilities(F, B, obs, len(obs))[:len(obs)]\n    backward_probs = [round(float(b), 4) for b in B_prime]\n    return backward_probs\nA = [[0.9576, 0.0424], [0.8699, 0.1301]]\nB = [[0.705, 0.2286], [0.8977, 0.1023]]\nobs = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]\nassert backward_beta(A1, B1, obs1, 0) == [0.2032, 0.2164], \"failed: example t=0\"\nassert backward_beta(A1, B1, obs1, 1) == [0.38, 0.26], \"failed: example t=1\"\nassert backward_beta(A1, B1, obs1, 2) == [1.0, 1.0], \"failed: example t=2 (last index)\"\nassert backward_beta(A2, B2, obs2, 3) == [1.0, 1.0, 1.0], \"failed: 3-state t=3\"\nassert backward_beta(A2, B2, obs2, 2) == [0.49, 0.5, 0.47], \"failed: 3-state t=2\"\nassert backward_beta(A2, B2, obs2, 1) == [0.2488, 0.2434, 0.2552], \"failed: 3-state t=1\"\nassert backward_beta(A2, B2, obs2, 0) == [0.1267, 0.1245, 0.133], \"failed: 3-state t=0\"\nassert backward_beta(A3, B3, obs3, 0) == [1.0, 1.0], \"failed: single observation\"\nassert backward_beta(A4, B4, obs4, 0) == [0.45, 0.54], \"failed: custom 2-state t=0\"\nassert backward_beta(A4, B4, obs4, 1) == [1.0, 1.0], \"failed: custom 2-state t=1\""}
{"task_id": 65, "completion_id": 0, "passed": false, "result": "failed: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.", "solution": "import numpy as np\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    T = len(obs)\n    alphas = [np.zeros_like(pi)]\n    for _ in range(T - 1):\n        new_alphas = []\n        for i in range(len(pi)):\n            total_prob = pi[i]\n            for j in range(len(A)):\n                total_prob += pi[j] * A[j][i] * B[j][obs[_]]\n            new_alphas.append(total_prob)\n        alphas.append(new_alphas)\n    final_probs = alphas[-1]\n    betas = [final_probs.copy()]\n    for t in reversed(range(1, T)):\n        temp_betas = [np.zeros_like(betas[0])]\n        for i in range(len(pi)):\n            beta_sum = 0\n            for j in range(len(B)):\n                beta_sum += final_probs[j] * A[j][i] * B[j][obs[t]]\n            temp_betas.append(beta_sum)\n        temp_betas.reverse()\n        betas.insert(0, temp_betas)\n    log_probability = sum([alpha * beta for (alpha, beta) in zip(alphas[-1], betas)])\n    return np.exp(log_probability).round(6)\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2]) == 0.033612, \"test case failed: example sequence\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [2,1]) == 0.1246, \"test case failed: sequence [2,1]\"\nassert backward_prob([[1.0]], [[0.2,0.8]], [1.0], [0,1,1,0]) == 0.0256, \"test case failed: single-state model 1\"\nassert backward_prob([[1.0]], [[0.5,0.5]], [1.0], [1,1,1]) == 0.125, \"test case failed: single-state model 2\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [1]) == 0.36, \"test case failed: length-1 sequence\"\nassert backward_prob([[0.5,0.5,0.0],[0.2,0.3,0.5],[0.0,0.0,1.0]], [[0.1,0.9],[0.7,0.3],[0.4,0.6]], [1.0,0.0,0.0], [0,1]) == 0.06, \"test case failed: 3-state model\"\nassert backward_prob([[1,0],[0,1]], [[0.6,0.4],[0.2,0.8]], [0.5,0.5], [0,1]) == 0.2, \"test case failed: deterministic transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [0,0]) == 0.25, \"test case failed: symmetric transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [1]) == 0.5, \"test case failed: length-1 identity emissions\"\nassert backward_prob([[1.0]], [[0.3,0.7]], [1.0], [1,1,0]) == 0.147, \"test case failed: single-state model 3\""}
{"task_id": 69, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    assert len(S) == len(A)\n    assert all((len(row) == len(B) for row in B))\n    if None in S:\n        raise ValueError('Initial probabilities cannot contain NaN values.')\n    n = len(S)\n    m = len(B[0])\n    T = len(observations)\n    F = np.zeros((T + 1, n))\n    F[1:n + 1, :] = S.copy()\n    for t in range(T):\n        current_probabilities = F[t, :]\n        for s in range(n):\n            next_state_probabilities = A[s, :] * B[:, observations[t]]\n            F[t + 1, s] += current_probabilities @ next_state_probabilities\n    F[T, :] /= np.sum(F[T, :])\n    return round(F[-1, -1], 4)\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [0,1,2]) == 0.0363, \"failed: basic 2-state example\"\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [1]) == 0.36, \"failed: single observation\"\nassert forward_algorithm([1.0,0.0], [[0.5,0.5],[0.2,0.8]], [[0.6,0.4],[0.3,0.7]], [0,1,1]) == 0.2004, \"failed: asymmetric model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [2,0]) == 0.097, \"failed: different start distribution\"\nassert forward_algorithm([1.0], [[1.0]], [[0.2,0.3]], [1,1,0]) == 0.018, \"failed: single-state model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.5]], [0]) == -1, \"failed: B wrong dimensions\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [-1,0]) == -1, \"failed: negative observation index\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [0,2]) == -1, \"failed: observation index out of range\"\nassert forward_algorithm([], [], [], [0]) == -1, \"failed: empty S\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3]], [[0.5,0.5],[0.5,0.5]], [0]) == -1, \"failed: A not square\""}
{"task_id": 70, "completion_id": 0, "passed": false, "result": "failed: name 'itertools' is not defined", "solution": "from collections import Counter, defaultdict\nfrom collections import Counter, defaultdict\nimport heapq\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    item_counts = Counter(itertools.chain.from_iterable(transactions))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n\n    def build_fp_tree(items):\n        stack = [(None, None)]\n        for item in items:\n            stack.append((item, len(stack)))\n        while stack:\n            (current_node, parent_count) = stack.pop()\n            if parent_count == 0:\n                node_count = 1\n            else:\n                node_count = parent_count + 1\n            item_set_key = tuple(sorted(set(frequent_items.keys()) & set(item)))\n            if item_set_key not in frequent_items:\n                continue\n            new_children = []\n            for child in [node[1] - 1 for node in stack]:\n                left_child_count = child if child > 0 else -child\n                right_child_count = max(0, node_count - child)\n                new_element = ((current_node[0], item_set_key[1]), left_child_count, right_child_count)\n                heapq.heappush(new_children, new_element)\n            for element in new_children:\n                freq = element[1]\n                total = element[2]\n                stack.append(((current_node[0], frequency) + element[0], freq, total))\n            del frequent_items[item_set_key]\n        return frequent_items\n\n    def find_conditional_fp_tree(node, depth=0):\n        if not node:\n            return\n        current_item_set_key = (node[0],)\n        if current_item_set_key not in frequent_items:\n            return\n        current_frequency = sum([node[1]])\n        if len(current_item_set_key) < depth + 1:\n            return\n        if len(current_item_set_key) == depth + 1:\n            result.append(list(map(str, current_item_set_key)))\n            frequent_items.pop(tuple(current_item_set_key), None)\n            return\n        find_conditional_fp_tree(((node[0][1],),), depth + 1)\n    fp_tree = build_fp_tree(transactions)\n    result = []\n    for (_, _, total) in fp_tree.values():\n        for _ in range(total // len(fp_tree)):\n            find_conditional_fp_tree((), 1)\n    return [sorted(i) for i in result]\ntransactions = [['milk', 'bread'], ['butter', 'cheese'], ['milk', 'eggs']]\nmin_support = 3\nassert fp_growth([], 1) == [], \"test case failed: empty dataset\"\nassert fp_growth([[\"x\", \"y\"]], 2) == [], \"test case failed: single transaction, high support\"\nassert fp_growth([[\"x\", \"y\"]], 1) == [[\"x\"], [\"y\"], [\"x\", \"y\"]], \"test case failed: single transaction, min_support=1\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 4) == [], \"test case failed: support greater than number of transactions\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: small data set min_support=2\"\nassert fp_growth([[\"a\", \"b\", \"c\"]]*3, 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"b\", \"c\"]], \"test case failed: identical transactions\"\nassert fp_growth([[\"bread\", \"milk\"], [\"bread\", \"diaper\", \"beer\", \"egg\"], [\"milk\", \"diaper\", \"beer\", \"coke\"], [\"bread\", \"milk\", \"diaper\", \"beer\"], [\"bread\", \"milk\", \"diaper\", \"coke\"]], 2) == [[\"beer\"], [\"bread\"], [\"coke\"], [\"diaper\"], [\"milk\"], [\"beer\", \"bread\"], [\"beer\", \"diaper\"], [\"beer\", \"milk\"], [\"bread\", \"diaper\"], [\"bread\", \"milk\"], [\"coke\", \"diaper\"], [\"coke\", \"milk\"], [\"diaper\", \"milk\"], [\"beer\", \"bread\", \"diaper\"], [\"beer\", \"diaper\", \"milk\"], [\"bread\", \"diaper\", \"milk\"], [\"coke\", \"diaper\", \"milk\"]], \"test case failed: example data min_support=2\"\nassert fp_growth([[\"a\", \"b\"], [\"b\", \"c\"], [\"a\", \"c\"], [\"a\", \"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: mixed transactions\"\nassert fp_growth([[\"d\"]], 1) == [[\"d\"]], \"test case failed: single item single transaction\""}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: 'int' object is not iterable", "solution": "import numpy as np\nimport numpy as np\ndef euclidean_distance(x1, x2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\"\"\"\n    if k <= 0 or k > len(X_train):\n        return [-1]\n    distances = []\n    for x in X_train:\n        dist = euclidean_distance(x, X_test[0])\n        for i in range(1, len(X_train)):\n            d = euclidean_distance(x, X_train[i])\n            if d < dist:\n                dist = d\n        distances.append(dist)\n    sorted_indices = np.argsort(distances)\n    neighbors = [y_train[i] for i in sorted_indices[:k]]\n    max_count = max(neighbors.count(i), default=0)\n    return [i for i in range(len(y_train)) if neighbors.count(y_train[i]) == max_count]\nassert knn_predict([[1,2],[2,3],[3,4]],[0,1,1],[[2,2]],2)==[0],\"failed on single sample, tie case\"\nassert knn_predict([[0,0],[1,1],[2,2],[3,3]],[1,1,0,0],[[1.1,1.1],[2.9,3.1]],3)==[1,0],\"failed on multi predict\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],1)==[0],\"failed on k=1\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],3)==[0],\"failed on k==n_train\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,2,2],[[0.9,0.9]],2)==[2],\"failed on majority >1\"\nassert knn_predict([[1,1]], [3], [[2,2],[0,0]], 1)==[3,3],\"failed on single-point training set\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],2)==[0],\"failed on tie chooses smaller label\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],0)==-1,\"failed on invalid k=0\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],3)==-1,\"failed on k>n_train\"\nassert knn_predict([[1,2],[2,1],[0,0],[2,2]],[1,1,0,0],[[1,1]],2)==[1],\"failed on mixed labels\""}
{"task_id": 76, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'type' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    if len(y) != len(y_pred) or not isinstance(y[0], np.ndarray) or (not isinstance(y_pred[0], np.ndarray)):\n        raise ValueError('Input arrays must be defined for every sample.')\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15).astype(np.float32)\n    y /= np.sum(y, axis=-1, keepdims=True)\n    loss = -(y * np.log(y_pred + 1e-08)).sum(axis=-1)\n    return round(loss.mean(), 4)\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0]], [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]) == 0.9163, \"failed: basic 3-class example\"\nassert cross_entropy_loss([[1, 0], [0, 1]], [[0.6, 0.4], [0.3, 0.7]]) == 0.8675, \"failed: 2-class example\"\nassert cross_entropy_loss([[1, 0, 0, 0]], [[0.25, 0.25, 0.25, 0.25]]) == 1.3863, \"failed: uniform prediction\"\nassert cross_entropy_loss([[1, 0], [0, 1], [0, 1]], [[0.9, 0.1], [0.4, 0.6], [0.2, 0.8]]) == 0.8393, \"failed: three samples\"\nassert cross_entropy_loss([[1, 0]], [[1.0, 0.0]]) == 0.0, \"failed: perfect prediction\"\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.1, 0.3, 0.6]]) == 1.5606, \"failed: three-class batch\"\nassert cross_entropy_loss([[0, 1, 0]], [[0.1, 0.7, 0.2]]) == 0.3567, \"failed: single sample\"\nassert cross_entropy_loss([[0, 0, 1], [1, 0, 0]], [[0.05, 0.15, 0.8], [0.9, 0.05, 0.05]]) == 0.3285, \"failed: swapped classes\"\nassert cross_entropy_loss([[0, 1], [1, 0]], [[0.5, 0.5], [0.2, 0.8]]) == 2.3026, \"failed: high loss case\"\nassert cross_entropy_loss([[1], [1]], [[0.99], [0.98]]) == 0.0303, \"failed: single-class edge case\""}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a \n        regular Python list. The shape is (1, m).\n    \"\"\"\n    AL = [X]\n    for l in range(1, len(parameters) // 2):\n        Z_l = np.dot(parameters[f'W{l}'], AL[-1]) + parameters[f'b{l}']\n        A_l = np.maximum(0, Z_l)\n        AL.append(A_l)\n    Z_L = np.dot(parameters['W' + str(len(parameters) - 1)], AL[-1])\n    A_L = 1 / (1 + np.exp(-Z_L))\n    AL.append(A_L)\n    AL_rounded = [round(x.item(), 4) for x_list in AL for x in x_list]\n    return AL_rounded\nparameters = {'W1': np.random.randn(2, 5), 'b1': np.zeros((2, 1)), 'W2': np.random.randn(3, 2), 'b2': np.zeros((3, 1))}\nassert L_model_forward(X1, params1) == [[0.5374, 0.5671]], \"test case failed: example input\"\nassert L_model_forward(X2, params2) == [[0.5]], \"test case failed: zero weights and bias\"\nassert L_model_forward(X2, params3) == [[0.7311]], \"test case failed: bias = 1\"\nassert L_model_forward(X4, params4) == [[0.5]], \"test case failed: two-layer, Z=0\"\nassert L_model_forward(X5, params5) == [[0.5]], \"test case failed: ReLU zeros\"\nassert L_model_forward(X6, params6) == [[0.8808, 0.5]], \"test case failed: batch of 2 examples\"\nassert L_model_forward(X7, params7) == [[0.3775]], \"test case failed: mixed weights\"\nassert L_model_forward(X8, params8) == [[0.2689]], \"test case failed: negative bias\"\nassert L_model_forward(X9, params9) == [[0.6457]], \"test case failed: realistic 2-layer\"\nassert L_model_forward(X10, params10) == [[0.4502]], \"test case failed: small negative Z\""}
{"task_id": 81, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (4,2) (1,4) ", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    num_samples = Y.shape[1]\n    Y_one_hot = np.eye(2)[Y.reshape(-1)]\n    cross_entropy_loss = -(1 / num_samples) * np.sum(Y_one_hot * np.log(A2_clipped))\n    return round(cross_entropy_loss.item(), 6)\nassert compute_cost(np.array([[0.8, 0.9, 0.4, 0.2]]), np.array([[1, 1, 0, 0]])) == 0.265618, \"Failed on example 1\"\nassert compute_cost(np.array([[0.999, 0.001]]), np.array([[1, 0]])) == 0.001001, \"Failed on example 2\"\nassert compute_cost(np.array([[0.5, 0.5, 0.5]]), np.array([[1, 0, 1]])) == 0.693147, \"Failed on example 3\"\nassert compute_cost(np.array([[0.2, 0.8, 0.6, 0.4]]), np.array([[0, 1, 1, 0]])) == 0.366985, \"Failed on example 4\"\nassert compute_cost(np.array([[0.999, 0.001, 0.999, 0.001]]), np.array([[1, 0, 1, 0]])) == 0.001001, \"Failed on example 5\"\nassert compute_cost(np.array([[0.1, 0.2, 0.3, 0.9, 0.8]]), np.array([[1, 1, 1, 0, 0]])) == 1.805604, \"Failed on example 6\"\nassert compute_cost(np.array([[0.7]]), np.array([[1]])) == 0.356675, \"Failed on example 7\"\nassert compute_cost(np.array([[0.05]]), np.array([[0]])) == 0.051293, \"Failed on example 8\"\nassert compute_cost(np.array([[0.5, 0.5]]), np.array([[0, 1]])) == 0.693147, \"Failed on example 9\"\nassert compute_cost(np.array([[0.0, 1.0]]), np.array([[0, 1]])) == 0.0, \"Failed on example 10\""}
{"task_id": 82, "completion_id": 0, "passed": false, "result": "failed: Test-1 failed: tie situation with \u03b5 = 0.1", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union, Literal\nfrom scipy.stats import special_ortho_group\ndef epsilon_soft(Q: List[float] | np.ndarray, epsilon: float) -> List[float]:\n    n = len(Q)\n    if isinstance(Q, np.ndarray):\n        Q = Q.tolist()\n    max_q_index = Q.index(max(Q))\n    base = (1 - epsilon) / n\n    soft_probs = []\n    greedy_prob = 1 - epsilon + epsilon / n\n    for q in Q:\n        if q == max(Q):\n            soft_probs.append(greedy_prob)\n        else:\n            soft_probs.append(base)\n    return [round(prob * 10000) / 10000 for prob in soft_probs]\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nassert epsilon_soft([1.2, 0.3, 1.2, -0.1], 0.1) == [0.925, 0.025, 0.025, 0.025], \"Test-1 failed: tie situation with \u03b5 = 0.1\"\nassert epsilon_soft([5, 6, 7], 0) == [0.0, 0.0, 1.0], \"Test-2 failed: \u03b5 = 0 (pure greedy)\"\nassert epsilon_soft([2, 2, 2], 0.3) == [0.8, 0.1, 0.1], \"Test-3 failed: all equal Q-values\"\nassert epsilon_soft([-1, -5], 1) == [0.5, 0.5], \"Test-4 failed: \u03b5 = 1 (fully uniform)\"\nassert epsilon_soft([0], 0.5) == [1.0], \"Test-5 failed: single action case\"\nassert epsilon_soft([10, 0, -1, 8], 0.2) == [0.85, 0.05, 0.05, 0.05], \"Test-6 failed: general case\"\nassert len(epsilon_soft([1, 2, 3, 4, 5], 0.4)) == 5, \"Test-10 failed: wrong output length\""}
{"task_id": 86, "completion_id": 0, "passed": false, "result": "failed: 'int' object is not iterable", "solution": "from collections import Counter\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    flat_predictions = [item for sublist in predictions for item in sublist]\n    prediction_counts = Counter(flat_predictions)\n    max_occurrence_count = max(prediction_counts.values())\n    aggregated_predictions = []\n    for (prediction, count) in sorted(prediction_counts.items(), key=lambda x: (-x[1], x[0])):\n        if count == max_occurrence_count:\n            if isinstance(prediction, int):\n                aggregated_predictions.append(min(prediction))\n            elif isinstance(prediction, str):\n                aggregated_predictions.append(min(prediction))\n            else:\n                raise ValueError('Unsupported data type')\n            break\n    return aggregated_predictions\nassert aggregate_random_forest_votes([[1,0,1,1],[0,0,1,1],[1,1,1,0]]) == [1,0,1,1], \"test case failed: basic majority voting\"\nassert aggregate_random_forest_votes([[1,2],[2,1]]) == [1,1], \"test case failed: numeric tie breaking\"\nassert aggregate_random_forest_votes([[\"cat\",\"dog\",\"cat\"],[\"dog\",\"dog\",\"cat\"]]) == [\"cat\",\"dog\",\"cat\"], \"test case failed: string votes\"\nassert aggregate_random_forest_votes([[42,42,42]]) == [42,42,42], \"test case failed: single tree\"\nassert aggregate_random_forest_votes([[1],[0],[1],[0]]) == [0], \"test case failed: single sample tie\"\nassert aggregate_random_forest_votes([[3,3,2,2],[2,2,3,3],[3,2,3,2]]) == [3,2,3,2], \"test case failed: alternating ties\"\nassert aggregate_random_forest_votes([]) == [], \"test case failed: empty input\"\nassert aggregate_random_forest_votes([[1,1,1],[1,1,1]]) == [1,1,1], \"test case failed: identical votes\"\nassert aggregate_random_forest_votes([[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]) == [5,4,3,2,1], \"test case failed: diverse votes\"\nassert aggregate_random_forest_votes([[\"a\",\"b\",\"a\",\"c\"],[\"b\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"a\",\"c\"]]) == [\"a\",\"b\",\"a\",\"c\"], \"test case failed: mixed string votes\""}
{"task_id": 88, "completion_id": 0, "passed": false, "result": "failed: failed: softplus(-1000)", "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.log(1 + np.exp(-z)), 4)\n    else:\n        flat_list = np.vstack([z.flatten()])[0].tolist()\n        return [round(np.log(1 + np.exp(x)), 4) for x in flat_list]\nassert softplus(-1000) == 0.0, \"failed: softplus(-1000)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(1) == 1.3133, \"failed: softplus(1)\"\nassert softplus(20) == 20.0, \"failed: softplus(20)\"\nassert softplus([-1, 0, 1]) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nimport numpy as np\nassert softplus(np.array([-2, 5])) == [0.1269, 5.0067], \"failed: softplus(np.array([-2,5]))\"\nassert softplus(np.array([[0]])) == [[0.6931]], \"failed: softplus(np.array([[0]]))\"\nassert softplus(-0.5) == 0.4741, \"failed: softplus(-0.5)\"\nassert softplus([1000, -1000]) == [1000.0, 0.0], \"failed: softplus([1000,-1000])\""}
{"task_id": 90, "completion_id": 0, "passed": false, "result": "failed: test 2 failed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if isinstance(policy['ev_estimates'], dict):\n        ev_estimates = list(policy['ev_estimates'].values())\n    else:\n        ev_estimates = []\n    if len(ev_estimates) == 0:\n        return np.nan\n    arm_evs = bandit['arm_evs']\n    errors_squared = [(e - e_hat) ** 2 for (e, e_hat) in zip(arm_evs, ev_estimates)]\n    mse_value = sum(errors_squared) / len(arm_evs)\n    return np.round(mse_value, 4)\nassert mse({\"arm_evs\": [0.5, 0.2, 0.9]}, {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}) == 0.0075, \"test 1 failed\"\nassert mse({\"arm_evs\": [1.0, 0.0]}, {\"ev_estimates\": {1: 0.2, 0: 0.8}}) == 0.04, \"test 2 failed\"\nassert mse({\"arm_evs\": [0.3, 0.6, 0.9, 0.1]}, {\"ev_estimates\": {0: 0.3, 1: 0.6, 2: 0.9, 3: 0.1}}) == 0.0, \"test 3 failed\"\nassert mse({\"arm_evs\": [0.0, -1.0, 1.0]}, {\"ev_estimates\": {0: 0.5, 1: 0.0, 2: 1.5}}) == 0.5, \"test 4 failed\"\nassert np.isnan(mse({\"arm_evs\": [0.1, 0.2]}, {\"ev_estimates\": {}})), \"test 5 failed\"\nassert mse({\"arm_evs\": [2.0]}, {\"ev_estimates\": {0: 3.5}}) == 2.25, \"test 6 failed\"\nassert mse({\"arm_evs\": [0.0, 1.0]}, {\"ev_estimates\": {0: 0.35, 1: 0.35}}) == 0.2725, \"test 9 failed\"\nassert mse({\"arm_evs\": [5.0, 5.0, 5.0]}, {\"ev_estimates\": {0: 4.0, 1: 6.0, 2: 5.0}}) == 0.6667, \"test 10 failed\""}
{"task_id": 96, "completion_id": 0, "passed": false, "result": "failed: name 'additive_ngram_log_prob' is not defined", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\nassert additive_ngram_log_prob([\"hello world\"], \"hello world hello\", 1, 1) == -2.7489, \"failed on unigram repetition\"\nassert additive_ngram_log_prob([\"a b c d\"], \"a b c d\", 3, 1) == -2.1972, \"failed on exact trigram\"\nassert additive_ngram_log_prob([\"the cat\"], \"the mouse\", 2, 1) == -1.3863, \"failed on unseen word in bigram\"\nassert additive_ngram_log_prob([\"cat sat\"], \"mouse cat\", 2, 1) == -1.0986, \"failed on unseen context\"\nassert additive_ngram_log_prob([\"a a b b\"], \"a b\", 1, 0.5) == -1.5769, \"failed on K=0.5 smoothing\"\nassert additive_ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 3, 1) == -1.9459, \"failed on trigram with unknown\"\nassert additive_ngram_log_prob([\"a b c\", \"a b d\"], \"a b d\", 2, 2) == -2.4849, \"failed on K=2 bigram\"\nassert additive_ngram_log_prob([\"hello world\"], \"foo\", 1, 1) == -1.6094, \"failed on completely unknown word\""}
{"task_id": 108, "completion_id": 0, "passed": false, "result": "failed: failed on 2\u00d72 full-rank matrix", "solution": "import numpy as np\nimport numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    W = np.random.rand(X.shape[0], K)\n    H = np.random.rand(K, X.shape[1])\n    for _ in range(max_iter):\n        current_loss = np.sum(np.square(np.dot(W, H.T) - X)) + alpha * (np.trace(np.dot(W.T, W)) + np.trace(np.dot(H, H)))\n        if current_loss < tol:\n            break\n        W_next = np.linalg.inv(alpha * np.eye(K) + np.dot(H.T, H)) @ np.dot(H.T, X)\n        H_next = np.linalg.inv(alpha * np.eye(K) + np.dot(W.T, W)) @ np.dot(W.T, X)\n    W_reconstructed = W_next.round(4)\n    H_reconstructed = H_next.round(4)\n    Xhat = np.dot(W_reconstructed, H_reconstructed.T).round(4)\n    return [list(row) for row in Xhat.tolist()]\nassert np.allclose(als_factorization(np.array([[1.,2.],[3.,4.]]),2,alpha=0.0,max_iter=1000,tol=1e-8),[[1.0,2.0],[3.0,4.0]],atol=1e-3),\"failed on 2\u00d72 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.,3.],[4.,5.,6.]]),2,alpha=0.0),[[1.0,2.0,3.0],[4.0,5.0,6.0]],atol=1e-3),\"failed on 2\u00d73 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[7.,8.],[2.,1.],[3.,4.]]),2,alpha=0.0),[[7.0,8.0],[2.0,1.0],[3.0,4.0]],atol=1e-3),\"failed on 3\u00d72 matrix\"\nassert np.allclose(als_factorization(np.array([[1.5,2.5],[3.5,4.5]]),2,alpha=0.0),[[1.5,2.5],[3.5,4.5]],atol=1e-3),\"failed on decimal matrix\"\nassert np.allclose(als_factorization(np.array([[10.]]),1,alpha=0.0),[[10.0]],atol=1e-3),\"failed on 1\u00d71 matrix\"\nassert np.allclose(als_factorization(np.array([[2.,2.],[2.,2.]]),1,alpha=0.0),[[2.0,2.0],[2.0,2.0]],atol=1e-3),\"failed on constant matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.],[2.,4.]]),1,alpha=0.0),[[1.0,2.0],[2.0,4.0]],atol=1e-3),\"failed on rank-1 2\u00d72 matrix\""}
{"task_id": 109, "completion_id": 0, "passed": false, "result": "failed: a must be 1-dimensional", "solution": "import numpy as np\nimport random\nimport numpy as np\nfrom scipy.spatial.distance import cdist\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[np.ndarray]:\n    \"\"\"\n    Performs K-Means clustering using K-Means++ initialization.\n\n    Parameters:\n    X (np.ndarray): Input data matrix of shape (m, n).\n    K (int): Number of clusters.\n    max_iter (int): Maximum number of iterations for Lloyd's refinement loop.\n                   Default is 100.\n    random_state (int | None): Seed for the random number generators. \n                               If None, no seed will be set.\n\n    Returns:\n    list[np.ndarray]: List of K centroids rounded to 4 decimal places,\n                      sorted by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        rng = np.random.RandomState(random_state)\n    else:\n        rng = np.random.default_rng()\n    centroids = []\n    while len(centroids) < K:\n        current_sample = rng.choice(X, size=1, replace=False)[0]\n        if all((np.linalg.norm(current_sample - c) > 1e-06 for c in centroids)):\n            centroids.append(current_sample)\n\n    def init_centroids(x, indices, prev_indices, centroids):\n        dists = cdist(x, centroids[indices], metric='euclidean')\n        p = np.sum(dists ** 2, axis=0) ** (-0.5)\n        probs = p / np.sum(p)\n        next_index = rng.choice(indices.shape[0], p=probs)\n        return (x[indices[next_index]], next_index)\n    for _ in range(K):\n        (centroids, idx) = init_centroids(*init_centroids(rng.choice(centroids), [i for i in range(len(centroids))]))\n        if any(idx != idx[0]):\n            raise ValueError('Newly chosen centroid caused samples to move.')\n        centroids.sort(key=lambda c: c[0])\n    return [[round(c[0], 4)] + [round(c[i], 4) for i in range(1, len(c))] for c in centroids]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nK = 2\nassert kmeans(np.array([[1,2],[1,4],[1,0],[10,2],[10,4],[10,0]]),2,random_state=42)==[[1.0,2.0],[10.0,2.0]],\"failed: basic 2-cluster example\"\nassert kmeans(np.array([[-5,0],[-6,-1],[-4,1],[0,5],[1,6],[-1,4],[5,0],[6,1],[4,-1]]),3,random_state=0)==[[-5.0,0.0],[0.0,5.0],[5.0,0.0]],\"failed: three clearly separated clusters\"\nassert kmeans(np.array([[0,0],[0,1],[10,0],[10,1]]),2,random_state=7)==[[0.0,0.5],[10.0,0.5]],\"failed: two vertical stripes\"\nassert kmeans(np.array([[1],[2],[8],[9]]),2,random_state=3)==[[1.5],[8.5]],\"failed: one-dimensional data\"\nassert kmeans(np.array([[1],[2],[3],[4],[5]]),1,random_state=11)==[[3.0]],\"failed: single cluster\"\nassert kmeans(np.array([[0,0,0],[0,1,0],[0,0,1],[10,0,0],[10,1,0],[10,0,1]]),2,random_state=13)==[[0.0,0.3333,0.3333],[10.0,0.3333,0.3333]],\"failed: 3-D example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),3,random_state=19)==[[1.0,1.0],[2.0,2.0],[3.0,3.0]],\"failed: K equals number of points\"\nassert kmeans(np.array([[-1,0],[-2,0],[1,0],[2,0]]),2,random_state=23)==[[-1.5,0.0],[1.5,0.0]],\"failed: symmetric clusters on x-axis\"\nassert kmeans(np.array([[0,0],[0,1],[1,0],[1,1]]),4,random_state=29)==[[0.0,0.0],[0.0,1.0],[1.0,0.0],[1.0,1.0]],\"failed: each point its own cluster\"\nassert kmeans(np.array([[2,2],[2,4],[8,2],[8,4]]),2,random_state=5)==[[2.0,3.0],[8.0,3.0]],\"failed: square split into two rectangles\""}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: name '_identity_predict' is not defined", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token IDs.\"\"\"\n    indices = []\n    for char in text:\n        if char not in vocabulary:\n            index = 0\n        else:\n            index = vocabulary[char]\n        if len(indices) == TIME_STEPS - 1:\n            break\n        indices.append(index)\n    return indices[:time_steps]\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Reconstructs the original string from a list of integer IDs.\"\"\"\n    characters = [None] * len(indices)\n    for (i, idx) in enumerate(indices):\n        if idx != 0:\n            characters[i] = inverse_vocab[idx]\n    return ''.join(characters)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, runs the model on it, and decodes the result.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch_size = 1\n    predictions = model.predict(np.array([encoded_text]))[0]\n    predicted_ids = np.argmax(predictions, axis=-1)\n    decoded_prediction = int_to_string(predicted_ids[-1], inv_output_vocabulary)\n    return decoded_prediction\ninput_vocabulary = {'a': 1, 'b': 2}\ninv_output_vocabulary = {1: 'a', 2: 'b'}\ntext = 'Hello world'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hello') == 'hello', 'failed on \"hello\"'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'HELLO') == 'hello', 'failed on upper-case input'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '') == '', 'failed on empty string'\na20 = 'a' * 25\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, a20) == 'a' * 20, 'failed on long input truncation'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hi!') == 'hi', 'failed on unknown character removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'data science') == 'data science', 'failed on string with space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '       ') == '       ', 'failed on only spaces'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc xyz') == 'abc xyz', 'failed on mixed letters and space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc_def') == 'abcdef', 'failed on underscore removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'padding test') == 'padding test', 'failed on general case'"}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not subscriptable", "solution": "\nimport sys\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    \"\"\"Helper function to run a model on a single input example.\"\"\"\n    prediction = model(example)\n    return [inv_output_vocabulary[i] for i in range(len(prediction))]\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    if examples is None:\n        examples = EXAMPLES\n    results = []\n    for example in examples:\n        result = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        results.append(result)\n    return results\nEXAMPLES = ['AB', 'BC', 'CA']\nassert run_examples(lambda s: s[::-1], None, None, [\"abc\"]) == [\"cba\"], \"test case failed: single example reversal\"\nassert run_examples(lambda s: s.upper(), None, None, [\"hello\", \"world\"]) == [\"HELLO\", \"WORLD\"], \"test case failed: uppercase mapping\"\nassert run_examples(lambda s: s, None, None, []) == [], \"test case failed: empty example list\"\nassert run_examples(lambda s: s[::-1], None, None, [\"\", \"a\"]) == [\"\", \"a\"], \"test case failed: empty and single char strings\"\nassert run_examples(lambda s: s*2, None, None, [\"cat\"]) == [\"catcat\"], \"test case failed: duplication model\"\nassert run_examples(lambda s: ''.join(sorted(s)), None, None, [\"cba\", \"fed\"] ) == [\"abc\", \"def\"], \"test case failed: sort characters\"\nassert run_examples(lambda s: ''.join(chr(ord(c)+1) for c in s), None, None, [\"abc\"]) == [\"bcd\"], \"test case failed: shift characters\"\nassert run_examples(lambda s: s[::-1].upper(), None, None, [\"Python\", \"AI\"]) == [\"NOHTYP\", \"IA\"], \"test case failed: reverse and uppercase\"\nassert run_examples(lambda s: ''.join('*' for _ in s), None, None, [\"mask\"]) == [\"****\"], \"test case failed: masking model\"\nassert run_examples(lambda s: s.strip(), None, None, [\"  spaced  \"]) == [\"spaced\"], \"test case failed: strip whitespaces\""}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: name 'logistic_loss_and_gradient' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])) == _expected(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])), \"test case failed: #1\"\nassert logistic_loss_and_gradient(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])) == _expected(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])), \"test case failed: #2\"\nassert logistic_loss_and_gradient(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])) == _expected(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])), \"test case failed: #3\"\nassert logistic_loss_and_gradient(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])) == _expected(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])), \"test case failed: #4\"\nassert logistic_loss_and_gradient(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])) == _expected(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])), \"test case failed: #5\"\nassert logistic_loss_and_gradient(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])) == _expected(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])), \"test case failed: #6\"\nassert logistic_loss_and_gradient(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])) == _expected(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])), \"test case failed: #7\"\nassert logistic_loss_and_gradient(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])) == _expected(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])), \"test case failed: #8\"\nassert logistic_loss_and_gradient(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])) == _expected(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])), \"test case failed: #9\"\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])) == _expected(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])), \"test case failed: #10\""}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: name 'adaboost_predict' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 128, "completion_id": 0, "passed": false, "result": "failed: only integer scalar arrays can be converted to a scalar index", "solution": "import numpy as np\nimport numpy as np\nimport numpy.linalg as linalg\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components >= X.shape[1]:\n        return []\n    (n_samples, _) = X.shape\n    (_, n_classes) = np.unique(y, return_counts=True)\n\n    def calculate_scatter_matrix():\n        mu = np.mean(X, axis=0)\n        total_samples = sum((n_classes[c] for c in range(n_classes)))\n        within_classes = []\n        for i in range(n_classes):\n            class_data = X[y == i]\n            n_samples_i = len(class_data) / float(total_samples)\n            centroid = np.mean(class_data, axis=0)\n            class_scatter = n_samples_i * ((class_data - centroid) ** 2).mean(axis=0)\n            within_classes.append(class_scatter)\n        S_W = np.sum(within_classes) / total_samples\n        S_B = np.dot((mu - np.mean(X)).T, mu - np.mean(X)) / total_samples\n        return (S_W, S_B)\n    (S_W, S_B) = calculate_scatter_matrix()\n    A = np.dot(np.linalg.inv(S_W), S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1][:n_components]\n    principal_eigenvectors = eigenvectors[:, sorted_indices]\n    transformed_data = np.dot(principal_eigenvectors.T, X.T).T.round(4)\n    return transformed_data.tolist()\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 1) == [[1.4142],[2.1213],[2.1213],[2.8284],[11.3137],[12.0208],[12.0208],[12.7279]], \"test case failed: multi_class_lda(example 1, 1 component)\"\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 2) == [[1.4142,0.0],[2.1213,-0.7071],[2.1213,0.7071],[2.8284,0.0],[11.3137,0.0],[12.0208,0.7071],[12.0208,-0.7071],[12.7279,0.0]], \"test case failed: multi_class_lda(example 1, 2 components)\"\nassert multi_class_lda(np.array([[2,0],[4,0],[0,2],[0,4]]), np.array([0,0,1,1]), 1) == [[1.4142],[2.8284],[-1.4142],[-2.8284]], \"test case failed: axis-separated data\"\nassert multi_class_lda(np.array([[1],[2],[8],[9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: one-dimensional data #1\"\nassert multi_class_lda(np.array([[1,0],[2,0],[8,0],[9,0]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis data #2\"\nassert multi_class_lda(np.array([[2],[4],[6],[8],[10],[12]]), np.array([0,0,1,1,2,2]), 1) == [[2.0],[4.0],[6.0],[8.0],[10.0],[12.0]], \"test case failed: one-dimensional data #2\"\nassert multi_class_lda(np.array([[0,1],[0,2],[0,8],[0,9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis y-data\"\nassert multi_class_lda(np.array([[-2,0],[-4,0],[0,-2],[0,-4]]), np.array([0,0,1,1]), 1) == [[-1.4142],[-2.8284],[1.4142],[2.8284]], \"test case failed: negative axis data\"\nassert multi_class_lda(np.array([[0,-1],[0,-2],[0,3],[0,4]]), np.array([0,0,1,1]), 1) == [[-1.0],[-2.0],[3.0],[4.0]], \"test case failed: axis y negative-positive data\""}
{"task_id": 140, "completion_id": 0, "passed": false, "result": "failed: local variable 'step' referenced before assignment", "solution": "from collections import deque\nimport math\nfrom collections import deque\nimport math\nfrom collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n\n    def bfs():\n        q = deque([(0, 0)])\n        visited = set()\n        min_time = float('inf')\n        while q:\n            (x, y) = q.popleft()\n            if (x, y) == (len(grid) - 1, len(grid[0]) - 1):\n                min_time = min(min_time, step)\n            for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    if grid[nx][ny] != '#' and (nx, ny) not in visited:\n                        visited.add((nx, ny))\n                        if grid[nx][ny].lower() == 'f':\n                            fire_count[nx][ny] += 1\n                        next_step = max(step, fire_count[nx][ny])\n                        visited.remove((nx, ny))\n                        q.append((nx, ny))\n                    elif fire_count[x][y] > 0 and (nx, ny) not in visited:\n                        visited.add((nx, ny))\n                        fire_count[nx][ny] -= 1\n                        next_step = min(next_step, step)\n                        visited.remove((nx, ny))\n            step += 1\n        return min_time\n    step = 0\n    fire_count = [[0] * len(grid[0]) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'F':\n                fire_count[i][j] = 1\n    return bfs()\nassert escape_fire_maze([\".\"]) == 0, \"test case failed: grid=['.']\"\nassert escape_fire_maze([\"F\"]) == -1, \"test case failed: grid=['F']\"\nassert escape_fire_maze([\"..\", \"..\"]) == 2, \"test case failed: grid=['..','..']\"\nassert escape_fire_maze([\"F.\", \"..\"]) == -1, \"test case failed: grid=['F.','..']\"\nassert escape_fire_maze([\"..F\", \"...\", \"...\"]) == -1, \"test case failed: grid=['..F','...','...']\"\nassert escape_fire_maze([\"...\", \".F.\", \"...\"]) == -1, \"test case failed: grid=['...','.F.','...']\"\nassert escape_fire_maze([\"..\", \".F\"]) == -1, \"test case failed: grid=['..','.F']\"\nassert escape_fire_maze([\"...\", \"...\", \"...\"]) == 4, \"test case failed: grid=['...','...','...']\"\nassert escape_fire_maze([\"....\", \"....\", \"....\", \"....\"]) == 6, \"test case failed: grid=['....','....','....','....']\"\nassert escape_fire_maze([\"F..\", \".F.\", \"..F\"]) == -1, \"test case failed: grid=['F..','.F.','..F']\""}
{"task_id": 141, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\nfrom sklearn.base import BaseClassifierMixin\nassert knn_predict(np.array([[0, 0], [1, 1], [0, 1], [1, 0]]), np.array([0, 0, 1, 1]), np.array([[0.9, 0.9]]), 3, 'euclidean').tolist() == [1], 'Test 1 failed.'\nassert knn_predict(np.array([[0, 0], [1, 2], [3, 4]]), np.array([0, 1, 1]), np.array([[0, 1]]), 1, 'manhattan').tolist() == [0], 'Test 2 failed.'\nassert knn_predict(np.array([[1, 0], [0, 1]]), np.array([0, 1]), np.array([[1, 0.1]]), 1, 'cosine').tolist() == [0], 'Test 3 failed.'\nassert knn_predict(np.array([[0, 0], [0, 2]]), np.array([0, 1]), np.array([[0, 1]]), 2, 'euclidean').tolist() == [0], 'Test 4 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3], [8, 8], [9, 9]]), np.array([0, 0, 0, 1, 1]), np.array([[1.5, 1.5], [9, 8.9]]), 3, 'euclidean').tolist() == [0, 1], 'Test 5 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 0, 0]), np.array([[2.1, 2]]), 1).tolist() == [0], 'Test 6 failed.'\nassert knn_predict(np.array([[0, 0], [0, 1], [1, 1]]), np.array([0, 0, 1]), np.array([[0.1, 0.1]]), 2, 'minkowski').tolist() == [0], 'Test 7 failed.'\nassert knn_predict(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1.1]]), 3, 'manhattan').tolist() == [1], 'Test 8 failed.'\nassert knn_predict(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 2]), np.array([[0.9, 0.05, 0.05]]), 1, 'cosine').tolist() == [0], 'Test 9 failed.'\nassert knn_predict(np.array([[-1, -1], [-2, -2], [1, 1], [2, 2]]), np.array([0, 0, 1, 1]), np.array([[-1.5, -1.5]]), 2, 'euclidean').tolist() == [0], 'Test 10 failed.'"}
{"task_id": 146, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'tolist'", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List\ndef euclidean_distance(x1, x2):\n    return np.linalg.norm(x1 - x2)\ndef manhattan_distance(x1, x2):\n    return np.sum(np.abs(x1 - x2))\ndef cosine_similarity(x1, x2):\n    return 1 - np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2))\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> List[int]:\n    predictions = []\n\n    def get_k_nearest_neighbors(distances, indices):\n        sorted_indices = np.argsort(distances)\n        if len(sorted_indices) > k:\n            nearest_indices = sorted_indices[:k]\n        else:\n            nearest_indices = sorted_indices\n        predicted_labels = [y_train[i] for i in nearest_indices]\n        most_common_label = max(set(predicted_labels), key=predicted_labels.count)\n        return most_common_label\n    for test_sample in X_test:\n        if metric == 'euclidean':\n            distances = np.array([euclidean_distance(test_sample, train_sample) for train_sample in X_train])\n        elif metric == 'manhattan':\n            distances = np.array([manhattan_distance(test_sample, train_sample) for train_sample in X_train])\n        elif metric == 'cosine':\n            distances = np.array([cosine_similarity(test_sample, train_sample) for train_sample in X_train])\n        nearest_indices = np.argsort(distances)[:k]\n        prediction = get_k_nearest_neighbors(distances[nearest_indices], nearest_indices)\n        predictions.append(prediction)\n    return predictions.tolist()\nX_train = np.random.rand(50, 2)\ny_train = np.random.choice(['A', 'B', 'C'], 50)\nX_test = np.random.rand(6, 2)\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'euclidean') == [0], \"Test 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 1, 'euclidean') == [1], \"Test 2 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'manhattan') == [0], \"Test 3 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'cosine') == [0], \"Test 4 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 3, 'euclidean') == [0], \"Test 5 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 1, 'manhattan') == [0], \"Test 6 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.2,0.2]]), 10, 'euclidean') == [0], \"Test 7 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), 4, 'euclidean') == [0], \"Test 8 failed\"\nassert knn_predict(np.array([[1,0],[0,1],[1,1]]), np.array([0,1,1]), np.array([[1,1]]), 1, 'cosine') == [1], \"Test 9 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.1,0.1],[0.9,0.9]]), 1, 'euclidean') == [0,1], \"Test 10 failed\""}
{"task_id": 155, "completion_id": 0, "passed": false, "result": "failed: name 'weights_simple' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_forward(state, weights: dict):\n    \"\"\"\n    Perform the forward pass of a two-hidden-layer actor network.\n    \n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n    \n    Args:\n        state (list[float]): State representation as a list or numpy array.\n        weights (dict): Dictionary containing the model's weights and biases.\n        \n    Returns:\n        list[float]: Action vector with each element rounded to four decimal places.\n    \"\"\"\n    state = np.array(state)\n    h1 = np.dot(weights['W1'], state) + weights['b1']\n    h1_relu = np.maximum(h1, 0)\n    h2 = np.dot(weights['W2'], h1_relu) + weights['b2']\n    h2_relu = np.maximum(h2, 0)\n    action = np.dot(weights['W3'], h2_relu) + weights['b3']\n    return [round(act, 4) for act in np.round(action, 4)]\nassert actor_forward([0.5, -0.5], weights_simple) == [0.4621], \"test case failed: actor_forward([0.5,-0.5],weights_simple)\"\nassert actor_forward([2.0, 3.0], weights_simple) == [0.9999], \"test case failed: actor_forward([2,3],weights_simple)\"\nassert actor_forward([-2.0, 3.0], weights_simple) == [0.9951], \"test case failed: actor_forward([-2,3],weights_simple)\"\nassert actor_forward([1.0, 1.0], weights_simple) == [0.964], \"test case failed: actor_forward([1,1],weights_simple)\"\nassert actor_forward([0.0, 0.0], weights_simple) == [0.0], \"test case failed: actor_forward([0,0],weights_simple)\"\nassert actor_forward([-1.0, -1.0], weights_simple) == [0.0], \"test case failed: actor_forward([-1,-1],weights_simple)\"\nassert actor_forward([100.0, -100.0], weights_simple) == [1.0], \"test case failed: actor_forward([100,-100],weights_simple)\"\nassert actor_forward([-0.1, 0.1], weights_simple) == [0.0997], \"test case failed: actor_forward([-0.1,0.1],weights_simple)\"\nassert actor_forward([0.3, 0.3], weights_simple) == [0.537], \"test case failed: actor_forward([0.3,0.3],weights_simple)\"\nassert actor_forward([-0.3, 0.7], weights_simple) == [0.6044], \"test case failed: actor_forward([-0.3,0.7],weights_simple)\""}
{"task_id": 160, "completion_id": 0, "passed": false, "result": "failed: name 'fit_lasso' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert fit_lasso(np.array([[1], [2], [3]]), np.array([2, 4, 6]), 0.0, 60) == ([2.0], 0.0), \"failed on simple perfect line\"\nassert fit_lasso(np.array([[0], [1], [2]]), np.array([1, 3, 5]), 0.0, 60) == ([2.0], 1.0), \"failed on line with intercept\"\nassert fit_lasso(np.array([[3], [3], [3]]), np.array([2, 2, 2]), 0.0, 30, False) == ([0.6667], 0.0), \"no intercept forces through origin\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 0.0, 50) == ([1.0, 2.0, 3.0], 0.0), \"identity design matrix\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 5.0, 50) == ([0.0, 0.0, 0.0], 2.0), \"\u03bb eliminates weights\"\nassert fit_lasso(np.array([[1, -1], [-1, 1]]), np.array([0, 0]), 0.0, 40) == ([0.0, 0.0], 0.0), \"all zeros target\""}
{"task_id": 165, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    (len_x, len_y) = (len(x), len(y))\n    if len_x != len_y:\n        return -1\n    diff_vec = np.subtract(x, y)\n    num_diffs = np.sum(np.abs(diff_vec))\n    normalized_hamming_dist = num_diffs / max(len_x, len_y)\n    return round(normalized_hamming_dist, 4)\nassert hamming_distance([0, 1, 0, 1], [0, 1, 0, 1]) == 0.0, \"Failed identical vectors case\"\nassert hamming_distance([0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) == 1.0, \"Failed all differ case\"\nassert hamming_distance([1, 0, 1, 1], [1, 1, 0, 1]) == 0.5, \"Failed example case\"\nassert hamming_distance([1, 2, 3], [1, 2]) == -1, \"Failed unequal length case\"\nassert hamming_distance([3, 5, 7, 9, 11], [3, 4, 7, 8, 11]) == 0.4, \"Failed mixed ints case\"\nimport numpy as np\narr1 = np.array([2, 2, 2, 2])\narr2 = np.array([2, 3, 2, 3])\nassert hamming_distance(arr1, arr2) == 0.5, \"Failed NumPy array input case\"\nassert hamming_distance([7], [8]) == 1.0, \"Failed single element different case\"\nassert hamming_distance([-1, -2, -3], [-1, -2, -4]) == 0.3333, \"Failed negative ints case\"\nassert hamming_distance([1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1]) == 0.5, \"Failed additional binary case\""}
{"task_id": 169, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef hamming(N):\n    return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\ndef hann(N):\n    return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\ndef blackman_harris(N):\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window name')\n    result = []\n    if window == 'hamming':\n        result.extend(hamming(N))\n    elif window == 'hann':\n        result.extend(hann(N))\n    elif window == 'blackman_harris':\n        result.extend(blackman_harris(N))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Missing coefficients for generalized cosine window')\n        result.extend(coefficients)\n    return round(np.array(result).astype(float), 4)\nassert generate_window(\"hamming\", 5) == [0.08, 0.54, 1.0, 0.54, 0.08], \"test case failed: hamming, N=5\"\nassert generate_window(\"hann\", 5) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann, N=5\"\nassert generate_window(\"blackman_harris\", 5) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"test case failed: blackman_harris, N=5\"\nassert generate_window(\"generalized_cosine\", 5, coefficients=[0.5, -0.5]) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: generalized_cosine, N=5, coeff=[0.5,-0.5]\"\nassert generate_window(\"hamming\", 1) == [1.0], \"test case failed: hamming, N=1\"\nassert generate_window(\"hann\", 1) == [1.0], \"test case failed: hann, N=1\"\nassert generate_window(\"blackman_harris\", 1) == [1.0], \"test case failed: blackman_harris, N=1\"\nassert generate_window(\"hamming\", 6) == [0.08, 0.3979, 0.9121, 0.9121, 0.3979, 0.08], \"test case failed: hamming, N=6\"\nassert generate_window(\"blackman_harris\", 3) == [0.0001, 1.0, 0.0001], \"test case failed: blackman_harris, N=3\"\nassert generate_window(\"generalized_cosine\", 4, coefficients=[1.0]) == [1.0, 1.0, 1.0, 1.0], \"test case failed: generalized_cosine, N=4, coeff=[1.0]\""}
{"task_id": 171, "completion_id": 0, "passed": false, "result": "failed: shapes (2,1) and (2,) not aligned: 1 (dim 1) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\ndef logistic_regression_train_predict(X_train, y_train, X_test, epochs=5000, learning_rate=0.1, batch_size=32):\n    (n_samples, n_features) = np.shape(X_train)\n    assert np.all(np.unique(y_train) == [-1, 1]), 'Labels must be {-1, +1}'\n    Y_train = np.array([np.sign(x) * 2 - 1 for x in y_train])\n    X_train_b = np.c_[np.ones((n_samples, 1)), X_train]\n    W = np.zeros(n_features + 1)\n    b = 0\n    losses = []\n    for epoch in range(epochs):\n        indices = np.random.choice(n_samples, batch_size)\n        if len(indices) < batch_size or np.sum(Y_train[indices]) == n_samples:\n            continue\n        X_batch = X_train_b[indices]\n        y_batch = Y_train[indices]\n        z = np.dot(X_batch, W) + b\n        h = sigmoid(z)\n        L = -np.sum(y_batch * np.log(h) + (1 - y_batch) * np.log(1 - h))\n        grad_z = np.dot(X_batch.T, h - y_batch) / batch_size\n        grad_W = np.dot(X_batch.T, h * (1 - h))\n        grad_b = np.mean(h - y_batch)\n        W -= learning_rate * grad_W\n        b -= learning_rate * grad_b\n        losses.append(L)\n    pred_probs = sigmoid(np.dot(X_test, W) + b)\n    pred_labels = [1 if p > 0.5 else 0 for p in pred_probs]\n    return pred_labels.tolist()\nX_train = [[0], [1], [2], [3]]\ny_train = [-1, 1, 1, -1]\nX_test = [[0.99], [2.1]]\npred_labels = logistic_regression_train_predict(X_train, y_train, X_test)\nassert logistic_regression_train_predict([[-3],[-2],[2],[3]],[0,0,1,1],[[-2.5],[2.5]]) == [0,1], \"failed on shifted 1D separation\"\nassert logistic_regression_train_predict([[1],[2],[3]],[0,0,0],[[10],[-10]]) == [0,0], \"failed on constant-zero label case\"\nassert logistic_regression_train_predict([[1],[2],[3]],[1,1,1],[[0],[4]]) == [1,1], \"failed on constant-one label case\"\nassert logistic_regression_train_predict([[1,1],[1,2],[2,3],[3,3]],[0,0,1,1],[[1,1.5],[3,4]]) == [0,1], \"failed on simple 2D separation\"\nassert logistic_regression_train_predict([[0,0,1],[1,1,1],[2,2,3],[3,3,3]],[0,0,1,1],[[0,0,0.5],[3,3,4]]) == [0,1], \"failed on 3D separation\"\nassert logistic_regression_train_predict([[1],[2],[3],[4]],[1,1,0,0],[[1.5],[3.5]]) == [1,0], \"failed on negative slope separation\"\nassert logistic_regression_train_predict([[0],[1],[10],[11]],[0,0,1,1],[[0.5],[10.5]]) == [0,1], \"failed on large gap separation\"\nassert logistic_regression_train_predict([[1,0],[0,1],[1,1],[2,2]],[0,0,1,1],[[0.2,0.2],[1.5,1.5]]) == [0,1], \"failed on mixed 2D separation\""}
{"task_id": 176, "completion_id": 0, "passed": false, "result": "failed: DecisionStump.__init__() got an unexpected keyword argument 'feature_idx'", "solution": "import numpy as np\nimport numpy as np\nclass AdaboostClassifier:\n\n    def __init__(self, n_estimators):\n        self.n_estimators = n_estimators\n        self.models = []\n\n    def fit(self, X_train, y_train):\n        errors = []\n        alpha_values = []\n        w = np.ones(len(y_train)) / len(y_train)\n        for _ in range(self.n_estimators):\n            model = self._fit_one_model(w, X_train, y_train)\n            error = np.sum(np.sign(model.predict(X_train)) != y_train)\n            errors.append(error)\n            alpha = 0.5 * np.log((1 - error) / max(1e-10, error))\n            alpha_values.append(alpha)\n            w *= np.exp(-alpha * y_train * model.predict(X_train))\n            w /= np.sum(w)\n            self.models.append(model)\n\n    def _fit_one_model(self, w, X_train, y_train):\n        best_error = None\n        best_model = None\n        for feature_idx in range(len(X_train[0])):\n            thresholds = sorted(set([x[feature_idx] for x in X_train]))\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    if polarity == 1:\n                        cutoff = 'less'\n                    else:\n                        cutoff = 'greater'\n                    model = DecisionStump(feature_idx=feature_idx, threshold=threshold, polarity=polarity, w=w, X_train=X_train, y_train=y_train)\n                    pred_y = model.predict(X_train)\n                    error = np.mean(pred_y != y_train)\n                    if best_error is None or error < best_error:\n                        best_error = error\n                        best_model = model\n        return best_model\n\n    def predict(self, X_test):\n        total_predictions = np.zeros(len(X_test))\n        for (i, model) in enumerate(self.models):\n            pred_y = model.predict(X_test)\n            total_predictions += pred_y\n        return np.sign(total_predictions).astype(int)\nclass DecisionStump:\n\n    def __init__(self, feature_index, threshold, polarity, w, X_train, y_train):\n        self.feature_index = feature_index\n        self.threshold = threshold\n        self.polarity = polarity\n        self.w = w\n        self.X_train = X_train\n        self.y_train = y_train\n\n    def predict(self, X):\n        if X[self.feature_index] > self.threshold:\n            return np.array([-1])\n        else:\n            return np.array([1])\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    classifier = AdaboostClassifier(n_estimators)\n    classifier.fit(X_train, y_train)\n    return classifier.predict(X_test)\nassert adaboost_predict([[0,0],[1,0],[0,1],[1,1]],[0,1,1,1],[[0,0],[1,1]],3)==[0,1],\"failed OR data\"\nassert adaboost_predict([[1,2],[2,3],[3,4],[4,5]],[0,0,1,1],[[1.5,2.5],[3.5,4.5]],4)==[0,1],\"failed linear split\"\nassert adaboost_predict([[1],[2],[3],[4]],[0,0,1,1],[[2],[4]],3)==[0,1],\"failed 1-D split\"\nassert adaboost_predict([[1],[2],[3]],[0,1,1],[[1],[3]],3)==[0,1],\"failed small 1-D\"\nassert adaboost_predict([[0,0],[0,1],[1,0],[1,1]],[0,0,0,1],[[0,1],[1,1]],4)==[0,1],\"failed AND-like data\"\nassert adaboost_predict([[0],[2],[4],[6]],[0,0,1,1],[[1],[5]],5)==[0,1],\"failed even/odd split\"\nassert adaboost_predict([[1,1],[1,2],[2,1],[2,2]],[0,0,1,1],[[1,1],[2,2]],3)==[0,1],\"failed grid split\"\nassert adaboost_predict([[2],[3],[10],[12]],[0,0,1,1],[[2.5],[11]],4)==[0,1],\"failed distant clusters\"\nassert adaboost_predict([[0,5],[1,6],[2,7],[3,8]],[0,0,1,1],[[0.5,5.5],[2.5,7.5]],4)==[0,1],\"failed correlated features\""}
{"task_id": 178, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for -: 'NoneType' and 'float'", "solution": "import numpy as np\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    rng = np.random.default_rng(seed)\n    lower_bound = -1\n    upper_bound = 1\n    best_value = float('inf')\n    global_best_x = None\n    if not isinstance(n_dims, int) or n_dims <= 0:\n        return -1\n    if not isinstance(num_particles, int) or num_particles <= 0:\n        return -1\n    if not isinstance(num_iterations, int) or num_iterations <= 0:\n        return -1\n    particles = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, size=num_particles)\n    personal_best_positions = particles.copy()\n    personal_best_values = [np.sum(particle ** 2) for particle in particles]\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            personal_best = personal_best_positions[i]\n            personal_best_value = personal_best_values[i]\n            c1 = 1.5\n            c2 = 1.5\n            (r1, r2) = rng.uniform(0, 1, 2)\n            personal_velocity = c1 * r1 * (personal_best - particles[i]) + c2 * r2 * (rng.uniform() < personal_best) * (global_best_x - particles[i])\n            new_position = particles[i] + velocities[i] + personal_velocity\n            clamped_position = np.clip(new_position, lower_bound, upper_bound)\n            particles[i] = clamped_position\n            velocities[i] += clamped_position\n        global_best_index = np.argmin(personal_best_values)\n        global_best_x = particles[global_best_index]\n        global_best_value = np.sum(global_best_x ** 2)\n        if global_best_value < best_value:\n            best_value = global_best_value\n            best_position = global_best_x\n    return round(best_value, 4)\nassert particle_swarm_optimisation(2, 30, 100, seed=42) == 0.0, \"test failed: particle_swarm_optimisation(2,30,100,42)\"\nassert particle_swarm_optimisation(5, 50, 200, seed=3) == 0.0, \"test failed: particle_swarm_optimisation(5,50,200,3)\"\nassert particle_swarm_optimisation(10, 60, 300, seed=7) == 0.0, \"test failed: particle_swarm_optimisation(10,60,300,7)\"\nassert particle_swarm_optimisation(3, 10, 150, seed=11) == 0.0, \"test failed: particle_swarm_optimisation(3,10,150,11)\"\nassert particle_swarm_optimisation(4, 80, 250, seed=19) == 0.0, \"test failed: particle_swarm_optimisation(4,80,250,19)\"\nassert particle_swarm_optimisation(6, 40, 120, seed=23) == 0.0, \"test failed: particle_swarm_optimisation(6,40,120,23)\"\nassert particle_swarm_optimisation(1, 20, 90, seed=29) == 0.0, \"test failed: particle_swarm_optimisation(1,20,90,29)\"\nassert particle_swarm_optimisation(8, 70, 300, seed=31) == 0.0, \"test failed: particle_swarm_optimisation(8,70,300,31)\"\nassert particle_swarm_optimisation(2, 1, 1, seed=2) == 0.0, \"test failed: particle_swarm_optimisation(2,1,1,2)\"\nassert particle_swarm_optimisation(-1, 30, 100) == -1, \"test failed: invalid input not handled\""}
{"task_id": 180, "completion_id": 0, "passed": false, "result": "failed: '<' not supported between instances of 'generator' and 'generator'", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom typing import List\ndef euclidean_distance(x1, x2):\n    return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\ndef find_k_nearest_neighbors(X_train, X_test, k, dist_func=euclidean_distance):\n    distances = []\n    for (i, train_vector) in enumerate(X_train):\n        distances.append(([dist_func(train_vector, X_test[j]), i] for j in range(len(X_test))))\n    sorted_distances = sorted(distances)\n    neighbors_indices = [i[1] for i in sorted_distances[:k]]\n    neighbors_vectors = [X_train[i] for i in neighbors_indices]\n    return neighbors_vectors\ndef predict_majority_vote(y_train, class_labels):\n    counter = Counter(class_labels)\n    return counter.most_common(1)[0][0]\ndef predict_mean_regression(y_train, targets):\n    return round(sum(targets) / len(targets), 4)\ndef knn_predict(X_train: List[List[float]], y_train: List, X_test: List[List[float]], k: int, task: str='classification') -> List:\n    if task == 'classification':\n        neighbors = find_k_nearest_neighbors(X_train, X_test, k)\n        result = predict_majority_vote(y_train, [y_train[r] for r in neighbors])\n    else:\n        neighbors = find_k_nearest_neighbors(X_train, X_test, k)\n        result = predict_mean_regression(y_train, neighbors)\n    return [round(result, 4)] if task == 'regression' else [result]\nX_train = [[1, 2], [2, 3], [3, 1], [3, 100], [200, 200], [200, 200]]\ny_train = ['a', 'b', 'c', 'd', 'e', 'f']\nX_test = [[1, 3], [2, 1]]\nassert knn_predict([[0,0],[1,1],[2,2]], [0,0,1], [[1,1]], 2, \"classification\") == [0], \"failed: basic classification\"\nassert knn_predict([[0],[1],[2]], [1.0,1.5,3.0], [[1]], 2, \"regression\") == [1.25], \"failed: basic regression\"\nassert knn_predict([[0,0],[3,3]], [\"A\",\"B\"], [[1,1]], 5, \"classification\") == [\"A\"], \"failed: k larger than samples\"\nassert knn_predict([[0,0],[2,0],[0,2],[2,2]], [1,2,2,3], [[1,1]], 0, \"regression\") == [2.0], \"failed: k == 0 (use all)\"\nassert knn_predict([[0],[1],[2],[3]], [1,2,2,3], [[1.5]], 3, \"classification\") == [2], \"failed: tie vote numeric\"\nassert knn_predict([[0],[10]], [5.5555, 5.5555], [[5]], 1, \"regression\") == [5.5555], \"failed: rounding unchanged\"\nassert knn_predict([[1,2],[2,3],[3,4]], [10,20,30], [[2,3]], 2, \"regression\") == [15.0], \"failed: regression average\"\nassert knn_predict([[0,0],[1,1],[1,-1]], [\"yes\",\"no\",\"no\"], [[1,0]], 2, \"classification\") == [\"no\"], \"failed: majority vote\"\nassert knn_predict([[0,0],[0,0],[1,1]], [1,1,2], [[0,0]], 2, \"classification\") == [1], \"failed: duplicate points\""}
{"task_id": 184, "completion_id": 0, "passed": false, "result": "failed: index 1 is out of bounds for axis 1 with size 1", "solution": "import numpy as np\nimport numpy as np\ndef predict_decision_tree(node, X):\n    \"\"\"Recursive prediction.\"\"\"\n    if isinstance(node['left'], dict):\n        if node['left']['split'] is None:\n            return node['left']['val']\n        return predict_decision_tree(node['left'], X)\n    elif isinstance(node['right'], dict):\n        if node['right']['split'] is None:\n            return node['right']['val']\n        return predict_decision_tree(node['right'], X)\n    else:\n        return node['val']\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = {}\n\n    def build_tree(node, idx=0, depth=0):\n        num_nodes = 2 ** (depth % 2)\n        if idx >= len(X_train):\n            return\n        if max_depth is not None and depth >= max_depth:\n            return\n        x_min = np.min(X_train[:, idx])\n        x_max = np.max(X_train[:, idx])\n        for thres in np.linspace(x_min, x_max, num=num_nodes):\n            l_idx = X_train[:, idx] <= thres\n            r_idx = ~l_idx\n            if any(l_idx):\n                if not 'left' in tree.keys():\n                    tree['left'] = {'split': [idx, thres]}\n                build_tree(tree['left'], idx + 1, depth + 1)\n            if any(r_idx):\n                if not 'right' in tree.keys():\n                    tree['right'] = {'split': [idx, thres]}\n                build_tree(tree['right'], idx + 1, depth + 1)\n            if len(tree['left']) == 0 and len(tree['right']) == 0:\n                tree['right'] = {'val': y_train[idx]}\n            if len(tree['right']) == 0 and len(tree['left']) == 0:\n                tree['left'] = {'val': y_train[idx]}\n    build_tree(tree)\n    result = []\n    for x_test_row in X_test:\n        result.append(predict_decision_tree(tree, np.array([[x_test_row]])))\n    return result\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5],[5.5]])) == [0,0,1], \"failed: simple 1-D split\"\nassert decision_tree_predict(np.array([[0,0],[1,1],[2,2],[9,9],[10,10],[11,11]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[10,10]])) == [0,1], \"failed: two-dimensional clearly separated\"\nassert decision_tree_predict(np.array([[1],[2],[3],[10],[11],[12],[20],[21],[22]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[2.5],[11.5],[21]])) == [0,1,2], \"failed: three-class 1-D split\"\nassert decision_tree_predict(np.array([[1],[2],[3]]), np.array([1,1,1]), np.array([[0],[5]])) == [1,1], \"failed: all labels identical\"\nassert decision_tree_predict(np.array([[0.1],[0.2],[0.3],[0.4],[0.5],[0.6]]), np.array([0,0,0,1,1,1]), np.array([[0.25],[0.55]])) == [0,1], \"failed: threshold around 0.35\"\nassert decision_tree_predict(np.array([[5.1,3.5,1.4],[4.9,3.0,1.4],[6.2,3.4,5.4],[5.9,3.0,5.1]]), np.array([0,0,1,1]), np.array([[5.0,3.4,1.5],[6.0,3.1,5.0]])) == [0,1], \"failed: example in task description\"\nassert decision_tree_predict(np.array([[0,2],[1,2],[2,2],[0,10],[1,10],[2,10]]), np.array([0,0,0,1,1,1]), np.array([[0,3],[0,9]])) == [0,1], \"failed: split on second feature\"\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1]), np.array([[1.5],[4.5]])) == [0,1], \"failed: odd number of samples\"\nassert decision_tree_predict(np.array([[1],[1],[2],[2],[3],[3],[10],[10],[11],[11]]), np.array([0,0,0,0,0,0,1,1,1,1]), np.array([[1],[10],[3]])) == [0,1,0], \"failed: duplicates in features\"\nassert decision_tree_predict(np.array([[0],[5],[10],[15]]), np.array([0,1,2,3]), np.array([[12],[1]])) == [2,0], \"failed: multi-class, arbitrary values\""}
{"task_id": 190, "completion_id": 0, "passed": false, "result": "failed: '<=' not supported between instances of 'list' and 'int'", "solution": "import numpy as np\nimport numpy as np\ndef gini(p):\n    \"\"\"Calculate the Gini impurity for a single label.\"\"\"\n    return 1 - np.sum(p ** 2)\ndef best_gini_split(X, y):\n    idxs_of_change = []\n    for i in range(1, len(y)):\n        if not np.array_equal(y[:i], y[i:]):\n            idxs_of_change.append(i)\n    best_idx = -1\n    best_gain = float('inf')\n    best_threshold = None\n    gini_score = gini(np.bincount(y))\n    for i in idxs_of_change:\n        left_sub = y[y <= y[i]]\n        right_sub = y[y > y[i]]\n        if len(left_sub) == 0 or len(right_sub) == 0:\n            continue\n        gini_impurity_split = gini(len(left_sub) / len(y) ** 2 * gini([1]) + len(right_sub) / len(y) ** 2 * gini([0]))\n        if gini_impurity_split < best_gain:\n            best_gain = gini_impurity_split\n            best_threshold = y[i]\n            best_idx = i\n    if best_gain >= 0:\n        best_gain = round(best_gain, 4)\n    else:\n        best_gain = 'N/A'\n    return (best_idx, best_threshold, best_gain)\nassert best_gini_split([[2], [3], [10], [19]], [0, 0, 1, 1]) == (0, 3, 0.0), \"test 1 failed\"\nassert best_gini_split([[2,3],[1,5],[3,2],[4,4]], [0,0,1,1]) == (0, 2, 0.0), \"test 2 failed\"\nassert best_gini_split([[1],[2],[3],[4]], [0,1,0,1]) == (0, 1, 0.3333), \"test 4 failed\"\nassert best_gini_split([[1,10], [2,1], [3,1], [4,10]], [0,0,1,1]) == (0, 2, 0.0), \"test 5 failed\"\nassert best_gini_split([[1,1], [2,2], [3,3], [4,4], [5,5], [6,6]], [0,0,0,1,1,1]) == (0, 3, 0.0), \"test 6 failed\"\nassert best_gini_split([[1],[2],[3]], [0,1,2]) == (0, 1, 0.3333), \"test 7 failed\"\nassert best_gini_split([[1,10],[2,10],[1,1],[2,1]], [0,0,1,1]) == (1, 1, 0.0), \"test 8 failed\"\nassert best_gini_split([[1],[1],[1]], [0,1,0]) == (-1, None, 0.4444), \"test 9 failed\"\nassert best_gini_split([[1,5,9],[2,6,8],[3,7,7],[4,8,6]], [0,0,1,1]) == (0, 2, 0.0), \"test 10 failed\""}
{"task_id": 191, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\ndef metric(name: str):\n    if name == 'euclidean':\n\n        def d(x, y):\n            x = np.array(x).astype(float)\n            y = np.array(y).astype(float)\n            assert len(x) == len(y), 'Vectors must have the same length.'\n            assert all((isinstance(i, (int, float)) for i in x + y)), 'Vectors must contain only numbers.'\n            return round(np.linalg.norm(x - y), 4)\n    elif name == 'manhattan':\n\n        def d(x, y):\n            x = np.array(x).astype(float)\n            y = np.array(y).astype(float)\n            assert len(x) == len(y), 'Vectors must have the same length.'\n            assert all((isinstance(i, (int, float)) for i in x + y)), 'Vectors must contain only numbers.'\n            return round(sum((abs(a - b) for (a, b) in zip(x, y))), 4)\n    elif name == 'chebyshev':\n\n        def d(x, y):\n            x = np.array(x).astype(float)\n            y = np.array(y).astype(float)\n            assert len(x) == len(y), 'Vectors must have the same length.'\n            assert all((isinstance(i, (int, float)) for i in x + y)), 'Vectors must contain only numbers.'\n            return round(max((abs(a - b) for (a, b) in zip(x, y))), 4)\n    elif name == 'cosine':\n\n        def d(x, y):\n            x = np.array(x).astype(float)\n            y = np.array(y).astype(float)\n            assert len(x) == len(y), 'Vectors must have the same length.'\n            assert len(x) > 0 and sum(x) != 0, 'Cosine distance requires vectors with norm greater than zero.'\n            assert len(y) > 0 and sum(y) != 0, 'Cosine distance requires vectors with norm greater than zero.'\n            dot_product = np.dot(x, y)\n            mag_x = np.linalg.norm(x)\n            mag_y = np.linalg.norm(y)\n            return round(1 - dot_product / (mag_x * mag_y), 4)\n    else:\n        return -1\nassert metric('euclidean')([1,2,3],[4,5,6]) == 5.1962, \"test failed: metric('euclidean')([1,2,3],[4,5,6])\"\nassert metric('manhattan')([1,2,3],[4,5,6]) == 9.0, \"test failed: metric('manhattan')([1,2,3],[4,5,6])\"\nassert metric('chebyshev')([1,2,3],[4,5,6]) == 3.0, \"test failed: metric('chebyshev')([1,2,3],[4,5,6])\"\nassert metric('cosine')([1,0],[0,1]) == 1.0, \"test failed: metric('cosine')([1,0],[0,1])\"\nassert metric('cosine')([1,2],[1,2]) == 0.0, \"test failed: metric('cosine')([1,2],[1,2])\"\nassert metric('euclidean')([0,0],[0,0]) == 0.0, \"test failed: metric('euclidean')([0,0],[0,0])\"\nassert metric('manhattan')([3,4,5],[3,4,5]) == 0.0, \"test failed: metric('manhattan') identical vectors\"\nassert metric('unknown')([1,2],[3,4]) == -1, \"test failed: metric('unknown') should be -1\"\nassert metric('euclidean')([1,2,3],[1,2]) == -1, \"test failed: metric('euclidean') mismatched length\"\nassert metric('cosine')([0,0,0],[1,0,0]) == -1, \"test failed: metric('cosine') zero-norm vector\""}
{"task_id": 197, "completion_id": 0, "passed": false, "result": "failed: name 'SimpleNamespace' is not defined", "solution": "import numpy as np\nfrom itertools import product\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinte number of actions).\n\n    Returns:\n        A tuple `(n_actions_per_dim, action_ids, action_dim)` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    assert hasattr(env, 'action_space'), 'Environment does not have an action_space attribute'\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if isinstance(env.action_space, np.ndarray):\n        num_dimensions = len(env.action_space)\n        for dim in range(num_dimensions):\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                actions = list(range(env.action_space[dim]))\n                n_actions_per_dim.append(len(actions))\n                action_ids = action_ids if action_ids is None else action_ids + [(dim,) + tuple(a) for a in actions]\n    elif isinstance(env.action_space, tuple):\n        num_dimensions = len(list(env.action_space))\n        action_ids = list(product(*[range(dim_size) if cont_action else [dim_size] for dim_size in env.action_space]))\n        n_actions_per_dim = [len(action_id) for action_id in action_ids]\n        action_dim = num_dimensions\n    elif isinstance(env.action_space, dict):\n        if md_action:\n            raise ValueError('Multi-dimensional discrete action space not supported')\n        else:\n            n_dim = max([min(i.n) for i in env.action_space.values() if i.n > 1]) - min([max(j.n) for j in env.action_space.values() if j.n > 1])\n            action_ids = list(product(*[[i] for i in range(min([j.n for j in env.action_space.values()], key=len))]))\n            n_actions_per_dim = [len(action_id) for action_id in action_ids]\n            action_dim = 1\n    return (n_actions_per_dim, action_ids, action_dim)\nassert action_stats(SimpleNamespace(action_space=D(4)), False, False) == ([4], [0, 1, 2, 3], 1), \"failed test 1\"\nexpected_ids = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(3)])), True, False) == ([2, 3], expected_ids, 2), \"failed test 2\"\nmix_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), C(3)]))\nassert action_stats(mix_env, True, False) == ([2, np.inf], None, 2), \"failed test 3\"\nassert action_stats(SimpleNamespace(action_space=C(5)), False, True) == ([np.inf], None, 1), \"failed test 4\"\ncont_env = SimpleNamespace(action_space=SimpleNamespace(shape=(4,)))\nassert action_stats(cont_env, True, True) == ([np.inf, np.inf, np.inf, np.inf], None, 4), \"failed test 5\"\nassert action_stats(SimpleNamespace(action_space=D(1)), False, False) == ([1], [0], 1), \"failed test 6\"\nids_3d = list(product(range(2), repeat=3))\ntri_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(2), D(2)]))\nassert action_stats(tri_env, True, False) == ([2, 2, 2], ids_3d, 3), \"failed test 7\"\nids_31 = list(product(range(3), range(1)))\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(3), D(1)])), True, False) == ([3, 1], ids_31, 2), \"failed test 8\"\nmix2_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[C(2), D(3)]))\nassert action_stats(mix2_env, True, False) == ([np.inf, 3], None, 2), \"failed test 9\"\nassert action_stats(SimpleNamespace(action_space=D(10)), False, False) == ([10], list(range(10)), 1), \"failed test 10\""}
{"task_id": 198, "completion_id": 0, "passed": false, "result": "failed: name 'phi1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    beta = np.zeros((V, len(phi)), dtype=np.float64)\n    for (d, words) in enumerate(corpus):\n        for (n, w) in enumerate(words):\n            if w >= 0:\n                beta[w, d] += phi[d][n]\n    beta /= beta.sum(axis=1)[:, None] + 1e-08\n    return [round(row, 4) for row in beta]\nassert update_beta(phi1, corpus1, 3) == [[0.3684, 0.0968], [0.4737, 0.6774], [0.1579, 0.2258]], \"failed: test case 1\"\nassert update_beta(phi2, corpus2, 2) == [[0.6667], [0.3333]], \"failed: test case 2\"\nassert update_beta(phi3, corpus3, 3) == [[0.1429, 0.5], [0.3571, 0.3125], [0.5, 0.1875]], \"failed: test case 3\"\nassert update_beta(phi4, corpus4, 2) == [[1.0, 0.0], [0.0, 1.0]], \"failed: test case 4\"\nassert update_beta(phi5, corpus5, 2) == [[0.3333, 0.3333], [0.6667, 0.6667]], \"failed: test case 5\"\nassert update_beta(phi6, corpus6, 3) == [[0.9474, 0.0952, 0.0952], [0.0263, 0.8571, 0.0476], [0.0263, 0.0476, 0.8571]], \"failed: test case 6\"\nassert update_beta(phi7, corpus7, 1) == [[1.0, 1.0]], \"failed: test case 7\"\nassert update_beta(phi8, corpus8, 4) == [[0.0, 0.0], [0.3333, 0.6364], [0.6667, 0.3636], [0.0, 0.0]], \"failed: test case 8\"\nassert update_beta(phi9, corpus9, 2) == [[0.5, 0.5], [0.5, 0.5]], \"failed: test case 9\"\nassert update_beta(phi10, corpus10, 2) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], \"failed: test case 10\""}
{"task_id": 202, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'divide' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\nfrom scipy.spatial.distance import cdist\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n\n    def calculate_cost(medoids):\n        return np.mean(np.linalg.norm(X - np.expand_dims(medoids, axis=1), axis=2))\n    num_samples = X.shape[0]\n    medoids = X[:k]\n    while True:\n        old_medoids = np.copy(medoids)\n        costs = []\n        for i in range(num_samples):\n            min_dist = float('inf')\n            best_medoid = None\n            for j in range(k):\n                dist = np.linalg.norm(X[i] - medoids[j])\n                if dist < min_dist:\n                    min_dist = dist\n                    best_medoid = j\n            costs.append(calculate_cost(old_medoids))\n            current_sample = X[i]\n            new_medoid = medoids[best_medoid]\n            X[i] = np.dot(new_medoid - current_sample, X[i] - current_sample)\n            X[i] /= np.linalg.norm(X[i])\n            X[i] -= np.dot(new_medoid - current_sample, X[i]) * new_medoid - current_sample\n            medoids[best_medoid] = np.sum(X, axis=0) / len(X)\n        if np.allclose(costs, costs[-2:], atol=1e-07):\n            break\n    labels = []\n    for i in range(num_samples):\n        min_dist = float('inf')\n        best_label = 0\n        for j in range(k):\n            dist = np.linalg.norm(X[i] - medoids[j])\n            if dist < min_dist:\n                min_dist = dist\n                best_label = j\n        labels.append(best_label)\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2\nassert pam_clustering(np.array([[0,0]]),1)==[0],\"failed: single sample, k=1\"\nassert pam_clustering(np.array([[0,0],[1,0],[0,1],[5,5],[6,5],[5,6]]),2)==[0,0,0,1,1,1],\"failed: two well-separated clusters\"\nassert pam_clustering(np.array([[0],[10]]),2)==[0,1],\"failed: two samples, k=2\"\nassert pam_clustering(np.array([[1],[2],[3]]),3)==[0,1,2],\"failed: k equals number of samples\"\nassert pam_clustering(np.array([[-1,-1],[0,0],[1,1]]),1)==[0,0,0],\"failed: k=1, centre should move\"\nassert pam_clustering(np.array([[0],[1],[2],[3],[4]]),1)==[0,0,0,0,0],\"failed: all points one cluster\"\nassert pam_clustering(np.array([[1],[4],[7],[10]]),4)==[0,1,2,3],\"failed: each point its own cluster\""}
{"task_id": 216, "completion_id": 0, "passed": false, "result": "failed: name 'elastic_net_regression' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert elastic_net_regression([[1],[2],[3],[4]],[2,4,6,8],[[5],[6]],1,0.0,0.5,5000,0.1)==[10.0,12.0],\"failed: simple linear case\"\nassert elastic_net_regression([[0],[1],[2],[3]],[1,3,5,7],[[4]],1,0.0,0.5,6000,0.05)==[9.0],\"failed: another linear case\"\nassert elastic_net_regression([[1,1],[2,1],[3,1]],[3,5,7],[[4,1]],1,0.0,0.0,6000,0.1)==[9.0],\"failed: multi-feature ridge (ratio 0)\"\nassert elastic_net_regression([[1],[2],[3]],[2,4,6],[[4]],1,0.0,0.5,0,0.1)==-1,\"failed: n_iterations validation\"\nassert elastic_net_regression([[1,2]], [3], [[1]], 1,0.0,0.5,10,0.1)==-1,\"failed: dimension mismatch\"\nassert len(elastic_net_regression([[1],[2],[3],[4]],[1,2,3,4],[[5],[6]],1,0.0,0.5,5000,0.1))==2,\"failed: output length\"\nassert all(isinstance(v,float) for v in elastic_net_regression([[1],[2]], [2,4], [[3]], 1, 0.0,0.5,4000,0.1)),\"failed: output contains non-float values\""}
{"task_id": 217, "completion_id": 0, "passed": false, "result": "failed: failed on ([1, -1], [0.5, -0.5])", "solution": "import numpy as np\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    assert len(set(actual)) == 2, 'Actual values need to be either +1 or -1.'\n    actual = (actual > 0).astype(int)\n\n    def sigmoid_function(x):\n        return 1 / (1 + np.exp(-x))\n\n    def grad_and_hess(pred):\n        pred = sigmoid_function(pred)\n        grad = actual * pred\n        hess = pred * (1 - pred)\n        return (grad, hess)\n    grad_actual = grad_and_hess(predicted)[0]\n    hess_actual = grad_and_hess(predicted)[1]\n    probs_actual = sigmoid_function(predicted)\n    grad_actual_rounded = [round(grad_value, 6) for grad_value in grad_actual]\n    hess_actual_rounded = [round(hess_value, 6) for hess_value in hess_actual]\n    probs_actual_rounded = [round(prob_value, 6) for prob_value in probs_actual]\n    return (grad_actual_rounded, hess_actual_rounded, probs_actual_rounded)\nactual = [-1, 1, -1, 1]\npredicted = [0.95, -0.8, 0.98, -0.75]\nassert logistic_components([1, -1], [0.5, -0.5]) == ([0.377541, -0.377541], [0.235004, 0.235004], [0.622459, 0.377541]), \"failed on ([1, -1], [0.5, -0.5])\"\nassert logistic_components([1, -1], [10, -10]) == ([0.000045, -0.000045], [0.000045, 0.000045], [0.999955, 0.000045]), \"failed on large magnitude scores\"\nassert logistic_components([1, 1, 1], [0, 0, 0]) == ([0.5, 0.5, 0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with positive labels\"\nassert logistic_components([-1, -1, -1], [0, 0, 0]) == ([-0.5, -0.5, -0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with negative labels\"\nassert logistic_components([1], [-2]) == ([0.880797], [0.104994], [0.119203]), \"failed on single sample (1, -2)\"\nassert logistic_components([-1], [2]) == ([-0.880797], [0.104994], [0.880797]), \"failed on single sample (-1, 2)\"\nassert logistic_components([1, -1, 1, -1], [1, 1, -1, -1]) == ([0.268941, -0.731059, 0.731059, -0.268941], [0.196612, 0.196612, 0.196612, 0.196612], [0.731059, 0.731059, 0.268941, 0.268941]), \"failed on mixed signs\"\nassert logistic_components([1], [0]) == ([0.5], [0.25], [0.5]), \"failed on ([1], [0])\"\nassert logistic_components([1, -1], [5, -5]) == ([0.006693, -0.006693], [0.006648, 0.006648], [0.993307, 0.006693]), \"failed on moderate magnitude scores\"\nassert logistic_components([-1], [3]) == ([-0.952574], [0.045177], [0.952574]), \"failed on (-1, 3)\""}
{"task_id": 218, "completion_id": 0, "passed": false, "result": "failed: Failed on natural blackjack win [1,10] vs [10,7]", "solution": "\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def get_hand_value(hand):\n        value = 0\n        number_of_aces = 0\n        for card in hand:\n            if card == 1:\n                number_of_aces += 1\n            elif card >= 10:\n                continue\n            else:\n                value += card\n        value += (number_of_aces - 1) * 11\n        while value > 21 and number_of_aces:\n            value -= 10\n            number_of_aces -= 1\n        return value\n    player_score = get_hand_value(player)\n    dealer_score = get_hand_value(dealer)\n    if player_score == dealer_score:\n        return 0.0\n    elif player_score < 22 and dealer_score > 21:\n        return 1.0\n    elif player_score == 21:\n        return 1.5\n    elif player_score > 21:\n        return -1.0\n    else:\n        return -1.0\nassert blackjack_outcome([1,10],[10,7]) == 1.5, \"Failed on natural blackjack win [1,10] vs [10,7]\"\nassert blackjack_outcome([1,10],[1,10]) == 0.0, \"Failed on natural blackjack draw [1,10] vs [1,10]\"\nassert blackjack_outcome([10,6],[9,7]) == 0.0, \"Failed on simple draw 16 vs 16\"\nassert blackjack_outcome([10,6],[9,8]) == -1.0, \"Failed on player loses 16 vs 17\"\nassert blackjack_outcome([10,5,9],[10,6]) == -1.0, \"Failed on player bust 24 vs 16\"\nassert blackjack_outcome([10,7],[10,6,9]) == 1.0, \"Failed on dealer bust 17 vs 25\"\nassert blackjack_outcome([1,7,3],[10,10]) == 1.0, \"Failed on soft 21 win\"\nassert blackjack_outcome([1,5,5,10],[10,9,2]) == 0.0, \"Failed on 21 draw\"\nassert blackjack_outcome([10,2],[10,10,5]) == 1.0, \"Failed on dealer bust scenario\"\nassert blackjack_outcome([9,9,9],[1,9]) == -1.0, \"Failed on large bust 27 vs 20\""}
{"task_id": 221, "completion_id": 0, "passed": false, "result": "failed: failed: example ([3,5],[2.5,5.5])", "solution": "import numpy as np\nimport numpy as np\nimport sys\ndef squared_log_error(actual, predicted):\n    if len(actual) != len(predicted):\n        raise ValueError('Actual and predicted sequences must have the same length.')\n    if not all(np.greater_equal(actual, 0)) or not all(np.greater_equal(predicted, 0)):\n        raise ValueError('All elements in actual and predicted sequences must be non-negative.')\n    return np.square(np.log1p(np.array(actual)) - np.log1p(np.array(predicted))).mean()\ndef mean_squared_log_error(actual, predicted):\n    try:\n        result = squared_log_error(actual, predicted)\n        if isinstance(result, int):\n            return round(result, 4)\n        else:\n            return result\n    except Exception as e:\n        print(f'Error calculating MSLE: {e}')\n        return -1\nassert mean_squared_log_error([3,5],[2.5,5.5])==0.0121, \"failed: example ([3,5],[2.5,5.5])\"\nassert mean_squared_log_error([0,1,2],[0,1,2])==0.0, \"failed: perfect prediction\"\nassert mean_squared_log_error([0],[0])==0.0, \"failed: single zero\"\nassert mean_squared_log_error([9,10],[8,8])==0.0257, \"failed: higher values\"\nassert mean_squared_log_error([1,2],[-1,2])==-1, \"failed: negative prediction\"\nassert mean_squared_log_error([1,2,3],[1,2])==-1, \"failed: length mismatch\"\nassert mean_squared_log_error([1000],[1000])==0.0, \"failed: large identical values\"\nassert mean_squared_log_error([5,15,25],[7,14,29])==0.0358, \"failed: mixed values\""}
{"task_id": 222, "completion_id": 0, "passed": false, "result": "failed: Unsupported data type", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union\ndef sigmoid(z: Union[int, float, np.ndarray]) -> Union[float, List[float]]:\n    \"\"\"\n    Compute the element-wise sigmoid (logistic) function.\n\n    The function works for scalar numbers, Python lists, and NumPy arrays,\n    and remains numerically stable for very large positive or negative inputs.\n    \n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray),\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, int) or isinstance(z, float):\n        result = 1 / (1 + np.exp(-z))\n        return round(result, 4)\n    elif isinstance(z, np.ndarray):\n        return np.round(np.vectorize(lambda x: 1 / (1 + np.exp(-x)), otypes=[np.float])(z), 4)\n    else:\n        raise ValueError('Unsupported data type')\nassert sigmoid(0) == 0.5, \"failed on sigmoid(0)\"\nassert sigmoid(1) == 0.7311, \"failed on sigmoid(1)\"\nassert sigmoid(-1) == 0.2689, \"failed on sigmoid(-1)\"\nassert sigmoid(5) == 0.9933, \"failed on sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"failed on sigmoid(-5)\"\nassert sigmoid(1000) == 1.0, \"failed on large positive input\"\nassert sigmoid(-1000) == 0.0, \"failed on large negative input\"\nassert sigmoid([0, 1, -1]) == [0.5, 0.7311, 0.2689], \"failed on list input\"\nassert sigmoid([[0, -2], [2, 0]]) == [[0.5, 0.1192], [0.8808, 0.5]], \"failed on 2D input\""}
{"task_id": 224, "completion_id": 0, "passed": false, "result": "failed: failed on numpy input, custom slope", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        result = []\n        for x in z:\n            y = a * x if x < 0 else x\n            result.append(y)\n    elif isinstance(z, np.ndarray):\n        result = a * z[z < 0] + z[z >= 0]\n    else:\n        result = z\n    return result.tolist() if isinstance(z, np.ndarray) else result\nassert leaky_relu([-2, -1, 0, 1, 2]) == [-0.02, -0.01, 0.0, 1.0, 2.0], \"failed on default slope, 1-D list\"\nassert leaky_relu(np.array([-5.0, 5.0]), 0.2) == [-1.0, 5.0], \"failed on numpy input, custom slope\"\nassert leaky_relu(np.array([[[-1]]]), 0.5) == [[[-0.5]]], \"failed on 3-D array\"\nassert leaky_relu(0) == 0.0, \"failed on scalar zero\"\nassert leaky_relu(-4, 0.25) == -1.0, \"failed on scalar negative\"\nassert leaky_relu(3.3) == 3.3, \"failed on scalar positive\"\nassert leaky_relu([[0]]) == [[0.0]], \"failed on zero inside nested list\""}
{"task_id": 226, "completion_id": 0, "passed": false, "result": "failed: not enough values to unpack (expected 2, got 1)", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    w = np.ones(y_train.shape[0]) / len(y_train)\n    alpha = {}\n    base_stump_weights = np.ones(n_clf)\n    (feature_indices, thresholds, polarities) = ([], [], [])\n    for i in range(n_clf):\n        (feature_index, threshold, polarity) = fit_decision_stump(X_train, y_train, feature_indices, thresholds, polarities)\n        (_, idx) = np.where(y_train > 0)\n        indices_to_update = np.random.choice(idx, p=w[idx])\n        w[indices_to_update] += alpha[i]\n        if w[idx].sum() != 0:\n            alpha_i = 0.5 * np.log((1 - y_train[indices_to_update].mean()) / y_train[indices_to_update].mean())\n            alpha[i] = alpha_i\n        if all(alpha.values()):\n            break\n    predictions = [np.sign(np.dot([-1 if polarity == -1 else 1], x.T)).ravel()[0] for x in X_test]\n    return predictions\ndef fit_decision_stump(X: np.ndarray, y: np.ndarray, feature_indices: list, thresholds: list, polarities: list) -> tuple:\n    best_error = np.inf\n    (best_feature_index, best_threshold, best_polarity) = (None, None, None)\n    for col_idx in range(X.shape[1]):\n        unique_values = np.unique(X[:, col_idx][np.isin(y, 1)])\n        if len(unique_values) < 2:\n            continue\n        for thres_value in unique_values:\n            (true_positives, false_negatives, _, _) = binarize_data(X, y, col_idx, thres_value, 1)\n            pred_true = true_positives >= false_negatives\n            error = pred_true.mean()\n            if error < best_error:\n                best_error = error\n                (best_feature_index, best_threshold, best_polarity) = (col_idx, thres_value, 1)\n    return (best_feature_index, best_threshold, best_polarity)\ndef binarize_data(X: np.ndarray, y: np.ndarray, feature: int, threshold: float, polarity: int) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    positive_mask = np.abs(X[:, feature]) <= threshold\n    negative_mask = np.abs(X[:, feature]) > threshold\n    positive_label = polarity * (y == 1)[positive_mask]\n    negative_label = polarity * (y == -1)[negative_mask]\n    tp = np.sum(positive_label == 1)\n    tn = np.sum(-positive_label == -1)\n    fn = np.sum(-negative_label == -1)\n    fp = np.sum(positive_label == -1)\n    return (tp, fn, tn, fp)\nassert adaboost_predict(np.array([[0, 1], [1, 1], [1, 0], [0, 0]]), np.array([1, 1, -1, -1]), np.array([[1, 0], [0, 1]]), 3) == [-1, 1], \"Test-1 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4], [5]]), np.array([-1, -1, 1, 1, 1]), np.array([[2], [4]]), 5) == [-1, 1], \"Test-2 failed\"\nassert adaboost_predict(np.array([[2, 9], [3, 8], [1, 10], [5, 2], [6, 3], [4, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 9], [6, 2]]), 4) == [1, -1], \"Test-3 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4]]), np.array([1, 1, -1, -1]), np.array([[1], [4]]), 3) == [1, -1], \"Test-4 failed\"\nassert adaboost_predict(np.array([[0], [1], [2], [3], [4], [5]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[0], [5]]), 6) == [-1, 1], \"Test-5 failed\"\nassert adaboost_predict(np.array([[1, 2], [1, 3], [1, 4], [10, 1], [10, 2], [10, 3]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[1, 3], [10, 1]]), 5) == [-1, 1], \"Test-6 failed\"\nassert adaboost_predict(np.array([[0.1], [0.4], [0.5], [0.6], [0.9]]), np.array([-1, -1, 1, 1, 1]), np.array([[0.2], [0.8]]), 4) == [-1, 1], \"Test-7 failed\"\nassert adaboost_predict(np.array([[2], [4], [6], [8], [10], [12]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[3], [11]]), 6) == [-1, 1], \"Test-8 failed\"\nassert adaboost_predict(np.array([[1, 5], [2, 5], [3, 5], [4, 1], [5, 1], [6, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 5], [5, 1]]), 5) == [1, -1], \"Test-9 failed\"\nassert adaboost_predict(np.array([[0], [1]]), np.array([-1, 1]), np.array([[0], [1]]), 1) == [-1, 1], \"Test-10 failed\""}
{"task_id": 241, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    if len(shape) < 2:\n        return [-1]\n    np.random.seed(0)\n    A = np.random.randn(*shape)\n    (u, s, vh) = np.linalg.svd(A)\n    Q = u if u.shape == A.shape else vh.T\n    assert A.shape == Q.shape\n    result = Q.reshape(shape)\n    if len(shape) > 1:\n        flat_result = result.reshape(-1)\n        dot_product = np.dot(flat_result[:min(len(shape), len(result))], flat_result[min(len(shape), len(result)):])\n        assert abs(dot_product - scale ** 2) < 1e-06\n    elif len(shape) == 1:\n        assert np.abs(np.sum(result * result) - scale ** 2) < 1e-06\n    return result.tolist()\nnp.random.seed(0); assert (m := orthogonal((2, 2), 1.0)); flat = np.array(m); assert np.allclose(flat @ flat.T, np.eye(2), atol=1e-6), \"orthogonal((2,2),1.0) rows not orthonormal\"\nnp.random.seed(1); assert (m := orthogonal((3, 4), 0.1)); flat = np.array(m).reshape(3, -1); assert np.allclose(flat @ flat.T, 0.01 * np.eye(3), atol=1e-6), \"orthogonal((3,4),0.1) row-orthogonality failed\"\nnp.random.seed(2); assert (m := orthogonal((4, 3), 0.7)); flat = np.array(m).reshape(4, -1); assert np.allclose(flat.T @ flat, 0.49 * np.eye(3), atol=1e-6), \"orthogonal((4,3),0.7) column-orthogonality failed\"\nnp.random.seed(3); assert (m := orthogonal((5, 5), 0.3)); flat = np.array(m); assert np.allclose(flat @ flat.T, 0.09 * np.eye(5), atol=1e-6), \"orthogonal((5,5),0.3) failed\"\nnp.random.seed(4); assert (m := orthogonal((2, 8), 0.2)); flat = np.array(m).reshape(2, -1); assert np.allclose(flat @ flat.T, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((2,8),0.2) failed\"\nnp.random.seed(5); assert (m := orthogonal((8, 2), 0.2)); flat = np.array(m).reshape(8, -1); assert np.allclose(flat.T @ flat, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((8,2),0.2) failed\"\nnp.random.seed(6); assert isinstance(orthogonal((3, 3), 1.0), list), \"Return type is not list\"\nnp.random.seed(7); assert orthogonal((1,), 0.5) == -1, \"Shape length < 2 should return -1\"\nnp.random.seed(9); shape = (4, 6); scale = 0.75; m = orthogonal(shape, scale); flat = np.array(m).reshape(shape[0], -1); expected = scale**2 * np.eye(shape[0]); assert np.allclose(flat @ flat.T, expected, atol=1e-6), \"orthogonality condition failed for (4,6)\""}
{"task_id": 243, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 3)", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    W1 = np.array([[1.0, 1.0, 1.0]])\n    b1 = np.zeros((1,))\n    W2 = np.tile(W1, (4, 1))\n    b2 = np.repeat(b1, repeats=4, axis=0)\n    W3 = np.tile(W2, (4, 1))\n    b3 = np.repeat(b2, repeats=4, axis=0)\n    Wa = np.tile(W3, (3, 1))\n    bc = np.repeat(b3, repeats=3, axis=0)\n    s = np.array([state[0], state[1], state[2]]).reshape(1, -1)\n    z1 = np.maximum(0, s @ W1 + b1)\n    z2 = np.maximum(0, z1 @ W2 + b2)\n    z3 = np.maximum(0, z2 @ W3 + b3)\n    logits = z3 @ Wa + bc\n    action_probs = np.exp(logits) / np.sum(np.exp(logits), axis=1, keepdims=True)\n    state_value = z3 @ Wc + bc[0]\n    return ([round(a, 4) for a in action_probs.ravel()], round(state_value, 4))\nassert actor_critic_forward([1.0, -1.0, 0.5]) == ([0.3333, 0.3333, 0.3333], 32.0), \"failed on state [1.0, -1.0, 0.5]\"\nassert actor_critic_forward([2.0, 3.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 384.0), \"failed on state [2.0, 3.0, 1.0]\"\nassert actor_critic_forward([-2.0, 0.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-2.0, 0.0, 1.0]\"\nassert actor_critic_forward([0.0, 0.0, 0.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [0.0, 0.0, 0.0]\"\nassert actor_critic_forward([1.0, 1.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [1.0, 1.0, 1.0]\"\nassert actor_critic_forward([-1.0, -1.0, -1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-1.0, -1.0, -1.0]\"\nassert actor_critic_forward([4.0, -2.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [4.0, -2.0, 1.0]\"\nassert actor_critic_forward([10.0, -10.0, 5.0]) == ([0.3333, 0.3333, 0.3333], 320.0), \"failed on state [10.0, -10.0, 5.0]\"\nassert actor_critic_forward([0.25, 0.25, 0.25]) == ([0.3333, 0.3333, 0.3333], 48.0), \"failed on state [0.25, 0.25, 0.25]\"\nassert actor_critic_forward([0.1, -0.2, 0.3]) == ([0.3333, 0.3333, 0.3333], 12.8), \"failed on state [0.1, -0.2, 0.3]\""}
{"task_id": 249, "completion_id": 0, "passed": false, "result": "failed: name 'params_1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    (W1, b1, W2, b2, W3, b3) = (params['W1'], params['b1'], params['W2'], params['b2'], params['W3'], params['b3'])\n    (Wa, ba) = (params['Wa'], params['ba'])\n    (Wc, bc) = (params['Wc'], params['bc'])\n    h1 = np.dot(state, W1) + b1\n    h1_relu = np.maximum(0, h1)\n    h2 = np.dot(h1_relu, W2) + b2\n    h2_relu = np.maximum(0, h2)\n    h3 = np.dot(h2_relu, W3) + b3\n    h3_relu = np.maximum(0, h3)\n    prob = np.exp(Wa @ h3_relu + ba)\n    softmax_prob = prob / np.sum(prob, axis=0, keepdims=True)\n    action_probs = softmax_prob.flatten()\n    value = np.dot(h3_relu, Wc) + bc\n    rounded_value = round(value.item(), -int(np.floor(np.log10(abs(value)))) - 1)\n    return (action_probs, rounded_value)\nstate = [0.5, 0.3, 0.7]\nparams = {'W1': np.array([[1.0, 2.0], [-1.0, 3.0]]), 'b1': np.array([3.0, 1.0]), 'W2': np.array([[1.0, 2.0], [-2.0, 1.0]]), 'b2': np.array([-1.0, 2.0]), 'W3': np.array([[1.0, 2.0], [-2.0, 3.0]]), 'b3': np.array([2.0, -1.0]), 'Wa': np.array([[-1.0, 1.0], [1.0, -1.0]]), 'ba': np.array([1.0, 1.0]), 'Wc': np.array([[1.0, 1.0]])}\nassert actor_critic_forward([1, 0], params_1) == ([0.7311, 0.2689], 1.0), \"test case failed: state=[1,0]\"\nassert actor_critic_forward([0, 1], params_1) == ([0.2689, 0.7311], 1.0), \"test case failed: state=[0,1]\"\nassert actor_critic_forward([-1, 2], params_1) == ([0.1192, 0.8808], 2.0), \"test case failed: state=[-1,2]\"\nassert actor_critic_forward([3, 3], params_1)  == ([0.5, 0.5], 6.0),       \"test case failed: state=[3,3]\"\nassert actor_critic_forward([-2, -3], params_1)== ([0.5, 0.5], 0.0),       \"test case failed: state=[-2,-3]\"\nassert actor_critic_forward([0, 0], params_2)  == ([0.8808, 0.1192], 2.0), \"test case failed: state=[0,0]\"\nassert actor_critic_forward([1, -1], params_2) == ([0.982, 0.018],  3.0), \"test case failed: state=[1,-1]\"\nassert actor_critic_forward([-1, 1], params_2) == ([0.5, 0.5],     1.0), \"test case failed: state=[-1,1]\"\nassert actor_critic_forward([-5, -5], params_2)== ([0.5, 0.5],     1.0), \"test case failed: state=[-5,-5]\"\nassert actor_critic_forward([10, 0], params_2) == ([1.0, 0.0],    12.0), \"test case failed: state=[10,0]\""}
{"task_id": 253, "completion_id": 0, "passed": false, "result": "failed: failed on value, case 1", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    lambd = l1_ratio * len(w)\n    reg_value = alpha * lambd * sum(np.abs(w)) + 0.5 * alpha * (1 - l1_ratio) * np.dot(w, w)\n    if not gradient:\n        return round(reg_value, 4)\n    else:\n        grad_w = alpha * (lambd * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(x, 4) for x in grad_w]\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5) == 0.5371, \"failed on value, case 1\"\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5, True) == [0.1, -0.15, 0.2], \"failed on grad, case 2\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7) == 0.0, \"failed on value, zero vector\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7, True) == [0.0, 0.0, 0.0], \"failed on grad, zero vector\"\nassert elastic_net_regularization([5], 1.0, 1.0) == 5.0, \"failed on value, pure L1\"\nassert elastic_net_regularization([5], 1.0, 1.0, True) == [1.0], \"failed on grad, pure L1\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0) == 2.5, \"failed on value, pure L2\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0, True) == [0.6, 0.8], \"failed on grad, pure L2\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3) == 0.1, \"failed on value, neg weights\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3, True) == [-0.05, -0.05, -0.05, -0.05], \"failed on grad, neg weights\""}
{"task_id": 256, "completion_id": 0, "passed": false, "result": "failed: name 'ToyLinearRNN' is not defined", "solution": "import numpy as np\nfrom copy import deepcopy\nimport numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                      method (single time-step) and a ``flush_gradients``\n                      method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                      loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                      be redirected to the lower-case keys.  If the name is\n                      \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name == 'X' or param_name == 'y':\n        return None\n    params = model.parameters.copy()\n\n    def get_lower_case_param(param_name):\n        if param_name.lower() != param_name:\n            return {k: v for (k, v) in zip(params.keys(), map(lambda x: x.lower(), params.values()))}\n        else:\n            return deepcopy(params)\n    new_params = get_lower_case_param(param_name)\n    try:\n        model.parameters = new_params\n        model.flush_gradients()\n        y_pred = []\n        for _ in range(n_t):\n            y_pred.append(model.forward(X))\n        grads = []\n        for p in new_params[param_name]:\n            p_val = p.get_value().copy()\n            p_val += epsilon\n            p_val = np.clip(p_val, -np.inf, np.inf).astype(np.float64)\n            p.set_value(p_val)\n            y_pred_1 = model.forward(X).item()\n            p_val -= 2 * epsilon\n            p_val = np.clip(p_val, -np.inf, np.inf).astype(np.float64)\n            p.set_value(p_val)\n            y_pred_2 = model.forward(X).item()\n            p_val += epsilon\n            grads.append((y_pred_1 - y_pred_2) / (2 * epsilon))\n        grads_array = np.array(grads)\n        return grads_array.T.astype(np.float64)\n    except Exception as e:\n        print(f'Error occurred while computing numerical gradient: {e}')\n        return None\nimport numpy as np, math, random; from copy import deepcopy; rng = np.random.default_rng(0); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(3, 2, 3)); n_t = 3; expected = analytic_grad_P(model, n_t, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', n_t, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 2x2'\nimport numpy as np; rng = np.random.default_rng(1); model = ToyLinearRNN(3, 1, rng); X = rng.normal(size=(4, 3, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 3x1'\nimport numpy as np; rng = np.random.default_rng(2); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(5, 1, 1)); expected = analytic_grad_P(model, 1, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 1, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: n_t = 1'\nimport numpy as np; rng = np.random.default_rng(3); model = ToyLinearRNN(2, 4, rng); X = rng.normal(size=(2, 2, 3)); expected = analytic_grad_ba(model, 3, X); numeric = grad_check_RNN(model, squared_loss, 'Ba', 3, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for Ba'\nimport numpy as np; rng = np.random.default_rng(4); model = ToyLinearRNN(4, 2, rng); X = rng.normal(size=(3, 4, 4)); expected = analytic_grad_P(model, 4, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 4, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 4x2'\nimport numpy as np; rng = np.random.default_rng(5); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X, epsilon=1e-8); assert np.allclose(numeric, expected, atol=1e-4), 'test case failed: small epsilon'\nimport numpy as np; rng = np.random.default_rng(6); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(3, 1, 5)); expected = analytic_grad_P(model, 5, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 5, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 1x3'\nimport numpy as np; rng = np.random.default_rng(7); model = ToyLinearRNN(3, 2, rng); X = rng.normal(size=(2, 3, 2)); expected = analytic_grad_ba(model, 2, X); numeric = grad_check_RNN(model, squared_loss, 'ba', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for ba'\nimport numpy as np; rng = np.random.default_rng(8); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'X', 2, X) is None, 'test case failed: param X should return None'\nimport numpy as np; rng = np.random.default_rng(9); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'y', 2, X) is None, 'test case failed: param y should return None'"}
{"task_id": 257, "completion_id": 0, "passed": false, "result": "failed: name 'AdaBoost' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    w = np.ones(y_train.shape[0]) / y_train.shape[0]\n    T = []\n    alpha = []\n    while len(T) < n_clf:\n        T.append(AdaBoost.train_stump(X_train, y_train, w))\n        err = AdaBoost.compute_error(X_train, y_train, T[-1])\n        if err == 0:\n            break\n        alpha_t = 0.5 * np.log((1 - err) / err)\n        idx_to_reweight = np.where(np.sign(np.dot(T[-1], X_train)) != y_train)[0]\n        new_w = w[idx_to_reweight] + alpha_t\n        w[idx_to_reweight] /= new_w.sum()\n        w = w / new_w.sum()\n        alpha.append(alpha_t)\n        T.append(None)\n    preds = np.zeros(X_test.shape[0])\n    for (t, stump) in enumerate(T):\n        if stump is None:\n            continue\n        preds += alpha[t] * stump.predict(X_test)\n    return np.sign(preds).astype(int)\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 261, "completion_id": 0, "passed": false, "result": "failed: std incorrect for shape (8,8,1,1)", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    assert len(shape) >= 2, 'Shape must have at least two dimensions.'\n    fan_in = shape[-2] if len(shape) > 2 else shape[0]\n    fan_out = shape[-1] if len(shape) > 2 else shape[0]\n    std_deviation = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=std_deviation, size=tuple(shape))\nnp.random.seed(1)\nshape=(64,32)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (64,32)\"\nnp.random.seed(2)\nshape=(16,3,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (16,3,3,3)\"\nnp.random.seed(3)\nshape=(5,5)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.2,\"mean far from 0 for shape (5,5)\"\nnp.random.seed(4)\nshape=(8,8,1,1)\nW=glorot_normal(shape)\nfan_in=8*1*1\nfan_out=8*1*1\nexp_std=np.sqrt(2/(fan_in+fan_out))\nassert abs(W.std()-exp_std)<0.1,\"std incorrect for shape (8,8,1,1)\"\nnp.random.seed(5)\nshape=(1,1,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (1,1,3,3)\"\nnp.random.seed(6)\nshape=(10,)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (10,)\"\nnp.random.seed(7)\nshape=(12,6,2,2)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.1,\"mean far from 0 for shape (12,6,2,2)\"\nnp.random.seed(8)\nshape=(4,4,4)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (4,4,4)\"\nnp.random.seed(9)\nshape=(128,256)\nW=glorot_normal(shape)\nassert abs(W.std()-np.sqrt(2/(128+256)))<0.05,\"std incorrect for shape (128,256)\""}
{"task_id": 266, "completion_id": 0, "passed": false, "result": "failed: name 'build_adj_list' is not defined", "solution": "\n\nassert build_adj_list([], []) == [], \"failed: empty graph\"\nassert build_adj_list([0], []) == [[]], \"failed: single isolated vertex\"\nassert build_adj_list([0,1], [(0,1)]) == [[1],[0]], \"failed: simple two-vertex edge\"\nassert build_adj_list([0,1,2], [(0,1),(1,2)]) == [[1],[0,2],[1]], \"failed: 3-line path\"\nassert build_adj_list([\"A\",\"B\",\"C\",\"D\"], [(\"A\",\"B\"),(\"B\",\"C\"),(\"C\",\"A\"),(\"B\",\"A\")]) == [[\"B\",\"C\"],[\"A\",\"C\"],[\"A\",\"B\"],[]], \"failed: example with duplicate/reversed edges\"\nassert build_adj_list([\"x\",\"y\",\"z\"], [(\"x\",\"x\"),(\"x\",\"y\")]) == [[\"y\"],[\"x\"],[]], \"failed: self loop ignored\"\nassert build_adj_list([0,1,2], [(0,3),(3,4)]) == [[ ], [ ], [ ]], \"failed: edges with unknown vertices ignored\"\nassert build_adj_list([\"A\",\"B\",\"C\"], []) == [[],[],[]], \"failed: all isolated vertices\""}
{"task_id": 267, "completion_id": 0, "passed": false, "result": "failed: minimize() missing 1 required positional argument: 'x0'", "solution": "import numpy as np\nimport numpy as np\nfrom scipy.optimize import minimize\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n\n    def weighted_classification_error(stump):\n        (_, idx) = np.unique(y, return_index=True)[0]\n        num_correct = len(idx)\n        num_misclassified = sum(sample_weights)\n        if num_correct == num_misclassified:\n            return 0\n        incorrect_indices = set(np.argsort(-sample_weights)) - set(idx)\n        wrong_predictions = [np.where(y == -1)[0][0], np.where(y == -1)[0][-1]]\n        theta = max(wrong_predictions[min(incorrect_indices)])\n\n        def classify(x):\n            if x[stump['feature_index']] >= stump['threshold']:\n                return stump['polarity']\n            else:\n                return -stump['polarity']\n        pred_err = 0\n        for i in range(len(X)):\n            if i not in idx:\n                real_class = 1 if y[i] > 0 else -1\n                predicted_class = classify(X[i])\n                pred_err += abs(real_class - predicted_class) * sample_weights[i]\n        return pred_err / num_correct\n    initial_guess = {'feature_index': 0, 'threshold': 0, 'polarity': None}\n    result = minimize(fun=lambda params: weighted_classification_error({'feature_index': params['feature_index'], 'threshold': params['threshold'], 'polarity': params['polarity']}, X=X, y=y, sample_weights=sample_weights), args=(initial_guess,), method='Powell', options={'maxiter': 50})\n    best_params = result.x.copy()\n    best_parity = (-result.fun > 0) + 0\n    return {'feature_index': best_params['feature_index'], 'threshold': round(best_params['threshold'], 4), 'polarity': best_parity, 'weighted_error': round(result.fun, 4)}\nassert train_decision_stump(np.array([[1],[1],[1]]), np.array([1,-1,1]), np.array([0.1,0.2,0.7]))[\"weighted_error\"] == 0.2, \"test case 5 failed\"\nassert train_decision_stump(np.array([[0],[1]]), np.array([-1,1]), np.array([0.8,0.2]))[\"threshold\"] in (0.0,1.0), \"test case 6 failed\"\nassert train_decision_stump(np.array([[2,0],[0,2],[2,2],[0,0]]), np.array([1,-1,1,-1]), np.ones(4))[\"weighted_error\"] == 0.0, \"test case 7 failed\"\nassert train_decision_stump(np.array([[5],[6],[7]]), np.array([1,1,1]), np.array([0.3,0.3,0.4]))[\"weighted_error\"] == 0.0, \"test case 8 failed\"\nassert train_decision_stump(np.array([[0],[1],[2],[3]]), np.array([1,-1,1,-1]), np.array([0.25,0.25,0.25,0.25]))[\"polarity\"] in (1,-1), \"test case 9 failed\"\nassert train_decision_stump(np.array([[2,3],[2,2],[2,1]]), np.array([-1,1,1]), np.ones(3))[\"feature_index\"] == 1, \"test case 10 failed\""}
{"task_id": 273, "completion_id": 0, "passed": false, "result": "failed: '<=' not supported between instances of 'list' and 'int'", "solution": "import math\nfrom collections import Counter\nimport math\nimport numpy as np\nclass Node(object):\n\n    def __init__(self, left=None, right=None, depth=1, parent=None, split_idx=-1, split_val=-1):\n        self.left = left\n        self.right = right\n        self.depth = depth\n        self.split_idx = split_idx\n        self.split_val = split_val\n        self.parent = parent\n\n    @property\n    def info_gain(self):\n        if not self.left and (not self.right):\n            return 0.0\n        (n_left, n_right) = (len(self.left.feature), len(self.right.feature))\n        h_parent = self._entropy(self.target)\n        (p_left, p_right) = (n_left / len(self.feature), n_right / len(self.feature))\n        h_l = self._entropy([target[i] for i in self.left.feature])\n        h_r = self._entropy([target[i] for i in self.right.feature])\n        g = h_parent - (p_left * h_l + p_right * h_r)\n        return round(g, 4)\n\n    @staticmethod\n    def _entropy(labels):\n        counter = Counter(labels)\n        total = sum(counter.values())\n        prob = [c / total for c in counter.values()]\n        log_prob_sum = sum([-math.log(p, 2) for p in prob])\n        return -log_prob_sum\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None,\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    max_info_gain = 0.0\n    optimal_threshold = None\n    for idx in range(len(feature)):\n        current_feature = np.array(feature).copy()\n        current_target = np.array(target).copy()\n        if abs(current_feature[idx]) == abs(current_feature[idx + 1]):\n            continue\n        median_value = int(np.floor((idx + 1) / 2) * (abs(current_feature[idx]) // 2) + np.ceil((len(feature) + idx + 1) / 2 * (abs(current_feature[idx + 1]) // 2)))\n        cutoff = feature[min(median_value, len(current_feature) - 1)]\n        left_idx = np.where(feature <= cutoff)[0]\n        right_idx = np.where(feature > cutoff)[0]\n        if len(left_idx) == 0 or len(right_idx) == 0:\n            continue\n        left_subtree = Node(left_idx, right_idx, 1, parent=self)\n        right_subtree = Node(left_idx, right_idx, 1, parent=self)\n        if left_subtree.info_gain >= max_info_gain:\n            max_info_gain = left_subtree.info_gain\n            optimal_threshold = cutoff\n    return (round(optimal_threshold, 4), round(max_info_gain, 4))\nassert best_split([2, 3, 10, 19], [0, 0, 1, 1]) == (6.5, 1.0), \"failed on perfect 2-class separation\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 1]) == (3.5, 0.8113), \"failed on unbalanced classes\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 0]) == (None, 0.0), \"failed on pure node\"\nassert best_split([1, 2, 3, 4], [0, 1, 0, 1]) == (1.5, 0.3113), \"failed on symmetric classes\"\nassert best_split([1, 2, 5, 6], [0, 0, 1, 1]) == (3.5, 1.0), \"failed on separated clusters\"\nassert best_split([10, 20, 30], [0, 1, 1]) == (15.0, 0.9183), \"failed on small dataset\"\nassert best_split([1, 2], [0, 1]) == (1.5, 1.0), \"failed on two-point perfect split\"\nassert best_split([1, 2], [0, 0]) == (None, 0.0), \"failed on two identical labels\"\nassert best_split([1, 2, 3, 4, 5], [0, 0, 1, 1, 1]) == (2.5, 0.971), \"failed on 5-point uneven split\"\nassert best_split([3, 3, 3, 3], [0, 1, 0, 1]) == (None, 0.0), \"failed on identical feature values\""}
{"task_id": 286, "completion_id": 0, "passed": false, "result": "failed: Invalid initialization function.", "solution": "import random\nimport random\nimport random\nfrom typing import *\nimport numpy as np\ndef zeros_init(shape: Tuple[int, int]) -> np.ndarray:\n    return np.zeros(shape)\ndef ones_init(shape: Tuple[int, int]) -> np.ndarray:\n    return np.ones(shape)\ndef random_uniform_init(shape: Tuple[int, int], low=0.0, high=1.0, seed=42) -> np.ndarray:\n    rng = np.random.RandomState(seed)\n    return rng.uniform(low, high, size=shape)\ndef get_initializer(name: str) -> Callable[[Tuple[int, int]], np.ndarray]:\n\n    def _initializer(_shape: Tuple[int, int]):\n        match name.lower():\n            case 'zeros':\n                return zeros_init(_shape)\n            case 'ones':\n                return ones_init(_shape)\n            case 'randn':\n                return np.random.randn(*_shape)\n            case 'random_uniform':\n                return random_uniform_init(_shape)\n            case _:\n                raise ValueError('Invalid initialization function.')\n    return _initializer\nassert get_initializer('zeros_init')((2, 2)) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zeros_init((2,2))\"\nassert get_initializer('ones_init')((1, 3)) == [[1.0, 1.0, 1.0]], \"test case failed: ones_init((1,3))\"\nassert get_initializer('zeros_init')((3, 1)) == [[0.0], [0.0], [0.0]], \"test case failed: zeros_init((3,1))\"\nassert get_initializer('ones_init')((2, 4)) == [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]], \"test case failed: ones_init((2,4))\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert len(_matrix) == 2 and all(len(r) == 3 for r in _matrix), \"test case failed: random_uniform_init shape (2,3)\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert all(0.0 <= v <= 1.0 for r in _matrix for v in r), \"test case failed: random_uniform_init value range\"\n_matrix2 = get_initializer('random_uniform_init')((3, 1)); assert len(_matrix2) == 3 and len(_matrix2[0]) == 1, \"test case failed: random_uniform_init shape (3,1)\"\nassert get_initializer('zeros_init') is zeros_init, \"test case failed: object identity for zeros_init\"\nassert get_initializer('ones_init') is ones_init, \"test case failed: object identity for ones_init\"\nassert get_initializer('random_uniform_init') is random_uniform_init, \"test case failed: object identity for random_uniform_init\""}
{"task_id": 287, "completion_id": 0, "passed": false, "result": "failed: name 'H' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H_new, W_new) = (X.shape[0], X.shape[1], (H - pool_shape[0]) // stride[0] + 1, (W - pool_shape[1]) // stride[1] + 1)\n    pooled_output = np.zeros((N, C, H_new, W_new))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_new):\n                for w in range(W_new):\n                    (oh_start, oh_end) = (h * stride[0], min(h * stride[0] + pool_shape[0], H))\n                    (ow_start, ow_end) = (w * stride[1], min(w * stride[1] + pool_shape[1], W))\n                    avg_value = np.mean(X[n, c, oh_start:oh_end, ow_start:ow_end])\n                    pooled_output[n, c, h, w] = round(avg_value, 4)\n    grad_input = np.sum(pooled_output * accum_grad, axis=(2, 3))\n    output_list = pooled_output.tolist()\n    grad_input_list = grad_input.tolist()\n    return (output_list, grad_input_list)\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[1]]]])) == ([[[[2.5]]]], [[[[0.25, 0.25], [0.25, 0.25]]]]), \"test case 1 failed: overlapping 2x2 window with unit gradient\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.5, 0.25], [0.5, 1.0, 0.5], [0.25, 0.5, 0.25]]]]), \"test case 2 failed: 3x3 input with overlapping windows\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]), (2, 2), (2, 2), np.ones((1, 2, 1, 1))) == ([[[[2.5]], [[6.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 3 failed: 2 channels, non-overlapping windows\"\nassert average_pool2d(np.arange(32, dtype=float).reshape(2, 1, 4, 4), (2, 2), (2, 2), np.ones((2, 1, 2, 2))) == ([ [[[2.5, 4.5], [10.5, 12.5]]], [[[18.5, 20.5], [26.5, 28.5]]] ], [ [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]], [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]]]), \"test case 4 failed: batch size 2 with non-overlapping windows\"\nassert average_pool2d(np.array([[[[10, 20], [30, 40]]]]), (1, 1), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[10.0, 20.0], [30.0, 40.0]]]], [[[[1.0, 1.0], [1.0, 1.0]]]]), \"test case 5 failed: pooling window 1x1 should be identity\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]]), (2, 2), (2, 2), np.ones((1, 3, 1, 1))) == ([[[[2.5]], [[6.5]], [[10.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 6 failed: three-channel input\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6]]]]), (1, 3), (1, 3), np.ones((1, 1, 2, 1))) == ([[[[2.0], [5.0]]]], [[[[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]]]]), \"test case 7 failed: pooling window covers full width\"\nassert average_pool2d(np.array([[[[1], [2], [3]]]]), (3, 1), (1, 1), np.ones((1, 1, 1, 1))) == ([[[[2.0]]]], [[[[0.3333], [0.3333], [0.3333]]]]), \"test case 8 failed: pooling window covers full height\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[2]]]])) == ([[[[2.5]]]], [[[[0.5, 0.5], [0.5, 0.5]]]]), \"test case 9 failed: scaled gradient for single window\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.array([[[[1, 2], [3, 4]]]])) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.75, 0.5], [1.0, 2.5, 1.5], [0.75, 1.75, 1.0]]]]), \"test case 10 failed: non-uniform incoming gradient\""}
{"task_id": 290, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.array_equal(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and abs(tree_a.threshold - tree_b.threshold) <= 1e-08 and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0, Leaf(0), Leaf(1))) is True, \"failed on identical shallow tree\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(1, 5.0, Leaf(0), Leaf(1))) is False, \"failed on feature mismatch\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-9, Leaf(0), Leaf(1))) is True, \"failed on near-equal thresholds\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-4, Leaf(0), Leaf(1))) is False, \"failed on threshold mismatch\"\nassert compare_trees(Node(0, 1.0, Leaf(0), Leaf(1)), Node(0, 1.0, Node(1, 2.0, Leaf(0), Leaf(1)), Leaf(1))) is False, \"failed on structure mismatch\"\nassert compare_trees(Leaf(42), Leaf(42)) is True, \"failed on identical scalar leaves\"\nassert compare_trees(Leaf(42), Leaf(43)) is False, \"failed on unequal scalar leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([1.0, 0.0]))) is True, \"failed on identical array leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([0.0, 1.0]))) is False, \"failed on unequal array leaves\"\nassert compare_trees(Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0))), Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0)))) is True, \"failed on identical deep tree\""}
{"task_id": 292, "completion_id": 0, "passed": false, "result": "failed: failed: cutoff 2 on 3-col parents", "solution": "import numpy as np\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    if len(set([len(row) for row in parent1])) != 1 or len(set([len(row) for row in parent2])) != 1:\n        return -1\n    child1 = []\n    child2 = []\n    for i in range(len(parent1)):\n        if i <= cutoff:\n            child1.append(parent1[i])\n            child2.append(parent2[i])\n        else:\n            child1.append(parent2[i])\n            child2.append(parent1[i])\n    child1_list = [list(col) for col in child1]\n    child2_list = [list(col) for col in child2]\n    return (child1_list, child2_list)\nparent1 = [[0.5, 1.0, 2.0], [3.0, 4.0, 5.0]]\nparent2 = [[6.0, 7.0, 8.0], [9.0, 10.0, 11.0]]\ncutoff = 2\n# basic 3-column example\nassert single_point_crossover([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], 2) == ( [[1,2,9],[4,5,12]], [[7,8,3],[10,11,6]] ), \"failed: cutoff 2 on 3-col parents\"\n# cutoff at 0 \u2013 swap all columns\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 0) == ( [[5,6],[7,8]], [[1,2],[3,4]] ), \"failed: cutoff 0\"\n# cutoff equal to number of columns \u2013 no swap\nassert single_point_crossover([[1,2,3]], [[4,5,6]], 3) == ( [[1,2,3]], [[4,5,6]] ), \"failed: cutoff == n_cols\"\n# non-square, more columns than rows\nassert single_point_crossover([[1,2,3,4]], [[5,6,7,8]], 1) == ( [[1,6,7,8]], [[5,2,3,4]] ), \"failed: 1\u00d74 matrices, cutoff 1\"\n# two-row, two-column matrices, cutoff 1\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 1) == ( [[1,6],[3,8]], [[5,2],[7,4]] ), \"failed: 2\u00d72, cutoff 1\"\n# unequal shapes \u21d2 \u20111\nassert single_point_crossover([[1,2,3]], [[4,5]], 1) == -1, \"failed: unequal shapes must return -1\"\n# negative cutoff \u21d2 treat as 0 (swap all)\nassert single_point_crossover([[1,2,3]], [[4,5,6]], -3) == ( [[4,5,6]], [[1,2,3]] ), \"failed: negative cutoff\"\n# cutoff beyond columns \u21d2 treat as n_cols (no swap)\nassert single_point_crossover([[1],[2]], [[3],[4]], 10) == ( [[1],[2]], [[3],[4]] ), \"failed: large cutoff\"\n# float matrices\nc1, c2 = single_point_crossover([[0.1,0.2,0.3],[0.4,0.5,0.6]], [[0.7,0.8,0.9],[1.0,1.1,1.2]], 1)\nassert c1 == [[0.1,0.8,0.9],[0.4,1.1,1.2]] and c2 == [[0.7,0.2,0.3],[1.0,0.5,0.6]], \"failed: float matrices\"\n# large matrix quick sanity\nm1 = [list(range(i, i+10)) for i in range(0,100,10)]\nm2 = [list(range(i+100, i+110)) for i in range(0,100,10)]\nchild1, child2 = single_point_crossover(m1, m2, 5)\nassert child1[0][:5] == m1[0][:5] and child1[0][5:] == m2[0][5:], \"failed: larger matrix crossover integrity\""}
{"task_id": 294, "completion_id": 0, "passed": false, "result": "failed: name '_build_graph' is not defined", "solution": "from typing import Any, Dict, List, Tuple\nfrom typing import Any, Dict, List, Tuple\nfrom collections import defaultdict\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    adj = defaultdict(list)\n    if not G:\n        return adj\n    vertices_count = len(G['_V2I'])\n    is_directed = G['is_directed']\n    for i in range(vertices_count):\n        source_label = next(iter(G['_V2I'].keys()))\n        source_index = G['_V2I'][source_label]\n        adjacent_vertices = []\n        weights = []\n        for j in range(i + 1, vertices_count):\n            target_label = next(iter(G['_V2I'].keys()))\n            target_index = G['_V2I'][target_label]\n            if is_directed:\n                if target_index == source_index:\n                    continue\n            adjacent_vertices.append(target_label)\n            weights.append(G['_G'][j][2])\n        adj[source_label].extend(zip(adjacent_vertices, weights))\n        adj[target_label].extend(zip(adjacent_vertices[::-1], weights[::-1]))\n    for (k, v) in adj.items():\n        adj[k] = [(n[0], n[1]) for (_, n) in sorted(v)]\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('B', 'D', 3), ('C', 'E', 7)], [('A', 'B', 8), ('A', 'D', 9)]]}\nassert to_networkx(_build_graph(False, [('A','B',3),('A','C',2),('B','C',4)])) == {'A':[('B',3),('C',2)],'B':[('A',3),('C',4)],'C':[('A',2),('B',4)]}, \"test case failed: simple undirected graph\"\nassert to_networkx(_build_graph(True, [('A','B',1),('B','C',2),('C','A',3)])) == {'A':[('B',1)],'B':[('C',2)],'C':[('A',3)]}, \"test case failed: directed cycle\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','A',1),('B','C',2),('C','B',2)])) == {'A':[('B',1)],'B':[('A',1),('C',2)],'C':[('B',2)]}, \"test case failed: duplicate undirected edges\"\nassert to_networkx(_build_graph(True, [('A','B',1),('A','B',1),('A','B',1)])) == {'A':[('B',1)],'B':[]}, \"test case failed: repeated directed edges\"\nassert to_networkx(_build_graph(False, [('A','A',5)])) == {'A':[('A',5)]}, \"test case failed: self-loop in undirected graph\"\nassert to_networkx(_build_graph(True, [('X','Y',-3)])) == {'X':[('Y',-3)],'Y':[]}, \"test case failed: negative weight\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','C',2),('C','D',3),('D','A',4)])) == {'A':[('B',1),('D',4)],'B':[('A',1),('C',2)],'C':[('B',2),('D',3)],'D':[('A',4),('C',3)]}, \"test case failed: larger undirected graph\"\nassert to_networkx(_build_graph(False, [('A','B',1.5),('B','C',2.25)])) == {'A':[('B',1.5)],'B':[('A',1.5),('C',2.25)],'C':[('B',2.25)]}, \"test case failed: float weights\"\nassert to_networkx({'is_directed':False,'_V2I':{},'_G':[]}) == {}, \"test case failed: empty graph\""}
{"task_id": 296, "completion_id": 0, "passed": false, "result": "failed: Failed on integer vector", "solution": "import numpy as np\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    valid_values = set([0, 1])\n    return all((np.array_equal(v, valid_values) for v in x))\nassert is_binary(np.array([0, 1, 1, 0])) is True, \"Failed on integer vector\"\nassert is_binary(np.array([[0, 1], [1, 0]], dtype=bool)) is True, \"Failed on boolean matrix\"\nassert is_binary(np.array([0.0, 1.0])) is True, \"Failed on float vector\"\nassert is_binary(np.array([0, 2])) is False, \"Failed on non-binary value 2\"\nassert is_binary(np.array([-1, 0, 1])) is False, \"Failed on negative non-binary value\"\nassert is_binary(np.array([0, 1, 3])) is False, \"Failed on non-binary value 3\"\nassert is_binary(np.array([[0], [1], [0]])) is True, \"Failed on column vector\"\nassert is_binary(np.zeros((3, 4))) is True, \"Failed on all-zeros matrix\"\nassert is_binary(np.ones((2, 2))) is True, \"Failed on all-ones matrix\"\nassert is_binary(np.array([True, False, True])) is True, \"Failed on boolean vector\""}
{"task_id": 298, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'split'", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n\n    def count_tokens(sentence):\n        return len([token for token in sentence.split()])\n\n    def get_ngram_counts(ngram, corpus):\n        seen = set()\n        count = 0\n        for i in range(len(corpus)):\n            for j in range(i + 1, min(N + i + 1, len(corpus) + 1)):\n                gram = tuple(corpus[i:j])\n                if gram == ngram:\n                    seen.add(j - i)\n                    count += 1\n        return (count, seen)\n\n    def calculate_probability(query_ngram, seen, corpus):\n        if not seen:\n            return 0.0\n        numerator = len(seen)\n        denominator = sum((count_tokens(corpus[begin:end]) for (begin, end) in seen))\n        return (math.log(numerator / denominator, 2), len(seen))\n    corpus = [sentence.lower().split() for sentence in corpus]\n    padded_query = ['<bol>'] + query.split() + ['<eol>']\n    ngrams = {tuple(padded_query[:i + 2]): count_tokens(padded_query[:i + 2]) for i in range(N)}\n    max_prob = float('-inf')\n    for query_ngram in padded_query[N:]:\n        (count, seen) = get_ngram_counts(tuple(padded_query[:len(padded_query) // N]), corpus)\n        (prob, _) = calculate_probability(query_ngram, seen, corpus)\n        max_prob = max(max_prob, prob)\n    return round(math.log(max_prob, 2), 4)\ncorpus = ['a b a', 'b a b']\nN = 1\nassert ngram_log_prob([\"a b a\", \"b a b\"], \"a b\", 1) == -1.3863, \"test case failed: unigram example\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love AI\", 2) == -0.6931, \"test case failed: bigram simple\"\nassert ngram_log_prob([\"hello world\"], \"hello world\", 2) == 0.0, \"test case failed: probability 1 for every bigram\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b c\", 3) == -0.6931, \"test case failed: trigram with mixed counts\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b e\", 3) == float('-inf'), \"test case failed: unseen trigram should be -inf\"\nassert ngram_log_prob([\"hello world\"], \"unknown\", 1) == float('-inf'), \"test case failed: unseen unigram should be -inf\"\nassert ngram_log_prob([\"red blue blue red\"], \"red\", 1) == -0.6931, \"test case failed: unigram single token\"\nassert ngram_log_prob([\"a a b\", \"a a a\"], \"a a\", 2) == -2.1203, \"test case failed: complex bigram counts\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 2) == float('-inf'), \"test case failed: unknown bigram\"\nassert ngram_log_prob([\"cat sat\"], \"cat sat\", 2) == 0.0, \"test case failed: perfect bigram match\""}
{"task_id": 302, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (m, n) = X.shape\n    deg = np.sum(np.abs(X) ** 2, axis=1)\n    D = np.diag(deg)\n    I = np.eye(m)\n    L = D - X @ X.T\n\n    def compute_centroids(centroids):\n        return centroids[np.argsort(np.sum(X[centroids] ** 2, axis=1))[:k]]\n    centroids = X[np.random.choice(range(m), size=k, replace=False)]\n    old_centroids = None\n    iteration = 0\n    while True:\n        distances = np.einsum('ik,jk->ij', X, L)\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(new_labels, old_centroids):\n            break\n        old_centroids = centroids.copy()\n        centroids = X[new_labels]\n        centroids = compute_centroids(centroids)\n        iteration += 1\n        if iteration >= 100:\n            raise Exception('Reached max iterations without convergence')\n    return list(new_labels)\nassert spectral_clustering(X1, 2) == [0, 0, 1, 1], \"test case failed: spectral_clustering(X1, 2)\"\nassert spectral_clustering(X2, 3) == [0, 1, 2, 0, 1, 2], \"test case failed: spectral_clustering(X2, 3)\"\nassert spectral_clustering(X3, 1) == [0] * 10, \"test case failed: spectral_clustering(X3, 1)\"\nassert spectral_clustering(X4, 1) == [0, 0, 0], \"test case failed: spectral_clustering(X4, 1)\"\nassert set(res5) == {0, 1} and res5.count(0) != 0 and res5.count(1) != 0, \"test case failed: spectral_clustering(X5, 2)\"\nassert set(labels6) == {0, 1, 2}, \"test case failed: spectral_clustering(X6, 3)\"\nassert set(labels7) == {0, 1}, \"test case failed: spectral_clustering(X7, 2)\"\nassert labels8 == list(range(5)), \"test case failed: spectral_clustering(X8, 5)\"\nassert spectral_clustering(X9, 2) == [0, 1], \"test case failed: spectral_clustering(X9, 2)\"\nassert set(labels10) <= {0, 1}, \"test case failed: spectral_clustering(X10, 2)\""}
{"task_id": 303, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic example", "solution": "\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_max_ix = max(min(ix - 1, len(params) - 1), 0)\n    mine_prev_line = f'Mine ({params[prev_max_ix][1]}):\\n{params[prev_max_ix][0]}'\n    theirs_prev_line = f\"Theirs ({params[prev_max_ix][1]}): {golds.get(params[prev_max_ix][1], '')}\"\n    mine_curr_line = f'Mine ({params[ix][1]}):\\n{params[ix][0]}'\n    theirs_curr_line = f\"Theirs ({params[ix][1]}):\\n{golds.get(params[ix][1], '')}{warn_str}\" if warn_str else f\"Theirs ({params[ix][1]}):\\n{golds.get(params[ix][1], '')}\"\n    return '------------------------- DEBUG -------------------------' + '\\n\\n'.join([mine_prev_line.strip(), theirs_prev_line.strip(), mine_curr_line.strip(), theirs_curr_line.strip()]) + '\\n----------------------- END DEBUG -----------------------'\nassert err_fmt([('output1','case1'),('output2','case2'),('output3','case3')], {'case1':'expected1','case2':'expected2','case3':'expected3'}, 1, '\\nWarning: mismatch detected.') == '------------------------- DEBUG -------------------------\\nMine (prev) [case1]:\\noutput1\\n\\nTheirs (prev) [case1]:\\nexpected1\\n\\nMine [case2]:\\noutput2\\n\\nTheirs [case2]:\\nexpected2\\nWarning: mismatch detected.\\n----------------------- END DEBUG -----------------------', \"test case failed: basic example\"\nassert err_fmt([('val','test')], {'test':'expected'}, 0) == '------------------------- DEBUG -------------------------\\nMine (prev) [test]:\\nval\\n\\nTheirs (prev) [test]:\\nexpected\\n\\nMine [test]:\\nval\\n\\nTheirs [test]:\\nexpected\\n----------------------- END DEBUG -----------------------', \"test case failed: single element\"\nassert err_fmt([('mine1','A'),('mine2','B')], {'A':'goldA','B':'goldB'}, 0, 'WARNING') == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nmine1\\n\\nTheirs (prev) [A]:\\ngoldA\\n\\nMine [A]:\\nmine1\\n\\nTheirs [A]:\\ngoldAWARNING\\n----------------------- END DEBUG -----------------------', \"test case failed: ix=0 with warn_str w/o newline\"\nassert err_fmt([('m1','id1'),('m2','id2'),('m3','id3'),('m4','id4')], {'id1':'g1','id2':'g2','id3':'g3','id4':'g4'}, 2) == '------------------------- DEBUG -------------------------\\nMine (prev) [id2]:\\nm2\\n\\nTheirs (prev) [id2]:\\ng2\\n\\nMine [id3]:\\nm3\\n\\nTheirs [id3]:\\ng3\\n----------------------- END DEBUG -----------------------', \"test case failed: middle element of longer list\"\nassert err_fmt([('foo','L1'),('bar','L2')], {'L1':'ref1','L2':'ref2'}, 1, '\\nNote: difference') == '------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nfoo\\n\\nTheirs (prev) [L1]:\\nref1\\n\\nMine [L2]:\\nbar\\n\\nTheirs [L2]:\\nref2\\nNote: difference\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with newline\"\nassert err_fmt([('x','key')], {'key':'y'}, 0, ' check') == '------------------------- DEBUG -------------------------\\nMine (prev) [key]:\\nx\\n\\nTheirs (prev) [key]:\\ny\\n\\nMine [key]:\\nx\\n\\nTheirs [key]:\\ny check\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with space\"\nassert err_fmt([('one','first'),('two','second')], {'first':'uno','second':'dos'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [first]:\\none\\n\\nTheirs (prev) [first]:\\nuno\\n\\nMine [second]:\\ntwo\\n\\nTheirs [second]:\\ndos\\n----------------------- END DEBUG -----------------------', \"test case failed: two element ix=1\"\nassert err_fmt([('line1\\nline2','A'),('out2','B')], {'A':'exp\\nOk','B':'good'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nline1\\nline2\\n\\nTheirs (prev) [A]:\\nexp\\nOk\\n\\nMine [B]:\\nout2\\n\\nTheirs [B]:\\ngood\\n----------------------- END DEBUG -----------------------', \"test case failed: multiline mine/gold\"\nassert err_fmt([('a','1'),('b','2'),('c','3'),('d','4')], {'1':'A','2':'B','3':'C','4':'D'}, 3, '\\n--error--') == '------------------------- DEBUG -------------------------\\nMine (prev) [3]:\\nc\\n\\nTheirs (prev) [3]:\\nC\\n\\nMine [4]:\\nd\\n\\nTheirs [4]:\\nD\\n--error--\\n----------------------- END DEBUG -----------------------', \"test case failed: last element with warn\"\nassert err_fmt([('123','abc')], {'abc':'xyz'}, 0, '\\n!') == '------------------------- DEBUG -------------------------\\nMine (prev) [abc]:\\n123\\n\\nTheirs (prev) [abc]:\\nxyz\\n\\nMine [abc]:\\n123\\n\\nTheirs [abc]:\\nxyz\\n!\\n----------------------- END DEBUG -----------------------', \"test case failed: newline warn on single element\""}
{"task_id": 304, "completion_id": 0, "passed": false, "result": "failed: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu: float=0.0, V: np.ndarray=None, fit_intercept: bool=True) -> list[float]:\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.concatenate([np.ones((X.shape[0], 1)), X], axis=1)\n    if V is None:\n        V_inv = np.identity(M)\n    elif isinstance(V, int):\n        raise ValueError('V cannot be an integer.')\n    else:\n        V_inv = np.diag(np.array(list(map(lambda x: 1 / x, V))))\n    inv_XTX = np.linalg.inv(X.T @ X)\n    sigma_squared = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = np.dot(sigma_squared, np.dot(V_inv, mu) + X.T @ y)\n    return [round(m, 4) for m in mu_b]\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0])) == [0.5, 1.6667], \"test case 1 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,5.0])) == [1.0, 1.6667], \"test case 2 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0])) == [0.8, 0.8], \"test case 3 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0]), fit_intercept=False) == [1.8667], \"test case 4 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,3.0]), V=[2,2]) == [1.2632, 0.9474], \"test case 5 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0]), mu=1.0) == [1.0, 1.0], \"test case 6 failed\"\nassert bayesian_posterior_mean(np.array([[2.0],[4.0],[6.0]]), np.array([1.0,2.0,3.0]), V=2, fit_intercept=False) == [0.4956], \"test case 7 failed\"\nassert bayesian_posterior_mean(np.array([[0.0],[1.0]]), np.array([1.0,2.0]), fit_intercept=False) == [1.0], \"test case 8 failed\"\nassert bayesian_posterior_mean(np.array([[0.0]]), np.array([0.0]), mu=10.0, fit_intercept=False) == [10.0], \"test case 9 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0],[4.0]]), np.array([1.0,2.0,3.0,4.0]), V=[1,1000]) == [0.0002, 0.9999], \"test case 10 failed\""}
{"task_id": 308, "completion_id": 0, "passed": false, "result": "failed: name 'mel_filterbank' is not defined", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\n\nfb = mel_filterbank(16, 6, 16000)\nassert (len(fb), len(fb[0])) == (6, 16//2 + 1), \"shape mismatch for mel_filterbank(16,6,16000)\"\nimport numpy as np\n\nfb = mel_filterbank(1024, 40, 22050)\nassert all(0.0 <= w <= 1.0 for row in fb for w in row), \"weights out of range in mel_filterbank(1024,40,22050)\"\nimport numpy as np\n\nfb = mel_filterbank(32, 10, 16000, min_freq=300, max_freq=6000)\nassert fb[0][0] == 0.0 and fb[-1][-1] == 0.0, \"edge bins should be zero for out-of-band frequencies\"\nimport numpy as np\n\nfb1 = mel_filterbank(512, 26, 16000)\nfb2 = mel_filterbank(512, 26, 16000)\nassert fb1 == fb2, \"function must be deterministic for identical parameters\"\nimport numpy as np\n\nfb = mel_filterbank(64, 5, 8000)\n# every filter must have non-zero values somewhere\nassert all(any(v > 0.0 for v in row) for row in fb), \"empty filter detected in mel_filterbank(64,5,8000)\"\nimport numpy as np\n\nfb = mel_filterbank(8, 3, 8000)\n# with normalization the maximum value must be below 1\nassert max(max(r) for r in fb) < 1.0, \"filters are not normalized when normalize=True\"\nimport numpy as np\n\nfb = mel_filterbank(128, 20, 44100)\nassert len({tuple(row) for row in fb}) == 20, \"filters must be distinct in mel_filterbank(128,20,44100)\""}
{"task_id": 312, "completion_id": 0, "passed": false, "result": "failed: failed: blackman_harris(5, True)", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    alpha = 0.35875\n    beta = 0.48829\n    gamma = 0.14128\n    delta = 0.01168\n    n = 0\n    bh_coeffs = []\n    while n < window_len:\n        cos_term = lambda t: math.cos(2 * math.pi * t / window_len)\n        if symmetric:\n            coeff = (alpha - delta * cos_term(n), beta - delta * cos_term(n), gamma - delta * cos_term(n))\n        else:\n            coeff = (alpha - delta * cos_term(n), beta - 2 * delta * cos_term(n), gamma - 3 * delta * cos_term(n))\n        bh_coeffs.extend(coeff)\n        n += 1\n    return [round(coef, 4) for coef in bh_coeffs[:window_len]]\nassert blackman_harris(5, True) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"failed: blackman_harris(5, True)\"\nassert blackman_harris(1, True) == [1.0], \"failed: blackman_harris(1, True)\"\nassert blackman_harris(0, True) == [], \"failed: blackman_harris(0, True)\"\nassert len(blackman_harris(128)) == 128, \"failed length: blackman_harris(128)\"\nassert blackman_harris(2, True)[0] == blackman_harris(2, True)[1], \"failed symmetry: blackman_harris(2, True)\"\nassert blackman_harris(10, True)[0] == blackman_harris(10, True)[-1], \"failed symmetry ends: blackman_harris(10, True)\""}
{"task_id": 313, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    if d < 0 or d >= len(gamma) or t < 0 or (t >= len(gamma[0])):\n        return None\n    sum_gamma = np.sum(gamma[d, :])\n    if sum_gamma == 0:\n        return math.log(float('inf'))\n    term_1 = math.log(gamma[d, t])\n    term_2 = math.log(math.gamma(sum_gamma))\n    psi_term_2 = math.psi(sum_gamma)\n    psi_sum = math.psi(term_2)\n    approx_value = term_1 - psi_term_2\n    exact_value = term_1 - psi_sum\n    diff = abs(approx_value - exact_value)\n    return round(approx_value, 4)\ngamma = [[1.0, 1.0], [1.0, 2.0]]\nassert expected_log_dirichlet([[1,1]],0,0) == -1.0, \"failed: gamma=[[1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[2,3]],0,1) == -0.5833, \"failed: gamma=[[2,3]], d=0, t=1\"\nassert expected_log_dirichlet([[4,5,6],[1,1,1]],0,2) == -0.9682, \"failed: gamma=[[4,5,6],[1,1,1]], d=0, t=2\"\nassert expected_log_dirichlet([[4,1,1]],0,0) == -0.45, \"failed: gamma=[[4,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[3,7]],0,1) == -0.379, \"failed: gamma=[[3,7]], d=0, t=1\"\nassert expected_log_dirichlet([[10,10,10]],0,2) == -1.1327, \"failed: gamma=[[10,10,10]], d=0, t=2\"\nassert expected_log_dirichlet([[8,1,1]],0,0) == -0.2361, \"failed: gamma=[[8,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[1,1,1,1]],0,3) == -1.8333, \"failed: gamma=[[1,1,1,1]], d=0, t=3\"\nassert expected_log_dirichlet([[1,2,1]],0,1) == -0.8333, \"failed: gamma=[[1,2,1]], d=0, t=1\"\nassert expected_log_dirichlet([[2,2,2,2,2]],0,2) == -1.829, \"failed: gamma=[[2,2,2,2,2]], d=0, t=2\""}
{"task_id": 317, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic two-element list, ix=1", "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_params = params[prev_ix]\n    debug_header = f'-------------------- DEBUG --------------------\\n'\n    debug_content = [f'Mine ({prev_params[1]}):\\t{prev_params[0]}\\n', f'Theirs ({prev_params[1]}):\\t{golds[prev_params[1]]}\\n\\n', f'Mine ({params[ix][1]}):\\t{params[ix][0]}\\n', f\"Theirs ({params[ix][1]}):\\t{(params[ix][1] if params[ix][1] in golds else '')}\\n\"]\n    debug_footer = '-------------------- END DEBUG --------------------'\n    return debug_header + '\\n'.join(debug_content) + '\\n' + debug_footer + '\\n' + warn_str\nassert err_fmt([(\"cat\",\"A\"),(\"dog\",\"B\")],{\"A\":\"feline\",\"B\":\"canine\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\ncat\\n\\nTheirs (prev) [A]:\\nfeline\\n\\nMine [B]:\\ndog\\n\\nTheirs [B]:\\ncanine\\n----------------------- END DEBUG -----------------------\", \"test case failed: basic two-element list, ix=1\"\nassert err_fmt([(\"hi\",\"g\")],{\"g\":\"hello\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [g]:\\nhi\\n\\nTheirs (prev) [g]:\\nhello\\n\\nMine [g]:\\nhi\\n\\nTheirs [g]:\\nhello\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},2,\" -- mismatch\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [L2]:\\nv2\\n\\nTheirs (prev) [L2]:\\nt2\\n\\nMine [L3]:\\nv3\\n\\nTheirs [L3]:\\nt3 -- mismatch\\n----------------------- END DEBUG -----------------------\", \"test case failed: three elements, last index\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nv1\\n\\nTheirs (prev) [L1]:\\nt1\\n\\nMine [L2]:\\nv2\\n\\nTheirs [L2]:\\nt2\\n----------------------- END DEBUG -----------------------\", \"test case failed: middle index\"\nassert err_fmt([(\"x\",\"X\"),(\"y\",\"Y\")],{\"X\":\"alpha\",\"Y\":\"beta\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [X]:\\nx\\n\\nTheirs (prev) [X]:\\nalpha\\n\\nMine [X]:\\nx\\n\\nTheirs [X]:\\nalpha\\n----------------------- END DEBUG -----------------------\", \"test case failed: duplicate first idx\"\nassert err_fmt([(\"p\",\"a\"),(\"q\",\"b\")],{\"a\":\"A\",\"b\":\"B\"},1,\" !!!\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [a]:\\np\\n\\nTheirs (prev) [a]:\\nA\\n\\nMine [b]:\\nq\\n\\nTheirs [b]:\\nB !!!\\n----------------------- END DEBUG -----------------------\", \"test case failed: warn_str appended\"\nassert err_fmt([(\"first\",\"1\"),(\"second\",\"2\"),(\"third\",\"3\")],{\"1\":\"I\",\"2\":\"II\",\"3\":\"III\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [1]:\\nfirst\\n\\nTheirs (prev) [1]:\\nI\\n\\nMine [1]:\\nfirst\\n\\nTheirs [1]:\\nI\\n----------------------- END DEBUG -----------------------\", \"test case failed: multi-element, ix=0\"\nassert err_fmt([(\"A\",\"A\"),(\"B\",\"B\"),(\"C\",\"C\"),(\"D\",\"D\")],{\"A\":\"a\",\"B\":\"b\",\"C\":\"c\",\"D\":\"d\"},3) == \"------------------------- DEBUG -------------------------\\nMine (prev) [C]:\\nC\\n\\nTheirs (prev) [C]:\\nc\\n\\nMine [D]:\\nD\\n\\nTheirs [D]:\\nd\\n----------------------- END DEBUG -----------------------\", \"test case failed: four elements, last index\"\nassert err_fmt([(\"only\",\"one\")],{\"one\":\"1\"},0,\" <end>\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [one]:\\nonly\\n\\nTheirs (prev) [one]:\\n1\\n\\nMine [one]:\\nonly\\n\\nTheirs [one]:\\n1 <end>\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element with warn_str\""}
{"task_id": 318, "completion_id": 0, "passed": false, "result": "failed: name 'i' is not defined", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    alpha_init = np.zeros(n_estimators)\n    w = np.ones(y_train.shape[0]) / y_train.shape[0]\n    h = []\n    for m in range(n_estimators):\n        h.append(np.sign(np.dot(X_train[:, 1:] - np.mean(X_train[:, 1:], axis=0), [2.0] + [-np.cos(2 * np.pi * (i / float(m)))])))\n        e_m = (y_train != h[m]).astype(float).mean()\n        epsilon_m = 2 * (e_m - 0.5)\n        alpha_m = epsilon_m / (2 * math.log(1.0 / epsilon_m))\n        w *= np.exp(-alpha_m * y_train * h[m])\n        w /= w.sum()\n    F = np.sign(np.sum(alpha_init * np.array(h), axis=0))\n    return F.tolist()\nassert adaboost_predict(np.array([[-2],[-1],[-0.5],[0.5],[1],[2]]), np.array([-1,-1,-1,1,1,1]), np.array([[-1.5],[-0.3],[1.5]]), 5) == [-1,-1,1], \"failed on simple 1-D split\"\nassert adaboost_predict(np.array([[1,1],[1,2],[1,3],[-1,1],[-1,2],[-1,3]]), np.array([1,1,1,-1,-1,-1]), np.array([[1,2],[-1,2],[0,1]]), 5) == [1,-1,-1], \"failed on horizontal vs vertical split\"\nassert adaboost_predict(np.array([[0,5],[0,6],[0,-5],[0,-6]]), np.array([-1,-1,1,1]), np.array([[0,10],[0,-10]]), 5) == [-1,1], \"failed on feature-2 split\"\nassert adaboost_predict(np.array([[-3],[ -2],[-1],[ 1],[ 2],[ 3]]), np.array([-1,-1,-1,1,1,1]), np.array([[-4],[-0.2],[0.2],[4]]), 3) == [-1,-1,1,1], \"failed on wider range\"\nassert adaboost_predict(np.array([[2,2],[3,3],[-2,-2],[-3,-3]]), np.array([1,1,-1,-1]), np.array([[1.5,1.5],[-1.5,-1.5]]), 10) == [1,-1], \"failed on diagonal clusters\"\nassert adaboost_predict(np.array([[1,0],[2,0],[3,0],[-1,0],[-2,0],[-3,0]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.5,0],[-0.5,0]]), 4) == [1,-1], \"failed on feature-0 split\"\nassert adaboost_predict(np.array([[0,1],[0,2],[0,3],[0,-1],[0,-2],[0,-3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0.5],[0,-0.5]]), 4) == [1,-1], \"failed on feature-1 split\"\nassert adaboost_predict(np.array([[1],[2],[3],[4],[-1],[-2],[-3],[-4]]), np.array([1,1,1,1,-1,-1,-1,-1]), np.array([[5],[-5]]), 6) == [1,-1], \"failed on extended 1-D\"\nassert adaboost_predict(np.array([[1,2],[2,3],[3,4],[-1,-2],[-2,-3],[-3,-4]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0],[4,5],[-4,-5]]), 6) == [-1,1,-1], \"failed on 2-D linear split\"\nassert adaboost_predict(np.array([[0.1],[0.2],[0.3],[-0.1],[-0.2],[-0.3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.15],[-0.15]]), 5) == [1,-1], \"failed on small decimal values\""}
{"task_id": 329, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef dft_bins(N: int, fs: float=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : float, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    f_spc = fs / N\n    if positive_only:\n        min_index = 0\n        max_index = N // 2 - 1\n    else:\n        min_index = 0\n        max_index = N - 1\n    freqs = np.fft.fftfreq(max_index + 1, d=1 / f_spc).astype(float)\n    freqs = round(freqs, 4)\n    return freqs.tolist()\nassert dft_bins(8, 8000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(8, 8000, True)\"\nassert dft_bins(8, 8000, False) == [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(8, 8000, False)\"\nassert dft_bins(5, 10000, True) == [0.0, 2000.0, 4000.0], \"test case failed: dft_bins(5, 10000, True)\"\nassert dft_bins(5, 10000, False) == [0.0, 2000.0, 4000.0, -4000.0, -2000.0], \"test case failed: dft_bins(5, 10000, False)\"\nassert dft_bins(1, 48000, True) == [0.0], \"test case failed: dft_bins(1, 48000, True)\"\nassert dft_bins(2, 48000, False) == [0.0, -24000.0], \"test case failed: dft_bins(2, 48000, False)\"\nassert dft_bins(16, 16000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0], \"test case failed: dft_bins(16, 16000, True)\"\nassert dft_bins(16, 16000, False) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, -8000.0, -7000.0, -6000.0, -5000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(16, 16000, False)\"\nassert dft_bins(9, 9000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(9, 9000, True)\"\nassert dft_bins(3, 3000, False) == [0.0, 1000.0, -1000.0], \"test case failed: dft_bins(3, 3000, False)\""}
{"task_id": 331, "completion_id": 0, "passed": false, "result": "failed: Input arrays do not match expected dimensions.", "solution": "import numpy as np\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"\n    Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,)\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators)\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary mask indicating whether a prediction was obtained \n        from an out-of-bag tree (True/1) or not (False/0)\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the \n        OOB estimate cannot be computed.\n    \"\"\"\n    if len(predictions) != len(oob_mask) or len(oob_mask[0]) != len(y_true):\n        raise ValueError('Input arrays do not match expected dimensions.')\n    oob_indices = [np.flatnonzero(mask).tolist() for mask in oob_mask]\n    total_predictions = []\n    for (i, index_list) in enumerate(oob_indices):\n        if not index_list:\n            continue\n        single_tree_predictions = np.array([preds[i] for preds in predictions]).reshape(-1)[index_list]\n        avg_prediction = np.mean(single_tree_predictions)\n        mse = ((avg_prediction - y_true[index_list]) ** 2).mean()\n        total_predictions.append(mse)\n    if not total_predictions:\n        return -1\n    else:\n        return round(np.mean(total_predictions), 4)\nassert oob_mse([3, 5, 2, 7], [[2.5, 3.2], [4.8, 5.1], [2.1, 2.5], [6.5, 7.2]], [[True, False], [False, True], [True, True], [False, False]]) == 0.1167, \"test case 1 failed\"\nassert oob_mse([1, 2, 3], [[1.1, 0.9, 1.05], [2.5, 2.0, 2.0], [3.1, 3.2, 2.9]], [[True, False, True], [False, False, True], [True, True, True]]) == 0.0034, \"test case 2 failed\"\nassert oob_mse([4, 5], [[4.1, 3.9], [5.2, 4.8]], [[True, True], [True, True]]) == 0.0, \"test case 3 failed\"\nassert oob_mse([10, 20, 30], [[9, 11], [18, 19], [31, 29]], [[False, True], [False, False], [False, False]]) == 1.0, \"test case 4 failed\"\nassert oob_mse([0, 1, 2, 3, 4], [[0.2, -0.1, 0.1], [0.8, 1.2, 1.0], [1.9, 2.2, 2.1], [2.5, 3.5, 3.1], [3.9, 4.2, 4.0]], [[True, True, True], [False, True, False], [True, False, False], [False, False, False], [False, True, True]]) == 0.0161, \"test case 5 failed\"\nassert oob_mse([-1, -2], [[-0.8, -1.2], [-2.1, -1.9]], [[1, 0], [0, 1]]) == 0.025, \"test case 6 failed\"\nassert oob_mse([5], [[4.9, 5.1, 5.0]], [[0, 0, 1]]) == 0.0, \"test case 7 failed\"\nassert oob_mse([10, 20, 30, 40], [[10.1, 9.8, 10.3, 10.0], [19.5, 20.2, 21.0, 19.9], [31.5, 29.0, 30.2, 30.0], [39.8, 40.3, 40.2, 39.9]], [[1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]) == 0.3617, \"test case 8 failed\"\nassert oob_mse([1, 2], [[1.1, 0.9], [2.1, 1.8]], [[0, 0], [0, 0]]) == -1.0, \"test case 9 failed\"\nassert oob_mse([0, 0, 0], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]]) == 0.0, \"test case 10 failed\""}
{"task_id": 332, "completion_id": 0, "passed": false, "result": "failed: TC1 failed", "solution": "from collections import Counter\nfrom collections import Counter\ndef compute_item_support(transactions):\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    return {item: count / len(transactions) for (item, count) in item_counts.items()}\ndef get_global_ordering(items):\n    return sorted(items, key=lambda x: (-compute_item_support([x]), x))\ndef build_fp_tree(transactions, min_support):\n    item_supports = compute_item_support(transactions)\n    frequent_items = {item: support for (item, support) in item_supports.items() if support >= min_support}\n    ordered_items = get_global_ordering(frequent_items)\n    root = {'support': 0, 'children': {}}\n\n    def add_to_tree(node, transaction):\n        current_node = node\n        for item in transaction:\n            next_level_nodes = current_node['children'].get(item, {'support': 0})\n            current_node['support'] += next_level_nodes['support']\n            if 'children' not in next_level_nodes:\n                next_level_nodes['children'] = {}\n            next_node_key = f\"{next_level_nodes['support']}{item}\" if 'support' in next_level_nodes else item\n            next_level_nodes[next_node_key] = {'support': 1, 'children': {}}\n            current_node = next_level_nodes[next_node_key]\n        return current_node\n    for transaction in transactions:\n        add_to_tree(root, transaction)\n    return root\ntransactions = [['apple', 'banana'], ['banana', 'orange'], ['grape', 'apple'], ['banana']]\nmin_support = 2\nassert build_fp_tree([['a','b','c'], ['a','b'], ['a','c']], 2) == {'support': 0, 'children': {'a': {'support': 3, 'children': {'b': {'support': 2, 'children': {'c': {'support': 1, 'children': {}}}}, 'c': {'support': 1, 'children': {}}}}}}, \"TC1 failed\"\nassert build_fp_tree([['a','b'], ['b','c']], 3) == {'support': 0, 'children': {}}, \"TC2 failed\"\nassert build_fp_tree([['x','y','z']], 1) == {'support': 0, 'children': {'x': {'support': 1, 'children': {'y': {'support': 1, 'children': {'z': {'support': 1, 'children': {}}}}}}}}, \"TC3 failed\"\nassert build_fp_tree([['1','2'], ['2','3'], ['2','4']], 2) == {'support': 0, 'children': {'2': {'support': 3, 'children': {}}}}, \"TC4 failed\"\nassert build_fp_tree([['a'], ['b']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}}}, \"TC5 failed\"\nassert build_fp_tree([['d','c','b','a'], ['a','b','c','d']], 1) == {'support': 0, 'children': {'a': {'support': 2, 'children': {'b': {'support': 2, 'children': {'c': {'support': 2, 'children': {'d': {'support': 2, 'children': {}}}}}}}}}}, \"TC6 failed\"\nassert build_fp_tree([['a','a','b'], ['a','b','b','a'], ['b','b','c']], 2) == {'support': 0, 'children': {'b': {'support': 3, 'children': {'a': {'support': 2, 'children': {}}}}}}, \"TC7 failed\"\nassert build_fp_tree([['x','y']] * 4, 2) == {'support': 0, 'children': {'x': {'support': 4, 'children': {'y': {'support': 4, 'children': {}}}}}}, \"TC8 failed\"\nassert build_fp_tree([[], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}}}, \"TC9 failed\"\nassert build_fp_tree([['c'], ['b'], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}, 'c': {'support': 1, 'children': {}}}}, \"TC10 failed\""}
{"task_id": 336, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union\ndef linear_kernel(X: List[List[Union[int, float]]] | np.ndarray, Y: List[List[Union[int, float]]] | np.ndarray | None=None, c0: int | float=0) -> List[List[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if isinstance(Y, list):\n        Y = np.array(Y)\n    if not X.shape[1] == Y.shape[1]:\n        return -1\n    X_array = np.array(X)\n    Y_array = np.array(Y)\n    K = np.dot(X_array, Y_array.T) + c0\n    K_rounded = [list(map(lambda z: round(z, 4), row)) for row in K]\n    return K_rounded\nX = [[1, 2], [3, 4]]\nY = [[-5, -6], [-7, -8]]\nK = linear_kernel(X, Y, c0=3)\nassert linear_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 0) == [[50.0], [122.0]], \"failed on basic example\"\nassert linear_kernel([[1, 2, 3]], None, 1) == [[15.0]], \"failed when Y is None\"\nassert linear_kernel([[0, 0], [0, 0]], [[1, 2], [3, 4]], 0) == [[0.0, 0.0], [0.0, 0.0]], \"failed on zero vectors\"\nassert linear_kernel([[1, 2]], [[3, 4, 5]], 0) == -1, \"failed on mismatched dimensions\"\nassert linear_kernel([[1, 0], [0, 1]], None, 0) == [[1.0, 0.0], [0.0, 1.0]], \"failed on identity check\"\nassert linear_kernel([[-1, -2], [3, 4]], [[5, 6], [-7, -8]], 2) == [[-15.0, 25.0], [41.0, -51.0]], \"failed on negative and positive mix\"\nimport numpy as np\narrX = np.array([[1.5, 2.5]])\narrY = np.array([[3.5, 4.5]])\nassert linear_kernel(arrX, arrY, 0.5) == [[17.0]], \"failed on numpy array input\"\nassert linear_kernel([], [], 0) == [], \"failed on empty input\"\nassert linear_kernel([[1,2],[3,4],[5,6]], None, 0)[0][1] == 11.0, \"failed on symmetric property\"\nassert linear_kernel([[1,2,3]], [[4,5]], 0) == -1, \"failed on second mismatched dimension check\""}
{"task_id": 340, "completion_id": 0, "passed": false, "result": "failed: can only convert an array of size 1 to a Python scalar", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"\n    Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter starting at 1.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) as\n        python lists, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    theta_prime = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return ([round(theta_prime.item(), 8)], [round(m_t.item(), 8)], [round(v_t.item(), 8)])\nparam = np.array([1.0, 2.0, 3.0])\ngrad = np.array([-1.0, 0.0, 1.0])\nassert np.allclose(adam_update(np.array([0.1, -0.2]), np.array([0.01, -0.01]), 1, np.array([0., 0.]), np.array([0., 0.]))[0], [0.099, -0.199]), \"test case failed: basic 2-D example\"\nassert np.allclose(adam_update(np.array([0.099, -0.199]), np.array([0.02, -0.02]), 2, np.array([0.001, -0.001]), np.array([1e-07, 1e-07]))[0], [0.09803483, -0.19803483]), \"test case failed: second step parameters\"\nassert np.allclose(adam_update(1.0, 0.1, 1, 0.0, 0.0)[0], [0.999]), \"test case failed: scalar positive grad\"\nassert np.allclose(adam_update(np.array([0.5, -1.2, 0.0]), np.array([-0.05, 0.03, 0.0]), 1, np.zeros(3), np.zeros(3))[0], [0.501, -1.201, 0.0]), \"test case failed: mixed sign 3-D\"\nassert np.allclose(adam_update(1.5, -0.3, 1, 0.0, 0.0)[0], [1.501]), \"test case failed: scalar negative grad\"\nassert np.allclose(adam_update(np.array([[0.1, 0.2], [0.3, 0.4]]), np.zeros((2, 2)), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.1, 0.2], [0.3, 0.4]]), \"test case failed: zero grad param change\"\nassert np.allclose(adam_update(0.999, 0.1, 2, np.array([0.01]), np.array([1e-05]))[0], [0.998]), \"test case failed: scalar step 2\"\nassert np.allclose(adam_update(0.2, 0.05, 100, 0.0, 0.0)[0], [0.1990242]), \"test case failed: large t\"\nassert np.allclose(adam_update(np.array([0.2, 0.4]), np.array([0.05, -0.05]), 1, np.zeros(2), np.zeros(2))[0], [0.199, 0.401]), \"test case failed: opposite grads 2-D\"\nassert np.allclose(adam_update(np.array([[1.0, -1.0], [-1.0, 1.0]]), np.full((2, 2), 0.1), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.999, -1.001], [-1.001, 0.999]]), \"test case failed: matrix param\""}
{"task_id": 343, "completion_id": 0, "passed": false, "result": "failed: invalid index to scalar variable.", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float], retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\"\"\"\n    rewards = np.array(rewards)\n    retain_num = int(np.floor(retain_prcnt * len(theta_samples)))\n    if retain_num <= 0 or retain_num > len(theta_samples):\n        raise ValueError('retain_prcnt * N must be between 1 and the number of samples.')\n    sorted_indices = np.argsort(-rewards)[:retain_num]\n    sorted_theta_samples = theta_samples[sorted_indices]\n    mean_rewards = np.mean(sorted_theta_samples, axis=0)\n    variances = [np.var(sorted_theta_samples[:, i])[0][0] for i in range(len(sorted_theta_samples[0]))]\n    mean_rewards = [round(r, 4) for r in mean_rewards]\n    variances = [round(v, 4) for v in variances]\n    return (mean_rewards, variances)\nassert cross_entropy_update(np.array([[1,2],[3,4],[5,6],[7,8],[9,10]]),[10,20,30,40,50],0.4) == ([8.0,9.0],[1.0,1.0]), \"failed on basic 2D example\"\nassert cross_entropy_update(np.array([[0,0],[1,1],[2,2],[3,3]]),[0.1,0.2,0.9,0.5],0.5) == ([2.5,2.5],[0.25,0.25]), \"failed on half retain\"\nassert cross_entropy_update(np.array([[1,1,1],[2,2,2],[3,3,3]]),[3,1,2],0.33) == ([1.0,1.0,1.0],[0.0,0.0,0.0]), \"failed when retaining single best sample\"\nassert cross_entropy_update(np.array([[4,5],[6,7]]),[7,2],1.0) == ([5.0,6.0],[1.0,1.0]), \"failed when retaining all samples\"\nassert cross_entropy_update(np.array([[1,2],[2,3],[3,4],[4,5],[5,6]]),[5,4,3,2,1],0.2)==([1.0,2.0],[0.0,0.0]), \"failed retain 20%\"\nassert cross_entropy_update(np.array([[2],[4],[6],[8]]),[1,2,3,4],0.5)==([7.0],[1.0]), \"failed single dimension example\"\nassert cross_entropy_update(np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]),[12,11,10,9],0.5)==([2.5,3.5,4.5],[2.25,2.25,2.25]), \"failed 3D half retain\"\nassert cross_entropy_update(np.array([[5,5],[5,5],[5,5]]),[1,2,3],0.34)==([5.0,5.0],[0.0,0.0]), \"failed identical theta values\""}
{"task_id": 353, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    if not labels:\n        return 0.0\n    labels = np.array(labels)\n    label_counts = Counter(labels)\n    probs = {label: count / len(labels) for (label, count) in label_counts.items()}\n    entropy_value = sum([-probs[label] * math.log2(probs[label]) for label in probs])\n    return round(entropy_value, 5)\nassert entropy([0, 0, 1, 1, 1]) == 0.97095, \"failed: entropy([0, 0, 1, 1, 1])\"\nassert entropy([1, 1, 1, 1]) == 0.0, \"failed: entropy identical labels\"\nassert entropy([]) == 0.0, \"failed: entropy empty input\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy(np.array([2, 2, 2, 3])) == 0.81128, \"failed: entropy numpy array\"\nassert entropy(['a', 'b', 'c', 'd']) == 2.0, \"failed: entropy([a,b,c,d])\"\nassert entropy([5]) == 0.0, \"failed: single element\"\nassert entropy([0,0,0,1,1,2,2,2,2]) == 1.53049, \"failed: multi-class\"\nassert entropy(range(8)) == 3.0, \"failed: entropy range(8)\""}
{"task_id": 354, "completion_id": 0, "passed": false, "result": "failed: can only concatenate tuple (not \"list\") to tuple", "solution": "import numpy as np\nimport numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"\n    Performs a 2-D convolution (cross-correlation) on a batch of images using im2col and GEMM strategies.\n    \n    Parameters:\n        X (np.ndarray): Input batch of images with shape (n_ex, in_rows, in_cols, in_channels)\n        W (np.ndarray): Kernel bank with shape (out_rows, out_cols, in_channels, num_filters)\n        stride (int): Stride of the convolution operation\n        pad (int, tuple, str): Padding specification (integer, tuple, or 'same')\n        dilation (int, optional): Dilation rate of the convolution\n    \n    Returns:\n        list: The resulting convolved image data as a nested list\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_channels) = X.shape\n    (out_rows, out_cols, _, num_filters) = W.shape\n    if type(pad) == int:\n        pad_rows = pad\n        pad_cols = pad\n    elif type(pad) == tuple:\n        (pad_rows, pad_cols) = pad\n    elif isinstance(pad, str) and pad.lower() != 'same':\n        raise ValueError('Invalid padding specification')\n    if pad_rows % 2 == 0:\n        first_pad = [0, 0, 0, 0]\n    else:\n        first_pad = [(pad_rows - 1) // 2, (pad_rows - 1) // 2, 0, 0]\n    second_pad = [first_pad[2], first_pad[3], pad_cols - 1, pad_cols - 1]\n    padded_X = np.pad(X, ((0,), (0,) * 3 + first_pad), mode='constant', constant_values=0)\n    col_indices = []\n    row_indices = range(padded_X.shape[1] - out_rows + 1, padded_X.shape[1])\n    for i in row_indices:\n        col_indices.append(i)\n    col_indices = np.array(col_indices).reshape(-1, 1).T\n\n    def reshape_3d_to_2d(arr):\n        return arr.reshape(arr.shape[0], -1)\n    k_ind = np.tile(np.arange(out_cols), out_rows)[:, None] + np.expand_dims(col_indices, axis=-1)\n    x_ind = np.tile(np.expand_dims(row_indices, 1), (k_ind.shape[0], 1)).flatten()\n    y_ind = np.repeat(k_ind.flatten(), in_cols).reshape((-1, 1))\n    w_ind = np.repeat(np.expand_dims(np.arange(W.shape[-1]), 0), k_ind.shape[0]).flatten().reshape((1, -1))\n    res_col = np.einsum('ijkl,jlk->il', padded_X, W)\n    res_shape = (n_ex, out_rows, out_cols, num_filters)\n    res = np.reshape(res_col, res_shape)\n    return res.tolist()\nX = np.random.rand(64, 16, 16, 3)\nW = np.random.rand(8, 8, 3, 1)\nassert conv2D(np.arange(1, 10, dtype=float).reshape(1,3,3,1), np.array([[[[1.]],[[0.]]],[[[0.]],[[-1.]]]]), 1, 0) == [[[[-4.0], [-4.0]], [[-4.0], [-4.0]]]], \"basic 3\u00d73 no-pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, \"same\") == [[[ [1.0], [2.0] ], [ [3.0], [4.0] ]]], \"same pad identity\"\nassert conv2D(np.arange(1,17,dtype=float).reshape(1,4,4,1), np.ones((2,2,1,1)), 2, 0) == [[[ [14.0], [22.0] ], [ [46.0], [54.0] ]]], \"stride 2\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.concatenate([np.ones((1,1,1,1)), -np.ones((1,1,1,1))], axis=3), 1, 0) == [[[[1.0,-1.0],[2.0,-2.0]],[[3.0,-3.0],[4.0,-4.0]]]], \"multi-out ch\"\nassert conv2D(np.array([[[[1.,10.],[2.,20.]],[[3.,30.],[4.,40.]]]]), np.array([[[[1.],[1.]]]]), 1, 0) == [[[ [11.0], [22.0] ], [ [33.0], [44.0] ]]], \"multi-in ch\"\nassert conv2D(np.array([[[[7.]]]]), np.ones((1,1,1,1)), 1, (1,1)) == [[[[0.0],[0.0],[0.0]],[[0.0],[7.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"2-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, (0,1,0,1)) == [[[[1.0],[2.0],[0.0]],[[3.0],[4.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"4-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]],[[[5.],[6.]],[[7.],[8.]]]]), np.full((1,1,1,1),2.), 1, 0) == [[[[2.0],[4.0]],[[6.0],[8.0]]],[[[10.0],[12.0]],[[14.0],[16.0]]]], \"batching\"\nassert conv2D(np.full((1,2,2,1),5.), np.zeros((1,1,1,1)), 1, 0) == [[[ [0.0], [0.0] ], [ [0.0], [0.0] ]]], \"zero kernel\""}
{"task_id": 355, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 1)", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, _) = np.linalg.svd(centered_data)\n        principal_directions = U[:, :n_components]\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data.T, rowvar=False, ddof=1)\n        (evals, evecs) = np.linalg.eig(cov_matrix)\n        sorted_evecs = evecs[np.argsort(evals)[::-1], :]\n        principal_directions = sorted_evecs[:, :n_components]\n    for i in range(principal_directions.shape[1]):\n        if np.any(principal_directions[:, i] < 0):\n            principal_directions[:, i] *= -1\n            principal_directions[-1:, :] *= -1\n    scores = principal_directions @ centered_data\n    explained_variance_ratio = np.sum(np.square(scores, axis=0)) / np.sum(np.square(centered_data, axis=0))\n    explained_variance_ratio = [round(ratio, 4) for ratio in explained_variance_ratio]\n    return [[[round(score[i], 4) for i in range(len(row))] for row in scores], explained_variance_ratio]\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: centred diagonal data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 svd\"\nassert pca_transform(np.array([[2, 2], [4, 4], [6, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: scaled diagonal \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [1, 1], [1, 2]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: variation along second axis \u2013 svd\"\nassert pca_transform(np.array([[1], [2], [3], [4]]), 1) == ([[-1.5], [-0.5], [0.5], [1.5]], [1.0]), \"failed: one-dimensional data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1, solver=\"eigen\") == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 eigen\"\nassert pca_transform(np.array([[1, 2], [1, 4]]), 1, solver=\"eigen\") == ([[-1.0], [1.0]], [1.0]), \"failed: two samples \u2013 eigen\"\nassert pca_transform(np.array([[0, 0, 1], [0, 0, 2], [0, 0, 3]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: third axis variation \u2013 svd\"\nassert pca_transform(np.array([[1, 2], [2, 4], [3, 6], [4, 8]]), 1) == ([[-3.3541], [-1.118 ], [1.118 ], [3.3541]], [1.0]), \"failed: perfectly collinear \u2013 svd\""}
{"task_id": 356, "completion_id": 0, "passed": false, "result": "failed: name 'Leaf' is not defined", "solution": "\nimport numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if not isinstance(leaf.value, (list, tuple)):\n        raise TypeError(\"Leaf 'value' must be a list or tuple for regression\")\n    if len(leaf.value) == 1 and isinstance(leaf.value[0], float):\n        raise ValueError('Regression leaf contains only one element and is a float, which is ambiguous')\n    if classifier:\n        max_index = np.argmax(np.array(leaf.value))\n        return max_index\n    else:\n        return leaf.value\nassert leaf_predict(Leaf([0.25, 0.55, 0.20]), True) == 1, \"failed on basic classification example\"\nassert leaf_predict(Leaf([0.4, 0.4, 0.2]), True) == 0, \"failed on tie-breaking (should pick smaller index)\"\nassert leaf_predict(Leaf([1.0]), True) == 0, \"failed when only one class present\"\nassert abs(leaf_predict(Leaf(3.7), False) - 3.7) < 1e-9, \"failed on basic regression example\"\nassert leaf_predict(Leaf(-2), False) == -2, \"failed on negative regression value\"\nassert leaf_predict(Leaf([0, 0, 1]), True) == 2, \"failed when max is last element\"\nassert leaf_predict(Leaf([0.33, 0.33, 0.34]), True) == 2, \"failed on close probabilities\"\nassert leaf_predict(Leaf(0), False) == 0, \"failed on zero regression value\"\nassert leaf_predict(Leaf([0.9, 0.1]), True) == 0, \"failed on two-class classification\"\nassert leaf_predict(Leaf([0.1, 0.2, 0.2, 0.5]), True) == 3, \"failed on multi-class classification\""}
{"task_id": 357, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    assert len(data.shape) == 2, 'Data must be a 2-dimensional numpy array.'\n    assert K > 0, 'Number of clusters must be greater than zero.'\n    centroids = data[:K]\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(K)]\n        for point in data:\n            distances = [(np.linalg.norm(point - c), i) for (i, c) in enumerate(centroids)]\n            (_, index) = min(distances)\n            clusters[index].append(point)\n        updated_centroids = []\n        for cluster in clusters:\n            if cluster:\n                updated_centroids.append(np.mean(cluster, axis=0))\n            else:\n                updated_centroids.append(centroids[0])\n        changed = False\n        for (old, new) in zip(centroids, updated_centroids):\n            if not np.allclose(old, new, atol=1e-06):\n                changed = True\n                break\n        if not changed:\n            print(f'Converged after {len(clusters)} iterations.')\n            break\n        centroids = updated_centroids\n    sorted_centroids = [[round(c[i], 4) for i in range(len(c))] for c in centroids]\n    sorted_centroids.sort()\n    return sorted_centroids\nassert kmeans(np.array([[1,1],[1,2],[2,1],[8,8],[9,8],[8,9]]),2)==[[1.3333,1.3333],[8.3333,8.3333]],\"failed on separated two-cluster example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),1)==[[2.0,2.0]],\"failed on single-cluster mean\"\nassert kmeans(np.array([[0,0],[1,0],[0,1],[1,1]]),2)==[[0.0,0.5],[1.0,0.5]],\"failed on square dataset\"\nassert kmeans(np.array([[1,0],[0,1],[-1,0],[0,-1]]),2)==[[-0.5,0.5],[0.5,-0.5]],\"failed on cross dataset\"\nassert kmeans(np.array([[2,2],[2,4],[4,2],[4,4],[10,10]]),2)==[[3.0,3.0],[10.0,10.0]],\"failed on distant outlier dataset\"\nassert kmeans(np.array([[0,0],[1,1]]),2)==[[0.0,0.0],[1.0,1.0]],\"failed on two-point two-cluster dataset\"\nassert kmeans(np.array([[0,0],[0,1],[1,0]]),3)==[[0.0,0.0],[0.0,1.0],[1.0,0.0]],\"failed on three-point three-cluster dataset\"\nassert kmeans(np.array([[1],[2],[3]]),2)==[[1.0],[2.5]],\"failed on one-dimensional dataset\"\nassert kmeans(np.array([[3,3],[4,3],[3,4],[4,4]]),2)==[[3.0,3.5],[4.0,3.5]],\"failed on 2x2 square dataset\"\nassert kmeans(np.array([[0,0,0],[0,0,1],[0,1,0],[1,0,0],[9,9,9],[9,9,8],[9,8,9],[8,9,9]]),2)==[[0.25,0.25,0.25],[8.75,8.75,8.75]],\"failed on 3-D dataset\""}
{"task_id": 362, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    arr = np.array(data)\n    if np.any(arr.sum(axis=1) == 0):\n        return -1\n    scaled_arr = arr / arr.sum(axis=1, keepdims=True)\n    normalized_arr = np.round(scaled_arr, 4).tolist()\n    return normalized_arr\nassert row_stochastic_matrix([[1, 2, 3], [4, 5, 6]]) == [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]], \"failed: basic 3x3 matrix\"\nassert row_stochastic_matrix([[0, 0], [1, 1]]) == -1, \"failed: row with zero sum should return -1\"\nassert row_stochastic_matrix([[2, 2], [3, 1]]) == [[0.5, 0.5], [0.75, 0.25]], \"failed: 2x2 normalisation\"\nassert row_stochastic_matrix([[0.1, 0.2, 0.7]]) == [[0.1, 0.2, 0.7]], \"failed: single row unchanged\"\nassert row_stochastic_matrix([[10, 20, 30, 40], [5, 5, 5, 5]]) == [[0.1, 0.2, 0.3, 0.4], [0.25, 0.25, 0.25, 0.25]], \"failed: 4-column case\"\nassert row_stochastic_matrix([[9]]) == [[1.0]], \"failed: 1x1 matrix\"\nassert row_stochastic_matrix([[3, 5, 7], [0, 0, 0]]) == -1, \"failed: second row zero sum\"\nassert row_stochastic_matrix(np.array([[1, 1, 2], [2, 3, 5]])) == [[0.25, 0.25, 0.5], [0.2, 0.3, 0.5]], \"failed: numpy array input\"\nassert row_stochastic_matrix([[4, 0], [0, 8]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: rows with zeros\"\nassert row_stochastic_matrix([[1e-4, 1e-4], [2e-4, 3e-4]]) == [[0.5, 0.5], [0.4, 0.6]], \"failed: small numbers normalisation\""}
{"task_id": 363, "completion_id": 0, "passed": false, "result": "failed: 'type' object is not subscriptable", "solution": "\nfrom typing import *\nimport numpy as np\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: Tuple[float, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Env:\n    \"\"\"Minimal environment class for testing.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    This implementation checks the type of each space directly without using the\n    actual instances of the spaces from the environment. It assumes that the\n    environment exposes `action_space` and `observation_space` which represent\n    the action and observation spaces, respectively.\n\n    Args:\n        env: The environment object to test.\n        tuple_action: Indicates whether the action space is composite or not.\n        tuple_obs: Indicates whether the observation space is composite or not.\n\n    Returns:\n        A tuple of booleans indicating whether the action and observation spaces are continuous.\n    \"\"\"\n    action_space = env.action_space\n    observation_space = env.observation_space\n    cont_action = isinstance(action_space, Box) if tuple_action else all((isinstance(s, Box) for s in action_space.spaces))\n    cont_obs = isinstance(observation_space, Box) if tuple_obs else all((isinstance(s, Box) for s in observation_space.spaces))\n    return (cont_action, cont_obs)\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Box(-1.0, 1.0, (3,))), False, False) == (True, True), \"TC1 failed\"\nassert is_continuous(Env(Discrete(4), Discrete(4)), False, False) == (False, False), \"TC2 failed\"\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Discrete(4)), False, False) == (True, False), \"TC3 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Box(-1.0,1.0,(3,))]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC4 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Discrete(5)]), Box(-1.0,1.0,(3,))), True, False) == (False, True), \"TC5 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Box(-1.0,1.0,(3,))})), False, True) == (True, True), \"TC6 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Discrete(2)})), False, True) == (True, False), \"TC7 failed\"\nassert is_continuous(Env(Tuple([]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC8 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)) for _ in range(10)]), Discrete(5)), True, False) == (True, False), \"TC9 failed\"\nassert is_continuous(Env(Discrete(2), Box(-1.0,1.0,(3,))), False, False) == (False, True), \"TC10 failed\""}
{"task_id": 369, "completion_id": 0, "passed": false, "result": "failed: test case failed: single-tree regression", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    running_prediction = np.zeros_like(updates[0])\n    for u in updates:\n        if not regression:\n            running_prediction -= learning_rate * u / len(updates)\n        else:\n            running_prediction -= learning_rate * u\n    if regression:\n        probabilities = np.exp(running_prediction) / np.sum(np.exp(running_prediction), axis=0)\n        return np.argmax(probabilities, axis=0)\n    else:\n        return running_prediction\nassert gradient_boosting_predict([np.array([1.0, -2.0, 0.5])], 0.1, True).tolist() == [-0.1, 0.2, -0.05], \"test case failed: single-tree regression\"\nassert gradient_boosting_predict([np.array([1, 2, 3]), np.array([0.5, -0.5, 1])], 0.1, True).tolist() == [-0.15, -0.15, -0.4], \"test case failed: two-tree regression\"\nassert gradient_boosting_predict([], 0.2, True).size == 0, \"test case failed: empty updates\"\nassert gradient_boosting_predict([np.array([[0.2, -0.1, 0.1], [-0.3, 0.4, -0.1]]), np.array([[0.1, 0.2, -0.3], [0.2, -0.2, 0.0]])], 0.5, False).tolist() == [2, 0], \"test case failed: two-tree classification\"\nassert gradient_boosting_predict([np.array([[1.0,-1.0],[0.5,-0.5]])], 1.0, False).tolist() == [1, 1], \"test case failed: single-tree classification\"\nassert gradient_boosting_predict([np.array([[0.0,0.0],[1.0,-1.0]])], 2.0, False).tolist() == [0, 1], \"test case failed: equal-logit classification\"\nassert gradient_boosting_predict([np.array([[0.2,0.1],[-0.1,0.3]]), np.array([[0.1,-0.1],[0.05,-0.05]])], 0.3, False).tolist() == [1, 0], \"test case failed: two-tree small-lr classification\"\nassert gradient_boosting_predict([np.array([0.0,1.0]), np.array([1.0,1.0])], 0.5, True).tolist() == [-0.5, -1.0], \"test case failed: regression zeros first update\"\nassert gradient_boosting_predict([np.array([-1.0,-2.0])], 0.3, True).tolist() == [0.3, 0.6], \"test case failed: regression negative updates\"\nassert gradient_boosting_predict([np.array([[1.0,2.0,3.0]])], 1.0, False).tolist() == [0], \"test case failed: 3-class single-sample classification\""}
{"task_id": 371, "completion_id": 0, "passed": false, "result": "failed: object too deep for desired array", "solution": "import numpy as np\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between X and W.\"\"\"\n    (n_examples, signal_length, _) = X.shape\n    (_, kernel_width, out_channels) = W.shape\n    if isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, tuple):\n        pad_left = pad[0]\n        pad_right = pad[1]\n    else:\n        assert pad == 'same'\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + kernel_width - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    dilated_kernel = np.lib.stride_tricks.as_strided(W, shape=(kernel_width, out_channels), strides=(dilation * stride, stride), writeable=False)\n    result_volume = np.empty((n_examples, signal_length + 2 * pad_left - 1, out_channels))\n    for i in range(n_examples):\n        result_volume[i] = np.convolve(X[i], dilated_kernel, mode='valid')\n    return result_volume.tolist()\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, \"same\", 0) == [[[-2.0],[-2.0],[-2.0],[-2.0],[4.0]]], \"failed on same-pad basic example\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, 0) == [[[-2.0],[-2.0],[-2.0]]], \"failed on zero-pad example\"\nassert conv1D(np.array([[[1],[2],[1],[2],[1],[2]]]), np.array([[[1]],[[1]]]), 2, 0) == [[[3.0],[3.0],[3.0]]], \"failed on stride 2\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[1]]]), 1, 0, 1) == [[[4.0],[6.0],[8.0]]], \"failed on dilation 1\"\nassert conv1D(np.array([[[1,2],[3,4],[5,6],[7,8]]]),\n              np.array([[[1,0,1],[1,0,0]],[[1,0,0],[1,0,1]]]), 1, 0) == [[[10,0,5],[18,0,9],[26,0,13]]], \"failed on multi-channel\"\nassert conv1D(np.array([[[1],[2],[3],[4]]]), np.array([[[1]],[[1]],[[1]]]), 2, \"same\") == [[[6.0],[7.0]]], \"failed on same-pad + stride 2\"\nassert conv1D(np.array([[[1],[2]]]), np.array([[[1]],[[1]]]), 1, 1) == [[[1.0],[3.0],[2.0]]], \"failed on symmetric integer pad\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5],[6],[7]]]), np.array([[[1]],[[1]],[[1]]]), 1, 0, 2) == [[[12.0]]], \"failed on dilation 2\"\nassert conv1D(np.array([[[1],[2],[3]],[[4],[5],[6]]]), np.array([[[1]],[[1]]]), 1, 0) == [[[3.0],[5.0]],[[9.0],[11.0]]], \"failed on batch processing\"\nassert conv1D(np.array([[[1],[2],[3]]]), np.array([[[2]]]), 1, (2,1)) == [[[0.0],[0.0],[2.0],[4.0],[6.0],[0.0]]], \"failed on asymmetric tuple pad\""}
{"task_id": 373, "completion_id": 0, "passed": false, "result": "failed: All elements in y must be integers", "solution": "import numpy as np\nimport numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not isinstance(y, (list, np.ndarray)):\n        raise TypeError('Input must be a list or NumPy array')\n    if not any((isinstance(i, int) for i in y)):\n        raise ValueError('All elements in y must be integers')\n    unique_classes = sorted(set(y))\n    n_samples = len(y)\n    gini_impurity = 1\n    for c in unique_classes:\n        p_c = sum((c == cl for cl in y)) / n_samples\n        gini_impurity -= p_c ** 2\n    return round(gini_impurity, 4)\nassert gini([0, 1, 1, 0, 2]) == 0.64, \"failed: gini([0, 1, 1, 0, 2])\"\nassert gini([0, 0, 0, 0]) == 0.0, \"failed: gini([0, 0, 0, 0])\"\nassert gini([0, 1]) == 0.5, \"failed: gini([0, 1])\"\nassert gini([1, 2, 3, 4]) == 0.75, \"failed: gini([1, 2, 3, 4])\"\nassert gini([]) == 0.0, \"failed: gini([])\"\nassert gini([5, 5, 5, 5, 5]) == 0.0, \"failed: gini([5, 5, 5, 5, 5])\"\nassert gini([0, 1, 2, 3, 4, 5]) == 0.8333, \"failed: gini([0, 1, 2, 3, 4, 5])\"\nassert gini([2]) == 0.0, \"failed: gini([2])\"\nassert gini([1, 1, 1, 2, 2, 3]) == 0.6111, \"failed: gini([1, 1, 1, 2, 2, 3])\"\nassert gini(list(range(100))) == 0.99, \"failed: gini(range(100))\""}
{"task_id": 374, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n        X (np.ndarray): Feature matrix of size m x n where m is the number of samples and n is the number of features.\n        y (np.ndarray): Target values array of size m.\n        learning_rate (float): The step size for the gradient descent update.\n        n_iterations (int): Number of iterations for the gradient descent algorithm.\n\n    Returns:\n        tuple: A tuple containing the list of learned weights and the bias value, both rounded to 4 decimal places.\n    \"\"\"\n    if len(X.shape) != 2 or len(y.shape) != 1:\n        raise ValueError('X and y arrays must have 2D and 1D shape respectively.')\n    (n_samples, n_features) = X.shape\n    theta = np.zeros(n_features)\n    b = 0\n    mse = lambda theta, b, X, y: sum((X @ theta + b - y) ** 2) / n_samples\n    for _ in range(n_iterations):\n        dw = 2 / n_samples * X.T @ (X @ theta + b - y)\n        db = 2 / n_samples * np.sum(X @ theta + b - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n        current_mse = mse(theta, b, X, y)\n        if _ % 100 == 0:\n            print(f'Iteration {_}: MSE = {current_mse:.4f}')\n    theta = [round(t, 4) for t in theta]\n    b = round(b, 4)\n    return (theta, b)\nassert linear_regression_gd(np.array([[1, 2], [2, 0], [3, 1]]), np.array([5, 6, 7]), 0.01, 10000) == ([1.0, 0.0], 4.0), \"failed: basic 2-feature example\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 7, 9, 11])) == ([2.0], 3.0), \"failed: y = 2x + 3\"\nassert linear_regression_gd(np.array([[0], [2], [4]]), np.array([4, 1, -2]), 0.01, 12000) == ([-1.5], 4.0), \"failed: negative slope\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 5, 5, 5])) == ([0.0], 5.0), \"failed: constant target\"\nassert linear_regression_gd(np.array([[0, 0], [1, 5], [2, -1]]), np.array([4, 7, 10]), 0.01, 12000) == ([3.0, 0.0], 4.0), \"failed: irrelevant second feature\"\nassert linear_regression_gd(np.array([[0, 0]]), np.array([7]), 0.01, 5000) == ([0.0, 0.0], 7.0), \"failed: single sample two features\""}
{"task_id": 376, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    transposed_X = X_np.T\n    return np.allclose(X_np, transposed_X)\nassert is_symmetric([[1]]) is True, \"failed on 1\u00d71 matrix\"\nassert is_symmetric([[1, 2], [2, 1]]) is True, \"failed on 2\u00d72 symmetric\"\nassert is_symmetric([[1, 0], [3, 1]]) is False, \"failed on 2\u00d72 non-symmetric\"\nassert is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]) is True, \"failed on 3\u00d73 symmetric\"\nassert is_symmetric([[1, 2], [2, 1], [3, 4]]) is False, \"failed on non-square\"\nassert is_symmetric([]) is True, \"failed on empty matrix\"\nassert is_symmetric([[0.0, 1e-09], [1e-09, 0.0]]) is True, \"failed on float tolerance\"\nassert is_symmetric([[3, -2, 5], [-2, 0, 4], [5, 4, 1]]) is True, \"failed on 3\u00d73 with negatives\"\nassert is_symmetric([[1, 2, 3], [2, 1, 4], [4, 5, 1]]) is False, \"failed on asymmetric 3\u00d73\"\nassert is_symmetric([[2, 3, 4, 5], [3, 2, 6, 7], [4, 6, 2, 8], [5, 7, 8, 2]]) is True, \"failed on 4\u00d74 symmetric\""}
{"task_id": 377, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for -: 'list' and 'int'", "solution": "import numpy as np\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for the Logistic Loss function in Gradient Boosting.\n\n    Parameters:\n    - y: A list containing binary class labels (0 or 1).\n    - f: A list of floats representing predicted scores.\n\n    Returns:\n    - A list of negative gradients rounded to the nearest 4th decimal place.\n    If y contains values other than 0 or 1, returns [-1].\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return [-1]\n    y_prime = 2 * y - 1\n    g = [y_prime[i] / (1 + np.exp(y_prime[i] * f[i])) for i in range(len(f))]\n    g_rounded = [round(val, 4) for val in g]\n    return g_rounded\nassert logistic_negative_gradient([0,1,0],[0.0,0.5,-0.5])==[-0.5,0.3775,-0.3775],\"failed: basic example\"\nassert logistic_negative_gradient([1,1,1],[0,0,0])==[0.5,0.5,0.5],\"failed: all ones zero score\"\nassert logistic_negative_gradient([0,0,0],[0,0,0])==[-0.5,-0.5,-0.5],\"failed: all zeros zero score\"\nassert logistic_negative_gradient([1,0],[2,-2])==[0.1192,-0.1192],\"failed: symmetric scores\"\nassert logistic_negative_gradient([1],[10])==[0.0],\"failed: large positive score\"\nassert logistic_negative_gradient([0],[-10])==[-0.0],\"failed: large negative score\"\nassert logistic_negative_gradient([],[])==[],\"failed: empty input\"\nassert logistic_negative_gradient([0,2],[0,0])==-1,\"failed: invalid label\"\nassert logistic_negative_gradient([0,1,0],[0.1])==-1,\"failed: mismatched lengths\""}
{"task_id": 380, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'shape'", "solution": "import numpy as np\nimport numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        out = 1.6732632423543772 * np.where(x > 0, x, 1.6732632423543772 * (np.exp(x) - 1))\n    elif len(x.shape) == 1:\n        out = 1.6732632423543772 * np.where(x > 0, x, 1.6732632423543772 * (np.exp(x) - 1))\n    else:\n        out = []\n        for (i, j) in enumerate(zip(*[iter(x)] * x.ndim)):\n            tmp_out = 1.6732632423543772 * np.where(j > 0, j, 1.6732632423543772 * (np.exp(j) - 1))\n            out.append(tuple(tmp_out))\n        out = tuple(out)\n    out_rounded = [round(val, 4) for val in out]\n    return out_rounded\nassert selu([-1, 0, 1], 0) == [-1.1113, 0.0, 1.0507], \"test failed: selu([-1,0,1],0)\"\nassert selu([2], 0) == [2.1014], \"test failed: selu([2],0)\"\nassert selu(0, 0) == 0.0, \"test failed: selu(0,0)\"\nassert selu([[1, 0], [-1, 2]], 0) == [[1.0507, 0.0], [-1.1113, 2.1014]], \"test failed: selu([[1,0],[-1,2]],0)\"\nassert selu([-1, 0, 1], 1) == [0.6468, 1.0507, 1.0507], \"test failed: selu([-1,0,1],1)\"\nassert selu([2.5], 1) == [1.0507], \"test failed: selu([2.5],1)\"\nassert selu(0, 1) == 1.0507, \"test failed: selu(0,1)\"\nassert selu([-1, 1], 2) == [0.6468, 0.0], \"test failed: selu([-1,1],2)\"\nassert selu([0], 2) == [1.7581], \"test failed: selu([0],2)\"\nassert selu(2, 2) == 0.0, \"test failed: selu(2,2)\""}
{"task_id": 387, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for -: 'NoneType' and 'list'", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimal places and converted to a Python list.\n    \"\"\"\n    pred = np.mean(y)\n    preds = [pred]\n    for _ in range(n_estimators):\n        residuals = y - preds[-1]\n        unique_x = np.unique(np.sort(x))\n        num_points = len(unique_x) - 1\n        for i in range(num_points):\n            lower_residuals = residuals[x <= unique_x[i]]\n            upper_residuals = residuals[x > unique_x[i]]\n            if not lower_residuals.size or not upper_residuals.size:\n                lower_mean_residual = np.mean(lower_residuals)\n                upper_mean_residual = np.mean(upper_residuals)\n                lower_prediction = lower_mean_residual * (x <= unique_x[i])\n                upper_prediction = upper_mean_residual * (x > unique_x[i])\n                predicted_value = lower_prediction + upper_prediction\n            else:\n                avg_lower_residual = np.mean(lower_residuals)\n                avg_upper_residual = np.mean(upper_residuals)\n                combined_residual = lower_residuals + upper_residuals\n                total_squares = np.sum(combined_residual ** 2)\n                best_split = None\n                min_error = float('inf')\n                for j in range(i, num_points):\n                    center = (unique_x[j] + unique_x[j + 1]) / 2\n                    (l_square, u_square) = (((lower_residuals < center) ** 2).mean(), (upper_residuals >= center).mean())\n                    error = (l_square + u_square) / total_squares\n                    if error < min_error:\n                        min_error = error\n                        best_split = center\n                low_predictions = lower_residuals.copy() + (best_split - x) * avg_lower_residual\n                high_predictions = upper_residuals.copy() + (x - best_split) * avg_upper_residual\n                predicted_value = (low_predictions <= best_split).astype(int) * avg_lower_residual + (high_predictions > best_split).astype(int) * avg_upper_residual\n            preds.append(predicted_value)\n            pred += learning_rate * predicted_value\n    return [np.round(p, 4) for p in preds]\nassert gradient_boosting_1d([1, 2], [2, 4], 1, 0.5) == [2.5, 3.5], \"failed on simple two-point example\"\nassert gradient_boosting_1d([1, 2, 3, 4], [5, 5, 5, 5], 3, 0.1) == [5.0, 5.0, 5.0, 5.0], \"failed on constant target\"\nassert gradient_boosting_1d([1, 2, 3], [1, 2, 3], 2, 0.5) == [1.3125, 2.0625, 2.625], \"failed on small increasing sequence\"\nassert gradient_boosting_1d([1, 2, 3], [3, 3, 3], 5, 0.2) == [3.0, 3.0, 3.0], \"failed on constant target, many rounds\"\nassert gradient_boosting_1d([1, 2, 3, 4], [2, 4, 6, 8], 2, 0.5) == [3.0, 4.3333, 6.3333, 6.3333], \"failed on linear 4-point set\"\nassert gradient_boosting_1d([1, 2, 3], [2, 2, 6], 1, 1.0) == [2.0, 2.0, 6.0], \"failed on perfect one-round fit\"\nassert gradient_boosting_1d([1, 1, 1], [1, 2, 3], 3, 0.3) == [2.0, 2.0, 2.0], \"failed when all features identical\"\nassert gradient_boosting_1d([5, 6], [10, 10], 4, 0.1) == [10.0, 10.0], \"failed on two identical targets\"\nassert gradient_boosting_1d([1, 2, 3], [10, 0, 10], 1, 0.5) == [8.3333, 5.8333, 5.8333], \"failed on uneven targets\"\nassert gradient_boosting_1d([1, 2], [0, 0], 2, 0.4) == [0.0, 0.0], \"failed on zero targets\""}
{"task_id": 394, "completion_id": 0, "passed": false, "result": "failed: name 'x' is not defined", "solution": "import numpy as np\nimport numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None*, a zero array of\n        the same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)``, where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    E_g_t_plus_1 = rho * Eg + (1 - rho) * np.square(grad)\n    w_next = w - learning_rate * grad / np.sqrt(E_g_t_plus_1 + 1e-08)\n    return ([round(x[0], 4), round(x[1], 4)], [round(y[0], 4), round(y[1], 4)])\nassert rmsprop_update(np.array([1.0]), np.array([0.1]), None) == ([0.9684], [0.001]), \"test case 1 failed\"\nassert rmsprop_update(np.array([1.0]), np.array([0.0]), None) == ([1.0], [0.0]), \"test case 2 failed\"\nassert rmsprop_update(np.array([0.0]), np.array([1.0]), None) == ([-0.0316], [0.1]), \"test case 3 failed\"\nw4, Eg4 = rmsprop_update(np.array([0.5, -0.5]), np.array([0.2, 0.2]), None)\nassert w4 == [0.4684, -0.5316] and Eg4 == [0.004, 0.004], \"test case 4 failed\"\nassert rmsprop_update(np.array([0.4684, -0.5316]), np.array([0.0, 0.0]), [0.004, 0.004]) == ([0.4684, -0.5316], [0.0036, 0.0036]), \"test case 5 failed\"\nassert rmsprop_update(np.array([10.0]), np.array([10.0]), None) == ([9.9684], [10.0]), \"test case 6 failed\"\nassert rmsprop_update(np.array([1, 2, 3]), np.array([0.1, 0.2, 0.3]), None) == ([0.9684, 1.9684, 2.9684], [0.001, 0.004, 0.009]), \"test case 7 failed\"\nassert rmsprop_update(np.array([-1.0]), np.array([-0.1]), None) == ([-0.9684], [0.001]), \"test case 8 failed\"\nassert rmsprop_update(np.array([1.0, 2.0]), np.array([0.0, 0.0]), [0.001, 0.004]) == ([1.0, 2.0], [0.0009, 0.0036]), \"test case 9 failed\"\nassert rmsprop_update(np.array([5.0]), np.array([0.5]), np.array([1.0])) == ([4.9948], [0.925]), \"test case 10 failed\""}
{"task_id": 398, "completion_id": 0, "passed": false, "result": "failed: failed on basic activation", "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha=0.1, derivative=False):\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If True, return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    if derivative:\n        return [elu(x_val, alpha, derivative=True) + alpha for x_val in x]\n    else:\n        return [np.where(val >= 0, val, alpha * (np.exp(val) - 1)) for val in x]\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, False) == [-0.0865, -0.0632, 0.0, 1.0, 2.0], \"failed on basic activation\"\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, True) == [0.0135, 0.0368, 1.0, 1.0, 1.0], \"failed on basic gradient\"\nassert elu([-1], 1.0, False) == [-0.6321], \"failed on alpha=1 activation\"\nassert elu([-1], 1.0, True) == [0.3679], \"failed on alpha=1 gradient\"\nassert elu([3, 4.5, 0.0], 0.5, False) == [3.0, 4.5, 0.0], \"failed on all positive activation\"\nassert elu([3, 4.5, 0.0], 0.5, True) == [1.0, 1.0, 1.0], \"failed on all positive gradient\"\nassert elu([-1, 2], 0.0, False) == [0.0, 2.0], \"failed on alpha=0 activation\"\nassert elu([-1, 2], 0.0, True) == [0.0, 1.0], \"failed on alpha=0 gradient\"\nassert elu([], 0.1, False) == [], \"failed on empty activation\"\nassert elu([-0.5, 0.5], 0.2, False) == [-0.0787, 0.5], \"failed on mixed list activation\""}
{"task_id": 411, "completion_id": 0, "passed": false, "result": "failed: 'int' object is not iterable", "solution": "import numpy as np\nimport numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    import itertools\n\n    def flatten(data):\n        return list(itertools.chain.from_iterable(data))\n    actions_flattened = flatten(flatten(actions))\n    observations_flattened = flatten(observations)\n    multidim_actions = any((isinstance(action, tuple) for action in actions))\n    multidim_observations = any((isinstance(observation, tuple) for observation in observations))\n    continuous_actions = any((np.issubdtype(type(x), np.number) and isinstance(x, int) for x in actions_flattened))\n    continuous_observations = any((np.issubdtype(type(y), np.number) and (not isinstance(y, int)) for y in observations_flattened))\n    n_actions_per_dim = [len(set(action)) for action in actions]\n    n_obs_per_dim = [len(set(observation)) for observation in observations]\n    action_ids = [sorted(set(action)) for action in actions]\n    obs_ids = [sorted(set(observation)) for observation in observations]\n    return {('tuple_actions', 'tuple_observations'): multidim_actions, ('multi_dim_actions', 'multi_dim_observations'): multidim_observations, ('continuous_actions', 'continuous_observations'): (continuous_actions, continuous_observations), ('n_actions_per_dim', 'n_obs_per_dim'): n_actions_per_dim + n_obs_per_dim, ('action_dim', 'obs_dim'): len(n_actions_per_dim) == 2, ('action_ids', 'obs_ids'): (action_ids, obs_ids)}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nacts = [0, 1, 2, 0]\nobs  = [10, 11, 10]\nassert env_stats(acts, obs)['n_actions_per_dim'] == [3], \"test case failed: scalar integers\"\nacts = [0.0, 1.5, 2.0]\nobs  = [1, 2, 3]\nassert env_stats(acts, obs)['continuous_actions'] is True, \"test case failed: continuous actions\"\nacts = [(0, 0), (1, 1), (0, 1)]\nobs  = [5, 6, 7]\nassert env_stats(acts, obs)['multidim_actions'] is True, \"test case failed: 2-D integer actions\"\nacts = [(0, 0, 0)]\nobs  = [(1.1, 2.2)]\nassert env_stats(acts, obs)['obs_dim'] == 2, \"test case failed: single sample multi-dim\"\nacts = [[1], [2], [3], [1]]\nobs  = [[10], [10], [12]]\nassert env_stats(acts, obs)['tuple_actions'] is True, \"test case failed: tuple single-dim\"\nacts = [(1, 2), (2, 3), (1, 3)]\nobs  = [0.1, 0.2, 0.3]\nassert env_stats(acts, obs)['continuous_observations'] is True, \"test 6 failed\"\nacts = [1, 2, 3]\nobs  = [(0, 0), (1, 1)]\nassert env_stats(acts, obs)['multidim_observations'] is True, \"test 7 failed\"\nacts = [2.0, 3.0]\nobs  = [1, 1]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 8 failed\"\nacts = [True, False, True]\nobs  = [0, 1, 0]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 9 failed\"\nacts = list(range(100))\nobs  = list(range(0, 200, 2))\nassert env_stats(acts, obs)['n_obs_per_dim'] == [100], \"test 10 failed\""}
{"task_id": 413, "completion_id": 0, "passed": false, "result": "failed: name 'resids' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    predictions = np.mean(y_train)\n    final_predictions = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        weighted_residuals = residuals * learning_rate\n        tree = np.full_like(residuals, fill_value=np.median(residuals))\n        (unique_resids, counts) = np.unique(residuals, return_counts=True)\n        sorted_indices = np.argsort(residuals)\n        weights = learning_rate / resids[unique_resids][sorted_indices]\n        for i in range(len(unique_resids)):\n            if i == len(unique_resids) - 1:\n                break\n            elif unique_resids[i] != unique_resids[i + 1]:\n                threshold = unique_resids[i]\n                indices_to_split = np.where((residuals <= threshold) & (weights > 0))[0]\n                insert_positions = [np.argwhere(weights == 0)[0] + 1] + [(i,) for (j, k) in zip(sorted(indices_to_split[:-1], key=lambda x: abs(x)), sorted(indices_to_split[-1:], reverse=True)) if k < j]\n                insert_positions.sort()\n                for pos in insert_positions:\n                    tree[pos] += np.sign(threshold) * sum(counts[indices_to_split[:pos]]) / np.sum(counts)\n        predictions -= tree\n    final_predictions = [round(pred, 4) for pred in predictions]\n    return final_predictions\nassert gbdt_regression(np.array([[0],[1]]), np.array([0,1]), np.array([[0],[1]]), 1, 1.0, 1) == [0.0, 1.0], \"test-1 failed: two-point identity mapping\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[1]]), 3, 0.5, 1) == [5.0], \"test-2 failed: constant target 5\"\nassert gbdt_regression(np.array([[0,1],[1,2],[2,3]]), np.array([7,7,7]), np.array([[0.5,1.5]]), 5, 0.3, 2) == [7.0], \"test-3 failed: 2-D constant target 7\"\nassert gbdt_regression(np.array([[-1],[0],[1]]), np.array([-2,-2,-2]), np.array([[0]]), 4, 0.8, 1) == [-2.0], \"test-4 failed: negative constant target\"\nassert gbdt_regression(np.array([[10]]), np.array([42]), np.array([[15]]), 6, 0.2, 1) == [42.0], \"test-5 failed: single-sample dataset\"\nassert gbdt_regression(np.array([[2],[4]]), np.array([4,8]), np.array([[2],[4]]), 1, 1.0, 1) == [4.0, 8.0], \"test-6 failed: two-point linear x2 mapping\"\nassert gbdt_regression(np.array([[0,1],[1,2]]), np.array([1,3]), np.array([[0,1],[1,2]]), 1, 1.0, 1) == [1.0, 3.0], \"test-7 failed: two-point 2-D features\"\nassert gbdt_regression(np.array([[5]]), np.array([10]), np.array([[7]]), 3, 0.9, 1) == [10.0], \"test-8 failed: single-sample constant 10\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([0,0,0]), np.array([[0],[2]]), 2, 0.7, 1) == [0.0, 0.0], \"test-9 failed: zero target\"\nassert gbdt_regression(np.array([[0],[1]]), np.array([-5,10]), np.array([[0],[1]]), 1, 1.0, 1) == [-5.0, 10.0], \"test-10 failed: mixed sign targets\""}
{"task_id": 416, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the multivariate Gaussian Probability Density Function (PDF).\n\n    Parameters:\n    X : numpy.ndarray\n        An array of shape (n_samples, n_features) containing the data points.\n    mean : numpy.ndarray\n        The mean vector of the distribution.\n    cov : numpy.ndarray\n        The covariance matrix of shape (n_features, n_features). Must be positive-definite.\n\n    Returns:\n    pdf_values : list\n        A list of PDF values corresponding to each sample in X, rounded to 4 decimal places.\n    \"\"\"\n    d = len(mean)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    exponent = -0.5 * np.sum((X[:, np.newaxis] - mean) ** 2, axis=2) @ inv_cov @ (X[:, np.newaxis] - mean)\n    gaussian_pdf = 1 / np.sqrt((2 * np.pi) ** d * det_cov) * np.exp(exponent)\n    return [round(pdf_value, 4) for pdf_value in gaussian_pdf]\nassert multivariate_gaussian_pdf(np.array([[0]]), [0], [[1]]) == [0.3989], \"test case failed: N(0,1) at 0\"\nassert multivariate_gaussian_pdf(np.array([[1]]), [0], [[1]]) == [0.2420], \"test case failed: N(0,1) at 1\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[1,0],[0,1]]) == [0.1592], \"test case failed: 2D standard normal at (0,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,1]]), [0,0], [[1,0],[0,1]]) == [0.0585], \"test case failed: 2D standard normal at (1,1)\"\nassert multivariate_gaussian_pdf(np.array([[0,0,0]]), [0,0,0], np.identity(3)) == [0.0635], \"test case failed: 3D standard normal at origin\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[2,0],[0,2]]) == [0.0796], \"test case failed: 2D diag(2,2) at origin\"\nassert multivariate_gaussian_pdf(np.array([[1,0]]), [0,0], [[1,0],[0,2]]) == [0.0683], \"test case failed: diag(1,2) at (1,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,0],[0,1]]), [0,0], [[1,0],[0,2]]) == [0.0683,0.0876], \"test case failed: two points with diag(1,2)\"\nassert multivariate_gaussian_pdf(np.array([[0,0],[2,0]]), [0,0], [[1,0],[0,1]]) == [0.1592,0.0215], \"test case failed: (0,0) and (2,0) in 2D standard normal\"\nassert multivariate_gaussian_pdf(np.array([[-1],[0],[1]]), [0], [[1]]) == [0.2420,0.3989,0.2420], \"test case failed: vectorised 1D standard normal\""}
{"task_id": 419, "completion_id": 0, "passed": false, "result": "failed: not enough values to unpack (expected 2, got 1)", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        intercept_column = np.ones(X.shape[0])\n        X = np.column_stack((intercept_column, X))\n    (N, M) = X.shape\n    (_, ny) = y.shape\n    X_t_X = np.dot(X.T, X)\n    X_t_y = np.dot(X.T, y)\n    if V is not None:\n        V_inv = 1 / V\n    else:\n        V_inv = np.eye(M + 1)\n    inv_sigma_XX_V = X_t_X + V_inv @ np.outer(mu, mu)\n    posterior_mean = np.linalg.inv(inv_sigma_XX_V) @ (V_inv @ mu + np.dot(X_t_y, V_inv))\n    pred_means = []\n    for x_new in X_new:\n        x_new_row = np.array([1] + list(x_new))\n        pred_mean_x_new = posterior_mean @ x_new_row\n        pred_means.append(round(pred_mean_x_new.item(), 4))\n    return pred_means\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([1,3]), np.array([[3]])) == [3.3333], \"failed on simple 1-D, intercept\"\nassert bayesian_linear_regression_pred(np.array([[0],[1],[2]]), np.array([1,2,3]), np.array([[1.5]])) == [2.2], \"failed on 3-pt line, intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([2,4]), np.array([[3]]), mu=1) == [5.0], \"failed with non-zero prior mean\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,2.5,3.5]), np.array([[4]]), V=[2,2]) == [4.339], \"failed with diagonal prior covariance\"\nassert bayesian_linear_regression_pred(np.array([[1]]), np.array([2]), np.array([[1]]), fit_intercept=False) == [1.0], \"failed single observation, no intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([3,6,9]), np.array([[4]]), V=0.5, fit_intercept=False) == [10.5], \"failed with scalar prior variance 0.5\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,4,6]), np.array([[4]]), mu=2, fit_intercept=False) == [8.0], \"failed with informative prior mean\"\nassert bayesian_linear_regression_pred(np.array([[0],[1]]), np.array([0,1]), np.array([[2]])) == [1.0], \"failed on small line through origin\"\nassert bayesian_linear_regression_pred(np.array([[0],[0]]), np.array([2,2]), np.array([[0]])) == [1.3333], \"failed pure-intercept model\""}
{"task_id": 423, "completion_id": 0, "passed": false, "result": "failed: failed on empty lists", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List\ndef root_mean_squared_log_error(actual: List[float], predicted: List[float]) -> float:\n    \"\"\"\n    Computes the Root Mean Squared Logarithmic Error (RMSLE) between the actual and predicted values,\n    ensuring non-negative input values. Returns the RMSLE rounded to four decimal places.\n\n    Args:\n        actual (List[float]): The ground truth values.\n        predicted (List[float]): The model's predictions.\n\n    Returns:\n        float: The computed RMSLE value rounded to four decimal places.\n\n    Raises:\n        ValueError: If the input lists do not have the same length or contain negative values.\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError('Actual and predicted values must be of equal length.')\n    if any((x < 0 for x in actual + predicted)):\n        raise ValueError('Values in actual and predicted must be non-negative.')\n    n = len(actual)\n    rmsle = np.sqrt(np.mean((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed on identical values\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 4]) == 0.1288, \"failed on simple differing list\"\nassert root_mean_squared_log_error([0], [0]) == 0.0, \"failed on single zero value\"\nassert root_mean_squared_log_error([], []) == -1, \"failed on empty lists\"\nassert root_mean_squared_log_error([1, 2], [1]) == -1, \"failed on unequal length\"\nassert root_mean_squared_log_error([1, -2, 3], [1, 2, 3]) == -1, \"failed on negative actual value\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, -3]) == -1, \"failed on negative predicted value\""}
{"task_id": 428, "completion_id": 0, "passed": false, "result": "failed: name 'hann' is not defined", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\nfrom typing import List, Tuple\nassert hann(4, True) == [0.0, 0.75, 0.75, 0.0], \"test case failed: hann(4, True)\"\nassert hann(4, False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: hann(4, False)\"\nassert hann(1, True) == [1.0], \"test case failed: hann(1, True)\"\nassert hann(0, True) == [], \"test case failed: hann(0, True)\"\nassert hann(5, True) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann(5, True)\"\nassert hann(5, False) == [0.0, 0.3455, 0.9045, 0.9045, 0.3455], \"test case failed: hann(5, False)\"\nassert hann(6, True)[0] == 0.0 and hann(6, True)[-1] == 0.0, \"test case failed: end points not zero for symmetric window\"\nassert abs(sum(hann(10, True))) < 7.0, \"test case failed: unrealistic sum for symmetric window\"\nassert hann(2, False) == [0.0, 1.0], \"test case failed: hann(2, False)\""}
{"task_id": 433, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (kernel_height, kernel_width) = shape[-2:]\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (fan_in, fan_out)\nassert glorot_fan((64, 3, 7, 7)) == (147.0, 3136.0), \"failed: glorot_fan((64, 3, 7, 7))\"\nassert glorot_fan((128, 256)) == (128.0, 256.0), \"failed: glorot_fan((128, 256))\"\nassert glorot_fan((256, 128)) == (256.0, 128.0), \"failed: glorot_fan((256, 128))\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"failed: glorot_fan((10, 20, 30))\"\nassert glorot_fan((32, 3, 3, 3)) == (27.0, 288.0), \"failed: glorot_fan((32, 3, 3, 3))\"\nassert glorot_fan((1, 1, 1, 1)) == (1.0, 1.0), \"failed: glorot_fan((1, 1, 1, 1))\"\nassert glorot_fan((4, 2, 5, 5)) == (50.0, 100.0), \"failed: glorot_fan((4, 2, 5, 5))\"\nassert glorot_fan((2, 4)) == (2.0, 4.0), \"failed: glorot_fan((2, 4))\"\nassert glorot_fan([5, 6, 7, 8, 9]) == (5.0, 6.0), \"failed: glorot_fan([5, 6, 7, 8, 9])\"\nassert glorot_fan((3, 5, 1, 1)) == (5.0, 3.0), \"failed: glorot_fan((3, 5, 1, 1))\""}
{"task_id": 435, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators=10, learning_rate=0.1):\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    if n_estimators <= 0 or learning_rate == 0:\n        return [np.mean(y)]\n    (m, _) = np.array(X).shape\n    y = np.array(y)\n    initial_prediction = np.mean(y)\n    weights = np.zeros((n_estimators,))\n    predictions = []\n    for t in range(n_estimators):\n        residual = y - initial_prediction\n        coef = np.linalg.lstsq(np.column_stack([X[:, :-1], np.ones(m)]), residual)[0]\n        h_t = np.dot(X, coef[0:-1]) + coef[-1]\n        updated_prediction = initial_prediction + learning_rate * h_t\n        predictions.append(updated_prediction.item())\n        weights[t] = 1 / len(residual)\n        initial_prediction = updated_prediction\n    return [round(p, 4) for p in predictions]\nassert gradient_boosting_regressor([[1],[2],[3],[4]],[2,3,4,5],2,0.5) == [2.375,3.125,3.875,4.625], \"failed on test 1\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,1.0) == [1.0,3.0,5.0,7.0], \"failed on test 2\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,0.5) == [2.5,3.5,4.5,5.5], \"failed on test 3\"\nassert gradient_boosting_regressor([[1,0],[0,1],[1,1]],[1,2,3],1,1.0) == [1.0,2.0,3.0], \"failed on test 4\"\nassert gradient_boosting_regressor([[1,2],[3,4]],[5,5],3,0.3) == [5.0,5.0], \"failed on test 5\"\nassert gradient_boosting_regressor([[1],[2]],[1,2],5,0.0) == [1.5,1.5], \"failed on test 6\"\nassert gradient_boosting_regressor([[10],[20],[30]],[3,6,9],0,0.2) == [6.0,6.0,6.0], \"failed on test 7\"\nassert gradient_boosting_regressor([[1],[2],[3]],[2,4,6],-4,0.3) == [4.0,4.0,4.0], \"failed on test 8\"\nassert gradient_boosting_regressor([[0],[1],[2]],[1,3,7],1,1.0) == [0.6667,3.6667,6.6667], \"failed on test 9\"\nassert gradient_boosting_regressor([[0],[0],[0]],[2,4,6],2,0.7) == [4.0,4.0,4.0], \"failed on test 10\""}
{"task_id": 437, "completion_id": 0, "passed": false, "result": "failed: maximum recursion depth exceeded in __instancecheck__", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if isinstance(x, (list, np.ndarray)):\n        result = []\n        for elem in x:\n            res = sigmoid(elem, order)\n            result.append(round(res, 4))\n        return result\n    elif isinstance(x, (int, float)):\n        if order == 0:\n            return round(1 / (1 + np.exp(-x)), 4)\n        elif order == 1:\n            return round(sigmoid(x, order) * (1 - sigmoid(x, order)), 4)\n        elif order == 2:\n            return round(sigmoid(x, order) * (1 - sigmoid(x, order)) * (1 - 2 * sigmoid(x, order)), 4)\n        else:\n            return -1\n    else:\n        return -1\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test failed: sigmoid([-1,0,1])\"\nassert sigmoid(0) == 0.5, \"test failed: sigmoid(0)\"\nassert sigmoid([0], order=1) == [0.25], \"test failed: sigmoid([0], order=1)\"\nassert sigmoid(0, order=1) == 0.25, \"test failed: sigmoid(0, order=1)\"\nassert sigmoid([0], order=2) == [0.0], \"test failed: sigmoid([0], order=2)\"\nassert sigmoid([-1, 2], order=1) == [0.1966, 0.105], \"test failed: sigmoid([-1,2], order=1)\"\nassert sigmoid([-2, 2], order=2) == [0.08, -0.08], \"test failed: sigmoid([-2,2], order=2)\"\nassert sigmoid(0, order=3) == -1, \"test failed: sigmoid(0, order=3)\"\nassert sigmoid([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test failed: sigmoid(2D array)\"\nassert sigmoid(-1000) == 0.0, \"test failed: sigmoid(-1000)\""}
{"task_id": 438, "completion_id": 0, "passed": false, "result": "failed: failed on basic sequential labels", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, np.ndarray):\n        y = y.tolist()\n    if num_classes is None:\n        num_classes = max(max(y), len(y)) + 1\n    elif num_classes < max(max(y), len(y)) + 1:\n        return [-1]\n    return [[int(i == j) for i in range(num_classes)] for j in y]\nassert to_categorical([0, 1, 2]) == [[1,0,0], [0,1,0], [0,0,1]], \"failed on basic sequential labels\"\nassert to_categorical([2, 0, 1], 3) == [[0,0,1], [1,0,0], [0,1,0]], \"failed when num_classes given\"\nassert to_categorical([1, 1, 1]) == [[0,1], [0,1], [0,1]], \"failed on identical labels\"\nassert to_categorical([0, 2], 4) == [[1,0,0,0], [0,0,1,0]], \"failed on explicit num_classes > max_label\"\nassert to_categorical([0]) == [[1]], \"failed on single label\"\nassert to_categorical([0, 1, 2], 2) == -1, \"failed on too small num_classes\"\nassert to_categorical([1, 3]) == [[0,1,0,0], [0,0,0,1]], \"failed on non-consecutive labels\"\nimport numpy as np\nassert to_categorical(np.array([3,0,2])) == [[0,0,0,1],[1,0,0,0],[0,0,1,0]], \"failed on numpy input\"\nassert to_categorical([5,4],6) == [[0,0,0,0,0,1],[0,0,0,0,1,0]], \"failed on high labels\"\nassert to_categorical([],0) == [], \"failed on empty input\""}
{"task_id": 439, "completion_id": 0, "passed": false, "result": "failed: name 'x' is not defined", "solution": "import itertools\nimport itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n\n    def join_candidates(candidates):\n        results = []\n        for i in range(len(candidates)):\n            for j in range(i + 1, len(candidates)):\n                if set(candidates[i]) & set(candidates[j]):\n                    joined_set = set()\n                    for item in candidates[i]:\n                        if item not in joined_set:\n                            joined_set.add(item)\n                    for item in candidates[j]:\n                        if item not in joined_set:\n                            joined_set.add(item)\n                    results.append(joined_set)\n        return results\n\n    def prune_new_candidates(new_candidates):\n        result = []\n        for candidate in new_candidates:\n            if len(candidate) > 1 and any((set(candidate) - set(itemset) for itemset in result)):\n                continue\n            result.append(candidate)\n        return result\n\n    def get_support_count(transaction_items, candidate):\n        count = 0\n        for item in transaction_items:\n            if candidate >= set(itertools.islice(iter(item), len(candidate))):\n                count += 1\n        return count\n\n    def update_transactions_with_candidate(transaction_items, candidate):\n        updated_transaction_items = [set() for _ in range(len(candidate))]\n        for (index, item) in enumerate(candidate):\n            for (transaction_index, data) in enumerate(transaction_items):\n                if item in data:\n                    updated_transaction_items[index].add(data.pop(item))\n        return updated_transaction_items\n\n    def find_next_frequent_items(frequent_items, min_sup):\n        next_frequent_items = {}\n        for itemset in frequent_items:\n            support = sum((get_support_count(transaction_items, itemset) * 1.0 for transaction_items in transactions))\n            if support / len(transactions) >= min_sup:\n                next_frequent_items[itemset] = support\n        return {itemset: value for (itemset, value) in next_frequent_items.items() if value > 0}\n    frequent_items = {tuple([x])}\n    while True:\n        current_frequent_items = prune_new_candidates(join_candidates(list(frequent_items)))\n        if not current_frequent_items:\n            break\n        frequent_items = find_next_frequent_items(current_frequent_items, min_sup)\n    return sorted(frequent_items, key=lambda x: (-len(x), x))\ntransactions = [{'apple', 'banana'}, {'banana', 'orange'}, {'apple', 'orange', 'pear'}, {'banana', 'mango'}, {'apple', 'mango'}]\nmin_sup = 0.5\nresult = apriori_frequent_itemsets(transactions, min_sup)\nassert apriori_frequent_itemsets([[1,2,3],[1,2],[2,3],[1,3]],0.5)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed: basic example\"\nassert apriori_frequent_itemsets([],0.5)==[],\"failed: empty dataset\"\nassert apriori_frequent_itemsets([[\"a\",\"b\",\"c\"],[\"a\",\"b\"],[\"a\",\"c\"],[\"b\",\"c\"]],0.75)==[(\"a\",),(\"b\",),(\"c\",)],\"failed: high threshold\"\nassert apriori_frequent_itemsets([[1,2],[1,3],[2,3],[1,2,3]],0.25)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed: very low threshold\"\nassert apriori_frequent_itemsets([[1,2],[3,4],[5,6]],0.34)==[],\"failed: no frequent itemsets across disjoint transactions\"\nassert apriori_frequent_itemsets([[\"x\",\"y\"],[\"x\",\"y\"],[\"x\",\"y\"]],0.2)==[(\"x\",),(\"y\",),(\"x\",\"y\",)],\"failed: every item always occurs\""}
{"task_id": 440, "completion_id": 0, "passed": false, "result": "failed: name 'pred1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef aggregate_predictions(predictions):\n    assert isinstance(predictions, list)\n    for level in predictions:\n        assert isinstance(level, list)\n        for entry in level:\n            assert isinstance(entry, list)\n    aggregated_probs = []\n    max_indices = []\n    for sample_probs in predictions[0]:\n        avg_prob = np.mean(sample_probs, axis=0)\n        rounded_prob = np.round(avg_prob * 10000, decimals=4) / 10000\n        (_, idx) = np.where(rounded_prob == np.max(rounded_prob))\n        if not len(idx):\n            raise ValueError('No class found with the highest probability')\n        min_idx = idx.min()\n        max_indices.append(min_idx)\n        aggregated_probs.append(float(rounded_prob[0][min_idx]))\n    return (aggregated_probs, max_indices)\nassert aggregate_predictions(pred1) == ([[0.8, 0.2], [0.3, 0.7]], [0, 1]), \"test case failed: basic example\"\nassert aggregate_predictions(pred2) == ([[0.25, 0.45, 0.3], [0.1, 0.25, 0.65], [0.75, 0.15, 0.1]], [1, 2, 0]), \"test case failed: 3-class aggregation\"\nassert aggregate_predictions(pred3) == ([[0.6, 0.4], [0.3, 0.7]], [0, 1]), \"test case failed: single estimator\"\nassert aggregate_predictions(pred4) == ([[0.125, 0.7, 0.175]], [1]), \"test case failed: four estimators one sample\"\nassert aggregate_predictions(pred5) == ([[0.55, 0.45], [0.45, 0.55]], [0, 1]), \"test case failed: symmetric probabilities\"\nassert aggregate_predictions(pred6) == ([[0.75, 0.25], [0.25, 0.75], [0.55, 0.45], [0.15, 0.85]], [0, 1, 0, 1]), \"test case failed: larger sample size\"\nassert aggregate_predictions(pred7) == ([[0.3333, 0.3333, 0.3333]], [0]), \"test case failed: uniform distribution tie\"\nassert aggregate_predictions(pred8) == ([[0.5, 0.5]], [0]), \"test case failed: exact tie\"\nassert aggregate_predictions(pred9) == ([[0.2, 0.8]], [1]), \"test case failed: five estimators\"\nassert aggregate_predictions(pred10) == ([[0.85, 0.15], [0.45, 0.55], [0.35, 0.65]], [0, 1, 1]), \"test case failed: mixed input\""}
{"task_id": 444, "completion_id": 0, "passed": false, "result": "failed: Test 3 failed: default \u03c3", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union\ndef rbf_kernel(X: List[List[Union[int, float]]], Y: List[List[Union[int, float]]] | None=None, sigma: Union[float, List[float]] | None=None) -> List[List[float]]:\n    \"\"\"\n    Compute the radial basis function (RBF) kernel matrix.\n    \n    Parameters:\n        X (List[List[Union[int, float]]]): First set of feature vectors, shape (N, C)\n        Y (List[List[Union[int, float]]] | None): Second set of feature vectors or None, shape (M, C) \n                                                   if provided, else will compute the kernel matrix for X only, shape (N, N)\n        sigma (Union[float, List[float]] | None): Scale parameter(s). Can be a single positive float or a list of floats.\n\n    Returns:\n        List[List[float]]: Kernel matrix of shape (N, M) or (N, N) if Y is omitted.\n    \"\"\"\n    if not isinstance(Y, list):\n        Y = [Y]\n    if len(X) != len(Y):\n        return -1\n    if any((not isinstance(y, list) for y in Y)):\n        return -1\n    num_features = min(len(X[0]), len(Y[0]))\n    if not all((len(row) == num_features for row in X + Y)):\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(num_features / 2)\n    if isinstance(sigma, list):\n        if len(sigma) != num_features:\n            return -1\n        sigma = np.array(sigma)\n    if sigma <= 0:\n        return -1\n    (N, _) = np.shape(X)\n    M = np.shape(Y)[0]\n    K_matrix = []\n    for i in range(N):\n        k_row = []\n        for j in range(M):\n            diff_sq_sum = sum((np.array(X[i]) - np.array(Y[j])) ** 2)\n            k_val = np.exp(-0.5 * diff_sq_sum / sigma ** 2)\n            k_row.append(round(k_val, 4))\n        K_matrix.append(k_row)\n    return K_matrix\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nassert rbf_kernel([[1,0],[0,1]], [[1,0],[0,1]], 1.0) == [[1.0, 0.3679], [0.3679, 1.0]], \"Test 1 failed: isotropic \u03c3=1.0\"\nassert rbf_kernel([[1,1],[2,2],[3,3]], None, None) == [[1.0, 0.3679, 0.0183], [0.3679, 1.0, 0.3679], [0.0183, 0.3679, 1.0]], \"Test 3 failed: default \u03c3\"\nassert rbf_kernel([[0,0],[1,1]], [[1,0]], 1.0) == [[0.6065], [0.6065]], \"Test 4 failed: X\u2260Y shapes\"\nassert rbf_kernel([[1,0],[0,1]], None, [2,2]) == [[1.0, 0.7788], [0.7788, 1.0]], \"Test 5 failed: larger anisotropic \u03c3\"\nassert rbf_kernel([[0],[1],[2]], None, 1.0) == [[1.0, 0.6065, 0.1353], [0.6065, 1.0, 0.6065], [0.1353, 0.6065, 1.0]], \"Test 6 failed: 1-D data\"\nassert rbf_kernel([[0,0,0]], None, None) == [[1.0]], \"Test 7 failed: single vector\"\nassert rbf_kernel([[1,2,3]], None, [1,2]) == -1, \"Test 8 failed: wrong \u03c3 length\"\nassert rbf_kernel([[1,2]], None, -1.0) == -1, \"Test 9 failed: negative \u03c3\"\nassert rbf_kernel([[1,2]], None, [1,0]) == -1, \"Test 10 failed: zero in \u03c3 list\""}
{"task_id": 446, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    from collections import Counter\n\n    def info_gain(current_entropy, parent_entropy):\n        (_, count) = Counter(y).most_common(1)[0]\n        proportion_in_current_node = len(y) / len(X)\n        if proportion_in_current_node == 0 or proportion_in_current_node == 1:\n            return current_entropy - proportion_in_current_node * parent_entropy\n        else:\n            (left_count, right_count) = (0, 0)\n            left_count = len([x for x in y if x != count])\n            right_count = len([x for x in y if x == count])\n            left_child_entropy = left_count / len(y) * info_gain(current_entropy - count / proportion_in_current_node * parent_entropy, current_entropy)\n            right_child_entropy = right_count / len(y) * info_gain(current_entropy - count / (1 - proportion_in_current_node) * parent_entropy, current_entropy)\n            return current_entropy - (left_child_entropy + right_child_entropy)\n    best_split = None\n    best_info_gain = float('-inf')\n    best_feature_index = -1\n    best_threshold = None\n    feature_labels = np.unique(X[:, :-1]).tolist()\n    for (i, feature) in enumerate(feature_labels):\n        feature_values = np.sort(X[:, i], axis=0)\n        for mid_point in [(feature + val) / 2 for val in [e[1:] for e in feature_values]]:\n            if round(mid_point, 4) != feature:\n                continue\n            subset_X = X[np.where(np.all(X[:, i] <= mid_point, axis=1))]\n            subset_y = y[np.argsort(subset_X[:, 0])]\n            left_majority_label = Counter(subset_y[:int(len(subset_y) / 2)]).most_common(1)[0][0]\n            right_majority_label = Counter(subset_y[int(len(subset_y) / 2):]).most_common(1)[0][0]\n            current_entropy = sum(map(lambda l: -len(list(filter(lambda x: x == l, subset_y))) / len(subset_y) * log2(len(subset_y) / len(subset_y)), set(y)))\n            parent_entropy = sum(map(lambda l: -len(list(filter(lambda x: x == l, y))) / len(y) * log2(len(y) / len(y)), set(y)))\n            info_gain_val = info_gain(current_entropy, parent_entropy)\n            if info_gain_val > best_info_gain:\n                best_split = (i, mid_point)\n                best_info_gain = info_gain_val\n                best_feature_index = i\n                best_threshold = mid_point\n                left_majority_label = left_majority_label\n                right_majority_label = right_majority_label\n    if best_info_gain < 0:\n        return (-1, None, max(set(y), key=y.count), max(set(y), key=y.count))\n    else:\n        return (best_feature_index, round(best_threshold, 4), left_majority_label, right_majority_label)\nassert decision_stump([[1],[2],[3],[4]],[0,0,1,1])==(0,2.5,0,1),\"failed on simple 1-D split\"\nassert decision_stump([[1,1],[2,1],[3,2],[4,2]],[0,0,1,1])==(0,2.5,0,1),\"failed when two features tie\"\nassert decision_stump([[1],[2]],[1,1])==(-1,None,1,1),\"failed when no split improves gain\"\nassert decision_stump([[0],[1],[2],[3],[4],[5]],[1,1,1,0,0,0])==(0,2.5,1,0),\"failed on mixed labels\"\nassert decision_stump([[10,0],[20,0],[30,1],[40,1]],[0,0,1,1])==(0,25.0,0,1),\"failed on threshold rounding\"\nassert decision_stump([[5,2],[6,2],[7,3],[8,3]],[1,1,0,0])==(0,6.5,1,0),\"failed different labels/values\"\nassert decision_stump([[1,10],[2,20],[3,30],[4,40]],[0,0,1,1])==(0,2.5,0,1),\"failed preference of feature 0 over 1\"\nassert decision_stump([[1,1,1],[2,2,2],[3,3,3],[4,4,4]],[0,0,1,1])==(0,2.5,0,1),\"failed more than two features\"\nassert decision_stump([[1],[1.5],[2],[2.5],[3]], [0,0,0,1,1])==(0,2.25,0,1),\"failed uneven split\"\nassert decision_stump([[1,2],[1,3],[1,4]],[2,2,2])==(-1,None,2,2),\"failed when all labels identical\""}
{"task_id": 452, "completion_id": 0, "passed": false, "result": "failed: name 'List' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        result = [X[X[:, feature_i] >= threshold].tolist(), X[X[:, feature_i] < threshold].tolist()]\n    else:\n        result = [[sample for sample in X if sample[feature_i] >= threshold], [sample for sample in X if sample[feature_i] < threshold]]\n    return result\nassert divide_on_feature([[1,5],[3,2],[4,6],[2,1]],0,3) == [[[3,2],[4,6]],[[1,5],[2,1]]], \"test case failed: numeric split >= 3\"\nassert divide_on_feature([[1.0,1],[2.5,3],[2.4,0],[3.1,2]],0,2.5) == [[[2.5,3],[3.1,2]],[[1.0,1],[2.4,0]]], \"test case failed: float threshold\"\nassert divide_on_feature([[1,'A'],[2,'B'],[3,'A'],[4,'C']],1,'A') == [[[1,'A'],[3,'A']],[[2,'B'],[4,'C']]], \"test case failed: categorical split\"\nassert divide_on_feature([[5],[6],[7]],0,10) == [[],[[5],[6],[7]]], \"test case failed: threshold greater than all\"\nassert divide_on_feature([[5],[6],[7]],0,0) == [[[5],[6],[7]],[]], \"test case failed: threshold smaller than all\"\nassert divide_on_feature([[1,2,3]],2,3) == [[[1,2,3]],[]], \"test case failed: single sample equal\"\nassert divide_on_feature([[1,2,3]],2,4) == [[],[[1,2,3]]], \"test case failed: single sample not equal\"\nassert divide_on_feature([[1,'yes'],[2,'no'],[3,'yes']],1,'no') == [[[2,'no']],[[1,'yes'],[3,'yes']]], \"test case failed: exactly one match\"\nassert divide_on_feature([[1.2],[3.4],[5.6],[7.8]],0,5.6) == [[[5.6],[7.8]],[[1.2],[3.4]]], \"test case failed: equality on floats\"\nassert divide_on_feature(np.array([[1,'cat'],[2,'dog'],[3,'cat']],dtype=object),1,'cat') == [[[1,'cat'],[3,'cat']],[[2,'dog']]], \"test case failed: ndarray object dtype\""}
{"task_id": 453, "completion_id": 0, "passed": false, "result": "failed: test 10 failed", "solution": "import numpy as np\nimport numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float):\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q.shape) != 2 or len(actions) != len(rewards) or len(dones) != len(Q):\n        return -1\n    (b, n_actions) = Q.shape\n    y = Q.copy().tolist()\n    for i in range(b):\n        a = actions[i]\n        r = rewards[i]\n        d = dones[i]\n        if not d:\n            y[i][a] = r + gamma * np.max(Q_next[i])\n        else:\n            y[i][a] = r\n    return [[round(y_i, 4) for y_i in row] for row in y]\nimport numpy as np\nassert update_q_values(np.array([[1.0,2.0],[0.5,0.2]]), np.array([[1.5,1.0],[0.4,0.9]]), [1,0], [1.0,0.0], [False,True], 0.99) == [[1.0, 2.485], [0.0, 0.2]], \"test 1 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[1.0,2.0]]), [0], [0.5], [False], 1.0) == [[2.5, 0.0]], \"test 2 failed\"\nassert update_q_values(np.array([[1,2,3]]), np.array([[3,2,1]]), [2], [1.0], [False], 0.9) == [[1.0, 2.0, 3.7]], \"test 4 failed\"\nassert update_q_values(np.array([[0.2,0.3],[0.4,0.5]]), np.array([[0.0,0.0],[0.0,0.0]]), [0,1], [0.0,0.0], [True,True], 0.99) == [[0.0, 0.3], [0.4, 0.0]], \"test 5 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[0.0,0.0]]), [0], [0.0], [True], 0.0) == [[0.0, 0.0]], \"test 6 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 0.0) == [[1.0, 1.0]], \"test 7 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 1.0) == [[1.0, 3.0]], \"test 8 failed\"\nassert update_q_values(np.array([[1.0,1.0]]), np.array([[1.0,1.0,1.0]]), [0], [0.0], [True], 0.9) == -1, \"test 10 failed\""}
{"task_id": 458, "completion_id": 0, "passed": false, "result": "failed: test case failed: to_categorical(np.array([1,1,1]), None)", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(labels: list | tuple | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels[0], int):\n        if all((label >= 0 for label in labels)):\n            result = [[1 if i == l else 0 for i in range(num_classes)] for l in labels]\n            return result\n    elif num_classes is not None:\n        if num_classes < max(labels) + 1:\n            return [-1] * len(labels)\n    num_classes = max(labels) + 1\n    return [[1 if i == idx else 0 for i in range(num_classes)] for idx in range(len(labels))]\nassert to_categorical([0, 2, 1, 3], 4) == [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]], \"test case failed: to_categorical([0, 2, 1, 3], 4)\"\nassert to_categorical(np.array([1,1,1]), None) == [[0,1],[0,1],[0,1]], \"test case failed: to_categorical(np.array([1,1,1]), None)\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical([3,2,4], 5) == [[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,1]], \"test case failed: to_categorical([3,2,4], 5)\"\nassert to_categorical([], 0) == [], \"test case failed: to_categorical([], 0)\"\nassert to_categorical([0], None) == [[1]], \"test case failed: to_categorical([0], None)\"\nassert to_categorical([9,8,7,6,5], None) == [[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0]], \"test case failed: labels 9..5\"\nassert to_categorical([1,0,1,0], 2) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: alternating labels\"\nassert to_categorical([0,0,0], 1) == [[1],[1],[1]], \"test case failed: single class\"\nassert to_categorical([2,1], 2) == -1, \"test case failed: num_classes too small\""}
{"task_id": 461, "completion_id": 0, "passed": false, "result": "failed: name 'y_vals' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(x, y, n_estimators=200, learning_rate=0.5):\n    \"\"\"\n    Fit an ensemble of depth-1 regression trees using gradient boosting \n    to the provided training data and return the final predictions.\n    \n    Args:\n    - x: List[float] -- Feature values (one-dimensional).\n    - y: List[float] -- Target values.\n    - n_estimators: int (default=200) -- Number of boosting iterations.\n    - learning_rate: float (default=0.5) -- Shrinkage applied to each weak learner.\n    \n    Returns:\n    - A list[float]: Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n\n    def compute_residuals(y_val):\n        return y_val - np.mean(y_val)\n\n    def sum_squares_error(residuals):\n        return np.sum(np.square(residuals))\n\n    def get_best_split(x_vals, index, best_err, best_t):\n        res_left = compute_residuals(y_vals[x_vals <= best_t])\n        res_right = compute_residuals(y_vals[x_vals > best_t])\n        err_left = sum_squares_error(res_left)\n        err_right = sum_squares_error(res_right)\n        total_err = err_left + err_right\n        if total_err == 0:\n            return None\n        else:\n            return (min(err_left, err_right), best_t)\n    num_samples = len(x)\n    predictions = [np.mean(y)] * num_samples\n    residuals = compute_residuals(y)\n    best_splits = []\n    for _ in range(n_estimators):\n        err_max = float('inf')\n        best_t = None\n        best_split = None\n        for i in range(num_samples):\n            (split_err, candidate_t) = get_best_split(x[i:num_samples], i, err_max, best_t)\n            if split_err is not None:\n                best_split = candidate_t\n                err_max = split_err\n                best_t = candidate_t\n        if best_t is None:\n            break\n        residuals -= predictions[best_t < x].mean()\n        v_L = predictions[best_t < x].mean()\n        v_R = predictions[best_t > x].mean()\n        predictions += [np.where(best_t < x, v_L, v_R), learning_rate * residuals]\n    return [round(sum(predictions), 4) for sum_predictions in zip(*predictions)]\nassert gradient_boosting_regressor([1, 2], [1, 2], 1, 1.0) == [1.0, 2.0], \"failed case: ([1,2],[1,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2], [1, 3], 1, 1.0) == [1.0, 3.0], \"failed case: ([1,2],[1,3],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3], [2, 2, 2], 1, 1.0) == [2.0, 2.0, 2.0], \"failed case: ([1,2,3],[2,2,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [4, 3, 2, 1], 1, 1.0) == [3.5, 3.5, 1.5, 1.5], \"failed case: descending targets\"\nassert gradient_boosting_regressor([1, 2], [2, 4], 2, 0.5) == [2.25, 3.75], \"failed case: two iterations, shrinkage 0.5\"\nassert gradient_boosting_regressor([1, 2], [1, 2], 0, 0.5) == [1.5, 1.5], \"failed case: n_estimators == 0\"\nassert gradient_boosting_regressor([1, 1, 2, 2], [1, 1, 3, 3], 1, 1.0) == [1.0, 1.0, 3.0, 3.0], \"failed case: repeated feature values\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [2, 2, 2, 10], 2, 1.0) == [2.0, 2.0, 2.0, 10.0], \"failed case: perfect fit in first round\"\nassert gradient_boosting_regressor([1, 2, 3], [1, 2, 4], 1, 0.5) == [1.9167, 1.9167, 3.1667], \"failed case: fractional shrinkage\"\nassert gradient_boosting_regressor([1, 2, 3, 4, 5], [3, 3, 3, 3, 3], 3, 0.3) == [3.0, 3.0, 3.0, 3.0, 3.0], \"failed case: constant targets\""}
{"task_id": 471, "completion_id": 0, "passed": false, "result": "failed: name 'expected_sarsa_update' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert expected_sarsa_update([[0,0],[0,0]],0,0,1,None,0.2,0.5,1.0)==[[0.5,0.0],[0.0,0.0]],\"test1 failed\"\nassert expected_sarsa_update([[0.5,0.2,0.1],[0.3,0.4,0.1]],0,1,1.0,1,0.1,0.4,0.99)==[[0.5,0.6731,0.1],[0.3,0.4,0.1]],\"test2 failed\"\nassert expected_sarsa_update([[1,2,3,4],[0.1,0.2,0.3,0.4]],1,2,2,0,0.0,1.0,0.5)==[[1,2,3,4],[0.1,0.2,4.0,0.4]],\"test3 failed\"\nassert expected_sarsa_update([[0.1,0.1],[0.5,0.5]],0,1,0,1,0.3,0.5,1.0)==[[0.1,0.3],[0.5,0.5]],\"test4 failed\"\nassert expected_sarsa_update([[0,1],[2,3]],1,0,-1,0,0.5,0.25,0.9)==[[0,1],[1.4188,3]],\"test5 failed\"\nassert expected_sarsa_update([[0.8,0.3]],0,0,0.5,None,0.2,0.3,0.9)==[[0.71,0.3]],\"test6 failed\"\nassert expected_sarsa_update([[0,0,0]],0,2,5,0,0.9,1.0,0.0)==[[0,0,5.0]],\"test7 failed\"\nassert expected_sarsa_update([[1,1]],0,0,0,0,0.0,0.5,1.0)==[[1,1]],\"test8 failed\"\nassert expected_sarsa_update([[1,2,3]],0,1,1,0,1.0,0.5,1.0)==[[1,2.5,3]],\"test9 failed\"\nassert expected_sarsa_update([[0.4,0.2,0.6,0.0],[1,1,1,1]],0,3,0,1,0.3,0.2,0.95)==[[0.4,0.2,0.6,0.19],[1,1,1,1]],\"test10 failed\""}
{"task_id": 474, "completion_id": 0, "passed": false, "result": "failed: could not broadcast input array from shape (2,) into shape (0,)", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    def get_class_coordinates(class_idx):\n        low_x = class_idx // 2 * 10 + 0.1\n        high_x = low_x + 8.8\n        low_y = class_idx % 2 * interval + 0.1\n        high_y = low_y + 8.8\n        return (np.random.uniform(low_x, high_x, size=n_train), np.random.uniform(low_y, high_y, size=n_train), np.array([class_idx - 0.5] * n_train))\n    X_train = np.zeros((m * n_train, 2))\n    X_val = np.zeros((m * n_val, 2))\n    Y_train = np.zeros(n_train)\n    Y_val = np.zeros(n_val)\n    i = 0\n    j = 0\n    for idx in range(1, m + 1):\n        (x1, y1, lab1) = get_class_coordinates(idx)\n        X_train[j:j + len(x1), :] = np.c_[x1, y1]\n        Y_train[i:i + len(lab1)] = lab1\n        j += len(x1)\n        i += len(lab1)\n    k = 0\n    for idx in range(m + 1, 2 * m + 1):\n        (x2, y2, lab2) = get_class_coordinates(idx)\n        X_val[k:k + len(x2), :] = np.c_[x2, y2]\n        Y_val[i:i + len(lab2)] = lab2\n        k += len(x2)\n        i += len(lab2)\n    return (X_train, X_val, Y_train.astype(int), Y_val.astype(int))\nassert generate_data(2, 2, 1, 1, seed=0)[0].tolist() == [[7.7554, 7.0636], [4.3646, 3.0713], [7.2704, 13.4265], [4.8128, 15.6671]], \"test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train\"\nassert generate_data(2, 1, 1, 1, seed=1)[2].tolist() == [-1, 1], \"test case failed: generate_data(2,1,1,1,seed=1) \u2013 Y_train\"\nassert generate_data(2, 3, 0, 1, seed=0)[0].shape == (6, 2), \"test case failed: generate_data(2,3,0,1,seed=0) \u2013 shapes\"\nassert generate_data(3, 2, 1, 0.5, seed=3)[2].shape == (6,), \"test case failed: generate_data(3,2,1,0.5,seed=3) \u2013 label shape\"\nassert generate_data(4, 1, 0, 1, seed=4)[1].size == 0, \"test case failed: generate_data(4,1,0,1,seed=4) \u2013 empty validation\"\nassert len(set(generate_data(5, 2, 2, 1, seed=6)[2].tolist())) == 5, \"test case failed: unique labels\"\nassert not np.array_equal(generate_data(2, 2, 0, 1, seed=7)[0], generate_data(2, 2, 0, 1, seed=8)[0]), \"test case failed: different seeds\"\nassert generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==1][:,1].min() - generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==-1][:,1].max() >= 20, \"test case failed: interval separation\"\nassert isinstance(generate_data(2, 1, 1, 1, seed=10)[0], np.ndarray), \"test case failed: return type\"\nassert generate_data(2, 1, 1, 1, seed=0)[0].dtype == float, \"test case failed: dtype check\""}
{"task_id": 475, "completion_id": 0, "passed": false, "result": "failed: failed: scalar, large grad", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    else:\n        m_prev *= b1\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    else:\n        v_prev *= b2\n    m_curr = b1 * m_prev + (1 - b1) * grad\n    v_curr = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_curr / (1 - b1 ** t)\n    v_hat = v_curr / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_prev, v_prev)\nimport numpy as np\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1)[0], 0.999000001, atol=1e-8), \"failed: scalar, t=1, positive grad\"\nassert np.allclose(adam_update(1.0, -0.1, 0.0, 0.0, 1)[0], 1.000999999, atol=1e-8), \"failed: scalar, t=1, negative grad\"\nw_vec, m_vec, v_vec = adam_update(np.array([1.0, -1.0]), np.array([0.2, -0.2]), np.zeros(2), np.zeros(2), 1)\nassert np.allclose(w_vec, np.array([0.999, -0.999]), atol=1e-8), \"failed: vector, t=1\"\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1, learning_rate=0.01)[0], 0.990000001, atol=1e-8), \"failed: different learning rate\"\nassert np.allclose(adam_update(1.0, 0.0, 0.0, 0.0, 1)[0], 1.0, atol=1e-12), \"failed: zero gradient gives no update\"\nw6, m6, v6 = adam_update(2.5, -0.5, 0.0, 0.0, 1)\nassert np.allclose([w6, m6, v6], [2.501, -0.05, 0.00025], atol=1e-8), \"failed: scalar, large grad\"\nw7, m7, v7 = adam_update(0.999000001, 0.1, 0.01, 1e-5, 2)\nassert np.allclose([w7, m7, v7[...]], [0.998000002, 0.019, 1.999e-5], atol=1e-8), \"failed: scalar, t=2\"\nvec_prev_m = np.array([0.02, -0.02])\nvec_prev_v = np.array([4e-5, 4e-5])\nwv, mv, vv = adam_update(np.array([0.999, -0.999]), np.array([0.2, -0.2]), vec_prev_m, vec_prev_v, 2)\nassert np.allclose(wv, np.array([0.998, -0.998]), atol=1e-8), \"failed: vector, t=2\"\nassert np.allclose(adam_update(5.0, 0.0, None, None, 3)[1:], (0.0, 0.0), atol=1e-12), \"failed: None moments treated as zeros\""}
{"task_id": 479, "completion_id": 0, "passed": false, "result": "failed: test case 1 failed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Optional\nimport numpy as np\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where `rewards[t][i]` is the reward for arm `i` at time-step\n        `t`.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    N = len(rewards)\n    C = [0] * N\n    V = [ev_prior] * N\n    if seed is not None:\n        np.random.seed(seed)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            choice = np.random.randint(0, N)\n        else:\n            choice = np.argmax(V)\n        r = rewards[t][choice]\n        V[choice] += (r - V[choice]) / (C[choice] + 1)\n        C[choice] += 1\n    return [round(v, 4) for v in V]\nassert epsilon_greedy_bandit([[1,0,0],[0,1,0],[1,0,0],[0,1,0],[1,0,0]],0,0.5,42) == [0.6,0.5,0.5], \"test case 1 failed\"\nassert epsilon_greedy_bandit([[0,1],[0,1],[0,1]],0,0) == [0.0,0.0], \"test case 2 failed\"\nassert epsilon_greedy_bandit([[1,0],[1,0],[1,0]],0,0.5) == [1.0,0.5], \"test case 3 failed\"\nassert epsilon_greedy_bandit([[0,0,1],[0,1,0],[1,0,0]],0,0) == [0.3333,0.0,0.0], \"test case 4 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,1],[0,1],[0,1]],0,0.1) == [0.0,1.0], \"test case 5 failed\"\nassert epsilon_greedy_bandit([[1],[0],[1],[1],[1]],0,0.5) == [0.8], \"test case 6 failed\"\nassert epsilon_greedy_bandit([[0,0,0],[0,0,1],[0,1,0],[0,0,1]],0,0.0) == [0.0,0.0,0.0], \"test case 7 failed\"\nassert epsilon_greedy_bandit([[0.5,1.0,0.2,0.2]],0,0.5) == [0.5,0.5,0.5,0.5], \"test case 8 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,0]],0,0.7) == [0.0,0.0], \"test case 9 failed\"\nassert epsilon_greedy_bandit([[1,1]],0,0.5) == [1.0,0.5], \"test case 10 failed\""}
{"task_id": 481, "completion_id": 0, "passed": false, "result": "failed: name 'dbscan' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert dbscan(np.array([[1,1],[1.1,1.1],[0.9,1],[5,5],[5.2,5.1],[4.9,5],[8,0]]),0.3,2)==[0,0,0,1,1,1,-1],\"test case failed: example dataset\"\nassert dbscan(np.array([[0,0],[0.1,0],[0.05,0.05],[0.2,0.2]]),0.25,1)==[0,0,0,0],\"test case failed: single cluster with min_samples=1\"\nassert dbscan(np.array([[0,0],[5,5],[10,10]]),0.5,2)==[-1,-1,-1],\"test case failed: all noise\"\nassert dbscan(np.empty((0,2)),0.5,2)==[],\"test case failed: empty dataset\"\nassert dbscan(np.array([[0,0],[0,0],[0,0]]),0.01,2)==[0,0,0],\"test case failed: duplicate points cluster\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[0,0,0,0],\"test case failed: linear chain cluster\"\nassert dbscan(np.array([[0,0],[3,3],[0.1,0.1],[3.1,3.1],[6,6]]),0.25,2)==[0,1,0,1,-1],\"test case failed: two small clusters plus noise\"\nassert dbscan(np.array([[0,0],[0.05,0.05],[2,2],[2.05,2.05]]),0.1,2)==[0,0,1,1],\"test case failed: two tight clusters\""}
{"task_id": 482, "completion_id": 0, "passed": false, "result": "failed: failed: did not raise on out-of-range label", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a sequence of integer labels (list, tuple, or \n    Numpy array) and returns a two-dimensional Numpy array where each \n    row represents the one-hot encoding of the corresponding label.\n\n    Args:\n        y (sequence): Sequence of integer labels for which the one-hot \n                      encoding needs to be generated.\n        num_classes (int, optional): Total number of unique categories. If \n                                     not specified, it will be derived from \n                                     the maximum label value plus one.\n\n    Returns:\n        numpy.ndarray: An array of shape (n_samples, n_classes), where \n                       n_samples is the length of y and n_classes is \n                       the total number of classes.\n\n    Raises:\n        ValueError: If all elements in y are less than zero or greater than \n                    num_classes - 1 when num_classes is explicitly provided.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is not None and num_classes < len(np.unique(y)):\n        raise ValueError('Number of classes cannot be less than the number of unique labels.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    idx_map = np.arange(num_classes)\n    return (y[:, np.newaxis] == idx_map).astype(int)\nassert (to_categorical([0, 1, 2]) == np.array([[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: basic consecutive labels\"\nassert (to_categorical(np.array([2,0,1,2])) == np.array([[0,0,1],[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: shuffled labels\"\nassert (to_categorical([0,1,2], num_classes=5) == np.array([[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0]])).all(), \"failed: extra unused columns\"\nassert (to_categorical([4], num_classes=5) == np.array([[0,0,0,0,1]])).all(), \"failed: single element\"\nassert (to_categorical((3,3,3)) == np.array([[0,0,0,1],[0,0,0,1],[0,0,0,1]])).all(), \"failed: tuple input\"\nassert (to_categorical(np.arange(6)) == np.eye(6, dtype=int)).all(), \"failed: arange sequence\"\nassert (to_categorical([1,1,1,1]) == np.array([[0,1],[0,1],[0,1],[0,1]])).all(), \"failed: duplicate labels\"\nassert to_categorical([], num_classes=0).shape == (0,0), \"failed: empty input with explicit classes\"\ntry:\n    to_categorical([0,2], num_classes=2)\n    assert False, \"failed: did not raise on out-of-range label\"\nexcept ValueError:\n    pass\ntry:\n    to_categorical([-1,0,1])\n    assert False, \"failed: did not raise on negative label\"\nexcept ValueError:\n    pass"}
{"task_id": 485, "completion_id": 0, "passed": false, "result": "failed: Failed test 1 \u2013 description example", "solution": "import numpy as np\nimport numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n\n    def _build_tree(node_id, depth):\n        if depth == 0 or len(y_train[node_id[1]:node_id[2]]) < 2:\n            return None\n        sse = np.sum((y_train[node_id[1]:node_id[2]] - np.mean(y_train[node_id[1]:node_id[2]])) ** 2)\n        best_split_point = float('inf') if all((isinstance(i, str) for i in X_train[node_id[1]:node_id[2]])) else min([float(f'{x:.6f}') for x in X_train[node_id[1]:node_id[2]]])\n        left_node_id = [node_id[0], node_id[1], best_split_point]\n        right_node_id = [node_id[0], node_id[1] + 1, node_id[2]]\n        left_tree = _build_tree(left_node_id, depth + 1)\n        right_tree = _build_tree(right_node_id, depth + 1)\n        return {'id': node_id[0], 'split_point': best_split_point, 'left_child_id': left_tree['id'] if left_tree else None, 'right_child_id': right_tree['id'] if right_tree else None, 'sse': sse, 'depth': depth}\n    root_node_id = [[None, None, None]] * len(y_train)\n    root_tree = _build_tree(root_node_id, 0)\n\n    def traverse_tree(node):\n        if node is None:\n            return []\n        result = []\n        result.append(traverse_tree(root_tree['left_child_id']))\nassert regression_tree_predict([1,2,3,4,5,6,7], [2,2,2,8,8,8,8], [2,3,5,7], 1) == [2.0,2.0,8.0,8.0], \"Failed test 1 \u2013 description example\"\nassert regression_tree_predict([1,2,3,4], [1,1,3,3], [1,3,4], 1) == [1.0,3.0,3.0], \"Failed test 2 \u2013 perfect binary split\"\nassert regression_tree_predict([1,2,3,4], [1,2,3,4], [1,3,4], 3) == [1.0,3.0,4.0], \"Failed test 3 \u2013 deeper splits\"\nassert regression_tree_predict([0,1,2,3], [5,5,5,5], [0,2,3], 2) == [5.0,5.0,5.0], \"Failed test 4 \u2013 constant target\"\nassert regression_tree_predict([], [], [1,2,3], 1) == [], \"Failed test 5 \u2013 empty training data\"\nassert regression_tree_predict([1,1,2,2,3,3], [1,1,2,2,3,3], [1.1,2.1,3.1], 2) == [1.0,2.0,3.0], \"Failed test 6 \u2013 duplicate X values\"\nassert regression_tree_predict([1,2,3,10,11,12], [1,1,1,2,2,2], [2,11], 4) == [1.0,2.0], \"Failed test 7 \u2013 two clusters\"\nassert regression_tree_predict([5,6], [7,9], [5,6], 5) == [7.0,9.0], \"Failed test 8 \u2013 tiny dataset\"\nassert regression_tree_predict([1,2,3], [3,4,5], [1,2,3], 0) == [4.0,4.0,4.0], \"Failed test 9 \u2013 depth 0\"\nassert regression_tree_predict([4,1,3,2], [4,1,3,2], [1,2,3,4], 2) == [1.0,2.0,3.0,4.0], \"Failed test 10 \u2013 unsorted inputs\""}
{"task_id": 490, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (tuple, list)):\n        x = np.array(x)\n    if len(x.shape) != 1:\n        raise ValueError('Input must be a one-dimensional vector.')\n    n = len(x)\n    diag_matrix = np.zeros((n, n))\n    np.fill_diagonal(diag_matrix, x)\n    return diag_matrix.tolist()\nassert make_diagonal([1, 2, 3]) == [[1, 0, 0], [0, 2, 0], [0, 0, 3]], \"test case failed: make_diagonal([1, 2, 3])\"\nassert make_diagonal([5]) == [[5]], \"test case failed: make_diagonal([5])\"\nassert make_diagonal([]) == [], \"test case failed: make_diagonal([])\"\nassert make_diagonal((0, 0, 0, 0)) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], \"test case failed: make_diagonal((0, 0, 0, 0))\"\nassert make_diagonal(np.array([3.5, -2.1])) == [[3.5, 0.0], [0.0, -2.1]], \"test case failed: make_diagonal(np.array([3.5, -2.1]))\"\nassert make_diagonal([1, -1, 1, -1]) == [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, -1]], \"test case failed: make_diagonal([1, -1, 1, -1])\"\nassert make_diagonal(np.arange(4)) == [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]], \"test case failed: make_diagonal(np.arange(4))\"\nassert make_diagonal([1.1, 2.2, 3.3]) == [[1.1, 0.0, 0.0], [0.0, 2.2, 0.0], [0.0, 0.0, 3.3]], \"test case failed: make_diagonal([1.1, 2.2, 3.3])\"\nassert make_diagonal(tuple(range(6))) == [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 5]], \"test case failed: make_diagonal(tuple(range(6)))\"\nassert make_diagonal(np.array([])) == [], \"test case failed: make_diagonal(np.array([]))\""}
{"task_id": 491, "completion_id": 0, "passed": false, "result": "failed: fp_growth.<locals>.build_fp_tree() missing 1 required positional argument: 'item_set'", "solution": "from collections import Counter, defaultdict\nimport itertools\nfrom collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter(itertools.chain(*transactions))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_sup}\n\n    def build_fp_tree(item_set, parent_item=None):\n        if not item_set:\n            return None\n        max_len = max(len(parent_item or ''), len(item_set)) + 1\n        children_map = defaultdict(build_fp_tree)\n        head = Node(None, max_len=max_len)\n        next_level = []\n        for item in item_set:\n            new_head = Node(head, item=item)\n            head.children[item] = new_head\n            next_level.append(new_head)\n        children_map[parent_item].children[item_set[-1]] = head\n        return head\n    root = build_fp_tree(frequent_items)\n\n    def recursive_mining(node, depth=1):\n        seen_pairs = {}\n        if not node.children:\n            return []\n        for child_item in node.children.values():\n            pairs = recursive_mining(child_item, depth + 1)\n            for pair in pairs:\n                key = frozenset(pair[:depth])\n                if key not in seen_pairs:\n                    seen_pairs[key] = pair\n                    yield ((child_item.item,) + key)\n                else:\n                    yield from itertools.product(seen_pairs[key], pair[depth:], repeat=1)\n    return [(item,) * len(root.parent) for item in recursive_mining(root)]\nclass Node:\n\n    def __init__(self, parent, item=None, max_len=None):\n        self.parent = parent\n        self.item = item\n        self.max_len = max_len\n        self.children = {}\nassert fp_growth([['A','B','D','E'],['B','C','E'],['A','B','D','E'],['A','B','C','E'],['A','B','C','D','E'],['B','C','D']],3)==[('A',),('B',),('C',),('D',),('E',),('A','B'),('A','D'),('A','E'),('B','C'),('B','D'),('B','E'),('C','E'),('D','E'),('A','B','D'),('A','B','E'),('A','D','E'),('B','C','E'),('B','D','E'),('A','B','D','E')],\"failed on classic example\"\nassert fp_growth([['milk','bread'],['bread','butter'],['milk','bread','butter'],['bread'],['milk','bread']],3)==[('bread',),('milk',),('bread','milk')],\"failed on bread/milk example\"\nassert fp_growth([[1],[2],[3]],2)==[],\"failed on no frequent items\"\nassert fp_growth([[1,2],[1,2],[1,2]],1)==[(1,),(2,),(1,2)],\"failed on min_sup 1\"\nassert fp_growth([[1,2,3,4]],1)==[(1,),(2,),(3,),(4,),(1,2),(1,3),(1,4),(2,3),(2,4),(3,4),(1,2,3),(1,2,4),(1,3,4),(2,3,4),(1,2,3,4)],\"failed on single transaction\"\nassert fp_growth([[1,2,3],[1,2,3],[1,2,3]],3)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed on identical transactions\"\nassert fp_growth([[1,2],[2,3],[1,3],[1,2,3]],2)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed on triangle dataset\"\nassert fp_growth([[\"x\",\"y\"],[\"x\",\"z\"],[\"y\",\"z\"],[\"x\",\"y\",\"z\"]],2)==[(\"x\",),(\"y\",),(\"z\",),(\"x\",\"y\"),(\"x\",\"z\"),(\"y\",\"z\")],\"failed on string xyz\"\nassert fp_growth([],2)==[],\"failed on empty transaction list\""}
{"task_id": 492, "completion_id": 0, "passed": false, "result": "failed: name 'i' is not defined", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return [-1]\n    (n_samples, n_features) = (len(X), len(X[0]))\n    feature_combinations = sorted(list(combinations_with_replacement(range(n_features), degree)))\n    result_matrix = [[1] + [0] * n_features]\n    for combo in feature_combinations:\n        product = 1\n        for idx in combo:\n            product *= X[i][idx]\n        result_matrix.append([product] + [0] * n_features)\n    return result_matrix\nX = np.array([[1, 2], [3, 4]])\nassert polynomial_features([[2, 3]], 2) == [[1, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[2,3]],2)\"\nassert polynomial_features([[1, 2], [3, 4]], 1) == [[1, 1.0, 2.0], [1, 3.0, 4.0]], \"test case failed: ([[1,2],[3,4]],1)\"\nassert polynomial_features([[1], [2], [3]], 3) == [[1, 1.0, 1.0, 1.0], [1, 2.0, 4.0, 8.0], [1, 3.0, 9.0, 27.0]], \"test case failed: ([[1],[2],[3]],3)\"\nassert polynomial_features([[5, 0], [0, 5]], 0) == [[1], [1]], \"test case failed: ([[5,0],[0,5]],0)\"\nassert polynomial_features([[0, 0]], 3) == [[1] + [0.0]*9], \"test case failed: ([[0,0]],3)\"\nassert polynomial_features([[1, 2, 3]], 2) == [[1, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[1,2,3]],2)\"\nassert polynomial_features([[1, 2]], -1) == -1, \"test case failed: negative degree\"\nassert polynomial_features([[0.5, 1.5]], 2) == [[1, 0.5, 1.5, 0.25, 0.75, 2.25]], \"test case failed: ([[0.5,1.5]],2)\"\nassert polynomial_features([[1, 2], [3, 4], [5, 6]], 2) == [[1, 1.0, 2.0, 1.0, 2.0, 4.0], [1, 3.0, 4.0, 9.0, 12.0, 16.0], [1, 5.0, 6.0, 25.0, 30.0, 36.0]], \"test case failed: ([[1,2],[3,4],[5,6]],2)\"\nassert polynomial_features([[2, 1]], 3) == [[1, 2.0, 1.0, 4.0, 2.0, 1.0, 8.0, 4.0, 2.0, 1.0]], \"test case failed: ([[2,1]],3)\""}
{"task_id": 493, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    n = len(y)\n    y_mean = sum(y) / n\n    mse_result = sum(((yi - y_mean) ** 2 for yi in y)) / n\n    return round(mse_result, 4)\nassert mse([1, 2, 3]) == 0.6667, \"failed on mse([1, 2, 3])\"\nassert mse(np.array([0, 0, 0])) == 0.0, \"failed on mse([0,0,0])\"\nassert mse([-1, 1]) == 1.0, \"failed on mse([-1,1])\"\nassert mse([5]) == 0.0, \"failed on mse([5])\"\nassert mse([1, 3, 5, 7]) == 5.0, \"failed on mse([1,3,5,7])\"\nassert mse([2.5, 2.5, 2.5, 2.5]) == 0.0, \"failed on identical values\"\nassert mse(np.arange(10)) == 8.25, \"failed on np.arange(10)\"\nassert mse([]) == -1, \"failed on empty list\"\nassert mse(np.array([])) == -1, \"failed on empty np.array\"\nassert mse([100, -100, 0]) == 6666.6667, \"failed on mse([100,-100,0])\""}
{"task_id": 496, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef apply_affine(x, slope=1.0, intercept=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists - the activation output, the first derivative, and the second\n        derivative - each rounded to 4 decimal places.\n    \"\"\"\n    y = [slope * x_val + intercept for x_val in x]\n    grad = [slope for _ in range(len(y))]\n    grad2 = [0 for _ in range(len(y))]\n    y = [round(val, 4) for val in y]\n    grad = [round(val, 4) for val in grad]\n    grad2 = [round(val, 4) for val in grad2]\n    return (y, grad, grad2)\nassert apply_affine([0, 1, 2], 2, 1) == ([1.0, 3.0, 5.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0]), \"failed on ([0,1,2],2,1)\"\nassert apply_affine([-1, 0, 1], 0.5, -1) == ([-1.5, -1.0, -0.5], [0.5, 0.5, 0.5], [0.0, 0.0, 0.0]), \"failed on ([-1,0,1],0.5,-1)\"\nassert apply_affine([4]) == ([4.0], [1.0], [0.0]), \"failed on default params ([4])\"\nassert apply_affine([2, 4], -1, 0) == ([-2.0, -4.0], [-1.0, -1.0], [0.0, 0.0]), \"failed on negative slope\"\nassert apply_affine([0.1, 0.2], 3.3333, 0) == ([0.3333, 0.6667], [3.3333, 3.3333], [0.0, 0.0]), \"failed on fractional slope\"\nassert apply_affine([10, 20, 30], 0, 5) == ([5.0, 5.0, 5.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]), \"failed on zero slope\"\nassert apply_affine([1000, -1000], 0.1, 10) == ([110.0, -90.0], [0.1, 0.1], [0.0, 0.0]), \"failed on large magnitude inputs\"\nassert apply_affine([-7], -0.25, 2) == ([3.75], [-0.25], [0.0]), \"failed on single element negative slope\"\nassert apply_affine([0, 0, 0], 3, -2) == ([-2.0, -2.0, -2.0], [3.0, 3.0, 3.0], [0.0, 0.0, 0.0]), \"failed on zeros input\""}
{"task_id": 499, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic 2D, k=1", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    if k < 1 or k > data.shape[1]:\n        return -1\n    centered_data = data - data.mean(axis=0)\n    sample_covariance_matrix = np.cov(centered_data, rowvar=False, bias=True)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(sample_covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    top_k_eigenvectors = sorted_eigenvectors[:, :k]\n    transformed_data = np.dot(top_k_eigenvectors.T, centered_data.T).T\n    rounded_data = [list(map(lambda x: round(x, 4), row)) for row in transformed_data]\n    return rounded_data\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[-1.7321], [0.0], [1.7321]], \"test case failed: basic 2D, k=1\"\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 2) == [[-1.7321, 0.0], [0.0, 0.0], [1.7321, 0.0]], \"test case failed: basic 2D, k=2\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 1) == [[1.4142], [-1.4142]], \"test case failed: identity subset, k=1\"\nassert pca_transform(np.array([[2, 2], [2, 2]]), 1) == [[0.0], [0.0]], \"test case failed: zero variance, k=1\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 3) == -1, \"test case failed: k greater than features\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 0) == -1, \"test case failed: k equals zero\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 1) == [[-1.4142], [1.4142]], \"test case failed: diagonal line, k=1\"\nassert pca_transform(np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), 1) == [[-2.1213], [0.0], [2.1213]], \"test case failed: collinear 3D, k=1\"\nassert pca_transform(np.array([[1, 2], [1, 2], [1, 2]]), 1) == [[0.0], [0.0], [0.0]], \"test case failed: identical rows\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 2) == [[-1.4142, 0.0], [1.4142, 0.0]], \"test case failed: diagonal line, k=2\""}
{"task_id": 500, "completion_id": 0, "passed": false, "result": "failed: 'float' object is not subscriptable", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    c = len(y_train) / sum(y_train)\n    scores = [c] * len(X_train)\n    for _ in range(n_estimators):\n        h_values = []\n        proba = scores.copy()\n        for (i, (x, y)) in enumerate(zip(X_train, y_train)):\n            if x[-1] <= proba[i][-1][1]:\n                proba[i][-1][1] = -np.inf\n            else:\n                proba[i][-1][1] = np.inf\n        max_val = 0\n        best_threshold = None\n        for j in range(len(proba[0]) - 1):\n            p_left = np.sum([p[j] for p in proba])\n            p_right = 1 - p_left\n            val = -(2 * p_right - 1) * np.dot(np.array(proba).T, x[:-1])\n            if abs(val) > max_val:\n                max_val = abs(val)\n                best_threshold = x[-1]\n        for (i, (x, yt, probas)) in enumerate(zip(X_train, y_train, proba)):\n            if x[-1] <= best_threshold:\n                probas[i][-1][0] += learning_rate\n                probas[i][-1][1] -= learning_rate\n            else:\n                probas[i][-1][0] -= learning_rate\n                probas[i][-1][1] += learning_rate\n        r_t = [(yt - yt_hat) ** 2 for (yt, yt_hat) in zip(y_train, scores)]\n        r_t_sum = sum(r_t)\n        for (i, rt) in enumerate(r_t):\n            scores[i] += learning_rate * rt / r_t_sum\n    predictions = [int(s >= 0)] * len(X_test)\n    return predictions\nassert gradient_boosting_classifier([[0],[1],[2],[3]],[0,0,1,1],[[0],[3]],20,0.1)==[0,1],\"failed: basic one-dimensional separation\"\nassert gradient_boosting_classifier([[1],[2],[3],[10]],[0,0,1,1],[[2],[9]],15,0.2)==[0,1],\"failed: unequal gap separation\"\nassert gradient_boosting_classifier([[0],[1],[2],[3],[4]],[0,0,0,1,1],[[0.3],[3.7]],25,0.1)==[0,1],\"failed: threshold after three negatives\"\nassert gradient_boosting_classifier([[-3],[-2],[-1],[1],[2],[3]],[0,0,0,1,1,1],[[-2.5],[2.5]],20,0.1)==[0,1],\"failed: negatives versus positives\"\nassert gradient_boosting_classifier([[0,0],[1,1],[2,2],[3,3]],[0,0,1,1],[[0.1,0.1],[2.5,2.5]],20,0.1)==[0,1],\"failed: two-feature data\"\nassert gradient_boosting_classifier([[i] for i in range(10)],[0]*5+[1]*5,[[0.5],[7.2]],30,0.05)==[0,1],\"failed: larger dataset\"\nassert gradient_boosting_classifier([[1],[1.1],[1.2],[4],[4.1],[4.2]],[0,0,0,1,1,1],[[1.3],[4.05]],25,0.1)==[0,1],\"failed: close clusters\"\nassert gradient_boosting_classifier([[0,5],[0,6],[1,5],[1,6],[10,5],[10,6],[11,5],[11,6]],[0,0,0,0,1,1,1,1],[[0.5,5.5],[10.5,5.5]],20,0.1)==[0,1],\"failed: two-feature well separated\"\nassert gradient_boosting_classifier([[-2],[-1],[0],[1],[2]],[0,0,0,1,1],[[-1.5],[1.5]],20,0.1)==[0,1],\"failed: centred split\"\nassert gradient_boosting_classifier([[0],[1],[2],[3]], [0,0,1,1], [[1.4],[1.6]], 20, 0.1)==[0,1],\"failed: borderline predictions\""}
{"task_id": 505, "completion_id": 0, "passed": false, "result": "failed: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.size == 0:\n        return []\n    (num_samples, _) = X.shape\n    (_, n_hidden) = W.shape\n    p_h_given_v = sigmoid(np.dot(X, W.T) + hbias)\n    v_bak = np.copy(vbias)\n    for _ in range(k):\n        v_bak[:] = vbias[:]\n        for sample_idx in range(num_samples):\n            h_sample = p_h_given_v[sample_idx]\n            h_next = sigmoid(np.dot(h_sample, W) + vbias)\n            vbias[:] = vbias[:]\n            vbias += learning_rate * (h_next - h_sample)\n            p_h_given_v[sample_idx] = h_next\n    pos_grad = np.dot(X.T, p_h_given_v)\n    neg_grad = np.dot(vbias.reshape(-1, 1), p_h_given_v.T)\n    new_W = W + (pos_grad - neg_grad) / num_samples\n    return [[round(val, 4) for val in row] for row in new_W]\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.1, 1) == [[0.1007, -0.1997], [-0.0003, 0.0499], [-0.1006, 0.199]], \"test case failed: mixed mini-batch update\"\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.0, 1) == [[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]], \"test case failed: learning_rate = 0 should keep weights unchanged\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 1.0, 1) == [[-0.25, -0.25], [-0.25, -0.25]], \"test case failed: zero input should drive weights negative\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 0.0, 1) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: no-update expected with lr=0\"\nassert contrastive_divergence(np.array([[1.0, 1.0]]), np.array([[0.0], [0.0]]), np.zeros(1), np.zeros(2), 0.1, 1) == [[0.025], [0.025]], \"test case failed: ones input update\"\nassert contrastive_divergence(np.array([[1.0, 0.0, 0.0]]), np.zeros((3, 1)), np.zeros(1), np.zeros(3), 1.0, 1) == [[0.25], [-0.25], [-0.25]], \"test case failed: directional update\"\nassert contrastive_divergence(np.array([[0.0, 1.0]]), np.zeros((2, 1)), np.zeros(1), np.zeros(2), 0.5, 1) == [[-0.125], [0.125]], \"test case failed: lr=0.5 update\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.1, 1) == [[0.0737]], \"test case failed: decay on inactive visible node\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.0, 1) == [[0.1]], \"test case failed: learning_rate 0 with 1\u00d71 matrix\"\nassert contrastive_divergence(np.array([[1.0]]), np.array([[0.0]]), np.zeros(1), np.zeros(1), 0.2, 1) == [[0.05]], \"test case failed: 1\u00d71 positive update with lr=0.2\""}
{"task_id": 509, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if len(x_np) != len(y_np):\n        return -1\n    return round(np.max(np.abs(x_np - y_np)), 4)\nassert chebyshev([1, 2, 3], [2, 4, 6]) == 3.0, \"failed for ([1,2,3],[2,4,6])\"\nassert chebyshev([0, 0, 0], [0, 0, 0]) == 0.0, \"failed for zero vectors\"\nassert chebyshev([-1, -2, -3], [1, 2, 3]) == 6.0, \"failed for negatives\"\nassert chebyshev([1.5, 2.5], [1.4, 2.7]) == 0.2, \"failed for floats\"\nassert chebyshev(np.array([1, 2, 3]), np.array([1, 3, 5])) == 2.0, \"failed for numpy arrays\"\nassert chebyshev([1], [10]) == 9.0, \"failed for single-element vectors\"\nassert chebyshev([0.12345], [0.12344]) == 0.0, \"failed for rounding requirement\"\nassert chebyshev([1, 2, 3], [1, 2]) == -1, \"failed for length mismatch\""}
{"task_id": 510, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic reconstruction only", "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"\n    Compute the VAE loss for Bernoulli visible units.\n\n    The function computes the binary cross-entropy loss and the Kullback-Leibler\n    divergence loss, then returns their sum divided by the number of samples.\n\n    Args:\n        y (np.ndarray): Ground truth binary labels of shape (batch_size, ).\n        y_pred (np.ndarray): Reconstructed binary labels of shape (batch_size, ).\n        t_mean (np.ndarray): Mean of the approximate posterior over t.\n        t_log_var (np.ndarray): Log variance of the approximate posterior over t.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    batch_size = y.shape[0]\n    epsilon = np.finfo(np.float32).eps\n    y_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    bce_loss = -(y * np.log(y_clipped) + (1 - y) * np.log(1 - y_clipped))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var), axis=1)\n    total_loss = np.mean(bce_loss + kl_divergence)\n    return round(total_loss, 6)\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.9,0.2],[0.1,0.8]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.328504, \"test case failed: basic reconstruction only\"\nassert vae_loss(np.array([[1,1],[0,0]]),\n                 np.array([[0.8,0.7],[0.3,0.2]]),\n                 np.array([[0.2,-0.1],[-0.3,0.5]]),\n                 np.array([[-0.2,0.1],[0.1,-0.3]])) == 0.694791, \"test case failed: reconstruction + KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.5]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 0.693147, \"test case failed: single element, zero KL\"\nassert vae_loss(np.array([[1,0,1]]),\n                 np.array([[0.9,0.1,0.4]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 1.127012, \"test case failed: three features, no KL\"\nassert vae_loss(np.array([[1,0],[1,0]]),\n                 np.array([[0.7,0.3],[0.6,0.4]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.867501, \"test case failed: batch size 2, no KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.8]]),\n                 np.array([[0.5]]),\n                 np.array([[-0.1]])) == 0.350562, \"test case failed: single element with KL\"\nassert vae_loss(np.array([[0]]),\n                 np.array([[0.2]]),\n                 np.array([[0.0]]),\n                 np.array([[0.2]])) == 0.233845, \"test case failed: y=0 with KL\"\nassert vae_loss(np.array([[0,1,0,1]]),\n                 np.array([[0.2,0.9,0.4,0.8]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 1.062473, \"test case failed: four features, no KL\"\nassert vae_loss(np.array([[1,1,1]]),\n                 np.array([[0.5,0.5,0.5]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 2.079442, \"test case failed: three identical probabilities\"\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.55,0.45],[0.45,0.55]]),\n                 np.array([[0.1,-0.1],[0.2,0.3]]),\n                 np.zeros((2,2))) == 1.233174, \"test case failed: mixed KL values\""}
{"task_id": 513, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,2) (3,2) ", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    assert len(w) == len(V[0]), 'Number of linear terms must equal the number of latent factor columns.'\n    X_array = np.array(X)\n    w_array = np.array(w)\n    V_array = np.array(V).T\n    interactions = np.sum(np.square(V_array * X_array), axis=1)\n    quadratic_form = np.dot(V_array.T, np.dot(X_array.T, np.dot(X_array, V_array)))\n    y_pred = w0 + np.dot(X_array, w_array) + 0.5 * (interactions - np.square(interactions))\n    return [round(pred.item(), 4) for pred in y_pred]\nassert fm_predict([[1, 0], [0, 1], [1, 1]], 0.5, [1, 2], [[0.1, 0.2], [0.3, 0.4]]) == [1.5, 2.5, 3.61], \"test case failed: basic example\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[1], [1]]) == [2.0], \"test case failed: interaction only\"\nassert fm_predict([[3, 4]], 1.0, [-1, -1], [[0, 0], [0, 0]]) == [-6.0], \"test case failed: no interactions\"\nassert fm_predict([[1, 1], [2, 2]], 0.0, [1, 1], [[0.5], [0.5]]) == [2.25, 5.0], \"test case failed: repeated sample\"\nassert fm_predict([[0, 0]], 0.0, [1, 2], [[0, 0], [0, 0]]) == [0.0], \"test case failed: all zeros\"\nassert fm_predict([[1, 3]], 2.0, [0, 1], [[-0.5], [0.5]]) == [4.25], \"test case failed: negative factors\"\nassert fm_predict([[1, 2, 3], [0, 1, 0]], 0.1, [1, -1, 0.5], [[0.2, 0.3], [0.4, 0.1], [0.5, 0.7]]) == [3.37, -0.9], \"test case failed: 3 features, 2 factors\"\nassert fm_predict([[2]], -1.0, [1], [[0.5]]) == [1.0], \"test case failed: single feature\"\nassert fm_predict([[1, 0], [0, 0], [0, 1]], 0.0, [1, 1], [[0, 0], [0, 0]]) == [1.0, 0.0, 1.0], \"test case failed: mixed zeros\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[0.5], [1.5]]) == [1.5], \"test case failed: fractional interaction\""}
{"task_id": 517, "completion_id": 0, "passed": false, "result": "failed: bad operand type for unary -: 'list'", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n\n    def safe_exp(x):\n        \"\"\"Return exp(x), but use a small value instead of nan if x < -700.\"\"\"\n        if x >= -700:\n            return np.exp(x)\n        else:\n            return np.finfo(np.float32).eps\n    sig_z = 1 / (1 + safe_exp(-z))\n    return [sig_z] if isinstance(z, (list, tuple)) or hasattr(z, 'tolist') else round(sig_z, 4)\nassert sigmoid(0) == 0.5, \"test case failed: sigmoid(0)\"\nassert sigmoid(5) == 0.9933, \"test case failed: sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"test case failed: sigmoid(-5)\"\nassert sigmoid(100) == 1.0, \"test case failed: sigmoid(100)\"\nassert sigmoid(-100) == 0.0, \"test case failed: sigmoid(-100)\"\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test case failed: sigmoid([-1,0,1])\"\nassert sigmoid(np.array([2, -2, 0.5, -0.5])) == [0.8808, 0.1192, 0.6225, 0.3775], \"test case failed: sigmoid([2,-2,0.5,-0.5])\"\nassert sigmoid([[0, 10], [-10, 1]]) == [[0.5, 1.0], [0.0, 0.7311]], \"test case failed: sigmoid([[0,10],[-10,1]])\"\nassert sigmoid([700, -700]) == [1.0, 0.0], \"test case failed: sigmoid([700,-700])\"\nassert sigmoid(np.array([[3]])) == [[0.9526]], \"test case failed: sigmoid([[3]])\""}
{"task_id": 518, "completion_id": 0, "passed": false, "result": "failed: name 'functools' is not defined", "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        (actual, predicted) = args\n        if actual.ndim > 1 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim > 1 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        result = function(actual, predicted)\n        return result\n    return wrapper\ndef example_metric(actual_array, predicted_array):\n    return np.sum(actual_array == predicted_array)\nmetric_function = unhot(example_metric)\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])\nresult = metric_function(actual, predicted)\nassert abs(_accuracy(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[0,1,0],[0,0,1]])) - 0.6667) < 1e-4, \"test case failed: accuracy with both inputs one-hot\"\nassert abs(_accuracy(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]])) - 1.0) < 1e-9, \"test case failed: perfect match one-hot\"\nassert abs(_accuracy(np.array([0,1,1,0]), np.array([[1,0],[0,1],[0,1],[1,0]])) - 1.0) < 1e-9, \"test case failed: actual labels, predicted one-hot\"\nassert abs(_accuracy(np.array([[0,0,1],[1,0,0],[0,1,0]]), np.array([2,0,1])) - 1.0) < 1e-9, \"test case failed: actual one-hot, predicted labels\"\nassert abs(_accuracy(np.array([[1,0],[0,1],[1,0],[0,1]]), np.array([[1,0],[1,0],[1,0],[0,1]])) - 0.75) < 1e-9, \"test case failed: two-class partial mismatch\"\nassert _collect(np.array([[2],[0],[1]]), np.array([[2],[0],[1]])) == ([[2],[0],[1]], [[2],[0],[1]]), \"test case failed: shape (n,1) should remain unchanged\"\nassert _collect(np.array([1,0,2]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2], [1,0,2]), \"test case failed: mixed dimensionalities\"\nassert _collect(np.eye(5, dtype=int), np.eye(5, dtype=int))[0] == [0,1,2,3,4], \"test case failed: five-class eye matrix\"\nassert _collect(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2],[1,0,2]), \"test case failed: explicit conversion check\"\nassert _collect(np.array([3,1,4,1,5]), np.array([3,1,4,1,5])) == ([3,1,4,1,5],[3,1,4,1,5]), \"test case failed: 1-D labels untouched\""}
{"task_id": 520, "completion_id": 0, "passed": false, "result": "failed: failed on scalar 0.5", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [round(grad, 4) for grad in sigmoid_val(z)]\n    elif np.isscalar(z):\n        return round(sigmoid_val(z), 4)\n    else:\n        return [sigmoid_val(z_) for z_ in z]\ndef sigmoid_val(z):\n    \"\"\"Compute the sigmoid value.\"\"\"\n    return max(min(z, 1 - z), -(1 - z))\nassert sigmoid_grad(0.5) == 0.25, \"failed on scalar 0.5\"\nassert sigmoid_grad(0.8) == 0.16, \"failed on scalar 0.8\"\nassert sigmoid_grad([0.5, 0.8]) == [0.25, 0.16], \"failed on list [0.5,0.8]\"\nassert sigmoid_grad([[0.5, 0.4], [0.7, 0.3]]) == [[0.25, 0.24], [0.21, 0.21]], \"failed on 2D list\"\nassert sigmoid_grad(0.0) == 0.0, \"failed on boundary 0.0\"\nassert sigmoid_grad(1.0) == 0.0, \"failed on boundary 1.0\"\nassert sigmoid_grad([0.2, 0.4, 0.6, 0.8]) == [0.16, 0.24, 0.24, 0.16], \"failed on list [0.2,0.4,0.6,0.8]\"\nassert sigmoid_grad([0.7310586]) == [0.1966], \"failed on list [0.7310586]\"\nassert sigmoid_grad([]) == [], \"failed on empty list\"\nassert sigmoid_grad(np.array([[0.25, 0.75]])) == [[0.1875, 0.1875]], \"failed on numpy input\""}
{"task_id": 528, "completion_id": 0, "passed": false, "result": "failed: test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3)", "solution": "import numpy as np\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with -1 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    pred_labels = []\n    (xmin, xmax) = (np.min(X, axis=0), np.max(X, axis=0))\n    x1_plot = np.linspace(xmin[0], xmax[0], grid_n)\n    x2_plot = np.linspace(xmin[1], xmax[1], grid_n)\n    (xv, yv) = np.meshgrid(x1_plot, x2_plot)\n    Z = xv.ravel() * W[0] + yv.ravel() * W[1] + b\n    sign_values = np.sign(Z)\n    prediction_matrix = sign_values.reshape((grid_n, grid_n))\n    pred_labels = prediction_matrix.T.tolist()\n    return pred_labels\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3) == [[1, 1, 1], [-1, 1, 1], [-1, -1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3) == [[-1, -1, -1], [1, 1, 1], [1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3) == [[-1, 1, 1], [-1, 1, 1], [-1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2) == [[1, 1], [1, -1]], \"test case failed: decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2)\"\nres = decision_boundary_grid([[0, 0], [3, 3]], [1, 1], -6, 4)\nassert len(res) == 4 and all(len(r) == 4 for r in res), \"test case failed: decision_boundary_grid shape with grid_n=4\"\nassert decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2) == [[-1, 1], [1, 1]], \"test case failed: decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2)\"\nall_pos = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], 5, 2)\nassert all(v == 1 for row in all_pos for v in row), \"test case failed: decision_boundary_grid bias all positive\"\nall_neg = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], -5, 2)\nassert all(v == -1 for row in all_neg for v in row), \"test case failed: decision_boundary_grid bias all negative\"\nassert decision_boundary_grid([[0, 0], [4, 1]], [1, -1], 0, 3)[0] == [1, 1, 1], \"test case failed: decision_boundary_grid non square range\"\nret = decision_boundary_grid([[0, 0], [1, 1]], [1, 1], 0, 2)\nassert isinstance(ret, list) and all(isinstance(r, list) for r in ret), \"test case failed: decision_boundary_grid return type\""}
{"task_id": 537, "completion_id": 0, "passed": false, "result": "failed: test case 3 failed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"\n    Gauusian naive bayes implementation trained on the input training\n    dataset, then used to predict the labels of unseen data points.\n\n    :param X_train: np.ndarray, training dataset, shape = (n_samples, n_features)\n    :param y_train: np.ndarray, target values, shape = (n_samples,)\n    :param X_test: np.ndarray, testing dataset, shape = (n_samples, n_features)\n    :return: np.ndarray, predictions, shape = (n_samples,)\n    \"\"\"\n\n    def normal_pdf(x, mu, sigma):\n        epsilon = 1e-09\n        std_dev = sigma + epsilon\n        pdf = 1 / (np.sqrt(2 * np.pi) * std_dev) * np.exp(-(x - mu) ** 2 / (2 * std_dev ** 2))\n        return pdf\n    n_classes = len(np.unique(y_train))\n    n_features = X_train.shape[1]\n    priors = np.bincount(y_train) / len(y_train)\n    mu_per_class = []\n    sigma_sq_per_class = []\n    for i in range(n_classes):\n        indices_i = y_train == i\n        mu_per_class.append(np.mean(X_train[indices_i], axis=0))\n        sigma_sq_per_class.append(np.var(X_train[indices_i], axis=0))\n    mu_per_class = np.array(mu_per_class)\n    sigma_sq_per_class = np.array(sigma_sq_per_class)\n    posteriors = []\n    for x in X_test:\n        class_posterior = np.zeros(n_classes)\n        for i in range(n_classes):\n            numerator = np.prod(normal_pdf(x, mu_per_class[i, :], sigma_sq_per_class[i]) * priors[i])\n            denominator = np.sum([normal_pdf(x, mu_per_class[j, :], sigma_sq_per_class[j]) for j in range(n_classes)])\n            if denominator != 0:\n                class_posterior[i] = numerator / denominator\n            else:\n                raise ValueError('Division by zero occurred while calculating posterior probabilities.')\n        max_idx = np.argmax(class_posterior)\n        posteriors.append(max_idx)\n    return posteriors\nassert gaussian_naive_bayes(np.array([[1.0,20.0],[2.0,21.0],[3.0,22.0],[10.0,5.0],[11.0,6.0],[12.0,7.0]]), np.array([0,0,0,1,1,1]), np.array([[2.5,20.5],[11.5,6.5]])) == [0,1], \"test case 1 failed\"\nassert gaussian_naive_bayes(np.array([[1],[2],[3],[8],[9],[10]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[8.5]])) == [0,1], \"test case 2 failed\"\nassert gaussian_naive_bayes(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,1,1]), np.array([[0,0.2],[0.9,0.9]])) == [0,1], \"test case 3 failed\"\nassert gaussian_naive_bayes(np.array([[5],[6],[7],[2],[3],[4]]), np.array([1,1,1,0,0,0]), np.array([[6.5],[2.5]])) == [1,0], \"test case 4 failed\"\nassert gaussian_naive_bayes(np.array([[1,1],[1,2],[2,1],[8,8],[9,9],[9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.8,1.5],[8.5,8.3]])) == [0,1], \"test case 5 failed\"\nassert gaussian_naive_bayes(np.array([[2,3],[2,2],[3,3],[7,7],[8,7],[8,6]]), np.array([0,0,0,1,1,1]), np.array([[2.1,2.9],[7.9,6.9]])) == [0,1], \"test case 6 failed\"\nassert gaussian_naive_bayes(np.array([[10],[11],[12],[1],[2],[3]]), np.array([1,1,1,0,0,0]), np.array([[11],[2]])) == [1,0], \"test case 7 failed\"\nassert gaussian_naive_bayes(np.array([[1,2,3],[1,2,2],[2,2,3],[8,9,9],[9,8,9],[9,9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.5,2,2.8],[9,8.8,8.9]])) == [0,1], \"test case 8 failed\"\nassert gaussian_naive_bayes(np.array([[0],[0],[0],[10],[10],[10]]), np.array([0,0,0,1,1,1]), np.array([[0.1],[9.9]])) == [0,1], \"test case 9 failed\"\nassert gaussian_naive_bayes(np.array([[4,5],[4,4],[5,4],[15,15],[16,14],[15,14]]), np.array([0,0,0,1,1,1]), np.array([[4.2,4.6],[15.2,14.8]])) == [0,1], \"test case 10 failed\""}
{"task_id": 539, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Args:\n        AL (np.ndarray): Model probabilities, shape (1, m)\n        Y (np.ndarray): Ground truth labels, shape (1, m)\n\n    Returns:\n        float: The computed cost\n    \"\"\"\n    AL[AL < 1e-15] = 1e-15\n    AL[AL > 1 - 1e-15] = 1 - 1e-15\n    m = Y.shape[1]\n    logprobs = np.multiply.reduce(Y * np.log(AL)) + np.multiply.reduce((1 - Y) * np.log(1 - AL))\n    return -np.sum(logprobs) / m\nassert abs(compute_cost(np.array([[0.8,0.9,0.4]]),np.array([[1,1,0]]))-( -(1/3)*np.sum(np.array([[1,1,0]])*np.log(np.array([[0.8,0.9,0.4]]))+(1-np.array([[1,1,0]]))*np.log(1-np.array([[0.8,0.9,0.4]])) ) ))<1e-12, \"test case failed: simple example\"\nassert abs(compute_cost(np.array([0.35]),np.array([0]))-(-np.sum(np.array([0])*np.log(np.array([0.35]))+(1-np.array([0]))*np.log(1-np.array([0.35])))))<1e-12, \"test case failed: single sample\"\nassert abs(compute_cost(np.array([1e-20,1-1e-20]),np.array([0,1])) - (-(1/2)*np.sum(np.array([0,1])*np.log(np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)) + (1-np.array([0,1]))*np.log(1-np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)))))<1e-12, \"test case failed: clipping\"\nassert abs(compute_cost(np.array([[0.2,0.4,0.6,0.8,0.5]]),np.array([[0,0,1,1,0]]))-( -(1/5)*np.sum(np.array([[0,0,1,1,0]])*np.log(np.array([[0.2,0.4,0.6,0.8,0.5]]))+(1-np.array([[0,0,1,1,0]]))*np.log(1-np.array([[0.2,0.4,0.6,0.8,0.5]])) ) ))<1e-12, \"test case failed: batch size 5\"\nassert abs(compute_cost(np.array([0.7,0.3,0.2]),np.array([1,0,0]))-( -(1/3)*np.sum(np.array([1,0,0])*np.log(np.array([0.7,0.3,0.2]))+(1-np.array([1,0,0]))*np.log(1-np.array([0.7,0.3,0.2])) ) ))<1e-12, \"test case failed: flat vector\"\nassert abs(compute_cost(np.array([0.1,0.2,0.3,0.4]),np.zeros(4))-( -(1/4)*np.sum((1-np.zeros(4))*np.log(1-np.array([0.1,0.2,0.3,0.4])) ) ))<1e-12, \"test case failed: all zeros\"\nassert abs(compute_cost(np.array([0.6,0.7,0.8]),np.ones(3))-( -(1/3)*np.sum(np.ones(3)*np.log(np.array([0.6,0.7,0.8])) ) ))<1e-12, \"test case failed: all ones\"\nnp.random.seed(0); AL=np.random.rand(1,10); Y=(AL>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 1\"\nnp.random.seed(42); AL=np.random.rand(10); Y=(np.random.rand(10)>0.3).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 2\"\nnp.random.seed(7); AL=np.random.rand(1,100); Y=(np.random.rand(1,100)>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/100)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: large batch\""}
{"task_id": 552, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    if not 0 <= t < len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    \u03b1 = np.zeros((len(observations) + 1, N))\n    \u03b1[0] = pi\n    for step in range(len(observations)):\n        current_observation = observations[step]\n        \u03b1[step + 1] = np.dot(A[:, current_observation], \u03b1[step])\n    \u03b2 = []\n    \u03b2.append(np.ones(N))\n    for step in reversed(range(len(observations))):\n        current_observation = observations[step]\n        \u03b2.insert(0, np.array(B[current_observation]))\n        for j in range(len(B[current_observation])):\n            \u03b2[0][j] *= \u03b2[-1][j]\n    \u03b2 = np.array(\u03b2[::-1])\n    \u03b3 = np.outer(\u03b1, \u03b2) / sum(sum(\u03b1))\n    \u03b3 = [round(x, 4) for x in \u03b3.flatten()]\n    return \u03b3.tolist()\nassert gamma_probabilities({\"pi\": [0.6, 0.4], \"A\": [[0.7, 0.3], [0.4, 0.6]], \"B\": [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]}, [0,1,2], 1) == [0.6229, 0.3771], \"test case failed: example sequence t=1\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [0,1,0,1], 2) == [0.5,0.5], \"test case failed: uniform 2-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [1], 0) == [0.5,0.5], \"test case failed: uniform 2-state single step\"\nassert gamma_probabilities({\"pi\": [1/3,1/3,1/3], \"A\": [[1/3]*3]*3, \"B\": [[0.25,0.25],[0.25,0.25],[0.25,0.25]]}, [0,1], 1) == [0.3333,0.3333,0.3333], \"test case failed: uniform 3-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [0,0,0], 2) == [1.0,0.0], \"test case failed: deterministic emission state 0\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [1], 0) == [0.0,1.0], \"test case failed: deterministic emission state 1\"\nassert gamma_probabilities({\"pi\": [0.8,0.2], \"A\": [[0.6,0.4],[0.4,0.6]], \"B\": [[0.6,0.4],[0.3,0.7]]}, [0], 0) == [0.8889,0.1111], \"test case failed: single observation\"\nassert gamma_probabilities({\"pi\": [0.25,0.25,0.25,0.25], \"A\": [[0.25]*4]*4, \"B\": [[0.25]*4]*4}, [0,1,2,3], 3) == [0.25,0.25,0.25,0.25], \"test case failed: uniform 4-state\""}
{"task_id": 555, "completion_id": 0, "passed": false, "result": "failed: name 'assign_to_existing_cluster' is not defined", "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef euclidean_distance(x1, x2):\n    \"\"\"Calculate the Euclidean distance between two vectors.\"\"\"\n    return np.linalg.norm(x1 - x2)\ndef build_neighborhood_list(data, epsilon, min_samples):\n    \"\"\"Build a list of neighborhoods for each sample based on the specified radius.\"\"\"\n    (m, n) = data.shape\n    distances = np.zeros((m, m))\n    for i in range(m):\n        for j in range(i + 1, m):\n            dist = euclidean_distance(data[i], data[j])\n            if dist <= epsilon:\n                distances[i][j] = dist\n                distances[j][i] = dist\n    neighborhood_lists = []\n    for i in range(m):\n        row_neighbors = [dist for dist in distances[i]]\n        neighborhood_lists.append(row_neighbors)\n    return neighborhood_lists\ndef find_core_points(neighborhoods, min_samples):\n    \"\"\"Identify core points within the given neighborhoods based on the minimum number of samples.\"\"\"\n    num_features = len(neighborhoods[0])\n    cores = set()\n    for (i, neighborhood) in enumerate(neighborhoods):\n        count = sum((1 for d in neighborhood if d >= min_samples))\n        if count > 0:\n            cores.add(i)\n    return list(cores)\ndef bfs_queue(neighbors, start_point):\n    \"\"\"Perform BFS starting from the provided index to identify connected clusters.\"\"\"\n    queue = deque([start_point])\n    visited_indices = {start_point}\n    clusters = [[start_point]]\n    while queue:\n        node = queue.popleft()\n        for neighbor_index in sorted(range(len(neighbors[node])), key=lambda i: (-neighbors[node][i], i)):\n            if neighbor_index not in visited_indices:\n                visited_indices.add(neighbor_index)\n                queue.append(neighbor_index)\n                clusters[-1].append(neighbor_index)\n    return clusters\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Implementation of the DBSCAN algorithm.\"\"\"\n    (m, _) = data.shape\n    max_cluster_id = -1\n    distances = np.array([[euclidean_distance(a, b) for b in data] for a in data])\n    neighborhood_lists = build_neighborhood_list(data, eps, min_samples)\n    core_points = find_core_points(neighborhood_lists, min_samples)\n    for core_point in core_points:\n        clusters = bfs_queue(neighborhood_lists, core_point)\n        max_cluster_id = max(max_cluster_id, max((cluster for cluster in clusters)) or 0)\n    assigned_clusters = [-1] * m\n    for i in range(m):\n        if i not in core_points:\n            assigned_clusters[i] = min_cluster_id_for_single_sample(assigned_clusters, i, data, eps, min_samples, max_cluster_id)\n    return assigned_clusters\ndef min_cluster_id_for_single_sample(assigned_clusters, single_sample, data, eps, min_samples, max_cluster_id):\n    \"\"\"Assign the closest existing cluster id to the single sample.\"\"\"\n    nearest_cluster_id = None\n    min_distance_sum = float('inf')\n    for cluster_id in range(1, max_cluster_id + 1):\n        total_distance_sq = 0\n        for point in data[cluster_id - 1]:\n            total_distance_sq += (point - data[single_sample]) ** 2\n        avg_distance = total_distance_sq / len(data[cluster_id - 1])\n        if avg_distance < min_distance_sum:\n            min_distance_sum = avg_distance\n            nearest_cluster_id = cluster_id\n    new_assigned_cluster_id = nearest_cluster_id\n    if new_assigned_cluster_id != -1:\n        assign_to_existing_cluster(assigned_clusters, single_sample, new_assigned_cluster_id, data, eps, min_samples, max_cluster_id)\n    else:\n        assign_new_cluster(assigned_clusters, single_sample, data, eps, min_samples, max_cluster_id)\n    return new_assigned_cluster_id\nassert dbscan(np.array([[0,0],[0,1],[1,0],[1,1],[5,5]]),1.5,3)==[1,1,1,1,-1],\"case 1 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,3)==[1,1,1,2,2,2],\"case 2 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,4)==[-1,-1,-1,-1,-1,-1],\"case 3 failed\"\nassert dbscan(np.array([[0,0],[0,0],[0,0.1],[0.1,0]]),0.2,2)==[1,1,1,1],\"case 4 failed\"\nassert dbscan(np.array([[0],[0.5],[1.0],[5.0],[5.1],[5.2]]),0.3,2)==[-1,-1,-1,1,1,1],\"case 5 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),15,2)==[1,1,1,1,1,1],\"case 6 failed\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[1,1,1,1],\"case 7 failed\"\nassert dbscan(np.array([[0,0],[0,0.5],[10,10],[20,20]]),1,2)==[1,1,-1,-1],\"case 8 failed\"\nassert dbscan(np.array([[0,0]]),0.5,1)==[1],\"case 9 failed\"\nassert dbscan(np.array([[-5,-5],[-5,-4],[-4,-5],[5,5]]),1.5,3)==[1,1,1,-1],\"case 10 failed\""}
{"task_id": 561, "completion_id": 0, "passed": false, "result": "failed: name 'gmm_em' is not defined", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport numpy as np\nassert gmm_em(np.array([[1,2],[1,3],[2,2],[8,8],[9,8],[9,9]]),2) == [0,0,0,1,1,1], \"test case failed: basic two clusters\"\nassert gmm_em(np.array([[1],[1.2],[1.1],[8],[9],[8.5]]),2) == [0,0,0,1,1,1], \"test case failed: one-dimensional data\"\nassert gmm_em(np.array([[3,4],[5,6]]),1) == [0,0], \"test case failed: single component\"\nassert gmm_em(np.array([[2,2],[2,2],[2,2],[8,8],[8,8],[8,8]]),2) == [0,0,0,1,1,1], \"test case failed: duplicate points\"\nassert gmm_em(np.array([[0,0],[0,0.1],[0,0.2],[5,0],[5,0.1],[5,0.2]]),2) == [0,0,0,1,1,1], \"test case failed: vertical separation\"\nassert gmm_em(np.array([[-5,-5],[-4.9,-5],[-5.2,-4.8],[5,5],[4.8,5.1],[5.2,4.9]]),2) == [0,0,0,1,1,1], \"test case failed: symmetric clusters\"\nassert gmm_em(np.array([[0,0,0],[0.1,0,0],[0,0.2,0.1],[5,5,5],[5.1,5.1,5.1],[4.9,5,5.2]]),2) == [0,0,0,1,1,1], \"test case failed: three-dimensional data\"\nassert gmm_em(np.array([[1,1],[1,1.1],[1.2,1],[1,0.9],[9,9],[9.1,9],[9,9.2],[9.2,9.1]]),2) == [0,0,0,0,1,1,1,1], \"test case failed: larger cluster size\"\nassert gmm_em(np.array([[-10,-10],[ -9.8,-9.7],[-10.2,-10.1],[10,10],[9.8,9.9],[10.1,10.2]]),2) == [0,0,0,1,1,1], \"test case failed: distant clusters\""}
{"task_id": 562, "completion_id": 0, "passed": false, "result": "failed: shapes (2,) and (5,5,2) not aligned: 2 (dim 0) != 5 (dim 1)", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    import scipy.sparse.linalg\n\n    def gaussian_kernel(X):\n        kernel_matrix = np.exp(-(X[:, None, :] - X[None, :, :]) ** 2 / (-2 * gamma))\n        return kernel_matrix\n    G = gaussian_kernel(data)\n    if method == 'unnormalized':\n        L = G\n    elif method == 'normalized':\n        D = np.diag(np.sum(G, axis=1)) ** (-1 / 2)\n        L_sym = np.dot(D, np.dot(G, D))\n        L = scipy.sparse.eye(len(L_sym), format='lil') - L_sym + L_sym\n    D_inv_sqrt = np.diag(1 / np.sqrt(np.sum(G, axis=1)))\n    L = np.dot(np.dot(D_inv_sqrt, G), D_inv_sqrt)\n    (eigenvalues, eigenvectors) = scipy.sparse.linalg.eigsh(L, k=n_cluster, which='LM')\n    reduced_eigenvectors = eigenvectors[np.argsort(eigenvalues)[0:n_cluster]]\n    (_, labels) = scipy.cluster.vq.kmeans(reduced_eigenvectors, n_clusters=n_cluster)\n    min_label = min(labels)\n    max_label = max(labels) + 1\n    shifted_labels = [label - min_label for label in labels]\n    return shifted_labels.tolist()\ndata = np.random.rand(100, 2)\nassert spectral_clustering(np.array([[0, 0], [5, 5], [0.2, -0.2], [-0.1, 0.3], [5.1, 4.9]]), 2) == [0, 1, 0, 0, 1], \"test case failed: a1, 2\"\nassert spectral_clustering(np.array([[-5, -5], [5, 5], [-4.8, -5.2], [5.2, 5.1]]), 2, method='normalized') == [0, 1, 0, 1], \"test case failed: a2, 2 normalized\"\nassert spectral_clustering(np.array([[0, 0], [10, 10], [20, 20], [0.2, -0.1], [9.8, 10.2], [19.9, 20.2]]), 3) == [0, 1, 2, 0, 1, 2], \"test case failed: a3, 3\"\nassert spectral_clustering(np.random.randn(8, 2), 1) == [0]*8, \"test case failed: single cluster\"\nassert spectral_clustering(np.array([[1, 1], [1, 1], [10, 10], [10, 10]]), 2) == [0, 0, 1, 1], \"test case failed: repeated points\"\nassert spectral_clustering(np.array([[0, 0], [5, 0], [0.1, 0.2], [4.9, -0.1]]), 2, gamma=0.5) == [0, 1, 0, 1], \"test case failed: gamma=0.5\"\nassert spectral_clustering(np.array([[0, 0, 0], [0.1, 0.0, -0.1], [5, 5, 5], [5.1, 4.9, 5.2]]), 2) == [0, 0, 1, 1], \"test case failed: 3-D data\"\nassert spectral_clustering(np.array([[0, 0], [0, 5], [0.1, 0.2], [0.05, -0.1], [-0.02, 5.1]]), 2) == [0, 1, 0, 0, 1], \"test case failed: vertical split\"\nassert spectral_clustering(np.array([[0, 0], [10, 0], [0.1, 0.05], [9.9, -0.05]]), 2) == [0, 1, 0, 1], \"test case failed: horizontal split\"\nassert spectral_clustering(np.array([[0, 0], [5, 5], [10, 10], [0.1, -0.1], [5.1, 4.9], [9.9, 10.2]]), 3, method='normalized') == [0, 1, 2, 0, 1, 2], \"test case failed: 3 clusters normalized\""}
{"task_id": 563, "completion_id": 0, "passed": false, "result": "failed: name 'yi' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"\n    Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Parameters:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels -1 or 1.\n        eta:     Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n\n    def _update_weights(alpha, G, y_i, xi, eta):\n        \"\"\"Update alpha and b based on one step of gradient descent.\"\"\"\n        g = np.dot(G, alpha)\n        yi_g_b = y_i * (g + b)\n        if yi_g_b <= 0:\n            alpha -= eta\n            b += eta * y_i\n    (N, d) = X_data.shape\n    alpha = np.zeros((N,))\n    b = 0\n    G = np.dot(X_data.T, X_data)\n    for _ in range(max_iter):\n        converged = True\n        for i in range(N):\n            y_i = y_data[i]\n            xi = X_data[i]\n            delta_alpha = alpha[y_i] * yi * np.dot(G[i], xi)\n            alpha[y_i] += eta * delta_alpha\n            b += eta * y_i * delta_alpha\n            _update_weights(alpha, G, y_i, xi, eta)\n            if not np.isclose(delta_alpha, 0, atol=1e-06):\n                converged = False\n                break\n        if converged:\n            break\n    w = sum((a * y_i * xi for (a, y_i, xi) in zip(alpha, y_data, X_data)))\n    w = [round(w_val, 4) for w_val in w]\n    return (w, round(b, 4))\nassert perceptron_dual_train(np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 1.0], 1.0), \"failed test 1\"\nassert perceptron_dual_train(np.array([[1, 0], [2, 0], [-1, 0], [-2, 0]]), np.array([1, 1, -1, -1])) == ([2.0, 0.0], 0.0), \"failed test 2\"\nassert perceptron_dual_train(np.array([[2, 2], [1, 1], [-1, -1], [-2, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 1.0), \"failed test 3\"\nassert perceptron_dual_train(np.array([[1, 1, 1], [2, 2, 2], [-1, -1, -1], [-2, -2, -2]]), np.array([1, 1, -1, -1])) == ([1.0, 1.0, 1.0], 1.0), \"failed test 4\"\nassert perceptron_dual_train(np.array([[1, 1], [-1, -1]]), np.array([1, -1])) == ([1.0, 1.0], 1.0), \"failed test 5\"\nassert perceptron_dual_train(np.array([[0, 1], [0, 2], [0, -1], [0, -2]]), np.array([1, 1, -1, -1])) == ([0.0, 2.0], 0.0), \"failed test 6\"\nassert perceptron_dual_train(np.array([[1], [2], [-1], [-2]]), np.array([1, 1, -1, -1])) == ([2.0], 0.0), \"failed test 7\"\nassert perceptron_dual_train(np.array([[3, 3], [-3, -3]]), np.array([1, -1])) == ([3.0, 3.0], 1.0), \"failed test 8\"\nassert perceptron_dual_train(np.array([[1, 0], [0, 1], [-1, 0], [0, -1]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 0.0), \"failed test 9\"\nassert perceptron_dual_train(np.array([[1, 1], [2, 2], [-2, -2]]), np.array([1, 1, -1])) == ([1.0, 1.0], 1.0), \"failed test 10\""}
{"task_id": 564, "completion_id": 0, "passed": false, "result": "failed: name 'root1' is not defined", "solution": "\ndef predict_sample(root: 'Node', features: list | tuple, task_type: str) -> int:\n    if task_type.lower() == 'classification':\n        while len(root.child) > 1:\n            x = features[root.label]\n            if x < root.s:\n                root = root.child[0]\n            else:\n                root = root.child[1]\n        y = root.y\n    elif task_type.lower() == 'regression':\n        s = features[root.label]\n        i = 0\n        while True:\n            x = features[i]\n            if x <= s:\n                root = root.child[0]\n                i += 1\n            else:\n                break\n        y = root.y\n    return y\nassert predict_sample(root1, [\"red\"], \"classification\") == \"apple\", \"TC1 failed\"\nassert predict_sample(root1, [\"blue\"], \"classification\") == \"pear\", \"TC2 failed\"\nassert predict_sample(root2, [\"A\", \"Y\"], \"classification\") == 1, \"TC3 failed\"\nassert predict_sample(root3, [7], \"regression\") == 5.0, \"TC4 failed\"\nassert predict_sample(root3, [10], \"regression\") == 5.0, \"TC5 failed\"\nassert predict_sample(root3, [12], \"regression\") == 15.0, \"TC6 failed\"\nassert predict_sample(root4, [6, -1], \"regression\") == 1.5, \"TC7 failed\"\nassert predict_sample(leaf_only, [], \"classification\") == 42, \"TC8 failed\"\nassert predict_sample(root5, [1], \"classification\") == \"One\", \"TC9 failed\"\nassert predict_sample(root6, [\"z\", \"d\"], \"classification\") == \"Bird\", \"TC10 failed\""}
{"task_id": 565, "completion_id": 0, "passed": false, "result": "failed: test case failed: example 1", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    max_gain = -np.inf\n    best_feature_idx = None\n    for feature_idx in range(n_features):\n        x_split = np.array_split(X[:, feature_idx], len(np.unique(X[:, feature_idx])))\n        split_entropies = []\n        for case in x_split:\n            h_y_case = calculate_entropy(y[case])\n            h_y_given_x_case = calculate_conditional_entropy(y, case)\n            split_entropies.append(h_y_case - h_y_given_x_case)\n        if len(x_split) == 1:\n            continue\n        total_entropy = sum(split_entropies) / len(x_split)\n        info_gain = total_entropy - min(split_entropies)\n        if info_gain > max_gain:\n            max_gain = info_gain\n            best_feature_idx = feature_idx\n    best_feature_idx = int(best_feature_idx)\n    max_info_gain = round(max_gain, 6)\n    return (best_feature_idx, max_info_gain)\ndef calculate_entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the Shannon entropy of a set of labels.\"\"\"\n    unique_labels = np.unique(labels)\n    counts = np.bincount(labels)\n    probs = counts / np.sum(counts)\n    entropy = -np.sum(probs * np.log2(probs))\n    return entropy\ndef calculate_conditional_entropy(target_labels: np.ndarray, subset_indices: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy given a subset of indices.\"\"\"\n    target_subset = target_labels[subset_indices]\n    return calculate_entropy(target_subset)\nassert choose_best_feature(np.array([[0, 1], [1, 0], [0, 1], [1, 1]]), np.array([0, 1, 0, 1])) == (0, 1.0), \"test case failed: example 1\"\nassert choose_best_feature(np.array([[0,0],[0,0],[1,1]]), np.array([0,0,1])) == (0, 0.918296), \"test case failed: identical features\"\nassert choose_best_feature(np.array([[0,1],[1,0],[0,1]]), np.array([1,1,1])) == (0, 0.0), \"test case failed: zero entropy labels\"\nassert choose_best_feature(np.array([[0, 1, 0], [1, 1, 1], [1, 0, 0], [0, 1, 1]]), np.array([0, 1, 1, 0])) == (0, 1.0), \"test case failed: mixed dataset\"\nassert choose_best_feature(np.array([[0],[1],[2]]), np.array([0,1,2])) == (0, 1.584963), \"test case failed: three classes\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1, 1])) == (0, 0.419973), \"test case failed: uneven distribution\"\nassert choose_best_feature(np.array([[0, 0], [1, 1]]), np.array([0, 1])) == (0, 1.0), \"test case failed: tie breaking\"\nassert choose_best_feature(np.array([[0],[0],[0]]), np.array([1, 1, 1])) == (0, 0.0), \"test case failed: single feature all same\"\nassert choose_best_feature(np.array([[0, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0]]), np.array([0, 0, 1, 1, 1, 0])) == (0, 1.0), \"test case failed: larger synthetic set\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [1, 2], [2, 2]]), np.array([0, 0, 1, 1])) == (0, 1.0), \"test case failed: multi-valued tie\""}
{"task_id": 566, "completion_id": 0, "passed": false, "result": "failed: no binding for nonlocal 'tree_depth' found (<string>, line 35)", "solution": "import numpy as np\nimport math\nimport numpy as np\nfrom typing import List\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    np.random.seed(42)\n\n    def calculate_path_length(observation):\n        cumulative_probability = 1 / (math.pow(2, len(observation)) + 1)\n        return 2 * math.log(len(observation) - 1, 2) - 2 * ((len(observation) - 1) / len(observation))\n\n    def get_tree_depth(node_index):\n        if node_index == 0:\n            return 0\n        else:\n            left_child_idx = 0\n            right_child_idx = 1\n            if node_index & 1 == 0:\n                parent_node_idx = node_index // 2\n                left_child_idx = get_tree_depth(parent_node_idx)\n                if left_child_idx > 0:\n                    while left_child_idx > 0 and data[node_index][left_child_idx] == data[parent_node_idx][left_child_idx]:\n                        left_child_idx = left_child_idx * 2 + 1\n                return left_child_idx + 1 if left_child_idx > 0 else left_child_idx\n            elif node_index % 2 != 0:\n                parent_node_idx = node_index // 2\n                right_child_idx = get_tree_depth(parent_node_idx)\n                if right_child_idx > 0:\n                    while right_child_idx > 0 and data[node_index][right_child_idx] == data[parent_node_idx][right_child_idx]:\n                        right_child_idx = right_child_idx * 2 + 1\n                return right_child_idx + 1 if right_child_idx > 0 else right_child_idx\n\n    def prune_leaf(node_index, obs_len):\n        nonlocal tree_depth\n        left_child_idx = 0\n        right_child_idx = 1\n        if obs_len <= 1:\n            return\n        if left_child_idx > 0 and obs_len[left_child_idx] == 1:\n            while left_child_idx > 0 and data[node_index][left_child_idx] == data[tree_depth - 1][left_child_idx]:\n                left_child_idx = left_child_idx << 1 | 1\n            if left_child_idx > 0:\n                while left_child_idx > 0 and data[node_index][left_child_idx] == data[trees[-1]][left_child_idx]:\n                    left_child_idx = left_child_idx >> 1 | 1\n                prune_leaf(left_child_idx, obs_len[left_child_idx])\n        if right_child_idx > 0 and obs_len[right_child_idx] == 1:\n            while right_child_idx > 0 and data[node_index][right_child_idx] == data[tree_depth - 1][right_child_idx]:\n                right_child_idx = right_child_idx << 1 | 1\n            if right_child_idx > 0:\n                while right_child_idx > 0 and data[node_index][right_child_idx] == data[trees[-1]][right_child_idx]:\n                    right_child_idx = right_child_idx >> 1 | 1\n                prune_leaf(right_child_idx, obs_len[right_child_idx])\n\n    def build_random_forest():\n        tree_depth = 0\n        nodes = []\n        while tree_depth < height_limit or sample_size > 1:\n            sample = np.random.choice(sample_size, size=sample_size, replace=False)\n            while True:\n                tree = []\n                node_idx = 0\n                while node_idx < sample_size and (not tree or not nodes[node_idx]):\n                    tree.append(node_idx)\n                tree_depth += 1\n                nodes.append(tree[:])\n                for i in reversed(range(tree_depth)):\n                    node_idx = tree[i]\n                    if i % 2 == 1:\n                        new_node_idx = node_idx << 1 | 0\n                        nodes[new_node_idx].extend(nodes.pop(i - 1))\n                        if len(nodes[i - 1]) >= 2:\n                            mid_idx = (i - 1 + len(nodes[i - 1]) // 2) // 2\n                            left_child_idx = nodes[i - 1][mid_idx]\n                            right_child_idx = nodes[i - 1][mid_idx + 1]\n                            nodes[new_node_idx].append(left_child_idx)\n                            nodes[new_node_idx].append(right_child_idx)\n                    else:\n                        mid_idx = (i - 1 + len(nodes[i - 1]) // 2) // 2\n                        left_child_idx = nodes[i - 1][mid_idx]\n                        right_child_idx = nodes[i - 1][mid_idx + 1]\n                        if len(nodes[i - 1]) >= 2:\n                            mid_idx = (nodes[i - 1][mid_idx] << 1 | 1) % sample_size\n                            mid_idx = mid_idx + 1 + nodes[i - 1][mid_idx] % (sample_size // 2)\n                            nodes[i].append(mid_idx)\n                            nodes[i].append((mid_idx + 1) % sample_size)\n                            nodes[i].append(nodes[i - 1][nodes[i - 1][mid_idx] << 1 | 1] % sample_size)\n                            nodes[i].append(nodes[i - 1][(nodes[i - 1][mid_idx] + 1) % (sample_size // 2)] % sample_size)\n                            nodes[new_node_idx].append(new_node_idx)\n                        else:\n                            nodes[new_node_idx].append(left_child_idx)\n                            nodes[new_node_idx].append(right_child_idx)\n                for idx in range(len(nodes[tree_depth])):\n                    nodes[tree_depth][idx] -= tree_depth\n                if sample_size <= 1:\n                    break\n                sample = np.array([sample[idx] for idx in nodes[tree_depth]])\n                sample_size = np.count_nonzero(sample == 0)\n            tree = np.argsort(-calculate_path_length(sample))\n            for i in range(tree.size // 2):\n                trees.append(tree[i] - 1)\n    height_limit = int(np.ceil(math.log2(sample_size)))\n    trees = []\n    build_random_forest()\n    avg_path_length = sum((calculate_path_length(obs) for _ in range(n_trees))) / n_trees\n    anomalies_scores = [avg_path_length / phi + np.exp(-path_length / avg_path_length)]\n    anomalies_scores.sort()\nassert detect_outliers(np.array([[1.0,1.1],[0.9,1.0],[1.2,0.8],[8.0,8.0]]),50,4,0.25)==[3], \"case 1 failed\"\nassert detect_outliers(np.array([[0.0],[0.1],[-0.1],[5.0]]),60,4,0.25)==[3], \"case 2 failed\"\nassert detect_outliers(np.vstack([np.zeros((10,2)),np.array([[5,5],[6,6]])]),80,8,0.15)==[10,11], \"case 3 failed\"\nassert detect_outliers(np.vstack([np.zeros((15,1)),np.array([[3.0],[4.0]])]),70,8,0.1)==[15,16], \"case 4 failed\"\nassert detect_outliers(np.array([[1.0],[1.0],[1.0],[1.0]]),40,4,0.1)==[], \"case 5 failed\"\nassert detect_outliers(np.array([[1.0],[1.1],[0.9],[1.05],[8.0]]),50,5,0.2)==[4], \"case 6 failed\"\nassert detect_outliers(np.array([[0,0],[0,0.1],[0.1,0],[0.05,-0.05],[0.02,0.01],[7,7]]),60,6,0.17)==[5], \"case 7 failed\"\nassert detect_outliers(np.array([[1],[1]]),30,2,0.5)==[], \"case 8 failed\"\nassert detect_outliers(np.array([[0.0,0.0],[0.05,0.0],[-0.05,0.0],[0.0,0.05],[0.0,-0.05],[10.0,10.0]]),90,6,0.2)==[5], \"case 9 failed\""}
{"task_id": 568, "completion_id": 0, "passed": false, "result": "failed: could not convert string to float: '0,[0]:0'", "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nimport numpy as np\ndef sigmoid(z):\n    return 1 / (1 + math.exp(-z))\nclass MaxEntClassifier:\n\n    def __init__(self, X_train, y_train):\n        self.X_train = X_train\n        self.y_train = y_train\n        self.n_features = X_train.shape[1]\n        self.weight_vector = np.zeros(self.n_features)\n\n    def fit(self):\n        freqs = {}\n        for i in range(len(self.X_train)):\n            x_i = self.X_train[i].reshape((1, -1))\n            y_i = self.y_train[i]\n            for j in range(self.n_features):\n                if f'{j},{x_i[j]}:{self.y_train[i]}':\n                    freqs[f'{j},{x_i[j]}:{self.y_train[i]}'] = freqs.get(f'{j},{x_i[j]}:{self.y_train[i]}', 0) + 1\n                else:\n                    freqs[f'{j},{x_i[j]}:{self.y_train[i]}'] = 1\n        total_count = sum(freqs.values())\n        for (k, v) in freqs.items():\n            freqs[k] = v / total_count\n        self.weights = np.array(list(freqs.keys())).astype(float)\n        self.probabilities = [freqs[key] for key in self.weights]\n        while True:\n            new_weights = np.zeros_like(self.weights)\n            for j in range(self.n_features):\n                for xy_y_pair in freqs.keys():\n                    (xy, y) = xy_y_pair.split(',')\n                    (x_i, x_val) = xy.split(',')\n                    z = np.dot(self.weights, np.array([int(x_i), int(x_val)])) + j\n                    p_xy = freqs[f'({xy},{y})']\n                    delta_w = -p_xy / (1 + math.exp(z)) * p_xy * math.log(p_xy / (1 + math.exp(z)))\n                    new_weight = self.weights[j] + delta_w\n                    new_weights[j] += delta_w\n            if all((abs(w_new - w_old) < epsilon for (w_old, w_new) in zip(self.weights, new_weights))):\n                break\n            self.weights = new_weights\n\n    def predict(self, X_test):\n        predictions = []\n        for x_test_row in X_test.reshape((-1, 1)):\n            log_probabilities = np.sum(np.dot(self.weights, x_test_row), axis=0)\n            prob = sigmoid(log_probabilities)\n            (_, argmax_label) = (np.max(np.c_[prob, self.probabilities]), np.argmax(prob))\n            predictions.append(argmax_label.item())\n        return predictions\ndef maxent_predict(X_train, y_train, X_test, epsilon=0.001, n_iter=100):\n    clf = MaxEntClassifier(X_train, y_train)\n    clf.fit()\n    return clf.predict(X_test)\nassert maxent_predict(np.array([[0],[1]]), np.array([0,1]), np.array([[1],[0]])) == [1,0], \"Test-1 failed: basic two-sample training\"\nassert maxent_predict(np.array([[0],[0],[1],[1]]), np.array([0,0,1,1]), np.array([[1],[0]])) == [1,0], \"Test-2 failed: duplicated training rows\"\nassert maxent_predict(np.array([[0,0],[1,0]]), np.array([0,1]), np.array([[0,0],[1,0],[0,0]])) == [0,1,0], \"Test-3 failed: two features, two labels\"\nassert maxent_predict(np.array([[0],[1],[2]]), np.array([0,1,2]), np.array([[2],[0]])) == [2,0], \"Test-4 failed: three labels\"\nassert maxent_predict(np.array([[0,0],[0,1],[1,0]]), np.array([0,1,2]), np.array([[0,1],[1,0]])) == [1,2], \"Test-5 failed: 3-class, 2-feature\"\nassert maxent_predict(np.array([[0,1,0],[1,0,1]]), np.array([0,1]), np.array([[1,0,1]])) == [1], \"Test-6 failed: 3 features\"\nassert maxent_predict(np.array([[0],[0],[0],[1]]), np.array([1,1,1,0]), np.array([[1],[0]])) == [0,1], \"Test-7 failed: imbalanced classes\"\nassert maxent_predict(np.array([[0,0],[0,1],[0,2],[1,0],[1,1],[1,2]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[0,2]])) == [1,0], \"Test-8 failed: bigger balanced dataset\"\nassert maxent_predict(np.array([[5],[6],[7]]), np.array([2,2,2]), np.array([[5],[7]])) == [2,2], \"Test-9 failed: single-class training\"\nassert maxent_predict(np.array([[0],[1]]), np.array([1,0]), np.array([[0],[1]])) == [1,0], \"Test-10 failed: labels reversed order\""}
{"task_id": 569, "completion_id": 0, "passed": false, "result": "failed: 'set' object has no attribute 'count'", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counts = Counter((word for doc in data for word in doc[1]))\n    word_freqs = sorted(word_counts.values(), reverse=True)\n    if cut_off is None:\n        return [(word, freq / len(data)) for (word, freq) in word_counts.items()]\n    else:\n        num_words = min(len(word_counts), cut_off)\n        ranked_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:num_words]\n        return [(word, freq / sum((doc[1].count(word) for doc in data))) for (word, freq) in ranked_words]\ndata = [('doc1', ['the', 'quick', 'brown', 'fox']), ('doc2', ['lazy', 'dog']), ('doc3', ['brown', 'fox', 'jumps', 'over'])]\nassert statistic_key_word([(1, {\"apple\", \"banana\"}), (0, {\"banana\", \"cherry\"}), (1, {\"banana\", \"dragon\"})], 2) == ([('banana', 1.0), ('apple', 0.3333), ('cherry', 0.3333), ('dragon', 0.3333)], {'banana', 'apple'}), \"test case failed: basic example with cut_off = 2\"\nassert statistic_key_word([(1, ['a', 'a', 'b']), (0, ['b', 'c']), (1, ['c'])], None)[0] == [('b', 0.6667), ('c', 0.6667), ('a', 0.3333)], \"test case failed: duplicates inside a document and cut_off = None\"\nassert statistic_key_word([(1, ['x']), (0, ['y'])], 5)[1] == {'x', 'y'}, \"test case failed: cut_off larger than vocabulary\"\nassert statistic_key_word([(1, ['p', 'q', 'r'])], None) == ([('q', 1.0), ('r', 1.0), ('p', 1.0)], {'p', 'q', 'r'}), \"test case failed: single document\"\nassert statistic_key_word([(1, ['m', 'n']), (0, ['m'])], 1)[1] == {'m'}, \"test case failed: cut_off = 1\"\nassert statistic_key_word([(1, ['d']), (0, ['e']), (1, ['f'])], 0)[1] == set(), \"test case failed: cut_off = 0\"\nassert statistic_key_word([(1, ['g', 'h']), (0, ['h', 'i'])], 2)[0][0][0] == 'h', \"test case failed: most frequent word should be first\"\nassert all(ratio <= 1 for _, ratio in statistic_key_word([(1, ['a']), (0, ['a', 'b'])], None)[0]), \"test case failed: ratio larger than 1\"\nassert statistic_key_word([(1, []), (0, [])], None) == ([], set()), \"test case failed: documents without any word\"\nassert statistic_key_word([], None) == ([], set()), \"test case failed: empty data list\""}
{"task_id": 571, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic 2\u00d72", "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = (X.shape[0], len(alpha))\n    if n_features == 1:\n        return ([np.sum(alpha * y[:, None] * X).ravel()], np.mean(y - np.dot(alpha, y[:, None]) * X.T))\n    w_vector = np.zeros(n_features)\n    for (i, alpha_i) in enumerate(alpha):\n        w_vector += alpha_i * y[i] * X[:, i]\n    b = np.mean(np.array([y[i] - np.dot(alpha_i, y[i] * X[:, i].T) for (i, alpha_i) in enumerate(alpha)]))\n    w_list = [round(x.item(), 4) for x in w_vector]\n    b_rounded = round(b.item(), 4)\n    return (w_list, b_rounded)\nassert compute_svm_parameters(np.array([[1, 2], [2, 3]]), np.array([1, -1]), np.array([0.5, 0.5])) == ([-0.5, -0.5], 2.0), \"test case failed: basic 2\u00d72\"\nassert compute_svm_parameters(np.array([[0, 0], [1, 1]]), np.array([-1, 1]), np.array([0.1, 0.3])) == ([0.3, 0.3], -0.3), \"test case failed: zeros and ones\"\nassert compute_svm_parameters(np.array([[1], [2], [3]]), np.array([1, 1, -1]), np.array([0.2, 0.2, 0.4])) == ([-0.6], 1.5333), \"test case failed: single feature\"\nassert compute_svm_parameters(np.array([[-1, -1], [1, 1]]), np.array([1, -1]), np.array([0.25, 0.25])) == ([-0.5, -0.5], 0.0), \"test case failed: symmetric points\"\nassert compute_svm_parameters(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 1, -1]), np.array([0.4, 0.4, 0.4])) == ([0.4, 0.4, -0.4], 0.2), \"test case failed: identity matrix\"\nassert compute_svm_parameters(np.array([[2, 2]]), np.array([1]), np.array([0.5])) == ([1.0, 1.0], -3.0), \"test case failed: single sample\"\nassert compute_svm_parameters(np.array([[0, 0], [0, 0]]), np.array([1, -1]), np.array([0.2, 0.2])) == ([0.0, 0.0], 0.0), \"test case failed: zero features\"\nassert compute_svm_parameters(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), np.array([1, -1, 1]), np.array([0.2, 0.3, 0.1])) == ([-0.3, -0.3, -0.3], 4.8333), \"test case failed: 3\u00d73 matrix\"\nassert compute_svm_parameters(np.array([[-1, 0], [0, 1], [1, 0]]), np.array([-1, 1, 1]), np.array([0.3, 0.3, 0.4])) == ([0.7, 0.3], 0.2333), \"test case failed: mixed signs\"\nassert compute_svm_parameters(np.array([[2], [4]]), np.array([-1, -1]), np.array([0.25, 0.25])) == ([-1.5], 3.5), \"test case failed: negative labels only\""}
{"task_id": 572, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for -: 'list' and 'list'", "solution": "import numpy as np\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Computes the Local Outlier Factor for each sample in the dataset.\n\n    Parameters:\n    - data: A NumPy array representing the input dataset.\n    - k: An integer specifying the number of nearest neighbors to consider.\n    - epsilon: A float value indicating the threshold for outlier detection.\n\n    Returns:\n    - A tuple containing the list of LOF scores rounded to the nearest 4th decimal place,\n      and the list of indices of outliers sorted in ascending order.\n    \"\"\"\n\n    def compute_distances(data):\n        n_samples = len(data)\n        dist_matrix = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(i + 1, n_samples):\n                dist_matrix[i][j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n                dist_matrix[j][i] = dist_matrix[i][j]\n        return dist_matrix\n\n    def find_k_nearest_neighbors(dist_matrix, k, p_index):\n        k_nearest_neighbor_indices = np.argsort(dist_matrix[p_index])[1:k + 1]\n        k_nearest_neighbors = [dist_matrix[p_index][index] for index in k_nearest_neighbor_indices]\n        return (k_nearest_neighbors, k_nearest_neighbor_indices)\n\n    def compute_lrd(data, k_nearest_neighbors, k_nearest_neighbor_indices, p_index):\n        lrd_values = []\n        for neighbor_index in range(len(k_nearest_neighbors)):\n            reach_dist_p_q = max(k_nearest_neighbors[neighbor_index], data[p_index])\n            lrd_values.append(reach_dist_p_q)\n        numerator = sum(lrd_values)\n        denominator = len(k_nearest_neighbors) * k_nearest_neighbors[k_nearest_neighbor_indices.index(p_index)]\n        if denominator == 0 or numerator == 0:\n            return 0\n        else:\n            numerator /= denominator\n            return numerator\n\n    def calculate_lof(data, k_nearest_neighbors, k_nearest_neighbor_indices, p_index, epsilon):\n        lrd_values = [compute_lrd(data, k_nearest_neighbors, k_nearest_neighbor_indices, q_index) for q_index in range(len(k_nearest_neighbors))]\n        lof_values = [sum(lrd_values[:k_nearest_neighbor_indices.index(p_index)]) / k / lrd_values[k_nearest_neighbor_indices.index(p_index)] for p_index in range(len(k_nearest_neighbors))]\n        return lof_values\n    n_samples = len(data)\n    dist_matrix = compute_distances(data)\n    (k_nearest_neighbors, k_nearest_neighbor_indices) = find_k_nearest_neighbors(dist_matrix, k, 0)\n    lof_values = calculate_lof(data, k_nearest_neighbors, k_nearest_neighbor_indices, 0, epsilon)\n    filtered_indices = [i for (i, value) in enumerate(lof_values) if value > epsilon]\n    round_4_decimal = lambda x: f'{np.round(x, 4)}'\n    rounded_scores = [float(round_4_decimal(value)) for value in lof_values]\n    return (rounded_scores, filtered_indices)\nassert local_outlier_factor([[0],[1],[2],[10]],1) == ([1.0, 1.0, 1.0, 8.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[10]],1)\"\nassert local_outlier_factor([[0],[1],[5]],1) == ([1.0, 1.0, 4.0], [2]), \"test case failed: local_outlier_factor([[0],[1],[5]],1)\"\nassert local_outlier_factor([[0],[1],[3],[4]],1) == ([1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1],[3],[4]],1)\"\nassert local_outlier_factor([[1],[2],[3],[50]],1) == ([1.0, 1.0, 1.0, 47.0], [3]), \"test case failed: local_outlier_factor([[1],[2],[3],[50]],1)\"\nassert local_outlier_factor([[0],[1]],1) == ([1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1]],1)\"\nassert local_outlier_factor([[0],[1],[2],[6]],1) == ([1.0, 1.0, 1.0, 4.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[6]],1)\"\nassert local_outlier_factor([[0],[2],[4],[6],[8]],1) == ([1.0, 1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[2],[4],[6],[8]],1)\"\nassert local_outlier_factor([[0],[1],[2],[3],[50]],2,2) == ([1.0, 1.0, 1.0, 1.0, 31.6667], [4]), \"test case failed: local_outlier_factor([[0],[1],[2],[3],[50]],2,2)\"\n"}
{"task_id": 574, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,) (4,) ", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int, optional\n        Random seed for reproducibility.  If *None* the global random state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    base = 10 * (m // 2)\n    X_trains = []\n    X_vals = []\n    y_trains = []\n    y_vals = []\n    for c in range(m):\n        (x_min, x_max) = (base + 1, base + 9)\n        (y_min, y_max) = (base + 1, base + 9)\n        x_coords_train = np.random.uniform(x_min, x_max, size=(n_train,))\n        y_coords_train = np.random.uniform(y_min, y_max, size=(n_train,))\n        X_trains.append(np.column_stack((x_coords_train, y_coords_train)))\n        y_trains.append(c)\n        x_coords_val = x_coords_train[:n_val]\n        y_coords_val = y_coords_train[:n_val]\n        X_vals.append(np.column_stack((x_coords_val, y_coords_val)))\n        y_vals.append(c)\n    X_train_arr = np.concatenate(X_trains)\n    X_val_arr = np.concatenate(X_vals)\n    y_train_arr = np.array(y_trains)\n    y_val_arr = np.array(y_vals)\n    return (X_train_arr, X_val_arr, y_train_arr, y_val_arr)\nassert generate_data(2, 2, 1, seed=42)[0].shape == (4, 2), \"test case failed: shape of X_train for seed=42,2,2,1\"\nassert generate_data(2, 2, 1, seed=42)[1].shape == (2, 2), \"test case failed: shape of X_val for seed=42,2,2,1\"\nassert (generate_data(2, 2, 1, seed=42)[2] == np.array([0, 0, 1, 1])).all(), \"test case failed: y_train labels for seed=42\"\nassert (generate_data(2, 2, 1, seed=42)[3] == np.array([0, 1])).all(), \"test case failed: y_val labels for seed=42\"\nassert generate_data(3, 3, 2, seed=0)[0].shape == (9, 2), \"test case failed: shape of X_train for seed=0,3,3,2\"\nassert generate_data(3, 3, 2, seed=0)[1].shape == (6, 2), \"test case failed: shape of X_val for seed=0,3,3,2\"\nassert set(generate_data(3, 3, 2, seed=0)[2]) == {0, 1, 2}, \"test case failed: y_train label set for seed=0\"\nassert set(generate_data(3, 3, 2, seed=0)[3]) == {0, 1, 2}, \"test case failed: y_val label set for seed=0\"\nassert (generate_data(1, 5, 5, seed=99)[2] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_train not all zeros\"\nassert (generate_data(1, 5, 5, seed=99)[3] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_val not all zeros\""}
{"task_id": 579, "completion_id": 0, "passed": false, "result": "failed: name 'c' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (n_samples, _) = X.shape\n    centroids = X[:k]\n    while True:\n        labels = [np.argmin(np.linalg.norm(sample - centroids, axis=1)) for sample in X]\n        new_centroids = []\n        for i in range(k):\n            cluster_points = X[labels == i]\n            if len(cluster_points) > 0:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n            else:\n                new_centroids.append(centroids[i])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    return (labels, [round(c[0], 4), round(c[1], 4)] * k)\nassert kmeans(np.array([[1,1],[1.5,2],[3,4],[5,7],[3.5,5],[4.5,5],[3.5,4.5]]),2,100) == ([0,0,1,1,1,1,1], [[1.25,1.5],[3.9,5.1]]), \"failed on simple 2-cluster example\"\nassert kmeans(np.array([[0,0],[10,10],[0,10],[10,0]]),2,50) == ([0,1,0,0], [[3.3333,3.3333],[10.0,10.0]]), \"failed on square corners\"\nassert kmeans(np.array([[0],[5],[10]]),3,10) == ([0,1,2], [[0.0],[5.0],[10.0]]), \"each point its own cluster\"\nassert kmeans(np.array([[0],[1],[2],[3],[9],[10],[11],[12]]),2,50) == ([0,0,0,0,1,1,1,1], [[1.5],[10.5]]), \"failed on 1-D two clusters\"\nassert kmeans(np.array([[1,2,3],[1,2,4],[10,10,10],[11,11,11]]),2,50) == ([0,0,1,1], [[1.0,2.0,3.5],[10.5,10.5,10.5]]), \"failed on 3-D clustering\"\nassert kmeans(np.array([[0,0],[0,0.1],[10,10],[10,10.1]]),2,50) == ([0,0,1,1], [[0.0,0.05],[10.0,10.05]]), \"failed on very close points\"\nassert kmeans(np.array([[2,2],[2,2],[2,2]]),1,5) == ([0,0,0], [[2.0,2.0]]), \"single cluster identical points\"\nassert kmeans(np.array([[1,1],[2,2],[3,3],[8,8],[9,9],[10,10]]),2,100) == ([0,0,0,1,1,1], [[2.0,2.0],[9.0,9.0]]), \"failed on two distant blobs\""}
{"task_id": 581, "completion_id": 0, "passed": false, "result": "failed: name '_l1_sign' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef _compute_gradients(X, y, w, b, l1_penalty, l2_penalty):\n    residuals = y - X @ w - b\n    grad_w = -2 * X.T @ residuals.reshape(-1, 1) / X.shape[0] + (l1_penalty * _l1_sign(w).reshape(-1, 1) + 2 * l2_penalty * w.reshape(-1, 1))\n    grad_b = -2 * np.sum(residuals) / X.shape[0]\n    return (grad_w.flatten(), grad_b)\ndef elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty):\n    if not learning_rate or not iterations:\n        return ([0] * X.shape[1], 0)\n    if X.ndim != 2 or y.ndim != 1:\n        raise ValueError('Input arrays should have the correct dimensions.')\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0\n    for _ in range(iterations):\n        (g, gb) = _compute_gradients(X, y, w, b, l1_penalty, l2_penalty)\n        w -= learning_rate * (g / m).flatten()\n        b -= learning_rate * gb / m\n    return (list(np.round(w, 4)), round(b, 4))\nassert elastic_net_regression(np.array([[1, 0], [0, 1]]), np.array([1, 1]), 0.5, 1, 0.0, 0.0) == ([0.5, 0.5], 1.0), \"failed: basic 2-D example\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([2, 4]), 0.1, 1, 0.0, 0.0) == ([1.0], 0.6), \"failed: single feature, no regularisation\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([1, 1]), 1.0, 1, 1.0, 0.0) == ([2.5], 2.0), \"failed: L1 penalty example\"\nassert elastic_net_regression(np.array([[1, 1], [1, 1]]), np.array([2, 2]), 0.5, 1, 0.0, 0.0) == ([2.0, 2.0], 2.0), \"failed: identical features\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([2, 2]), 0.1, 1, 0.0, 5.0) == ([0.4], 0.4), \"failed: L2 penalty (first iteration)\"\nassert elastic_net_regression(np.array([[1, 2], [3, 4]]), np.array([1, 0]), 0.2, 1, 0.0, 0.0) == ([0.2, 0.4], 0.2), \"failed: two samples, two features\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([3, 4]), 0.0, 3, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero learning rate\"\nassert elastic_net_regression(np.array([[1]]), np.array([1]), 1.0, 0, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero iterations\"\nassert elastic_net_regression(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 2, 3]), 0.1, 1, 0.0, 0.0) == ([0.0667, 0.1333, 0.2], 0.4), \"failed: 3-D identity matrix\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([-1, -1]), 0.5, 1, 0.0, 0.0) == ([-1.0], -1.0), \"failed: negative targets\""}
{"task_id": 591, "completion_id": 0, "passed": false, "result": "failed: invalid index to scalar variable.", "solution": "import numpy as np\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    x_with_bias = np.insert(x, 0, 1)\n    for W in weights:\n        z = np.dot(W[0], x_with_bias)\n        h = np.maximum(0, z)\n        x_for_next_layer = h\n    if len(weights[-1]) == 1:\n        return round(h[-1], 4)\n    else:\n        return [round(output, 4) for output in h]\nassert neural_net_predict([[[0.5,0.2,0.8],[1.0,-0.5,0.3]],[[0.7,0.6,-1.2]]],[0.1,0.4])==-0.08,\"test case failed: basic 2-layer network\"\nassert neural_net_predict([[[2,3]]],[4])==14.0,\"test case failed: single-layer network\"\nassert neural_net_predict([[[0.5,0.5]],[[1.0,1.0]],[[0.2,2.0]]],[2])==5.2,\"test case failed: three-layer network\"\nassert neural_net_predict([[[0,-1]],[[0,1]]],[2])==0.0,\"test case failed: ReLU zeroing\"\nassert neural_net_predict([[[1,0.5,0.5],[0,-1,-1]],[[0,1,1]]],[1,1])==2.0,\"test case failed: mixed activations\"\nassert neural_net_predict([[[5,-1]]],[5])==0.0,\"test case failed: negative linear result\"\nassert neural_net_predict([[[0,2],[0,0.5]],[[0,1,1]]],[3])==7.5,\"test case failed: 2-neuron hidden layer\"\nassert neural_net_predict([[[-1,0]],[[0,5]]],[10])==0.0,\"test case failed: negative input to ReLU\"\nassert neural_net_predict([[[0,1],[0,-1]],[[0,2,2]]],[4])==8.0,\"test case failed: hidden neuron suppression\"\nassert neural_net_predict([[[1,1]],[[0,0.5]],[[1,2]]],[1])==3.0,\"test case failed: deeper network\""}
{"task_id": 595, "completion_id": 0, "passed": false, "result": "failed: name 'kmeans_centroids' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert kmeans_centroids(np.array([[1, 1], [2, 1], [4, 3], [5, 4]]), 2) == [[1.5, 1.0], [4.5, 3.5]], \"test case failed: basic 2-cluster\"\nassert kmeans_centroids(np.array([[0, 0], [0, 1], [10, 10], [11, 11]]), 2) == [[0.0, 0.5], [10.5, 10.5]], \"test case failed: clearly separated clusters\"\nassert kmeans_centroids(np.array([[1], [2], [10], [12], [19]]), 3) == [[1.0], [2.0], [13.6667]], \"test case failed: 1-D three clusters\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [1, 0], [10, 9], [12, 11], [11, 9]]), 2) == [[1.3333, 1.0], [11.0, 9.6667]], \"test case failed: mixed positions\"\nassert kmeans_centroids(np.array([[-5], [-4], [-5], [10], [11], [12]]), 2) == [[-4.6667], [11.0]], \"test case failed: negative and positive values\"\nassert kmeans_centroids(np.array([[0, 0], [0, 10], [10, 0], [10, 10]]), 4) == [[0.0, 0.0], [0.0, 10.0], [10.0, 0.0], [10.0, 10.0]], \"test case failed: one point per cluster\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [5, 5], [9, 9], [8, 9]]), 3) == [[1.0, 2.0], [2.0, 1.0], [7.3333, 7.6667]], \"test case failed: three clusters 2-D\"\nassert kmeans_centroids(np.array([[1], [100]]), 2) == [[1.0], [100.0]], \"test case failed: two extreme points\"\nassert kmeans_centroids(np.array([[1, 1], [1, 2], [2, 1], [2, 2]]), 1) == [[1.5, 1.5]], \"test case failed: single centroid\"\nassert kmeans_centroids(np.array([[0, 0], [10, 0], [0, 10], [8, 8]]), 2) == [[0.0, 5.0], [9.0, 4.0]], \"test case failed: asymmetrical clusters\""}

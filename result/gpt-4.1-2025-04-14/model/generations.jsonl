{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Performs Ridge (L2-regularized) Linear Regression using the closed-form solution.\n    Args:\n        data (np.ndarray): Input data, last column is target y, others are features X.\n        alpha (float): Regularization strength (>=0).\n    Returns:\n        list[float]: Weight vector (including bias), rounded to 4 decimals, or -1 if not invertible.\n    \"\"\"\n    if data.ndim != 2 or data.shape[1] < 2:\n        raise ValueError(\"Input data must be 2D with at least one feature and one target column.\")\n\n    X = data[:, :-1]\n    y = data[:, -1]\n\n    # Add bias (intercept) term\n    ones = np.ones((X.shape[0], 1))\n    X_bias = np.hstack([ones, X])\n\n    n_features = X_bias.shape[1]\n    I = np.eye(n_features)\n\n    # Do not regularize the bias term\n    I[0, 0] = 0\n\n    # Compute (X^T X + alpha * I)\n    XtX = X_bias.T @ X_bias\n    reg_matrix = XtX + alpha * I\n\n    # Check invertibility (numerical)\n    det = np.linalg.det(reg_matrix)\n    if np.isclose(det, 0.0):\n        return -1\n\n    # Closed-form solution\n    try:\n        w = np.linalg.inv(reg_matrix) @ X_bias.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Round to 4 decimals and return as list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n```\n"}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    updates = 0\n\n    # Precompute Gram matrix: K[i, j] = X_train[i] \u00b7 X_train[j]\n    K = X_train @ X_train.T  # shape (n_samples, n_samples)\n\n    i = 0\n    while i < n_samples:\n        # Compute activation for sample i: sum_j alpha_j y_j K[j, i]\n        activation = np.sum(alpha * y_train * K[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            # Misclassified, update\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            if updates >= n_iter:\n                break\n            i = 0  # restart scan\n        else:\n            i += 1  # move to next sample\n\n    # Compute primal weight vector: w = sum_i alpha_i y_i x_i\n    w = np.sum((alpha * y_train)[:, np.newaxis] * X_train, axis=0)\n\n    # Round results\n    w_rounded = [round(float(val), 4) for val in w]\n    b_rounded = round(float(b), 4)\n    return w_rounded, b_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple linearly separable dataset\n    X = np.array([[2, 3], [1, 1], [2, 1], [3, 1]])\n    y = np.array([1, -1, -1, 1])\n    w, b = perceptron_dual(X, y)\n    print(\"w:\", w)\n    print(\"b:\", b)\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    # Identity link: g(\u03bc) = \u03bc\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_deriv(mu):\n        return np.ones_like(mu)\n\n    # Log link: g(\u03bc) = log(\u03bc)\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_deriv(mu):\n        return 1.0 / mu\n\n    # Logit link: g(\u03bc) = log(\u03bc / (1 - \u03bc))\n    def logit_link(mu):\n        return np.log(mu / (1.0 - mu))\n\n    def logit_inv_link(eta):\n        # numerically stable sigmoid\n        # For large negative eta, exp(-eta) can overflow, so use np.where\n        # But for most practical GLM use, eta is not extremely large\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_deriv(mu):\n        return 1.0 / (mu * (1.0 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"deriv\": identity_deriv\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"deriv\": log_deriv\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"deriv\": logit_deriv\n        }\n    }\n\n# Example usage and demonstration (rounded to 4 decimals for display)\nif __name__ == \"__main__\":\n    links = glm_links()\n    mu = np.array([0.2, 0.8])\n    eta = links[\"logit\"][\"link\"](mu)\n    mu2 = links[\"logit\"][\"inv_link\"](eta)\n    deriv = links[\"logit\"][\"deriv\"](mu)\n\n    print(\"logit link(\u03bc):\", np.round(eta, 4))      # \u2192 [-1.3863, 1.3863]\n    print(\"logit inv_link(\u03b7):\", np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n    print(\"logit deriv(\u03bc):\", np.round(deriv, 4))   # \u2192 [6.25, 6.25]\n\n    # Identity example\n    mu = np.array([1.5, -2.0])\n    eta = links[\"identity\"][\"link\"](mu)\n    mu2 = links[\"identity\"][\"inv_link\"](eta)\n    deriv = links[\"identity\"][\"deriv\"](mu)\n    print(\"identity link(\u03bc):\", np.round(eta, 4))      # [1.5, -2.0]\n    print(\"identity inv_link(\u03b7):\", np.round(mu2, 4))  # [1.5, -2.0]\n    print(\"identity deriv(\u03bc):\", np.round(deriv, 4))   # [1.0, 1.0]\n\n    # Log example\n    mu = np.array([1.0, 2.0])\n    eta = links[\"log\"][\"link\"](mu)\n    mu2 = links[\"log\"][\"inv_link\"](eta)\n    deriv = links[\"log\"][\"deriv\"](mu)\n    print(\"log link(\u03bc):\", np.round(eta, 4))      # [0.0, 0.6931]\n    print(\"log inv_link(\u03b7):\", np.round(mu2, 4))  # [1.0, 2.0]\n    print(\"log deriv(\u03bc):\", np.round(deriv, 4))   # [1.0, 0.5]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    depths = [None] * n_samples  # To store the depth for each sample\n\n    def build(indices, depth):\n        # If fewer than 3 samples, this is a leaf\n        if len(indices) < 3:\n            for idx in indices:\n                depths[idx] = depth\n            return\n\n        # Randomly select a feature\n        f = np.random.randint(data.shape[1])\n        # Compute min and max for this feature among the current indices\n        vals = data[indices, f]\n        down = np.min(vals)\n        up = np.max(vals)\n        # If all values are the same, cannot split further, make leaf\n        if down == up:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        # Draw split value uniformly from [down, up]\n        v = np.random.uniform(down, up)\n        # Partition indices\n        left = [idx for idx in indices if data[idx, f] <= v]\n        right = [idx for idx in indices if data[idx, f] > v]\n        # If either side is empty, treat as leaf (cannot split)\n        if len(left) == 0 or len(right) == 0:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        # Recurse\n        build(left, depth + 1)\n        build(right, depth + 1)\n\n    build(list(range(n_samples)), 0)\n    return depths\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.arange(5).reshape(-1, 1)\n    print(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Preprocess: convert each transaction to a set to remove duplicates\n    transaction_list = [set(t) for t in transactions]\n    N = len(transaction_list)\n    if N == 0:\n        return {}\n    min_support = math.ceil(minsup * N)\n    if min_support < 1:\n        min_support = 1  # at least 1\n\n    # 1. Count support for all singleton items\n    item_counter = Counter()\n    for t in transaction_list:\n        item_counter.update(t)\n    # Keep only frequent 1-itemsets\n    freq_itemsets = {}\n    L1 = []\n    for item, count in item_counter.items():\n        if count >= min_support:\n            key = (item,)\n            freq_itemsets[key] = count\n            L1.append(key)\n    if not L1:\n        return {}\n\n    # 2. Iteratively find frequent k-itemsets (Apriori)\n    Lk = L1  # list of tuples\n    k = 2\n    while Lk:\n        # Generate candidate k-itemsets from frequent (k-1)-itemsets\n        # Join step: only combine itemsets that share k-2 items\n        candidates = set()\n        Lk_sorted = sorted(Lk)\n        len_Lk = len(Lk_sorted)\n        for i in range(len_Lk):\n            for j in range(i+1, len_Lk):\n                l1 = Lk_sorted[i]\n                l2 = Lk_sorted[j]\n                # If first k-2 items are the same, join\n                if l1[:-1] == l2[:-1]:\n                    candidate = tuple(sorted(set(l1) | set(l2)))\n                    if len(candidate) == k:\n                        candidates.add(candidate)\n                else:\n                    break  # because Lk_sorted is sorted, no more matches\n        if not candidates:\n            break\n\n        # Prune step: remove candidates with any (k-1)-subset not frequent\n        pruned_candidates = set()\n        prev_freq_sets = set(Lk)\n        for cand in candidates:\n            all_subsets_frequent = True\n            for subset in combinations(cand, k-1):\n                if tuple(sorted(subset)) not in prev_freq_sets:\n                    all_subsets_frequent = False\n                    break\n            if all_subsets_frequent:\n                pruned_candidates.add(cand)\n        if not pruned_candidates:\n            break\n\n        # Count support for candidates\n        cand_counter = Counter()\n        for t in transaction_list:\n            t_items = t\n            for cand in pruned_candidates:\n                if set(cand).issubset(t_items):\n                    cand_counter[cand] += 1\n        # Keep only frequent itemsets\n        Lk = []\n        for cand, count in cand_counter.items():\n            if count >= min_support:\n                key = tuple(sorted(cand))\n                freq_itemsets[key] = count\n                Lk.append(key)\n        k += 1\n\n    return freq_itemsets\n\n# Example usage and test\nif __name__ == \"__main__\":\n    transactions = [\n        ['bread', 'milk'],\n        ['bread', 'diaper', 'beer', 'egg'],\n        ['milk', 'diaper', 'beer', 'coke'],\n        ['bread', 'milk', 'diaper', 'beer'],\n        ['bread', 'milk', 'diaper', 'coke']\n    ]\n    minsup = 0.6\n    result = find_frequent_itemsets(transactions, minsup)\n    for k in sorted(result):\n        print(f\"{k}: {result[k]}\")\n    # Expected output (order may vary):\n    # ('beer',): 3\n    # ('beer', 'diaper'): 3\n    # ('bread',): 4\n    # ('bread', 'diaper'): 3\n    # ('bread', 'milk'): 3\n    # ('diaper',): 4\n    # ('diaper', 'milk'): 3\n    # ('milk',): 4\n```"}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    if not (1 <= k <= n_samples):\n        raise ValueError(\"k must be in [1, number of samples]\")\n\n    # 1. Initial centres: first k samples\n    centres = data[:k].astype(float).copy()  # shape (k, n_features)\n\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        # 2. Assign each sample to nearest centre (squared Euclidean)\n        # Compute squared distances: shape (n_samples, k)\n        dists = np.sum((data[:, np.newaxis, :] - centres[np.newaxis, :, :]) ** 2, axis=2)\n        new_labels = np.argmin(dists, axis=1)\n\n        # 3. Recompute centres\n        new_centres = np.zeros_like(centres)\n        for i in range(k):\n            members = data[new_labels == i]\n            if len(members) == 0:\n                # 4. Empty cluster: re-initialise with random sample\n                rand_idx = np.random.randint(0, n_samples)\n                new_centres[i] = data[rand_idx]\n            else:\n                new_centres[i] = np.mean(members, axis=0)\n\n        # 5. Check for convergence\n        max_movement = np.max(np.linalg.norm(centres - new_centres, axis=1))\n        centres = new_centres\n        labels = new_labels\n        if max_movement < epsilon:\n            break\n\n    # Round centres to 4 decimals\n    rounded_centres = np.round(centres, 4).tolist()\n    return rounded_centres, labels.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    np.random.seed(42)\n    # Simple test: 2 clusters in 2D\n    data = np.vstack([\n        np.random.randn(10, 2) + np.array([0, 0]),\n        np.random.randn(10, 2) + np.array([5, 5])\n    ])\n    centres, labels = kmeans(data, k=2)\n    print(\"Centres:\", centres)\n    print(\"Labels:\", labels)\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    S = np.zeros((n_item, n_item), dtype=np.float64)\n\n    # Build item-item similarity matrix\n    for i in range(n_item):\n        for j in range(i, n_item):\n            if i == j:\n                S[i, j] = 1.0\n                continue\n            # Find users who rated both items\n            users_i = data[:, i] > 0\n            users_j = data[:, j] > 0\n            both = users_i & users_j\n            idx = np.where(both)[0]\n            if idx.size == 0:\n                S[i, j] = S[j, i] = 0.0\n                continue\n            v1 = data[idx, i].astype(np.float64)\n            v2 = data[idx, j].astype(np.float64)\n            if criterion == 'cosine':\n                # Mean center if std > 1e-3\n                std1 = np.std(v1, ddof=1)\n                std2 = np.std(v2, ddof=1)\n                if std1 > 1e-3:\n                    v1 = v1 - np.mean(v1)\n                if std2 > 1e-3:\n                    v2 = v2 - np.mean(v2)\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n                if norm1 < 1e-8 or norm2 < 1e-8:\n                    sim = 0.0\n                else:\n                    sim = np.dot(v1, v2) / (norm1 * norm2)\n            elif criterion == 'pearson':\n                if v1.size < 2:\n                    sim = 0.0\n                else:\n                    # np.corrcoef returns 2x2 matrix\n                    sim = np.corrcoef(v1, v2)[0, 1]\n                    if np.isnan(sim):\n                        sim = 0.0\n            else:\n                raise ValueError(\"Unknown criterion: %s\" % criterion)\n            S[i, j] = S[j, i] = sim\n\n    # Get indices of items rated by the active user\n    user_ratings = data[user_ind, :]\n    rated_mask = user_ratings > 0\n    rated_items = np.where(rated_mask)[0]\n    if rated_items.size == n_item:\n        return []\n\n    r = user_ratings[rated_items]\n\n    # For each unrated item, compute predicted score\n    scores = {}\n    for t in range(n_item):\n        if rated_mask[t]:\n            continue  # already rated\n        sims = S[t, rated_items]\n        num = np.dot(r, sims)\n        denom = np.sum(np.abs(sims))\n        if denom == 0:\n            score = 0.0\n        else:\n            score = num / denom\n        scores[t] = score\n\n    # Sort by score descending, then by index ascending (sort stability)\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    recs = [idx for idx, _ in sorted_items[:k]]\n    return recs\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Toy data: 5 users, 6 items\n    data = np.array([\n        [5, 3, 0, 1, 0, 0],\n        [4, 0, 0, 1, 0, 0],\n        [1, 1, 0, 5, 0, 0],\n        [0, 0, 5, 4, 0, 0],\n        [0, 1, 5, 4, 0, 0],\n    ])\n    user_ind = 0\n    k = 3\n    print(\"Cosine:\", knn_recommend(data, user_ind, k, 'cosine'))\n    print(\"Pearson:\", knn_recommend(data, user_ind, k, 'pearson'))\n```\nThis script implements the item-based k-NN collaborative filtering recommender as specified, including both cosine and Pearson similarity, and provides a toy example for testing."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    if n_samples < 4:\n        # Not enough samples to split into two leaves with at least 2 samples each\n        return None\n\n    # Precompute sums for the parent node\n    G = np.sum(g)\n    H = np.sum(h)\n\n    # Parent node loss\n    def leaf_loss(G, H):\n        return -0.5 * (G ** 2) / (H + lam) + gamma\n\n    parent_loss = leaf_loss(G, H)\n\n    best_gain = -np.inf\n    best_split_feat = None\n    best_split_thresh = None\n\n    for feat_idx in range(n_features):\n        x = X[:, feat_idx]\n        # Get sorted indices for this feature\n        sort_idx = np.argsort(x)\n        x_sorted = x[sort_idx]\n        g_sorted = g[sort_idx]\n        h_sorted = h[sort_idx]\n\n        # Compute cumulative sums for left splits\n        g_cumsum = np.cumsum(g_sorted)\n        h_cumsum = np.cumsum(h_sorted)\n\n        # Only consider split points where the feature value changes\n        # and both sides have at least 2 samples\n        for i in range(1, n_samples):\n            # Only split between different feature values\n            if x_sorted[i] == x_sorted[i - 1]:\n                continue\n            # Ensure at least 2 samples on each side\n            if i < 2 or n_samples - i < 2:\n                continue\n\n            # Threshold is the midpoint between the two values\n            threshold = (x_sorted[i - 1] + x_sorted[i]) / 2.0\n\n            G_L = g_cumsum[i - 1]\n            H_L = h_cumsum[i - 1]\n            G_R = G - G_L\n            H_R = H - H_L\n\n            loss_L = leaf_loss(G_L, H_L)\n            loss_R = leaf_loss(G_R, H_R)\n            gain = parent_loss - loss_L - loss_R\n\n            if gain > best_gain and gain > 0:\n                best_gain = gain\n                best_split_feat = feat_idx\n                best_split_thresh = threshold\n\n    if best_gain > 0:\n        return (best_split_feat, best_split_thresh)\n    else:\n        return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Toy example\n    X = np.array([[1, 2],\n                  [2, 3],\n                  [3, 1],\n                  [4, 5],\n                  [5, 4]])\n    g = np.array([0.5, -0.2, 0.1, -0.4, 0.3])\n    h = np.array([1.0, 1.0, 1.0, 1.0, 1.0])\n    gamma = 0.1\n    lam = 1.0\n\n    result = best_split(X, g, h, gamma, lam)\n    print(\"Best split:\", result)\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    def _sigmoid(z):\n        # Numerically stable sigmoid\n        z = np.array(z)\n        out = np.empty_like(z, dtype=np.float64)\n        pos_mask = z >= 0\n        neg_mask = ~pos_mask\n        # For positive z\n        out[pos_mask] = 1 / (1 + np.exp(-z[pos_mask]))\n        # For negative z, avoid overflow\n        exp_z = np.exp(z[neg_mask])\n        out[neg_mask] = exp_z / (1 + exp_z)\n        return out\n\n    # Determine input type\n    is_scalar = np.isscalar(x)\n    if is_scalar:\n        z = float(x)\n        sig = 1 / (1 + np.exp(-z)) if z >= 0 else np.exp(z) / (1 + np.exp(z))\n        sig_rounded = round(sig, 4)\n        grad = sig * (1 - sig)\n        grad_rounded = round(grad, 4)\n        return (sig_rounded, grad_rounded)\n    else:\n        # Convert list to np.array if needed\n        arr = np.array(x, dtype=np.float64)\n        sig = _sigmoid(arr)\n        grad = sig * (1 - sig)\n        # Round and convert to list\n        sig_rounded = np.round(sig, 4).tolist()\n        grad_rounded = np.round(grad, 4).tolist()\n        return (sig_rounded, grad_rounded)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Scalar\n    print(sigmoid_activation(0))         # (0.5, 0.25)\n    print(sigmoid_activation(-2.0))      # (0.1192, 0.1049)\n    # 1D list\n    print(sigmoid_activation([0, 1, -1]))  # ([0.5, 0.7311, 0.2689], [0.25, 0.1966, 0.1966])\n    # 2D numpy array\n    arr = np.array([[0, 2], [-2, -4]])\n    print(sigmoid_activation(arr))\n    # ([[0.5, 0.8808], [0.1192, 0.01799]], [[0.25, 0.10499], [0.10499, 0.01767]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Convert to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    n = len(x_train)\n\n    # Initialize sample weights\n    w = np.ones(n) / n\n\n    # Store the ensemble: list of (alpha, d, theta)\n    ensemble = []\n\n    # Precompute all possible thresholds (midpoints between sorted x_train)\n    sorted_idx = np.argsort(x_train)\n    x_sorted = x_train[sorted_idx]\n    y_sorted = y_train[sorted_idx]\n\n    # Possible thresholds: midpoints between consecutive sorted x values\n    thresholds = []\n    for i in range(n - 1):\n        if x_sorted[i] != x_sorted[i+1]:\n            thresholds.append(0.5 * (x_sorted[i] + x_sorted[i+1]))\n    # Also consider thresholds below min and above max to allow all splits\n    thresholds = [x_sorted[0] - 1.0] + thresholds + [x_sorted[-1] + 1.0]\n\n    # For each round\n    while True:\n        min_err = float('inf')\n        best_stump = None\n\n        # Try all stumps: for each direction d and each threshold\n        for d in [0, 1]:\n            for theta in thresholds:\n                # Predict on training set\n                if d == 0:\n                    preds = np.where(x_train <= theta, 1, -1)\n                else:\n                    preds = np.where(x_train > theta, 1, -1)\n                # Weighted error\n                err = np.sum(w * (preds != y_train))\n                # If error > 0.5, flip the stump (equivalent to flipping sign of alpha)\n                if err > 0.5:\n                    err = 1 - err\n                    # Flip direction and threshold to get the equivalent best stump\n                    # For d=0, flip to d=1 and vice versa, and flip sign of predictions\n                    d_flipped = 1 - d\n                    # For d=0, preds: x <= theta -> 1, else -1\n                    # Flipped: x > theta -> 1, else -1\n                    # But since we flip the sign, it's equivalent to the other direction\n                    # So we can just use the flipped direction\n                    d = d_flipped\n                if err < min_err:\n                    min_err = err\n                    best_stump = (d, theta)\n\n        # Compute alpha\n        # Avoid division by zero\n        err = min_err\n        if err == 0:\n            alpha = 0.5 * math.log((1 - 1e-10) / 1e-10)\n        elif err == 1:\n            # Should not happen, but just in case\n            alpha = 0\n        else:\n            alpha = 0.5 * math.log((1 - err) / err)\n\n        d, theta = best_stump\n        # Compute predictions for best stump\n        if d == 0:\n            preds = np.where(x_train <= theta, 1, -1)\n        else:\n            preds = np.where(x_train > theta, 1, -1)\n\n        # Update weights\n        w = w * np.exp(-alpha * y_train * preds)\n        w = w / np.sum(w)\n\n        # Add to ensemble\n        ensemble.append((alpha, d, theta))\n\n        # Compute ensemble predictions on training set\n        agg = np.zeros(n)\n        for a, dd, th in ensemble:\n            if dd == 0:\n                agg += a * np.where(x_train <= th, 1, -1)\n            else:\n                agg += a * np.where(x_train > th, 1, -1)\n        y_pred = np.sign(agg)\n        # If any zero, set to 1 (as per AdaBoost convention)\n        y_pred[y_pred == 0] = 1\n        train_error = np.mean(y_pred != y_train)\n        if train_error <= epsilon:\n            break\n\n    # Predict on x_test\n    x_test = np.array(x_test)\n    agg_test = np.zeros(len(x_test))\n    for a, d, th in ensemble:\n        if d == 0:\n            agg_test += a * np.where(x_test <= th, 1, -1)\n        else:\n            agg_test += a * np.where(x_test > th, 1, -1)\n    y_test_pred = np.sign(agg_test)\n    y_test_pred[y_test_pred == 0] = 1\n    return y_test_pred.astype(int).tolist()\n```\n"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute squared Euclidean distances between each test and train sample\n    # X_train: (n, d), X_test: (m, d)\n    # Want D: (m, n) where D[j, i] = ||X_train[i] - X_test[j]||^2\n\n    # Efficient vectorized computation:\n    # ||a-b||^2 = ||a||^2 + ||b||^2 - 2*a.b\n    X_train_sq = np.sum(X_train**2, axis=1)  # (n,)\n    X_test_sq = np.sum(X_test**2, axis=1)    # (m,)\n    cross = np.dot(X_test, X_train.T)        # (m, n)\n    dists_sq = X_test_sq[:, None] + X_train_sq[None, :] - 2 * cross  # (m, n)\n\n    # Compute the RBF kernel matrix: K[j, i] = exp(-gamma * dists_sq[j, i])\n    K = np.exp(-gamma * dists_sq)  # (m, n)\n\n    # Compute the weighted sum for each test sample\n    # For each test sample j: g(z_j) = sum_i alpha_i * y_i * K[j, i] + b\n    coeff = alpha * y_train  # (n,)\n    g = np.dot(K, coeff) + b  # (m,)\n\n    # Predict labels: sign(g(z)), map 0 to 1 as per convention\n    labels = np.where(g >= 0, 1, -1)\n    return labels.tolist()\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert input to numpy array\n    X_np = np.array(X, dtype=float)\n    m, n = X_np.shape\n\n    # Check k validity\n    if not (1 <= k <= min(m, n)):\n        return -1\n\n    # Compute full SVD\n    U, S, Vt = np.linalg.svd(X_np, full_matrices=False)\n\n    # Truncate to rank-k\n    U_k = U[:, :k]           # (m, k)\n    S_k = S[:k]              # (k,)\n    Vt_k = Vt[:k, :]         # (k, n)\n\n    # Reconstruct X_hat = U_k @ diag(S_k) @ Vt_k\n    X_hat = (U_k * S_k) @ Vt_k  # U_k * S_k broadcasts S_k over columns\n\n    # Round reconstructed matrix to 4 decimals\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n\n    # Compute mean squared error\n    mse = np.mean((X_np - X_hat) ** 2)\n    mse_rounded = round(mse, 4)\n\n    return (X_hat_rounded, mse_rounded)\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    k = 2\n    result = linear_autoencoder(X, k)\n    print(result)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert to numpy arrays\n    x_train = np.asarray(x_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=float)\n    n = len(x_train)\n    # Sort x_train and y_train accordingly\n    sort_idx = np.argsort(x_train)\n    x_sorted = x_train[sort_idx]\n    y_sorted = y_train[sort_idx]\n\n    # Candidate splits: midpoints between consecutive x values\n    if n == 1:\n        # Only one point, always predict its value\n        return round(float(y_sorted[0]), 4)\n    splits = (x_sorted[:-1] + x_sorted[1:]) / 2\n\n    # Initialize residuals\n    residuals = y_sorted.copy()\n    # Store stumps as tuples: (split, c1, c2)\n    stumps = []\n\n    # Initial prediction is zero everywhere\n    rss = np.sum(residuals ** 2)\n\n    while rss > epsilon:\n        best_rss = None\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n\n        # Try all splits\n        for s in splits:\n            left_mask = x_sorted <= s\n            right_mask = x_sorted > s\n\n            # If all points are on one side, skip this split\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n\n            # The stump's prediction for each point\n            stump_pred = np.where(left_mask, c1, c2)\n            # New residuals if we add this stump\n            new_residuals = residuals - stump_pred\n            new_rss = np.sum(new_residuals ** 2)\n\n            if (best_rss is None) or (new_rss < best_rss):\n                best_rss = new_rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n\n        # If no valid split found (should not happen unless all x are equal), break\n        if best_split is None:\n            break\n\n        # Add the best stump\n        stumps.append((best_split, best_c1, best_c2))\n        # Update residuals\n        mask = x_sorted <= best_split\n        residuals[mask] -= best_c1\n        residuals[~mask] -= best_c2\n        rss = np.sum(residuals ** 2)\n\n    # Predict for x_query\n    pred = 0.0\n    for split, c1, c2 in stumps:\n        if x_query <= split:\n            pred += c1\n        else:\n            pred += c2\n\n    return round(float(pred), 4)\n```\n"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a NumPy tensor of the given shape filled with 0.0 and 1.0 floats.\n    Each entry is 1.0 with probability equal to 'sparsity', and 0.0 otherwise.\n\n    Parameters:\n        shape (tuple of int): Desired shape of the output tensor.\n        sparsity (float): Probability of an entry being 1.0 (must be in [0, 1]).\n        seed (int or None): Optional random seed for reproducibility.\n\n    Returns:\n        np.ndarray: Tensor of floats (0.0 and 1.0) with the specified shape,\n                    or -1 if 'sparsity' is not in [0, 1].\n    \"\"\"\n    # Check sparsity validity\n    if not (isinstance(sparsity, float) or isinstance(sparsity, int)) or not (0.0 <= sparsity <= 1.0):\n        return -1\n\n    # Set random seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate random values in [0, 1)\n    rand_vals = np.random.rand(*shape)\n\n    # Threshold: entries >= (1 - sparsity) become 1.0, else 0.0\n    threshold = 1.0 - sparsity\n    binary_tensor = (rand_vals >= threshold).astype(float)\n\n    return binary_tensor\n\n# Example usage and test\nif __name__ == \"__main__\":\n    shape = (2, 3)\n    sparsity = 0.3\n    seed = 42\n    result = random_binary_tensor(shape, sparsity, seed)\n    print(\"Generated tensor:\\n\", result)\n    # Expected output:\n    # [[0. 1. 1.]\n    #  [0. 0. 0.]]\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    col = data[:, d]\n    # Get the indices that would partition the array so that the median is at n//2\n    part_idx = np.argpartition(col, n // 2)\n    # Find the index in the original array of the median\n    median_pos = n // 2\n    median_idx = part_idx[median_pos]\n    median_val = col[median_idx]\n\n    # Now, find all indices with strictly less and strictly greater values\n    # Use the original indices for left and right\n    left = [i for i in range(n) if col[i] < median_val]\n    right = [i for i in range(n) if col[i] > median_val]\n\n    left.sort()\n    right.sort()\n\n    return median_idx, left, right\n\n# Example usage and test\nif __name__ == \"__main__\":\n    data = np.array([\n        [2, 7],\n        [1, 3],\n        [4, 5],\n        [3, 2],\n        [5, 1]\n    ])\n    # Split along column 0\n    pivot, left, right = get_split(data, 0)\n    print(\"Pivot index:\", pivot)\n    print(\"Left indices:\", left)\n    print(\"Right indices:\", right)\n    # Output should be deterministic and correct\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Preconditions\n    assert x.ndim == 1, \"Input x must be one-dimensional\"\n    assert stride >= 1, \"Stride must be at least 1\"\n    assert len(x) >= frame_width, \"Input length must be at least as large as frame_width\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Compute the new shape and strides\n    shape = (n_frames, frame_width)\n    itemsize = x.dtype.itemsize\n    strides = (stride * itemsize, itemsize)\n\n    frames = as_strided(x, shape=shape, strides=strides)\n\n    # Set writeable flag as requested\n    if not writeable:\n        frames = frames.view()\n        frames.flags.writeable = False\n    # else: inherit writeability from x (as_strided does this by default)\n\n    return frames\n\n# Example usage and test\nif __name__ == \"__main__\":\n    x = np.arange(10, dtype=np.float32)\n    frame_width = 4\n    stride = 2\n    frames = to_frames(x, frame_width, stride, writeable=False)\n    print(\"Input:\", x)\n    print(\"Frames shape:\", frames.shape)\n    print(\"Frames:\\n\", frames)\n    print(\"Is view:\", np.shares_memory(x, frames))\n    print(\"Writeable:\", frames.flags.writeable)\n    # Test assertion\n    try:\n        to_frames(x, 11, 1)\n    except AssertionError as e:\n        print(\"Caught assertion:\", e)\n```"}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array\n    try:\n        arr = np.array(X, dtype=float)\n    except Exception:\n        return False\n\n    # Check if array is 2D\n    if arr.ndim != 2:\n        return False\n\n    # Check if all elements are in [0, 1]\n    if not np.all((arr >= 0) & (arr <= 1)):\n        return False\n\n    # Check if each row sums to 1 within tolerance\n    row_sums = arr.sum(axis=1)\n    if not np.allclose(row_sums, 1.0, atol=1e-8):\n        return False\n\n    return True\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Valid stochastic matrix\n    A = [[0.5, 0.5], [0.2, 0.8]]\n    print(is_stochastic(A))  # True\n\n    # Row does not sum to 1\n    B = [[0.5, 0.4], [0.2, 0.8]]\n    print(is_stochastic(B))  # False\n\n    # Element out of [0, 1]\n    C = [[1.2, -0.2], [0.2, 0.8]]\n    print(is_stochastic(C))  # False\n\n    # Not 2D\n    D = [0.5, 0.5]\n    print(is_stochastic(D))  # False\n\n    # 2D but ragged (not all rows same length)\n    E = [[0.5, 0.5], [1.0]]\n    print(is_stochastic(E))  # False\n\n    # Numpy array input\n    F = np.array([[0.3, 0.7], [0.6, 0.4]])\n    print(is_stochastic(F))  # True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    idx = 0  # for mini-batch cycling\n\n    for it in range(max_iter):\n        # Mini-batch selection\n        if n < batch_size:\n            X_batch = X\n            y_batch = y\n            n_batch = n\n        else:\n            # Wrap around if needed\n            start = (it * batch_size) % n\n            end = start + batch_size\n            if end <= n:\n                X_batch = X[start:end]\n                y_batch = y[start:end]\n            else:\n                # Wrap around\n                part1 = slice(start, n)\n                part2 = slice(0, end - n)\n                X_batch = np.vstack((X[part1], X[part2]))\n                y_batch = np.concatenate((y[part1], y[part2]))\n            n_batch = X_batch.shape[0]\n\n        # Compute gradient for the batch\n        y_pred = X_batch @ w\n        g = (X_batch.T @ (y_pred - y_batch)) / n_batch  # shape (d,)\n\n        # Update running average of squared gradients\n        s = rho * s + (1 - rho) * (g ** 2)\n\n        # Parameter update\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n\n        # Early stopping: check gradient norm on full data\n        full_grad = (X.T @ (X @ w - y)) / n\n        grad_norm = np.linalg.norm(full_grad)\n        if grad_norm < epsilon:\n            break\n\n    return [round(float(val), 4) for val in w]\n```\n"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation or its gradient (sigmoid) in a numerically stable way.\n    Args:\n        x: scalar, list, or np.ndarray of real values\n        deriv: if True, return gradient (sigmoid); else, return SoftPlus\n    Returns:\n        Rounded result(s) as float (if scalar input) or list (if array/list input)\n    \"\"\"\n    # Convert input to np.ndarray for vectorized operations\n    x_arr = np.asarray(x, dtype=np.float64)\n    is_scalar = np.isscalar(x) or (np.ndim(x_arr) == 0)\n\n    if not deriv:\n        # Numerically stable SoftPlus:\n        # softplus(x) = max(0, x) + log1p(exp(-abs(x)))\n        out = np.maximum(0, x_arr) + np.log1p(np.exp(-np.abs(x_arr)))\n    else:\n        # Numerically stable sigmoid:\n        # For x >= 0: sigmoid(x) = 1 / (1 + exp(-x))\n        # For x < 0:  sigmoid(x) = exp(x) / (1 + exp(x))\n        out = np.empty_like(x_arr)\n        pos_mask = x_arr >= 0\n        neg_mask = ~pos_mask\n        # For x >= 0\n        out[pos_mask] = 1 / (1 + np.exp(-x_arr[pos_mask]))\n        # For x < 0\n        exp_x = np.exp(x_arr[neg_mask])\n        out[neg_mask] = exp_x / (1 + exp_x)\n\n    # Round to 4 decimals\n    out_rounded = np.round(out, 4)\n\n    # Return as float if scalar, else as list\n    if is_scalar:\n        return float(out_rounded)\n    else:\n        return out_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Scalar input\n    print(softplus(0))            # [Expected: 0.6931]\n    print(softplus(0, deriv=True))# [Expected: 0.5]\n    # List input\n    print(softplus([-100, 0, 100]))         # [0.0, 0.6931, 100.0]\n    print(softplus([-100, 0, 100], deriv=True)) # [0.0, 0.5, 1.0]\n    # Numpy array input\n    arr = np.array([-2, -1, 0, 1, 2])\n    print(softplus(arr))          # [0.1269, 0.3133, 0.6931, 1.3133, 2.1269]\n    print(softplus(arr, deriv=True)) # [0.1192, 0.2689, 0.5, 0.7311, 0.8808]\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be >= 1\")\n\n    # Helper to extract ngrams as tuples\n    def ngrams(tokens, n):\n        return [tuple(tokens[i:i+n]) for i in range(len(tokens)-n+1)]\n\n    # Build ngram and (n-1)-gram counts from corpus\n    if N == 1:\n        unigram_counts = Counter(corpus)\n        corpus_len = len(corpus)\n    else:\n        ngram_counts = Counter(ngrams(corpus, N))\n        prefix_counts = Counter(ngrams(corpus, N-1))\n\n    # Compute log-probability for each ngram in sequence\n    total_logprob = 0.0\n    num_ngrams = len(sequence) - N + 1\n    if num_ngrams < 1:\n        # No ngrams to score; by convention, log-prob of empty product is 0\n        return 0.0\n\n    for i in range(num_ngrams):\n        ngram = tuple(sequence[i:i+N])\n        if N == 1:\n            count = unigram_counts.get(ngram[0], 0)\n            if count == 0 or corpus_len == 0:\n                return float('-inf')\n            prob = count / corpus_len\n        else:\n            count = ngram_counts.get(ngram, 0)\n            prefix = ngram[:-1]\n            prefix_count = prefix_counts.get(prefix, 0)\n            if count == 0 or prefix_count == 0:\n                return float('-inf')\n            prob = count / prefix_count\n\n        # If prob is zero (shouldn't happen due to above), return -inf\n        if prob == 0.0:\n            return float('-inf')\n        total_logprob += np.log(prob)\n\n    return round(total_logprob, 4)\n```\n"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.asarray(X, dtype=np.float64).reshape(-1)\n    y = np.asarray(y, dtype=np.float64).reshape(-1)\n    m = X.shape[0]\n    d = degree\n\n    # Build design matrix: [1, x, x^2, ..., x^d]\n    X_poly = np.vstack([X**i for i in range(d+1)]).T  # shape (m, d+1)\n\n    # Precompute column norms (for denominator in w_j update)\n    col_norms = np.sum(X_poly**2, axis=0)  # shape (d+1,)\n\n    # Initialize weights\n    w = np.zeros(d+1, dtype=np.float64)\n\n    # Helper: soft-thresholding operator\n    def soft_threshold(rho, lam):\n        if rho > lam:\n            return rho - lam\n        elif rho < -lam:\n            return rho + lam\n        else:\n            return 0.0\n\n    # Coordinate descent\n    for it in range(n_iterations):\n        w_old = w.copy()\n\n        # Update bias (w0) exactly: w0 = mean(y - X_{\u00ac0}\u00b7w_{\u00ac0})\n        y_pred = X_poly @ w\n        # Exclude bias term for this calculation\n        y_minus_rest = y - (X_poly[:,1:] @ w[1:])\n        w[0] = np.mean(y_minus_rest)\n\n        # Update each coefficient w_j (j >= 1)\n        for j in range(1, d+1):\n            # Compute residual excluding feature j\n            # y - (X_poly @ w) + w_j * x_j\n            y_pred = X_poly @ w\n            r_j = y - y_pred + w[j] * X_poly[:,j]\n            # Compute rho\n            rho = np.dot(X_poly[:,j], r_j)\n            # Soft-thresholding\n            if reg_factor == 0.0:\n                w[j] = rho / col_norms[j] if col_norms[j] != 0 else 0.0\n            else:\n                w[j] = soft_threshold(rho, reg_factor * m) / col_norms[j] if col_norms[j] != 0 else 0.0\n\n        # Check for convergence\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n\n    # Round to 4 decimals and return as list\n    return [round(float(coef), 4) for coef in w]\n```\n"}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a discrete Hidden Markov Model (HMM).\n\n    Parameters:\n    - A: Transition probability matrix of shape (N, N), where A[i][j] = P(state_j | state_i)\n    - B: Emission probability matrix of shape (N, M), where B[j][k] = P(observation_k | state_j)\n    - obs: List of observation indices (length T), each value in 0..M-1\n    - t: Time index (0 \u2264 t < T)\n\n    Returns:\n    - List of N backward probabilities \u03b2_t(i), rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n\n    # Initialize beta_T-1(i) = 1 for all i\n    beta = np.ones(N)\n\n    # If t == T-1, return initial beta\n    if t == T - 1:\n        return [round(float(x), 4) for x in beta]\n\n    # Recursively compute beta from T-2 down to t\n    for time in range(T - 2, t - 1, -1):\n        next_obs = obs[time + 1]\n        # For each state i, compute beta_t(i)\n        beta_new = np.zeros(N)\n        for i in range(N):\n            # sum over j: a_ij * b_j(o_{t+1}) * beta_{t+1}(j)\n            beta_new[i] = np.sum(A[i, :] * B[:, next_obs] * beta)\n        beta = beta_new\n\n    # Round to 4 decimal places\n    return [round(float(x), 4) for x in beta]\n```\n"}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty input\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    A = np.array(A, dtype=np.float64)\n    B = np.array(B, dtype=np.float64)\n    pi = np.array(pi, dtype=np.float64)\n    obs = np.array(obs, dtype=np.int32)\n\n    N = A.shape[0]  # number of states\n    T = len(obs)    # length of observation sequence\n\n    # Initialize beta: shape (T, N)\n    beta = np.zeros((T, N), dtype=np.float64)\n\n    # Base case: beta_{T-1}(i) = 1 for all i\n    beta[T-1, :] = 1.0\n\n    # Recursion: for t = T-2, ..., 0\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            # beta_t(i) = sum_j A[i][j] * B[j][obs[t+1]] * beta_{t+1}(j)\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Compute the final probability\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(float(prob), 6)\n```\n"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Input validation\n    # Check S is a list of floats, length n >= 1\n    if not isinstance(S, list) or len(S) == 0:\n        return -1\n    n = len(S)\n    # Check A is n x n\n    if not (isinstance(A, list) and len(A) == n and all(isinstance(row, list) and len(row) == n for row in A)):\n        return -1\n    # Check B is n x m, m >= 1\n    if not (isinstance(B, list) and len(B) == n and all(isinstance(row, list) and len(row) > 0 for row in B)):\n        return -1\n    m = len(B[0])\n    if any(len(row) != m for row in B):\n        return -1\n    # Check observations is a non-empty list of ints in [0, m-1]\n    if not (isinstance(observations, list) and len(observations) > 0):\n        return -1\n    for o in observations:\n        if not (isinstance(o, int) and 0 <= o < m):\n            return -1\n\n    # Convert to numpy arrays for vectorized computation\n    S = np.array(S, dtype=float)\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    T = len(observations)\n\n    # Forward algorithm\n    # alpha[t][i] = probability of observing o_0,...,o_t and being in state i at time t\n    # Initialize alpha[0]\n    alpha = S * B[:, observations[0]]\n\n    for t in range(1, T):\n        # For each state j, compute sum_i (alpha[t-1][i] * A[i][j]) * B[j][obs[t]]\n        alpha = (alpha @ A) * B[:, observations[t]]\n\n    prob = np.sum(alpha)\n    return round(float(prob), 4)\n```\n"}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # Step 1: Count item supports and filter infrequent items\n    if not transactions or min_support < 1:\n        return []\n\n    # Count support for each item\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(transaction)\n    # Keep only frequent items\n    frequent_items = {item for item, count in item_counter.items() if count >= min_support}\n    if not frequent_items:\n        return []\n\n    # For deterministic order: sort frequent items by (-support, item)\n    # This order is used for FP-tree construction and mining\n    def item_sort_key(item):\n        return (-item_counter[item], item)\n    frequent_items_sorted = sorted(frequent_items, key=item_sort_key)\n\n    # Map item to its order for fast sorting of transactions\n    item_order = {item: i for i, item in enumerate(frequent_items_sorted)}\n\n    # Filter and sort each transaction\n    def clean_transaction(transaction):\n        return sorted([item for item in transaction if item in frequent_items], key=lambda x: item_order[x])\n\n    cleaned_transactions = [clean_transaction(t) for t in transactions]\n    cleaned_transactions = [t for t in cleaned_transactions if t]  # Remove empty transactions\n\n    if not cleaned_transactions:\n        return []\n\n    # Step 2: FP-tree data structure\n    class FPTreeNode:\n        def __init__(self, item, parent):\n            self.item = item\n            self.count = 0\n            self.parent = parent\n            self.children = dict()\n            self.link = None  # Next node with the same item\n\n        def increment(self, count):\n            self.count += count\n\n    class FPTree:\n        def __init__(self):\n            self.root = FPTreeNode(None, None)\n            self.header_table = defaultdict(list)  # item -> list of nodes\n\n        def add_transaction(self, transaction, count=1):\n            node = self.root\n            for item in transaction:\n                if item not in node.children:\n                    child = FPTreeNode(item, node)\n                    node.children[item] = child\n                    self.header_table[item].append(child)\n                node = node.children[item]\n                node.increment(count)\n\n        def is_single_path(self):\n            # Returns True if the tree has a single path (no node has >1 child except root)\n            node = self.root\n            while True:\n                if len(node.children) == 0:\n                    return True\n                if len(node.children) > 1:\n                    return False\n                node = next(iter(node.children.values()))\n\n    # Build the FP-tree\n    tree = FPTree()\n    for transaction in cleaned_transactions:\n        tree.add_transaction(transaction)\n\n    # Step 3: FP-Growth mining\n    def mine_tree(tree, suffix, min_support, item_order):\n        \"\"\"Recursively mine the FP-tree. Suffix is a tuple of items.\"\"\"\n        frequent_itemsets = []\n\n        # For each item in header table in order (deterministic)\n        items = sorted(tree.header_table.keys(), key=lambda x: item_order[x], reverse=True)\n        for item in items:\n            # New frequent itemset: item + suffix\n            new_itemset = tuple(sorted((item,) + suffix))\n            # Support is sum of counts of all nodes for this item\n            support = sum(node.count for node in tree.header_table[item])\n            if support >= min_support:\n                frequent_itemsets.append((new_itemset, support))\n\n                # Build conditional pattern base\n                conditional_pattern_base = []\n                for node in tree.header_table[item]:\n                    path = []\n                    parent = node.parent\n                    while parent and parent.item is not None:\n                        path.append(parent.item)\n                        parent = parent.parent\n                    if path:\n                        conditional_pattern_base.append((list(reversed(path)), node.count))\n\n                # Build conditional FP-tree\n                conditional_tree = FPTree()\n                # Count support for items in conditional pattern base\n                cond_item_counter = Counter()\n                for path, count in conditional_pattern_base:\n                    cond_item_counter.update({i: count for i in path})\n                # Only keep items with enough support\n                cond_frequent_items = {i for i, c in cond_item_counter.items() if c >= min_support}\n                if cond_frequent_items:\n                    # For deterministic order, use item_order\n                    def cond_item_sort_key(i):\n                        return (item_order[i],)\n                    # Add filtered, sorted paths to conditional tree\n                    for path, count in conditional_pattern_base:\n                        filtered_path = [i for i in path if i in cond_frequent_items]\n                        if filtered_path:\n                            filtered_path = sorted(filtered_path, key=lambda x: item_order[x])\n                            conditional_tree.add_transaction(filtered_path, count)\n                    # Recurse\n                    frequent_itemsets.extend(mine_tree(conditional_tree, (item,) + suffix, min_support, item_order))\n        return frequent_itemsets\n\n    # Mine the tree\n    all_itemsets_with_support = mine_tree(tree, tuple(), min_support, item_order)\n\n    # Add frequent 1-itemsets (if not already included)\n    # (They are included by the mining process above.)\n\n    # Extract only the itemsets, sort items in each, and sort the list as required\n    result = [list(itemset) for itemset, support in all_itemsets_with_support]\n    for itemset in result:\n        itemset.sort()\n    result.sort(key=lambda x: (len(x), x))\n    return result\n```\n"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check for valid k\n    n_train = len(X_train)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return -1\n\n    # Convert to numpy arrays for efficient computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n\n    predictions = []\n    for x in X_test_np:\n        # Compute squared Euclidean distances to all training points\n        # (no sqrt needed)\n        dists = np.sum((X_train_np - x) ** 2, axis=1)\n        # Get indices of k smallest distances\n        nn_indices = np.argpartition(dists, k-1)[:k]\n        # Get the labels of the k nearest neighbors\n        nn_labels = y_train_np[nn_indices]\n        # Count votes for each class\n        labels, counts = np.unique(nn_labels, return_counts=True)\n        max_count = np.max(counts)\n        # Find all labels with the maximum count (handle ties)\n        tied_labels = labels[counts == max_count]\n        # Pick the smallest label among the tied ones\n        pred_label = int(np.min(tied_labels))\n        predictions.append(pred_label)\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    X_train = [[0, 0], [1, 1], [2, 2], [10, 10]]\n    y_train = [0, 1, 1, 2]\n    X_test = [[1, 0], [9, 9], [1, 2]]\n    print(knn_predict(X_train, y_train, X_test, 3))  # Output: [1, 1, 1]\n    print(knn_predict(X_train, y_train, X_test, 1))  # Output: [0, 2, 1]\n    print(knn_predict(X_train, y_train, X_test, 0))  # Output: -1\n    print(knn_predict(X_train, y_train, X_test, 5))  # Output: -1\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n    # Machine epsilon for float type\n    eps = np.finfo(float).eps\n    # Compute loss: only the predicted probability for the true class is used per sample\n    loss = -np.sum(y * np.log(y_pred + eps))\n    return round(float(loss), 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 3 samples, 4 classes\n    y = [\n        [0, 1, 0, 0],\n        [1, 0, 0, 0],\n        [0, 0, 0, 1]\n    ]\n    y_pred = [\n        [0.1, 0.7, 0.1, 0.1],\n        [0.8, 0.1, 0.05, 0.05],\n        [0.2, 0.2, 0.2, 0.4]\n    ]\n    print(cross_entropy_loss(y, y_pred))  # Example output: 1.0498\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    def relu(Z):\n        return np.maximum(0, Z)\n\n    def sigmoid(Z):\n        return 1 / (1 + np.exp(-Z))\n\n    caches = []\n    A = X\n    L = len([k for k in parameters if k.startswith('W')])  # number of layers\n\n    for l in range(1, L + 1):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        if l == L:\n            A = sigmoid(Z)\n        else:\n            A = relu(Z)\n        caches.append((A, W, b, Z))  # store anything useful for backward\n\n    AL = np.round(A, 4).tolist()\n    return AL, caches\n```\n"}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    # Flatten arrays to 1D for consistency\n    A2 = np.ravel(A2)\n    Y = np.ravel(Y)\n    # Clip predicted probabilities to avoid log(0)\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    # Compute binary cross-entropy\n    cost = - (1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example 1\n    A2 = np.array([0.9, 0.2, 0.8, 0.4])\n    Y = np.array([1, 0, 1, 0])\n    print(compute_cost(A2, Y))  # Expected: ~0.260644\n\n    # Example 2 (with shape (1, m))\n    A2 = np.array([[0.99, 0.01, 0.5]])\n    Y = np.array([[1, 0, 1]])\n    print(compute_cost(A2, Y))  # Expected: ~0.366204\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to numpy array for easy indexing\n    Q = np.asarray(Q)\n    n = Q.size\n    if n == 0:\n        raise ValueError(\"Q must contain at least one action.\")\n    if not (0 <= epsilon <= 1):\n        raise ValueError(\"epsilon must be in [0, 1].\")\n\n    # Find greedy action (first occurrence of max)\n    greedy_idx = int(np.argmax(Q))\n\n    # Compute base probability for all actions\n    base_prob = epsilon / n\n\n    # Initialize all with base probability\n    probs = np.full(n, base_prob, dtype=np.float64)\n\n    # Add the extra probability to the greedy action\n    probs[greedy_idx] += (1 - epsilon)\n\n    # Round to 4 decimal places\n    probs = np.round(probs, 4)\n\n    # Adjust for rounding error to ensure sum is exactly 1 (within tolerance)\n    diff = 1.0 - np.sum(probs)\n    if abs(diff) > 1e-12:\n        # Add/subtract the difference to the greedy action (first max)\n        probs[greedy_idx] += diff\n        # Re-round in case adjustment caused a small floating error\n        probs = np.round(probs, 4)\n\n    # Final check\n    if not np.isclose(np.sum(probs), 1.0, atol=1e-12):\n        raise RuntimeError(\"Probabilities do not sum to 1 after adjustment.\")\n\n    return probs.tolist()\n\n# Example usage and test\nif __name__ == \"__main__\":\n    Q = [1.2, 0.3, 1.2, -0.1]\n    epsilon = 0.1\n    print(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions or not predictions[0]:\n        return []\n\n    num_samples = len(predictions[0])\n    num_trees = len(predictions)\n    result = []\n\n    for i in range(num_samples):\n        # Collect the i-th prediction from each tree\n        votes = [predictions[tree_idx][i] for tree_idx in range(num_trees)]\n        counter = Counter(votes)\n        max_count = max(counter.values())\n        # Get all labels with the maximum count\n        candidates = [label for label, count in counter.items() if count == max_count]\n        # Select the smallest label (numeric or lex order)\n        result.append(min(candidates))\n    return result\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Numeric labels\n    preds1 = [\n        [0, 1, 1, 2],\n        [1, 1, 0, 2],\n        [1, 0, 1, 2],\n        [0, 1, 1, 2]\n    ]\n    print(aggregate_random_forest_votes(preds1))  # Output: [1, 1, 1, 2]\n\n    # String labels\n    preds2 = [\n        [\"cat\", \"dog\", \"dog\"],\n        [\"dog\", \"cat\", \"dog\"],\n        [\"cat\", \"dog\", \"cat\"]\n    ]\n    print(aggregate_random_forest_votes(preds2))  # Output: ['cat', 'dog', 'dog']\n\n    # Tie-breaking (numeric)\n    preds3 = [\n        [1, 2],\n        [2, 1]\n    ]\n    print(aggregate_random_forest_votes(preds3))  # Output: [1, 1]\n\n    # Tie-breaking (string)\n    preds4 = [\n        [\"b\", \"a\"],\n        [\"a\", \"b\"]\n    ]\n    print(aggregate_random_forest_votes(preds4))  # Output: ['a', 'a']\n\n    # Empty input\n    print(aggregate_random_forest_votes([]))  # Output: []\n    print(aggregate_random_forest_votes([[]]))  # Output: []\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Check if input is a scalar (int, float, or 0-dim ndarray)\n    if np.isscalar(z) or (isinstance(z, np.ndarray) and z.ndim == 0):\n        val = float(np.logaddexp(0.0, z))\n        return round(val, 4)\n    else:\n        arr = np.asarray(z)\n        result = np.logaddexp(0.0, arr)\n        rounded = np.round(result, 4)\n        return rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    z1 = np.array([-1000, 0, 3])\n    print(softplus(z1))  # [0.0, 0.6931, 3.0486]\n\n    z2 = -1000\n    print(softplus(z2))  # 0.0\n\n    z3 = [1, 2, 3]\n    print(softplus(z3))  # [1.3133, 2.1269, 3.0486]\n\n    z4 = [[-2, 0], [2, 4]]\n    print(softplus(z4))  # [[0.1269, 0.6931], [2.1269, 4.0182]]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Helper to get attribute or dict entry\n    def get_field(obj, field):\n        if hasattr(obj, field):\n            return getattr(obj, field)\n        elif isinstance(obj, dict) and field in obj:\n            return obj[field]\n        else:\n            return None\n\n    arm_evs = get_field(bandit, 'arm_evs')\n    ev_estimates = get_field(policy, 'ev_estimates')\n\n    # Check for missing or empty estimates\n    if not isinstance(ev_estimates, dict) or len(ev_estimates) == 0:\n        return np.nan\n\n    # Sort arm indices to align estimates with true values\n    sorted_indices = sorted(ev_estimates.keys())\n    # Defensive: check that number of arms matches\n    if len(sorted_indices) != len(arm_evs):\n        raise ValueError(\"Number of policy estimates does not match number of bandit arms.\")\n\n    squared_errors = []\n    for i, arm_idx in enumerate(sorted_indices):\n        est = ev_estimates[arm_idx]\n        true = arm_evs[i]\n        squared_errors.append((est - true) ** 2)\n\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\n\n# Example usage and test\nif __name__ == \"__main__\":\n    bandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\n    policy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n    print(mse(bandit, policy))  # Should print 0.0075\n\n    # Test with missing estimates\n    policy2 = {\"ev_estimates\": {}}\n    print(mse(bandit, policy2))  # Should print nan\n\n    # Test with attribute objects\n    class BanditObj:\n        def __init__(self, arm_evs):\n            self.arm_evs = arm_evs\n    class PolicyObj:\n        def __init__(self, ev_estimates):\n            self.ev_estimates = ev_estimates\n\n    bandit_obj = BanditObj([0.5, 0.2, 0.9])\n    policy_obj = PolicyObj({2: 0.8, 0: 0.4, 1: 0.25})\n    print(mse(bandit_obj, policy_obj))  # Should print 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # 1. Build vocabulary from corpus\n    vocab = set()\n    for sent in corpus:\n        vocab.update(sent.split())\n    vocab.add(\"<UNK>\")\n    vocab = sorted(vocab)  # for deterministic |V|\n    vocab_set = set(vocab)\n    V = len(vocab)\n\n    # 2. Build n-gram frequency tables for n=1..N\n    ngram_counters = [Counter() for _ in range(N)]\n    for sent in corpus:\n        words = sent.split()\n        # Map OOVs in corpus? No, only in sequence.\n        for n in range(1, N+1):\n            if len(words) < n:\n                continue\n            for i in range(len(words)-n+1):\n                ngram = tuple(words[i:i+n])\n                ngram_counters[n-1][ngram] += 1\n\n    # 3. Prepare sequence: map OOVs to <UNK>\n    seq_words = sequence.split()\n    seq_words = [w if w in vocab_set else \"<UNK>\" for w in seq_words]\n\n    # 4. If sequence too short, return 0.0\n    if len(seq_words) < N:\n        return 0.0\n\n    # 5. Compute log-probability\n    log_prob = 0.0\n    for i in range(len(seq_words)-N+1):\n        ngram = tuple(seq_words[i:i+N])\n        context = ngram[:-1]\n        word = ngram[-1]\n\n        # Numerator: count(context\u25e6w_i) + K\n        ngram_count = ngram_counters[N-1][ngram] if ngram in ngram_counters[N-1] else 0\n        numerator = ngram_count + K\n\n        # Denominator: count(context) + K*|V|\n        if N == 1:\n            context_count = sum(ngram_counters[0].values())\n        else:\n            context_count = ngram_counters[N-2][context] if context in ngram_counters[N-2] else 0\n        denominator = context_count + K * V\n\n        prob = numerator / denominator\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\n**Example usage:**\n```python\nif __name__ == \"__main__\":\n    corpus = [\n        \"the cat sat on the mat\",\n        \"the dog sat on the log\",\n        \"the cat lay on the rug\"\n    ]\n    sequence = \"the cat sat on the rug\"\n    print(additive_ngram_log_prob(corpus, sequence, N=2, K=1.0))  # Example bigram log-prob\n```\n"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    # Initialise W and H with small random values\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n\n    I_K = np.eye(K)\n    for it in range(max_iter):\n        # Update W (N x K)\n        HHT = H @ H.T\n        for i in range(N):\n            # Solve: (H H^T + alpha I) w_i^T = H x_i^T\n            A = HHT + alpha * I_K\n            b = H @ X[i, :].T\n            W[i, :] = np.linalg.solve(A, b)\n\n        # Update H (K x M)\n        WTW = W.T @ W\n        for j in range(M):\n            # Solve: (W^T W + alpha I) h_j = W^T x_j\n            A = WTW + alpha * I_K\n            b = W.T @ X[:, j]\n            H[:, j] = np.linalg.solve(A, b)\n\n        # Compute loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        if loss < tol:\n            break\n\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat\n```\n"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    # Set random seeds for reproducibility\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n\n    m, n = X.shape\n\n    # --- K-Means++ initialization ---\n    centroids = []\n    # 1. Choose the first centroid randomly from X\n    idx = random.randint(0, m - 1)\n    centroids.append(X[idx].copy())\n\n    # 2. Choose the rest K-1 centroids\n    for _ in range(1, K):\n        # Compute squared distances from each point to the nearest centroid\n        dists = np.array([\n            min(np.sum((x - c) ** 2) for c in centroids)\n            for x in X\n        ])\n        # Probability proportional to distance squared\n        total = dists.sum()\n        if total == 0:\n            # All points are identical; pick random\n            idx = random.randint(0, m - 1)\n            centroids.append(X[idx].copy())\n            continue\n        probs = dists / total\n        # Choose next centroid\n        idx = np.random.choice(m, p=probs)\n        centroids.append(X[idx].copy())\n    centroids = np.array(centroids)  # shape (K, n)\n\n    # --- Lloyd's algorithm ---\n    labels = np.full(m, -1, dtype=int)\n    for iteration in range(max_iter):\n        # Assignment step\n        dists = np.linalg.norm(X[:, None, :] - centroids[None, :, :], axis=2)  # (m, K)\n        new_labels = np.argmin(dists, axis=1)  # (m,)\n\n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n\n        # Update step\n        new_centroids = centroids.copy()\n        for k in range(K):\n            members = X[labels == k]\n            if len(members) > 0:\n                new_centroids[k] = members.mean(axis=0)\n            # else: keep centroid unchanged\n        centroids = new_centroids\n\n    # Round to 4 decimals and sort as specified\n    centroids_rounded = np.round(centroids, 4).tolist()\n    centroids_rounded.sort(key=lambda c: (c[0], c))  # sort by first coordinate, then full tuple\n\n    return centroids_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    X = np.array([\n        [1.0, 2.0],\n        [1.5, 1.8],\n        [5.0, 8.0],\n        [8.0, 8.0],\n        [1.0, 0.6],\n        [9.0, 11.0],\n        [8.0, 2.0],\n        [10.0, 2.0],\n        [9.0, 3.0],\n    ])\n    K = 3\n    centroids = kmeans(X, K, random_state=42)\n    print(centroids)\n```"}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes a string into a fixed-length list of integer ids using the provided vocabulary.\n    Unknown characters and padding are encoded as 0.\n    \"\"\"\n    encoded = []\n    for c in text:\n        idx = vocabulary.get(c, 0)\n        encoded.append(idx)\n        if len(encoded) == time_steps:\n            break\n    # Pad with 0s if needed\n    while len(encoded) < time_steps:\n        encoded.append(0)\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decodes a list/array of integer ids into a string using the inverse vocabulary.\n    Ignores padding tokens (0).\n    \"\"\"\n    chars = []\n    for idx in indices:\n        if idx == 0:\n            continue\n        c = inverse_vocab.get(idx, '')\n        chars.append(c)\n    return ''.join(chars)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input text, runs the model, decodes the prediction.\n    \"\"\"\n    # Encode input\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Prepare batch of shape (1, TIME_STEPS)\n    batch = np.array([encoded], dtype=np.int32)\n    # Model prediction: shape (1, TIME_STEPS, vocab_size)\n    logits = model.predict(batch)\n    # Argmax over last axis to get predicted token ids\n    pred_ids = np.argmax(logits, axis=-1)  # shape: (1, TIME_STEPS)\n    pred_ids = pred_ids[0]  # shape: (TIME_STEPS,)\n    # Decode\n    decoded = int_to_string(pred_ids, inv_output_vocabulary)\n    return decoded\n\n# --- Example usage and dummy model for demonstration ---\n\nif __name__ == \"__main__\":\n    # Example vocabulary\n    # 0 is reserved for padding/unknown\n    input_vocab = {'a': 1, 'b': 2, 'c': 3, ' ': 4}\n    inv_output_vocab = {1: 'A', 2: 'B', 3: 'C', 4: ' '}  # output is uppercase\n\n    # Dummy model: just returns one-hot of input+1 mod 4 (for demonstration)\n    class DummyModel:\n        def predict(self, batch):\n            # batch: (batch_size, TIME_STEPS)\n            batch_size, time_steps = batch.shape\n            vocab_size = max(inv_output_vocab.keys()) + 1  # assume contiguous\n            logits = np.zeros((batch_size, time_steps, vocab_size), dtype=np.float32)\n            for i in range(batch_size):\n                for t in range(time_steps):\n                    idx = batch[i, t]\n                    # For demo: output (idx+1)%vocab_size as the prediction\n                    pred_idx = (idx + 1) % vocab_size\n                    logits[i, t, pred_idx] = 1.0\n            return logits\n\n    model = DummyModel()\n    input_text = \"abc cab\"\n    output = run_example(model, input_vocab, inv_output_vocab, input_text)\n    print(\"Input text: \", input_text)\n    print(\"Predicted output: \", output)\n```\n**How it works:**\n- `string_to_int` encodes each character using the vocabulary, pads/truncates to `TIME_STEPS`, and uses 0 for unknowns/padding.\n- `int_to_string` decodes a list of ids, skipping 0s.\n- `run_example` encodes, predicts, argmaxes, and decodes.\n- The example at the bottom demonstrates usage with a dummy model and vocabularies.\n\n**Output Example:**\n```\nInput text:  abc cab\nPredicted output:  BCA DBC\n```\n*(The output depends on the dummy model logic; replace with your real model for actual use.)*"}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {output_str}\")\n        predictions.append(output_str)\n    return predictions\n```\n**Note:**  \n- This function assumes that `run_example` and (if `examples` is omitted) the global constant `EXAMPLES` are defined elsewhere in your environment.\n- The function does **not** use `input_vocabulary` or `inv_output_vocabulary` internally, as per the requirements."}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is shape (m, 1)\n    y = y.reshape(-1, 1)\n    # Ensure w is shape (n, 1)\n    w = w.reshape(-1, 1)\n    m = X.shape[0]\n    epsilon = 1e-20\n\n    # Compute z = Xw\n    z = X @ w  # shape (m, 1)\n    # Sigmoid\n    p = 1 / (1 + np.exp(-z))\n    # Clip p to avoid log(0)\n    p = np.clip(p, epsilon, 1 - epsilon)\n\n    # Compute loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(float(loss), 4)\n\n    # Compute gradient\n    grad = (X.T @ (p - y)) / m  # shape (n, 1)\n    grad = np.round(grad, 4)\n    grad_list = grad.tolist()\n\n    return loss, grad_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([0, 1, 1])\n    w = np.array([0.1, -0.2])\n    loss, grad = logistic_loss_and_gradient(X, y, w)\n    print(\"Loss:\", loss)\n    print(\"Gradient:\", grad)\n```\n"}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Helper: Decision stump prediction\n    def stump_predict(X, feature, threshold, polarity):\n        # polarity: 1 means predict 1 if x < threshold, -1 means predict 1 if x >= threshold\n        preds = np.ones(X.shape[0])\n        if polarity == 1:\n            preds[X[:, feature] < threshold] = -1\n        else:\n            preds[X[:, feature] >= threshold] = -1\n        return preds\n\n    m, n = X_train.shape\n    n_clf = max(1, int(n_clf))\n    # Initialize sample weights\n    w = np.full(m, 1 / m)\n    stumps = []  # Each stump: (feature, threshold, polarity, alpha)\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n\n        # Search for best decision stump\n        for feature in range(n):\n            X_col = X_train[:, feature]\n            thresholds = np.unique(X_col)\n            # To ensure we can split between values, use midpoints between unique values\n            if len(thresholds) == 1:\n                # All values are the same, only one threshold possible\n                candidate_thresholds = thresholds\n            else:\n                candidate_thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n                candidate_thresholds = np.concatenate([thresholds[:1] - 1, candidate_thresholds, thresholds[-1:] + 1])\n\n            for threshold in candidate_thresholds:\n                for polarity in [1, -1]:\n                    preds = stump_predict(X_train, feature, threshold, polarity)\n                    misclassified = preds != y_train\n                    error = np.sum(w * misclassified)\n                    # If error > 0.5, flip polarity (equivalent to switching sign)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature': feature,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'preds': preds\n                        }\n\n        # Avoid division by zero\n        eps = 1e-10\n        error = min_error\n        alpha = 0.5 * np.log((1 - error + eps) / (error + eps))\n        # Store the stump\n        stumps.append((best_stump['feature'], best_stump['threshold'], best_stump['polarity'], alpha))\n        # Update sample weights\n        w = w * np.exp(-alpha * y_train * best_stump['preds'])\n        w = w / np.sum(w)  # Normalize\n\n    # Predict on X_test\n    agg = np.zeros(X_test.shape[0])\n    for feature, threshold, polarity, alpha in stumps:\n        preds = stump_predict(X_test, feature, threshold, polarity)\n        agg += alpha * preds\n\n    y_pred = np.sign(agg)\n    # If any 0s (rare, but possible if agg==0), set to 1\n    y_pred[y_pred == 0] = 1\n    return y_pred.astype(int).tolist()\n```\n"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n\n    n_samples, n_features = X.shape\n    classes = np.unique(y)\n    n_classes = len(classes)\n\n    # Compute global mean\n    mu = np.mean(X, axis=0)\n\n    # Compute class means and class sizes\n    mu_c = {}\n    N_c = {}\n    for c in classes:\n        X_c = X[y == c]\n        mu_c[c] = np.mean(X_c, axis=0)\n        N_c[c] = X_c.shape[0]\n\n    # Compute within-class scatter matrix S_W\n    S_W = np.zeros((n_features, n_features), dtype=np.float64)\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = mu_c[c]\n        # Centered data\n        X_centered = X_c - mean_c\n        S_W += X_centered.T @ X_centered\n\n    # Compute between-class scatter matrix S_B\n    S_B = np.zeros((n_features, n_features), dtype=np.float64)\n    for c in classes:\n        n_c = N_c[c]\n        mean_diff = (mu_c[c] - mu).reshape(-1, 1)\n        S_B += n_c * (mean_diff @ mean_diff.T)\n\n    # Compute A = pinv(S_W) @ S_B\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n\n    # Eigen-decomposition (A is symmetric)\n    eigvals, eigvecs = np.linalg.eigh(A)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[sorted_idx]\n    eigvecs = eigvecs[:, sorted_idx]\n\n    # Select the first n_components eigenvectors\n    eigvecs = eigvecs[:, :n_components]\n\n    # Deterministic sign: flip sign if first nonzero element is negative\n    for i in range(eigvecs.shape[1]):\n        v = eigvecs[:, i]\n        # Find first nonzero element\n        nz_idx = np.flatnonzero(np.abs(v) > 1e-12)\n        if nz_idx.size > 0:\n            first_nz = v[nz_idx[0]]\n            if first_nz < 0:\n                eigvecs[:, i] = -v\n\n    # Project X onto the selected eigenvectors\n    X_proj = X @ eigvecs\n\n    # Round to 4 decimal places\n    X_proj = np.round(X_proj, 4)\n\n    # Convert to list of lists\n    return X_proj.tolist()\n```\n"}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 0:\n        return -1\n\n    # Special case: 1x1 grid\n    if n == 1:\n        if grid[0][0] == '.':\n            return 0\n        else:\n            return -1\n\n    # Directions: up, down, left, right\n    dirs = [(-1,0), (1,0), (0,-1), (0,1)]\n\n    # Step 1: Precompute fire arrival times for each cell\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_q.append((i, j, 0))\n            elif grid[i][j] == '#':\n                fire_time[i][j] = -1  # wall, never burns\n\n    # BFS for fire spread\n    while fire_q:\n        x, y, t = fire_q.popleft()\n        for dx, dy in dirs:\n            nx, ny = x+dx, y+dy\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] != '#' and fire_time[nx][ny] > t+1:\n                    fire_time[nx][ny] = t+1\n                    fire_q.append((nx, ny, t+1))\n\n    # Step 2: BFS for agent\n    # Check if start or goal is on fire at t=0\n    if fire_time[0][0] == 0 or fire_time[n-1][n-1] == 0:\n        return -1\n    if grid[0][0] == '#' or grid[n-1][n-1] == '#':\n        return -1\n\n    agent_q = deque()\n    visited = [[math.inf for _ in range(n)] for _ in range(n)]\n    agent_q.append((0, 0, 0))  # (x, y, time)\n    visited[0][0] = 0\n\n    while agent_q:\n        x, y, t = agent_q.popleft()\n        # If reached goal\n        if (x, y) == (n-1, n-1):\n            return t\n        for dx, dy in dirs:\n            nx, ny = x+dx, y+dy\n            nt = t+1\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] == '#':\n                    continue\n                # Fire spreads first, then agent moves\n                # So agent arrives at (nx,ny) at time nt\n                # It's safe only if fire arrives strictly after nt\n                if fire_time[nx][ny] == -1 or fire_time[nx][ny] > nt:\n                    if visited[nx][ny] > nt:\n                        visited[nx][ny] = nt\n                        agent_q.append((nx, ny, nt))\n    return -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    grids = [\n        [\n            \".F.\",\n            \"...\",\n            \"..F\"\n        ],\n        [\n            \"F..\",\n            \"...\",\n            \"..F\"\n        ],\n        [\n            \"...\",\n            \".#.\",\n            \"...\"\n        ],\n        [\n            \"F\"\n        ],\n        [\n            \".\"\n        ],\n        [\n            \"#\"\n        ],\n        [\n            \"F#.\",\n            \".#.\",\n            \"..F\"\n        ]\n    ]\n    for idx, g in enumerate(grids):\n        print(f\"Test case {idx+1}: {escape_fire_maze(g)}\")\n```\n**How it works:**\n- First, it computes for each cell the earliest time the fire will reach it (using BFS from all fire sources).\n- Then, it runs BFS for the agent, only allowing moves into cells that will not be on fire at the time the agent arrives.\n- If the agent reaches the goal, it returns the time; otherwise, it returns -1.\n\n**Test cases** are included at the bottom for demonstration."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors classifier.\n\n    Parameters:\n        X_train: (n_train, n_features) array of training samples\n        y_train: (n_train,) array of training labels\n        X_test:  (n_test, n_features) array of test samples\n        k:       number of neighbors\n        metric:  'euclidean', 'manhattan', or 'cosine'\n\n    Returns:\n        (n_test,) array of predicted labels\n    \"\"\"\n    # Ensure k is at least 1 and at most the number of training samples\n    n_train = X_train.shape[0]\n    k = max(1, min(k, n_train))\n\n    # Compute distance matrix: (n_test, n_train)\n    if metric == 'euclidean':\n        # Efficient (x-y)^2 = x^2 + y^2 - 2xy\n        X_train_sq = np.sum(X_train**2, axis=1)\n        X_test_sq = np.sum(X_test**2, axis=1)\n        dists = np.sqrt(\n            X_test_sq[:, None] + X_train_sq[None, :] - 2 * X_test @ X_train.T\n        )\n    elif metric == 'manhattan':\n        # Broadcasting for L1 norm\n        dists = np.abs(X_test[:, None, :] - X_train[None, :, :]).sum(axis=2)\n    elif metric == 'cosine':\n        # Normalize rows to unit norm\n        X_train_norm = X_train / (np.linalg.norm(X_train, axis=1, keepdims=True) + 1e-12)\n        X_test_norm = X_test / (np.linalg.norm(X_test, axis=1, keepdims=True) + 1e-12)\n        cosine_sim = X_test_norm @ X_train_norm.T\n        dists = 1 - cosine_sim\n    else:\n        # Fallback to Euclidean\n        X_train_sq = np.sum(X_train**2, axis=1)\n        X_test_sq = np.sum(X_test**2, axis=1)\n        dists = np.sqrt(\n            X_test_sq[:, None] + X_train_sq[None, :] - 2 * X_test @ X_train.T\n        )\n\n    # For each test sample, find indices of k nearest neighbors\n    neighbor_idxs = np.argpartition(dists, kth=k-1, axis=1)[:, :k]  # (n_test, k)\n\n    # Gather neighbor labels\n    neighbor_labels = y_train[neighbor_idxs]  # (n_test, k)\n\n    # Majority vote with tie-breaking (smallest label)\n    def majority_vote(row):\n        vals, counts = np.unique(row, return_counts=True)\n        max_count = np.max(counts)\n        candidates = vals[counts == max_count]\n        return np.min(candidates)\n\n    # Vectorized majority vote\n    predicted = np.apply_along_axis(majority_vote, 1, neighbor_labels)\n\n    return predicted\n```\n"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    # Validate input\n    if metric not in ('euclidean', 'manhattan', 'cosine'):\n        raise ValueError(\"metric must be 'euclidean', 'manhattan', or 'cosine'\")\n    if X.shape[0] != y.shape[0]:\n        raise ValueError(\"X and y must have the same number of samples\")\n    if X.shape[1] != X_test.shape[1]:\n        raise ValueError(\"X and X_test must have the same number of features\")\n    n_train = X.shape[0]\n    n_test = X_test.shape[0]\n    k_eff = min(k, n_train)\n    eps = 1e-12\n\n    # Compute distance matrix: shape (n_test, n_train)\n    if metric == 'euclidean':\n        # (x-y)^2 = x^2 + y^2 - 2xy\n        X_sq = np.sum(X**2, axis=1)  # (n_train,)\n        X_test_sq = np.sum(X_test**2, axis=1)  # (n_test,)\n        # broadcasting: (n_test, 1) + (1, n_train) - 2*(n_test, n_train)\n        dists = np.sqrt(\n            X_test_sq[:, None] + X_sq[None, :] - 2 * np.dot(X_test, X.T)\n        )\n    elif metric == 'manhattan':\n        # For each test sample, compute abs(X_test[i] - X[j]) summed over features\n        # Use broadcasting for efficiency\n        dists = np.abs(X_test[:, None, :] - X[None, :, :]).sum(axis=2)\n    elif metric == 'cosine':\n        # 1 - (x . y) / (||x|| * ||y||)\n        X_norm = np.linalg.norm(X, axis=1) + eps  # (n_train,)\n        X_test_norm = np.linalg.norm(X_test, axis=1) + eps  # (n_test,)\n        dot = np.dot(X_test, X.T)  # (n_test, n_train)\n        denom = np.outer(X_test_norm, X_norm)  # (n_test, n_train)\n        cosine_sim = dot / denom\n        dists = 1 - cosine_sim\n\n    # For each test sample, find k nearest neighbours and vote\n    y_pred = []\n    for i in range(n_test):\n        # Get indices of k smallest distances\n        idx = np.argpartition(dists[i], k_eff-1)[:k_eff]\n        # Get their labels\n        neighbour_labels = y[idx]\n        # Count occurrences\n        labels, counts = np.unique(neighbour_labels, return_counts=True)\n        max_count = np.max(counts)\n        # Find all labels with max_count\n        candidates = labels[counts == max_count]\n        # Tie-break: pick the smallest label\n        pred_label = np.min(candidates)\n        y_pred.append(pred_label)\n    return np.array(y_pred).tolist()\n\n# Example usage and test\nif __name__ == \"__main__\":\n    # Simple dataset: 2 classes, 2D\n    X_train = np.array([[0, 0], [1, 1], [0, 1], [1, 0]])\n    y_train = np.array([0, 0, 1, 1])\n    X_test = np.array([[0.9, 0.9], [0, 0.1], [0.5, 0.5], [0.2, 0.8]])\n    for metric in ['euclidean', 'manhattan', 'cosine']:\n        preds = knn_predict(X_train, y_train, X_test, k=3, metric=metric)\n        print(f\"Metric: {metric}, Predictions: {preds}\")\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure state is a 1D numpy array\n    x = np.asarray(state)\n    \n    # First layer: Linear + ReLU\n    z1 = x @ weights['W1'] + weights['b1']\n    a1 = np.maximum(0, z1)\n    \n    # Second layer: Linear + ReLU\n    z2 = a1 @ weights['W2'] + weights['b2']\n    a2 = np.maximum(0, z2)\n    \n    # Output layer: Linear + tanh\n    z3 = a2 @ weights['W3'] + weights['b3']\n    out = np.tanh(z3)\n    \n    # Round to 4 decimals and convert to list\n    return [round(float(v), 4) for v in out]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example dimensions\n    state_dim = 3\n    hidden1 = 5\n    hidden2 = 4\n    action_dim = 2\n\n    # Random seed for reproducibility\n    np.random.seed(42)\n\n    # Example state\n    state = [0.5, -1.2, 0.3]\n\n    # Example weights\n    weights = {\n        \"W1\": np.random.randn(state_dim, hidden1),\n        \"b1\": np.random.randn(hidden1),\n        \"W2\": np.random.randn(hidden1, hidden2),\n        \"b2\": np.random.randn(hidden2),\n        \"W3\": np.random.randn(hidden2, action_dim),\n        \"b3\": np.random.randn(action_dim),\n    }\n\n    action = actor_forward(state, weights)\n    print(\"Action:\", action)\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    def soft_thresholding(a, tau):\n        if a > tau:\n            return a - tau\n        elif a < -tau:\n            return a + tau\n        else:\n            return 0.0\n\n    m, n = X.shape\n\n    # Step 1: Add intercept column\n    if fit_intercept:\n        X_ext = np.hstack([np.ones((m, 1)), X])\n    else:\n        X_ext = np.hstack([np.zeros((m, 1)), X])\n\n    n_ext = X_ext.shape[1]  # n+1\n\n    # Step 2: Initialise all parameters to zero\n    w = np.zeros(n_ext)  # w[0] is intercept, w[1:] are weights\n\n    # Precompute squared norms of columns (for denominator)\n    X_col_sqnorm = np.sum(X_ext ** 2, axis=0)  # shape (n+1,)\n\n    for it in range(max_iters):\n        # Step 2: Recompute intercept as mean residual if fit_intercept\n        if fit_intercept:\n            # Compute current prediction (excluding intercept)\n            y_pred_wo_intercept = X_ext[:, 1:] @ w[1:]\n            w[0] = np.mean(y - y_pred_wo_intercept)\n        else:\n            w[0] = 0.0  # always zero if not fitting intercept\n\n        # Step 3: Coordinate descent for each weight (excluding intercept)\n        for j in range(1, n_ext):\n            # Save old value\n            w_j_old = w[j]\n            # Temporarily set w_j to 0\n            w[j] = 0.0\n\n            # Compute partial residual r_j = y - Xw_{neg j}\n            y_pred = X_ext @ w\n            r_j = y - y_pred + X_ext[:, j] * w_j_old  # add back old contribution\n\n            # Numerator: <x_j, r_j>\n            a_j = np.dot(X_ext[:, j], r_j)\n            # Denominator: sum_i x_{ij}^2\n            d_j = X_col_sqnorm[j]\n\n            # Soft-thresholding\n            w[j] = soft_thresholding(a_j, lambda_param * m) / (d_j if d_j != 0 else 1.0)\n\n    # Prepare output\n    # weights: w[1:] (corresponds to original features)\n    weights = [round(float(val), 4) for val in w[1:]]\n    bias = round(float(w[0]), 4)\n    return (weights, bias)\n\n# Example usage and test\nif __name__ == \"__main__\":\n    # Simple test: y = 3 + 2*x1 - x2 + noise, with L1 regularization\n    np.random.seed(42)\n    m = 100\n    X = np.random.randn(m, 2)\n    true_w = np.array([2.0, -1.0])\n    true_b = 3.0\n    y = true_b + X @ true_w + 0.1 * np.random.randn(m)\n\n    weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n    print(\"Weights:\", weights)\n    print(\"Bias:\", bias)\n    # Should be close to [2.0, -1.0], 3.0 (with some shrinkage due to L1)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they aren't already\n    x_arr = np.asarray(x)\n    y_arr = np.asarray(y)\n\n    # Check if both are 1-D\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        return -1\n\n    # Check for equal length\n    if x_arr.shape[0] != y_arr.shape[0]:\n        return -1\n\n    N = x_arr.shape[0]\n    if N == 0:\n        # By convention, if both are empty, return 0.0\n        return 0.0\n\n    # Compute the number of differing positions\n    diff_count = np.sum(x_arr != y_arr)\n    dist = diff_count / N\n    return round(dist, 4)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Identical vectors\n    print(hamming_distance([1, 2, 3], [1, 2, 3]))  # 0.0\n\n    # All different\n    print(hamming_distance([1, 2, 3], [4, 5, 6]))  # 1.0\n\n    # Some different\n    print(hamming_distance([1, 2, 3, 4], [1, 0, 3, 0]))  # 0.5\n\n    # Different lengths\n    print(hamming_distance([1, 2], [1, 2, 3]))  # -1\n\n    # Empty vectors\n    print(hamming_distance([], []))  # 0.0\n\n    # NumPy arrays\n    print(hamming_distance(np.array([1, 2, 3]), np.array([1, 0, 3])))  # 0.3333\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    # Input validation\n    if not isinstance(N, int) or N < 1:\n        raise ValueError(\"N must be a positive integer.\")\n    window = window.lower()\n    valid_windows = {\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"}\n    if window not in valid_windows:\n        raise ValueError(f\"Unknown window type: {window}\")\n\n    # Special case: N == 1\n    if N == 1:\n        return [1.0]\n\n    n = np.arange(N)\n    denom = N - 1\n\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / denom)\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / denom)\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = (a0\n             - a1 * np.cos(2 * np.pi * n / denom)\n             + a2 * np.cos(4 * np.pi * n / denom)\n             - a3 * np.cos(6 * np.pi * n / denom))\n    elif window == \"generalized_cosine\":\n        if coefficients is None or not isinstance(coefficients, (list, tuple)) or len(coefficients) == 0:\n            raise ValueError(\"For 'generalized_cosine', a non-empty list of coefficients must be provided.\")\n        w = np.zeros(N)\n        for k, ak in enumerate(coefficients):\n            w += ak * np.cos(2 * np.pi * k * n / denom)\n    else:\n        # Should never reach here due to earlier check\n        raise ValueError(f\"Unknown window type: {window}\")\n\n    # Round to 4 decimal places and convert to list\n    w_rounded = [round(float(val), 4) for val in w]\n    return w_rounded\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(\"Hamming N=5:\", generate_window(\"hamming\", 5))\n    print(\"Hann N=5:\", generate_window(\"hann\", 5))\n    print(\"Blackman-Harris N=5:\", generate_window(\"blackman_harris\", 5))\n    print(\"Generalized Cosine N=5, coeffs=[0.5, 0.5]:\", generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n    print(\"N=1 (any window):\", generate_window(\"hann\", 1))\n    # Uncomment to see error handling:\n    # print(generate_window(\"unknown\", 5))\n    # print(generate_window(\"generalized_cosine\", 5))\n    # print(generate_window(\"hann\", 0))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert to numpy arrays\n    X_train = np.array(X_train, dtype=np.float64)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test, dtype=np.float64)\n\n    # Handle the special case: all labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        # Predict the unique label for all test samples\n        return [int(unique_labels[0])] * X_test.shape[0]\n\n    # Map original labels to {0,1}\n    label0, label1 = unique_labels[0], unique_labels[1]\n    label_map = {label0: 0, label1: 1}\n    inv_label_map = {0: label0, 1: label1}\n    y_train_bin = np.vectorize(label_map.get)(y_train)\n\n    # Add intercept (bias) term to X_train and X_test\n    def add_intercept(X):\n        intercept = np.ones((X.shape[0], 1), dtype=X.dtype)\n        return np.hstack((intercept, X))\n    X_train_bias = add_intercept(X_train)\n    X_test_bias = add_intercept(X_test)\n\n    n_samples, n_features = X_train_bias.shape\n\n    # Initialize weights (including bias)\n    rng = np.random.default_rng(seed=42)\n    w = rng.normal(loc=0.0, scale=0.01, size=n_features)\n\n    # Sigmoid function\n    def sigmoid(z):\n        # Numerically stable sigmoid\n        z = np.clip(z, -500, 500)\n        return 1 / (1 + np.exp(-z))\n\n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the data at the start of each epoch\n        indices = rng.permutation(n_samples)\n        X_shuffled = X_train_bias[indices]\n        y_shuffled = y_train_bin[indices]\n\n        for start in range(0, n_samples, batch_size):\n            end = min(start + batch_size, n_samples)\n            X_batch = X_shuffled[start:end]\n            y_batch = y_shuffled[start:end]\n\n            # Forward pass: compute predictions\n            logits = X_batch @ w\n            probs = sigmoid(logits)\n\n            # Compute gradient (cross-entropy loss)\n            # dL/dw = X^T (p - y) / batch_size\n            grad = X_batch.T @ (probs - y_batch) / X_batch.shape[0]\n\n            # Update weights\n            w -= learning_rate * grad\n\n    # Predict on X_test\n    logits_test = X_test_bias @ w\n    probs_test = sigmoid(logits_test)\n    y_pred_bin = (probs_test >= 0.5).astype(int)\n    # Map back to original labels\n    y_pred = [int(inv_label_map[b]) for b in y_pred_bin]\n    return y_pred\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Toy dataset: AND gate\n    X_train = [[0,0],[0,1],[1,0],[1,1]]\n    y_train = [0,0,0,1]\n    X_test = [[0,0],[1,1],[1,0]]\n    preds = logistic_regression_train_predict(X_train, y_train, X_test)\n    print(\"Predictions:\", preds)  # Should print [0, 1, 0]\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"AdaBoost with decision stumps from scratch, as specified.\"\"\"\n\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    X_test = np.array(X_test, dtype=float)\n    n_samples, n_features = X_train.shape\n\n    # Convert labels from {0,1} to {-1,1}\n    y = y_train * 2 - 1\n\n    # Initialize sample weights\n    w = np.full(n_samples, 1 / n_samples)\n\n    # Store weak learners and their weights\n    stumps = []\n    alphas = []\n\n    for estimator in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n\n        # For each feature\n        for feature_index in range(n_features):\n            X_column = X_train[:, feature_index]\n            # Get all unique thresholds (midpoints between sorted unique values)\n            thresholds = np.unique(X_column)\n            # To ensure deterministic behaviour, sort thresholds\n            thresholds = np.sort(thresholds)\n            # For each threshold\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Predict: polarity=1 means predict 1 for < threshold, -1 for >= threshold\n                    # polarity=-1 means predict 1 for >= threshold, -1 for < threshold\n                    pred = np.ones(n_samples)\n                    if polarity == 1:\n                        pred[X_column >= threshold] = -1\n                    else:\n                        pred[X_column < threshold] = -1\n\n                    # Weighted error\n                    misclassified = (pred != y)\n                    error = np.sum(w * misclassified)\n\n                    # Deterministic tie-breaking: error, feature_index, threshold, polarity\n                    if (error < min_error or\n                        (np.isclose(error, min_error) and feature_index < best_stump[0]) or\n                        (np.isclose(error, min_error) and feature_index == best_stump[0] and threshold < best_stump[1]) or\n                        (np.isclose(error, min_error) and feature_index == best_stump[0] and np.isclose(threshold, best_stump[1]) and polarity == 1 and best_stump[2] == -1)):\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n                        best_pred = pred.copy()\n\n        # If perfect stump found, stop early\n        if min_error == 0:\n            alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n            stumps.append(best_stump)\n            alphas.append(alpha)\n            break\n\n        # Compute alpha\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Update sample weights\n        w = w * np.exp(-alpha * y * best_pred)\n        w = w / np.sum(w)  # Normalize\n\n    # Prediction on X_test\n    agg = np.zeros(X_test.shape[0])\n    for stump, alpha in zip(stumps, alphas):\n        feature_index, threshold, polarity = stump\n        X_col = X_test[:, feature_index]\n        pred = np.ones(X_test.shape[0])\n        if polarity == 1:\n            pred[X_col >= threshold] = -1\n        else:\n            pred[X_col < threshold] = -1\n        agg += alpha * pred\n\n    # Convert sign to {0,1}\n    y_pred = (agg >= 0).astype(int)\n    return y_pred.tolist()\n```\n"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Input validation\n    if not (isinstance(n_dims, int) and n_dims > 0 and\n            isinstance(num_particles, int) and num_particles > 0 and\n            isinstance(num_iterations, int) and num_iterations > 0):\n        return -1\n\n    # Constants\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    rng = np.random.default_rng(seed)\n\n    # Initialise particle positions and velocities\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = rng.uniform(-abs(upper_bound - lower_bound), abs(upper_bound - lower_bound), size=(num_particles, n_dims))\n\n    # Evaluate initial fitness\n    def sphere(x):\n        return np.sum(x**2, axis=-1)\n\n    fitness = sphere(positions)\n    pbest_positions = positions.copy()\n    pbest_fitness = fitness.copy()\n\n    # Global best\n    gbest_idx = np.argmin(pbest_fitness)\n    gbest_position = pbest_positions[gbest_idx].copy()\n    gbest_fitness = pbest_fitness[gbest_idx]\n\n    for _ in range(num_iterations):\n        # Random coefficients\n        r1 = rng.uniform(0, 1, size=(num_particles, n_dims))\n        r2 = rng.uniform(0, 1, size=(num_particles, n_dims))\n\n        # Update velocities\n        cognitive = c1 * r1 * (pbest_positions - positions)\n        social = c2 * r2 * (gbest_position - positions)\n        velocities = w * velocities + cognitive + social\n\n        # Update positions\n        positions = positions + velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n\n        # Evaluate fitness\n        fitness = sphere(positions)\n\n        # Update personal bests\n        improved = fitness < pbest_fitness\n        pbest_positions[improved] = positions[improved]\n        pbest_fitness[improved] = fitness[improved]\n\n        # Update global best\n        min_idx = np.argmin(pbest_fitness)\n        if pbest_fitness[min_idx] < gbest_fitness:\n            gbest_fitness = pbest_fitness[min_idx]\n            gbest_position = pbest_positions[min_idx].copy()\n\n    return round(float(gbest_fitness), 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    # Convert to numpy arrays for efficient computation\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    n_train = X_train_np.shape[0]\n\n    # Adjust k if needed\n    if k == 0 or k > n_train:\n        k_eff = n_train\n    else:\n        k_eff = k\n\n    predictions = []\n\n    for x in X_test_np:\n        # Compute Euclidean distances to all training points\n        dists = np.linalg.norm(X_train_np - x, axis=1)\n        # Get indices of k nearest neighbours\n        nn_indices = np.argsort(dists)[:k_eff]\n        nn_targets = [y_train[i] for i in nn_indices]\n\n        if task == \"classification\":\n            # Count occurrences\n            counter = Counter(nn_targets)\n            max_count = max(counter.values())\n            # Get all labels with max_count\n            candidates = [label for label, count in counter.items() if count == max_count]\n            # Return the smallest label according to Python ordering\n            pred = min(candidates)\n            predictions.append(pred)\n        elif task == \"regression\":\n            # Compute mean and round to 4 decimals\n            mean_val = round(float(np.mean([float(val) for val in nn_targets])), 4)\n            predictions.append(mean_val)\n        else:\n            raise ValueError(\"task must be 'classification' or 'regression'\")\n\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Classification example\n    X_train = [[0, 0], [1, 1], [2, 2], [0, 1]]\n    y_train = ['a', 'b', 'b', 'a']\n    X_test = [[1, 0], [2, 1]]\n    print(knn_predict(X_train, y_train, X_test, k=3, task=\"classification\"))  # ['a', 'b']\n\n    # Regression example\n    X_train = [[0], [1], [2], [3]]\n    y_train = [1.0, 2.0, 3.0, 4.0]\n    X_test = [[1.5], [2.5]]\n    print(knn_predict(X_train, y_train, X_test, k=2, task=\"regression\"))  # [2.5, 3.5]\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class Node:\n        __slots__ = ['is_leaf', 'class_label', 'feature', 'threshold', 'left', 'right']\n        def __init__(self, is_leaf, class_label=None, feature=None, threshold=None, left=None, right=None):\n            self.is_leaf = is_leaf\n            self.class_label = class_label\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n\n    def gini(y):\n        # y: array of labels\n        if len(y) == 0:\n            return 0.0\n        _, counts = np.unique(y, return_counts=True)\n        probs = counts / counts.sum()\n        return 1.0 - np.sum(probs ** 2)\n\n    def majority_class(y):\n        # Returns the smallest class in case of tie (for determinism)\n        vals, counts = np.unique(y, return_counts=True)\n        max_count = np.max(counts)\n        majority = vals[counts == max_count]\n        return int(np.min(majority))\n\n    def best_split(X, y):\n        n_samples, n_features = X.shape\n        parent_gini = gini(y)\n        best_gain = -1e-12  # To avoid floating point issues\n        best_feat = None\n        best_thresh = None\n\n        for feat in range(n_features):\n            # Sort samples by this feature\n            sorted_idx = np.argsort(X[:, feat], kind='mergesort')\n            Xf = X[sorted_idx, feat]\n            yf = y[sorted_idx]\n\n            # Find all possible split points (midpoints between consecutive, different feature values)\n            for i in range(1, n_samples):\n                if Xf[i] == Xf[i-1]:\n                    continue  # skip identical feature values\n                if yf[i] == yf[i-1]:\n                    continue  # skip if label doesn't change (optional, but can speed up)\n                thresh = (Xf[i] + Xf[i-1]) / 2\n\n                left_mask = Xf <= thresh\n                right_mask = Xf > thresh\n                y_left = yf[left_mask]\n                y_right = yf[right_mask]\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue  # skip empty splits\n\n                gini_left = gini(y_left)\n                gini_right = gini(y_right)\n                n_left = len(y_left)\n                n_right = len(y_right)\n                weighted_gini = (n_left * gini_left + n_right * gini_right) / n_samples\n                gain = parent_gini - weighted_gini\n\n                # Deterministic tie-breaking: prefer lower feature index, then lower threshold\n                if gain > best_gain or (np.isclose(gain, best_gain) and (\n                    (feat < best_feat) if best_feat is not None else True or\n                    (feat == best_feat and thresh < best_thresh)\n                )):\n                    best_gain = gain\n                    best_feat = feat\n                    best_thresh = thresh\n\n        return best_feat, best_thresh, best_gain\n\n    def build_tree(X, y, depth):\n        # Stopping criteria\n        unique_labels = np.unique(y)\n        if len(unique_labels) == 1:\n            return Node(is_leaf=True, class_label=int(unique_labels[0]))\n        if max_depth is not None and depth >= max_depth:\n            return Node(is_leaf=True, class_label=majority_class(y))\n\n        feat, thresh, gain = best_split(X, y)\n        if feat is None or gain <= 1e-10:\n            # No split improves Gini, or no split found\n            return Node(is_leaf=True, class_label=majority_class(y))\n\n        # Split\n        left_mask = X[:, feat] <= thresh\n        right_mask = X[:, feat] > thresh\n        if not np.any(left_mask) or not np.any(right_mask):\n            # One child is empty\n            return Node(is_leaf=True, class_label=majority_class(y))\n\n        left = build_tree(X[left_mask], y[left_mask], depth+1)\n        right = build_tree(X[right_mask], y[right_mask], depth+1)\n        return Node(is_leaf=False, feature=feat, threshold=thresh, left=left, right=right)\n\n    def predict_one(x, node):\n        while not node.is_leaf:\n            if x[node.feature] <= node.threshold:\n                node = node.left\n            else:\n                node = node.right\n        return node.class_label\n\n    # Build the tree\n    tree = build_tree(X_train, y_train, depth=0)\n    # Predict\n    return [predict_one(x, tree) for x in X_test]\n```\n"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    # Convert to numpy arrays\n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples, n_features = X.shape\n\n    # Compute Gini impurity for a set of labels\n    def gini(labels):\n        if len(labels) == 0:\n            return 0.0\n        _, counts = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        return 1.0 - np.sum(probs ** 2)\n\n    # Gini of the whole dataset\n    G_whole = gini(y)\n    best = {\n        'gini': np.inf,\n        'feature': -1,\n        'threshold': None\n    }\n\n    # If all labels are the same, no split is possible\n    if len(np.unique(y)) == 1:\n        return (-1, None, round(G_whole, 4))\n\n    for j in range(n_features):\n        X_col = X[:, j]\n        # Get all unique values in this feature\n        unique_vals = np.unique(X_col)\n        for v in unique_vals:\n            # Split indices\n            left_mask = X_col <= v\n            right_mask = X_col > v\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            # Skip if either child is empty\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            G_left = gini(y_left)\n            G_right = gini(y_right)\n            G_split = (n_left / n_samples) * G_left + (n_right / n_samples) * G_right\n\n            # Tie-breaking rules\n            update = False\n            if G_split < best['gini'] - 1e-12:\n                update = True\n            elif abs(G_split - best['gini']) < 1e-12:\n                if j < best['feature']:\n                    update = True\n                elif j == best['feature']:\n                    if v < best['threshold']:\n                        update = True\n            if update:\n                best['gini'] = G_split\n                best['feature'] = j\n                best['threshold'] = v\n\n    if best['feature'] == -1:\n        return (-1, None, round(G_whole, 4))\n    else:\n        return (best['feature'], best['threshold'], round(best['gini'], 4))\n```\n"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    if name not in supported:\n        def invalid(*args, **kwargs):\n            return -1\n        return invalid\n\n    def validate_and_convert(vec):\n        # Accept list, tuple, np.ndarray\n        if not isinstance(vec, (list, tuple, np.ndarray)):\n            return None\n        try:\n            arr = np.asarray(vec, dtype=float)\n        except Exception:\n            return None\n        if arr.ndim != 1 or arr.size == 0:\n            return None\n        return arr\n\n    def d(x, y):\n        x_arr = validate_and_convert(x)\n        y_arr = validate_and_convert(y)\n        if x_arr is None or y_arr is None:\n            return -1\n        if x_arr.shape != y_arr.shape:\n            return -1\n        if name == 'euclidean':\n            dist = np.linalg.norm(x_arr - y_arr)\n        elif name == 'manhattan':\n            dist = np.sum(np.abs(x_arr - y_arr))\n        elif name == 'chebyshev':\n            dist = np.max(np.abs(x_arr - y_arr))\n        elif name == 'cosine':\n            norm_x = np.linalg.norm(x_arr)\n            norm_y = np.linalg.norm(y_arr)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            cosine_sim = np.dot(x_arr, y_arr) / (norm_x * norm_y)\n            dist = 1 - cosine_sim\n        else:\n            return -1\n        return round(float(dist), 4)\n    return d\n\n# Example usage and test cases:\nif __name__ == \"__main__\":\n    print(metric('euclidean')([1, 2, 3], [4, 5, 6]))      # \u279e 5.1962\n    print(metric('manhattan')([1, 2, 3], [4, 5, 6]))      # \u279e 9.0\n    print(metric('chebyshev')([1, 2, 3], [4, 5, 6]))      # \u279e 3.0\n    print(metric('cosine')([1, 0, 0], [0, 1, 0]))         # \u279e 1.0\n    print(metric('cosine')([1, 2, 3], [4, 5, 6]))         # \u279e 0.0254\n    print(metric('cosine')([0, 0, 0], [1, 2, 3]))         # \u279e -1\n    print(metric('euclidean')([1, 2], [1, 2, 3]))         # \u279e -1\n    print(metric('euclidean')([], []))                    # \u279e -1\n    print(metric('unknown')([1, 2, 3], [4, 5, 6]))        # \u279e -1\n    print(metric('euclidean')([1, 2, 'a'], [4, 5, 6]))    # \u279e -1\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if not md_action:\n        # Single-dimensional action space\n        if cont_action:\n            # Continuous, single-dim\n            # env.action_space.shape is a tuple, e.g. (1,) or (d,)\n            shape = getattr(env.action_space, 'shape', None)\n            if shape is None:\n                raise ValueError(\"Continuous action space must have 'shape' attribute.\")\n            action_dim = shape[0] if len(shape) > 0 else 1\n            n_actions_per_dim = [np.inf] * action_dim\n            action_ids = None\n        else:\n            # Discrete, single-dim\n            n = getattr(env.action_space, 'n', None)\n            if n is None:\n                raise ValueError(\"Discrete action space must have 'n' attribute.\")\n            n_actions_per_dim = [n]\n            action_dim = 1\n            action_ids = [(i,) for i in range(n)]\n    else:\n        # Multi-dimensional action space\n        # env.action_space.spaces is a list-like of subspaces\n        spaces = getattr(env.action_space, 'spaces', None)\n        if spaces is None:\n            raise ValueError(\"Multi-dimensional action space must have 'spaces' attribute.\")\n        n_actions_per_dim = []\n        has_continuous = False\n        for subspace in spaces:\n            if hasattr(subspace, 'n'):\n                # Discrete subspace\n                n_actions_per_dim.append(subspace.n)\n            elif hasattr(subspace, 'shape'):\n                # Continuous subspace\n                n_actions_per_dim.append(np.inf)\n                has_continuous = True\n            else:\n                raise ValueError(\"Subspace must have either 'n' (discrete) or 'shape' (continuous) attribute.\")\n        action_dim = len(n_actions_per_dim)\n        if has_continuous:\n            action_ids = None\n        else:\n            # All discrete, enumerate all possible actions (cartesian product)\n            ranges = [range(n) for n in n_actions_per_dim]\n            action_ids = list(product(*ranges))\n    return n_actions_per_dim, action_ids, action_dim\n\n# --- Below are minimal mock classes and test cases for demonstration ---\n\n# Mock classes to simulate OpenAI Gym action spaces\nclass Discrete:\n    def __init__(self, n):\n        self.n = n\n\nclass Box:\n    def __init__(self, shape):\n        self.shape = shape\n\nclass MultiDiscrete:\n    def __init__(self, nvec):\n        self.spaces = [Discrete(n) for n in nvec]\n\nclass MultiBox:\n    def __init__(self, shapes):\n        self.spaces = [Box((s,)) for s in shapes]\n\nclass MixedSpace:\n    def __init__(self, spaces):\n        self.spaces = spaces\n\n# Test cases\nif __name__ == \"__main__\":\n    # 1. Discrete, single-dim\n    class Env1:\n        action_space = Discrete(4)\n    print(action_stats(Env1(), md_action=False, cont_action=False))\n    # ([4], [(0,), (1,), (2,), (3,)], 1)\n\n    # 2. Continuous, single-dim\n    class Env2:\n        action_space = Box((3,))\n    print(action_stats(Env2(), md_action=False, cont_action=True))\n    # ([inf, inf, inf], None, 3)\n\n    # 3. Multi-discrete\n    class Env3:\n        action_space = MultiDiscrete([2, 3])\n    print(action_stats(Env3(), md_action=True, cont_action=False))\n    # ([2, 3], [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 2)\n\n    # 4. Multi-continuous\n    class Env4:\n        action_space = MultiBox([2, 4])\n    print(action_stats(Env4(), md_action=True, cont_action=True))\n    # ([inf, inf], None, 2)\n\n    # 5. Mixed discrete/continuous\n    class Env5:\n        action_space = MixedSpace([Discrete(2), Box((1,))])\n    print(action_stats(Env5(), md_action=True, cont_action=True))\n    # ([2, inf], None, 2)\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # ===== write your code below =====\n\n    # Determine number of topics T from phi[0]\n    if not phi or len(phi[0].shape) != 2:\n        raise ValueError(\"phi must be a non-empty list of 2D arrays\")\n    T = phi[0].shape[1]\n\n    # Accumulate counts: beta_counts[v, t] = sum over all tokens with word v of phi[token, t]\n    beta_counts = np.zeros((V, T), dtype=np.float64)\n\n    for d, (doc_phi, doc_words) in enumerate(zip(phi, corpus)):\n        N_d = len(doc_words)\n        if doc_phi.shape[0] != N_d:\n            raise ValueError(f\"phi[{d}] shape {doc_phi.shape} does not match corpus[{d}] length {N_d}\")\n        for n, v in enumerate(doc_words):\n            if 0 <= v < V:\n                beta_counts[v, :] += doc_phi[n, :]\n            else:\n                raise ValueError(f\"Word index {v} in corpus[{d}][{n}] is out of bounds for V={V}\")\n\n    # Now, for each topic t, normalise the column so that sum_v beta[v, t] = 1\n    beta = np.zeros((V, T), dtype=np.float64)\n    for t in range(T):\n        col = beta_counts[:, t]\n        col_sum = col.sum()\n        if col_sum > 0:\n            beta[:, t] = col / col_sum\n        else:\n            # If no words for this topic, leave as zeros (column sums to zero)\n            beta[:, t] = 0.0\n\n    # For words never seen in the corpus, their rows remain zeros\n\n    # Round to 4 decimal places\n    beta = np.round(beta, 4)\n\n    # After rounding, columns may not sum to exactly 1.0 due to rounding error.\n    # To ensure columns sum to 1.0 (up to 1e-4), we can adjust the largest entry in each column.\n    for t in range(T):\n        col = beta[:, t]\n        col_sum = col.sum()\n        if col_sum == 0:\n            continue  # All zeros, nothing to adjust\n        diff = 1.0 - col_sum\n        # Find indices of nonzero entries\n        nonzero_indices = np.where(col > 0)[0]\n        if nonzero_indices.size > 0:\n            # Add the difference to the largest entry (by value, not by index)\n            max_idx = nonzero_indices[np.argmax(col[nonzero_indices])]\n            beta[max_idx, t] = np.round(beta[max_idx, t] + diff, 4)\n        # If all zeros, nothing to do\n\n    # Convert to list of lists\n    beta_list = beta.tolist()\n    return beta_list\n\n# Example usage and test\nif __name__ == \"__main__\":\n    # Example: 3 words, 2 topics, 2 documents\n    # corpus: [[0, 1, 2], [1, 2]]\n    # phi: [np.array([[0.7, 0.3], [0.2, 0.8], [0.5, 0.5]]), np.array([[0.6, 0.4], [0.1, 0.9]])]\n    phi = [\n        np.array([[0.7, 0.3], [0.2, 0.8], [0.5, 0.5]]),\n        np.array([[0.6, 0.4], [0.1, 0.9]])\n    ]\n    corpus = [\n        [0, 1, 2],\n        [1, 2]\n    ]\n    V = 4  # Suppose word 3 never occurs\n    beta = update_beta(phi, corpus, V)\n    print(\"\u03b2 matrix (rows: words 0-3, columns: topics 0-1):\")\n    for row in beta:\n        print(row)\n    # Should print a 4x2 matrix, with row 3 all zeros, and each column summing to 1.0\n```\n"}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    # Precompute all pairwise distances\n    # D[i, j] = distance from sample i to sample j\n    D = np.linalg.norm(X[:, None, :] - X[None, :, :], axis=2)\n\n    # Step 1: Initialize medoids as the first k samples\n    medoid_indices = list(range(k))\n\n    # Helper: compute total cost and assignment for given medoids\n    def compute_cost_and_assignment(medoid_indices):\n        # For each sample, find the closest medoid (ties broken by order)\n        medoid_arr = np.array(medoid_indices)\n        # Dists: shape (n_samples, k)\n        dists = D[:, medoid_arr]\n        # For each sample, find the index of the closest medoid\n        # (ties broken by np.argmin, which returns the first minimum)\n        closest = np.argmin(dists, axis=1)\n        # Total cost: sum of distances to closest medoid\n        total_cost = np.sum(dists[np.arange(n), closest])\n        return total_cost, closest\n\n    # Step 2: Iteratively swap to reduce cost\n    improved = True\n    while improved:\n        improved = False\n        best_cost = None\n        best_swap = None\n        best_assignment = None\n\n        # Current cost and assignment\n        current_cost, current_assignment = compute_cost_and_assignment(medoid_indices)\n\n        # Try all possible swaps: for each medoid, for each non-medoid\n        medoid_set = set(medoid_indices)\n        non_medoid_indices = [i for i in range(n) if i not in medoid_set]\n        for mi, m_idx in enumerate(medoid_indices):\n            for nm_idx in non_medoid_indices:\n                # Swap medoid m_idx with non-medoid nm_idx\n                new_medoids = medoid_indices.copy()\n                new_medoids[mi] = nm_idx\n                # Ensure medoids are unique (should always be the case)\n                if len(set(new_medoids)) < k:\n                    continue\n                # Compute new cost and assignment\n                cost, assignment = compute_cost_and_assignment(new_medoids)\n                if (best_cost is None or cost < best_cost) and cost < current_cost:\n                    best_cost = cost\n                    best_swap = (mi, nm_idx)\n                    best_assignment = assignment\n\n        # If a swap was found that reduces cost, perform it\n        if best_swap is not None:\n            mi, nm_idx = best_swap\n            medoid_indices[mi] = nm_idx\n            improved = True\n        # else, no improvement, stop\n\n    # Step 3: Assign labels according to closest medoid (order matters)\n    _, assignment = compute_cost_and_assignment(medoid_indices)\n    # assignment[i] is the index in medoid_indices of the closest medoid\n    # So, label is assignment[i]\n    labels = assignment.tolist()\n    return labels\n\n# Example usage and test\nif __name__ == \"__main__\":\n    X = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\n    k = 2\n    labels = pam_clustering(X, k)\n    print(labels)  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Helper: Polynomial expansion\n    def poly_expand(X, degree):\n        # X: (n_samples, n_features)\n        from itertools import combinations_with_replacement\n        n_samples, n_features = X.shape\n        # For each degree, get all combinations of feature indices\n        combs = []\n        for d in range(1, degree+1):\n            combs += list(combinations_with_replacement(range(n_features), d))\n        X_poly = np.ones((n_samples, len(combs)))\n        for i, comb in enumerate(combs):\n            X_poly[:, i] = np.prod(X[:, comb], axis=1)\n        return X_poly\n\n    # Convert to numpy arrays\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float).flatten()\n    x_test = np.array(x_test, dtype=float)\n\n    # Check input shapes\n    if n_iterations < 1:\n        return -1\n    if x_train.ndim != 2 or x_test.ndim != 2:\n        return -1\n    if x_train.shape[0] != y_train.shape[0]:\n        return -1\n\n    # Polynomial expansion\n    if degree < 1:\n        degree = 1\n    Xtr = poly_expand(x_train, degree)\n    Xte = poly_expand(x_test, degree)\n\n    # Check feature compatibility\n    if Xtr.shape[1] != Xte.shape[1]:\n        return -1\n\n    # Standardize (zero mean, unit var) each feature (column) except bias\n    # Compute mean and std from training set\n    mean = Xtr.mean(axis=0)\n    std = Xtr.std(axis=0)\n    # To avoid division by zero, set std=1 for constant features\n    std[std == 0] = 1.0\n    # Standardize\n    Xtr = (Xtr - mean) / std\n    Xte = (Xte - mean) / std\n\n    # Add bias column (1s) as first column\n    Xtr = np.concatenate([np.ones((Xtr.shape[0], 1)), Xtr], axis=1)\n    Xte = np.concatenate([np.ones((Xte.shape[0], 1)), Xte], axis=1)\n\n    n_samples, n_features = Xtr.shape\n\n    # Initialize weights\n    w = np.zeros(n_features)\n\n    # Precompute regularization parameters\n    alpha = reg_factor\n    l1 = l1_ratio * alpha\n    l2 = (1 - l1_ratio) * alpha\n\n    for it in range(n_iterations):\n        y_pred = Xtr @ w\n        error = y_pred - y_train\n        grad = (2 / n_samples) * (Xtr.T @ error)  # shape (n_features,)\n\n        # Regularize all except bias (w[0])\n        # L1: sign(w_j), L2: 2*w_j\n        reg_grad = np.zeros_like(w)\n        reg_grad[1:] += l1 * np.sign(w[1:])\n        reg_grad[1:] += 2 * l2 * w[1:]\n\n        grad += reg_grad\n\n        # Gradient step\n        w -= learning_rate * grad\n\n    # Predict on test set\n    y_test_pred = Xte @ w\n    return np.round(y_test_pred, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.asarray(actual, dtype=np.float64)\n    predicted = np.asarray(predicted, dtype=np.float64)\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n\n    # Compute probability (sigmoid of predicted)\n    prob = sigmoid(predicted)\n\n    # Compute gradient: actual_i * sigmoid( - actual_i * predicted_i )\n    grad = actual * sigmoid(-actual * predicted)\n\n    # Compute Hessian: sigmoid(predicted_i) * (1 - sigmoid(predicted_i))\n    hess = prob * (1.0 - prob)\n\n    # Round all outputs to 6 decimal places\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n\n    # Convert to lists\n    return grad_rounded.tolist(), hess_rounded.tolist(), prob_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    actual = [1, -1, 1]\n    predicted = [0.5, -0.5, 0.0]\n    grad, hess, prob = logistic_components(actual, predicted)\n    print(\"Gradient:\", grad)\n    print(\"Hessian:\", hess)\n    print(\"Probability:\", prob)\n```\n**This script defines the required function and includes an example usage at the end. All outputs are rounded to six decimal places and returned as lists.**"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Compute the best score for a hand (max \u2264 21, with usable ace if possible).\"\"\"\n        total = sum(hand)\n        if 1 in hand and total + 10 <= 21:\n            return total + 10\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack (two cards: Ace + 10).\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    player_natural = is_natural_blackjack(player)\n\n    # Rule 1: Player busts\n    if player_bust:\n        return -1.0\n    # Rule 2: Dealer busts (player did not)\n    if dealer_bust:\n        return 1.0\n    # Rule 3: Compare scores\n    if player_score > dealer_score:\n        # Rule 4: Player wins with natural blackjack\n        if player_natural:\n            return 1.5\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Player busts\n    print(blackjack_outcome([10, 9, 5], [10, 7]))  # -1.0\n    # Dealer busts\n    print(blackjack_outcome([10, 7], [10, 9, 5]))  # 1.0\n    # Player wins with natural blackjack\n    print(blackjack_outcome([1, 10], [10, 9]))     # 1.5\n    # Draw with both natural blackjack\n    print(blackjack_outcome([1, 10], [10, 1]))     # 0.0\n    # Player loses\n    print(blackjack_outcome([10, 7], [10, 8]))     # -1.0\n    # Draw\n    print(blackjack_outcome([10, 7], [9, 8]))      # 0.0\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"\n    Compute element-wise squared logarithmic errors between actual and predicted.\n\n    Parameters\n    ----------\n    actual : np.ndarray\n        Array of true values (non-negative).\n    predicted : np.ndarray\n        Array of predicted values (non-negative).\n\n    Returns\n    -------\n    np.ndarray\n        Array of squared log errors: (log(1 + actual) - log(1 + predicted)) ** 2\n    \"\"\"\n    # Compute log(1 + x) for both arrays\n    log_actual = np.log1p(actual)\n    log_pred = np.log1p(predicted)\n    return (log_actual - log_pred) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"\n    Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    try:\n        actual_arr = np.asarray(actual, dtype=np.float64)\n        pred_arr = np.asarray(predicted, dtype=np.float64)\n    except Exception:\n        return -1\n\n    # Check shapes\n    if actual_arr.shape != pred_arr.shape:\n        return -1\n\n    # Check for non-negativity\n    if np.any(actual_arr < 0) or np.any(pred_arr < 0):\n        return -1\n\n    # Compute squared log error\n    sq_log_err = squared_log_error(actual_arr, pred_arr)\n    msle = np.mean(sq_log_err)\n    return round(float(msle), 4)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Valid input\n    a = [3, 5, 2.5, 7]\n    p = [2.5, 5, 4, 8]\n    print(mean_squared_log_error(a, p))  # Should print a float rounded to 4 decimals\n\n    # Invalid: different lengths\n    print(mean_squared_log_error([1, 2, 3], [1, 2]))  # -1\n\n    # Invalid: negative value\n    print(mean_squared_log_error([1, -2, 3], [1, 2, 3]))  # -1\n\n    # Valid: zeros\n    print(mean_squared_log_error([0, 0, 0], [0, 0, 0]))  # 0.0\n\n    # Valid: numpy arrays\n    print(mean_squared_log_error(np.array([1, 2]), np.array([2, 1])))  # Should print a float\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def _sigmoid_stable(x):\n        # Numerically stable sigmoid for scalar or np.ndarray\n        x = np.array(x)\n        out = np.empty_like(x, dtype=np.float64)\n        # For x >= 0: sigmoid(x) = 1 / (1 + exp(-x))\n        mask = x >= 0\n        out[mask] = 1 / (1 + np.exp(-x[mask]))\n        # For x < 0: sigmoid(x) = exp(x) / (1 + exp(x))\n        out[~mask] = np.exp(x[~mask]) / (1 + np.exp(x[~mask]))\n        return out\n\n    # Check if input is scalar\n    if np.isscalar(z):\n        # Compute sigmoid for scalar\n        if z >= 0:\n            res = 1 / (1 + np.exp(-z))\n        else:\n            exp_z = np.exp(z)\n            res = exp_z / (1 + exp_z)\n        return round(float(res), 4)\n    else:\n        # Convert input to np.ndarray\n        arr = np.array(z)\n        # Compute sigmoid in a numerically stable way\n        sig = _sigmoid_stable(arr)\n        # Round to 4 decimals\n        sig_rounded = np.round(sig, 4)\n        # Convert back to Python list with same nested structure\n        return sig_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Scalar\n    print(sigmoid(0))         # 0.5\n    print(sigmoid(1000))      # 1.0\n    print(sigmoid(-1000))     # 0.0\n    # 1D list\n    print(sigmoid([0, 1, -1, 1000, -1000]))  # [0.5, 0.7311, 0.2689, 1.0, 0.0]\n    # 2D list\n    print(sigmoid([[0, 2], [-2, 1000]]))     # [[0.5, 0.8808], [0.1192, 1.0]]\n    # NumPy array\n    arr = np.array([[0, -5], [5, 1000]])\n    print(sigmoid(arr))       # [[0.5, 0.0067], [0.9933, 1.0]]\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    arr = np.array(z)\n    # Apply Leaky ReLU elementwise\n    activated = np.where(arr >= 0, arr, a * arr)\n    # Convert result to Python list with same structure\n    return activated.tolist()\n```\n"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize weights\n    w = np.ones(n_samples) / n_samples\n\n    # To store the ensemble of stumps\n    stumps = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n\n        # Search for the best decision stump\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n            # Try thresholds between unique values for better splits\n            if len(thresholds) > 1:\n                thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Predict: polarity=1 means x<threshold -> -1, else 1\n                    pred = np.ones(n_samples)\n                    if polarity == 1:\n                        pred[feature_values < threshold] = -1\n                    else:\n                        pred[feature_values >= threshold] = -1\n                    # Compute weighted error\n                    misclassified = pred != y_train\n                    error = np.sum(w * misclassified)\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature_index': feature_i,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'prediction': pred.copy()\n                        }\n\n        # Compute alpha\n        error = min_error\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n\n        # Update weights\n        # w = w * exp(-alpha * y * h(x))\n        w = w * np.exp(-alpha * y_train * best_stump['prediction'])\n        w = w / np.sum(w)  # Normalize\n\n        # Save the stump\n        stumps.append({\n            'feature_index': best_stump['feature_index'],\n            'threshold': best_stump['threshold'],\n            'polarity': best_stump['polarity'],\n            'alpha': alpha\n        })\n\n    # Prediction on X_test\n    agg_pred = np.zeros(X_test.shape[0])\n    for stump in stumps:\n        feature_i = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        alpha = stump['alpha']\n\n        pred = np.ones(X_test.shape[0])\n        if polarity == 1:\n            pred[X_test[:, feature_i] < threshold] = -1\n        else:\n            pred[X_test[:, feature_i] >= threshold] = -1\n        agg_pred += alpha * pred\n\n    # Final prediction: sign\n    final_pred = np.sign(agg_pred)\n    # Replace zeros (if any) with 1 (arbitrary, as sign(0)=0)\n    final_pred[final_pred == 0] = 1\n    return final_pred.astype(int).tolist()\n```\n"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    d0 = shape[0]\n    rest = int(np.prod(shape[1:]))\n    # Step 2: Create random normal matrix\n    A = np.random.randn(d0, rest)\n    # Step 3: SVD\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    # Step 4: Choose SVD factor with same shape as A\n    if U.shape == (d0, rest):\n        Q = U\n    else:\n        Q = Vt\n    # Step 5: Reshape and scale\n    Q = Q.reshape(shape)\n    Q = Q * scale\n    return Q.tolist()\n\n# Example usage and test\nif __name__ == \"__main__\":\n    np.random.seed(0)\n    shape = (2, 2)\n    scale = 0.5\n    result = orthogonal(shape, scale)\n    print(np.array(result).round(3))\n    # Orthogonality check\n    flat = np.array(result).reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        ortho = flat @ flat.T\n        identity = np.eye(shape[0]) * scale**2\n    else:\n        ortho = flat.T @ flat\n        identity = np.eye(flat.shape[1]) * scale**2\n    assert np.allclose(ortho, identity, atol=1e-6), \"Orthogonality check failed\"\n```\n**Example output:**\n```\n[[ 0.259  0.426]\n [ 0.426 -0.26 ]]\n```\nThis matches the example in your description. The function returns a Python list and satisfies the orthogonality condition."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Step 1: Sum the input state\n    s_sum = sum(state)\n    # Step 2: Dense-1 + ReLU\n    z1 = max(0.0, s_sum)\n    # Step 3: Dense-2 + ReLU\n    z2 = 4 * z1\n    # Step 4: Dense-3 + ReLU\n    z3 = 4 * z2  # = 16 * z1\n    # Step 5: Actor head (logits)\n    logits = [4 * z3] * 3  # = [64*z1, 64*z1, 64*z1]\n    # Step 6: Softmax (all logits identical => uniform)\n    action_probs = [1/3, 1/3, 1/3]\n    # Step 7: Critic head\n    state_value = 4 * z3  # = 64*z1\n\n    # Round outputs\n    action_probs_rounded = [round(p, 4) for p in action_probs]\n    state_value_rounded = round(state_value, 4)\n\n    return action_probs_rounded, state_value_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test with a sample state\n    state = [1.0, 2.0, 3.0]\n    probs, value = actor_critic_forward(state)\n    print(\"Action probabilities:\", probs)\n    print(\"State value:\", value)\n```\n"}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to numpy array\n    x = np.array(state, dtype=np.float32)\n\n    # Shared layers\n    W1 = np.array(params['W1'], dtype=np.float32)\n    b1 = np.array(params['b1'], dtype=np.float32)\n    W2 = np.array(params['W2'], dtype=np.float32)\n    b2 = np.array(params['b2'], dtype=np.float32)\n    W3 = np.array(params['W3'], dtype=np.float32)\n    b3 = np.array(params['b3'], dtype=np.float32)\n\n    # Actor head\n    Wa = np.array(params['Wa'], dtype=np.float32)\n    ba = np.array(params['ba'], dtype=np.float32)\n\n    # Critic head\n    Wc = np.array(params['Wc'], dtype=np.float32)\n    bc = np.array(params['bc'], dtype=np.float32)\n\n    # Forward pass through shared layers\n    h1 = np.maximum(0, np.dot(x, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n\n    # Actor head: logits -> softmax\n    logits = np.dot(h3, Wa) + ba\n    # Softmax with numerical stability\n    logits_max = np.max(logits)\n    exp_logits = np.exp(logits - logits_max)\n    probs = exp_logits / np.sum(exp_logits)\n\n    # Critic head: scalar value\n    value = float(np.dot(h3, Wc) + bc)\n\n    # Rounding as per requirements\n    def round_special(x):\n        # Round to 4 decimals, but if exactly 0 or 1, keep one decimal\n        x_rounded = np.round(x, 4)\n        # If exactly 0 or 1 after rounding, format to 1 decimal\n        if np.isclose(x_rounded, 0.0):\n            return float('0.0')\n        elif np.isclose(x_rounded, 1.0):\n            return float('1.0')\n        else:\n            return float(x_rounded)\n\n    probs_rounded = [round_special(p) for p in probs]\n    value_rounded = round_special(value)\n\n    return probs_rounded, value_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example dummy parameters for a network with:\n    # input size 4, hidden sizes 8, 6, 5, actor head 3 actions, critic head scalar\n    np.random.seed(42)\n    params = {\n        'W1': np.random.randn(4, 8).tolist(),\n        'b1': np.random.randn(8).tolist(),\n        'W2': np.random.randn(8, 6).tolist(),\n        'b2': np.random.randn(6).tolist(),\n        'W3': np.random.randn(6, 5).tolist(),\n        'b3': np.random.randn(5).tolist(),\n        'Wa': np.random.randn(5, 3).tolist(),\n        'ba': np.random.randn(3).tolist(),\n        'Wc': np.random.randn(5).tolist(),  # shape (5,)\n        'bc': [np.random.randn()]           # shape (1,)\n    }\n    state = [0.5, -1.2, 0.3, 2.0]\n    probs, value = actor_critic_forward(state, params)\n    print(\"Action probabilities:\", probs)\n    print(\"State value:\", value)\n```"}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w, dtype=float)\n    # Ensure 1-D\n    if w.ndim != 1:\n        raise ValueError(\"Input weight vector w must be 1-dimensional.\")\n    if alpha < 0:\n        raise ValueError(\"alpha must be non-negative.\")\n    if not (0 <= l1_ratio <= 1):\n        raise ValueError(\"l1_ratio must be in [0, 1].\")\n\n    if not gradient:\n        l1_term = l1_ratio * np.linalg.norm(w, ord=2)\n        l2_term = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_term + l2_term)\n        return round(penalty, 4)\n    else:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        grad_rounded = np.round(grad, 4)\n        return grad_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    w = [1.5, -2.0, 0.0]\n    alpha = 0.8\n    l1_ratio = 0.6\n\n    penalty = elastic_net_regularization(w, alpha, l1_ratio)\n    grad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\n\n    print(\"Penalty:\", penalty)\n    print(\"Gradient:\", grad)\n```\n"}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle non-trainable parameters\n    if param_name in (\"X\", \"y\"):\n        return None\n\n    # Handle \"Ba\" and \"Bx\" mapping to \"ba\" and \"bx\"\n    param_key = param_name.lower() if param_name in (\"Ba\", \"Bx\") else param_name\n\n    # Get the parameter array and ensure float64\n    param = model.parameters[param_key]\n    param = param.astype(np.float64, copy=False)\n    param_shape = param.shape\n\n    # Prepare the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterator over all indices in the parameter\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n\n    while not it.finished:\n        idx = it.multi_index\n\n        # Save original value\n        orig_val = param[idx]\n\n        # +epsilon perturbation\n        param[idx] = orig_val + epsilon\n        model.flush_gradients()\n        preds_plus = []\n        # Forward pass for n_t time steps\n        for t in range(n_t):\n            X_t = X[..., t]\n            # Ensure float64\n            X_t = X_t.astype(np.float64, copy=False)\n            pred = model.forward(X_t)\n            preds_plus.append(pred)\n        loss_plus = loss_func(preds_plus)\n\n        # -epsilon perturbation\n        param[idx] = orig_val - epsilon\n        model.flush_gradients()\n        preds_minus = []\n        for t in range(n_t):\n            X_t = X[..., t]\n            X_t = X_t.astype(np.float64, copy=False)\n            pred = model.forward(X_t)\n            preds_minus.append(pred)\n        loss_minus = loss_func(preds_minus)\n\n        # Numerical gradient\n        grad = (loss_plus - loss_minus) / (2 * epsilon)\n        grads[idx] = grad\n\n        # Restore original value\n        param[idx] = orig_val\n\n        it.iternext()\n\n    # Return the transposed gradient\n    return grads.T\n```\n\n---\n\n**How to use:**\n\n- This function expects a model with a `.parameters` dict, a `.forward(X_t)` method (for a single time step), and a `.flush_gradients()` method.\n- `loss_func` should take a list of predictions (one per time step) and return a scalar loss.\n- `X` should be a 3D numpy array of shape (batch, input_dim, n_t).\n- The function returns the numerical gradient (transposed) for the specified parameter.\n\n**Notes:**\n- All computations are done in float64 for numerical stability.\n- The function is agnostic to the parameter's shape (works for vectors, matrices, etc.).\n- For \"Ba\" and \"Bx\", the function automatically uses \"ba\" and \"bx\" as keys.\n- For \"X\" and \"y\", returns `None` as they are not trainable parameters.\n"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Helper: Decision stump prediction\n    def stump_predict(X, feature, threshold, polarity):\n        # polarity: 1 means predict 1 if x < threshold, -1 means predict 1 if x >= threshold\n        preds = np.ones(X.shape[0])\n        if polarity == 1:\n            preds[X[:, feature] < threshold] = -1\n        else:\n            preds[X[:, feature] >= threshold] = -1\n        return preds\n\n    m, n = X_train.shape\n    n_clf = max(1, int(n_clf))\n    # Initialize sample weights\n    w = np.full(m, 1 / m)\n    stumps = []  # Each stump: dict with keys: feature, threshold, polarity, alpha\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        # For each feature, find the best threshold and polarity\n        for feature in range(n):\n            X_col = X_train[:, feature]\n            thresholds = np.unique(X_col)\n            # To ensure we can split between values, use midpoints between unique values\n            if len(thresholds) == 1:\n                # All values are the same, only one threshold possible\n                candidate_thresholds = thresholds\n            else:\n                candidate_thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n                # Also consider thresholds below min and above max\n                candidate_thresholds = np.concatenate((\n                    [thresholds[0] - 1],\n                    candidate_thresholds,\n                    [thresholds[-1] + 1]\n                ))\n            for threshold in candidate_thresholds:\n                for polarity in [1, -1]:\n                    preds = stump_predict(X_train, feature, threshold, polarity)\n                    misclassified = preds != y_train\n                    error = np.sum(w * misclassified)\n                    # If error > 0.5, flip polarity (equivalent to 1-error)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature': feature,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'error': error\n                        }\n        # Avoid division by zero\n        eps = 1e-10\n        error = max(best_stump['error'], eps)\n        alpha = 0.5 * np.log((1 - error) / error)\n        best_stump['alpha'] = alpha\n        stumps.append(best_stump)\n        # Update sample weights\n        preds = stump_predict(X_train, best_stump['feature'], best_stump['threshold'], best_stump['polarity'])\n        w *= np.exp(-alpha * y_train * preds)\n        w /= np.sum(w)  # Normalize\n\n    # Predict on X_test\n    agg = np.zeros(X_test.shape[0])\n    for stump in stumps:\n        preds = stump_predict(X_test, stump['feature'], stump['threshold'], stump['polarity'])\n        agg += stump['alpha'] * preds\n    y_pred = np.sign(agg)\n    # If any zero, set to 1 (arbitrary, as sign(0) = 0)\n    y_pred[y_pred == 0] = 1\n    return y_pred.astype(int).tolist()\n```\n"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if not isinstance(shape, tuple) or len(shape) < 2:\n        raise ValueError(\"Shape must be a tuple of at least two integers.\")\n\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        # shape: (out_channels, in_channels, k1, k2, ...)\n        out_channels, in_channels = shape[0], shape[1]\n        receptive_field_size = np.prod(shape[2:]) if len(shape) > 2 else 1\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n    arr = np.random.normal(loc=0.0, scale=s, size=shape).astype(float)\n    return arr\n\n# --- Example usage and test ---\n\nif __name__ == \"__main__\":\n    # Test for a fully connected layer (2D)\n    shape_fc = (128, 256)\n    w_fc = glorot_normal(shape_fc)\n    print(\"Fully connected layer:\")\n    print(\"Shape:\", w_fc.shape)\n    print(\"Mean:\", w_fc.mean())\n    print(\"Std:\", w_fc.std())\n    s_fc = np.sqrt(2.0 / (128 + 256))\n    print(\"Theoretical std:\", s_fc)\n    print()\n\n    # Test for a convolutional layer (4D)\n    shape_conv = (64, 3, 5, 5)  # out_channels, in_channels, k1, k2\n    w_conv = glorot_normal(shape_conv)\n    print(\"Convolutional layer:\")\n    print(\"Shape:\", w_conv.shape)\n    print(\"Mean:\", w_conv.mean())\n    print(\"Std:\", w_conv.std())\n    receptive_field = 5 * 5\n    fan_in = 3 * receptive_field\n    fan_out = 64 * receptive_field\n    s_conv = np.sqrt(2.0 / (fan_in + fan_out))\n    print(\"Theoretical std:\", s_conv)\n    print()\n\n    # Test for error on invalid shape\n    try:\n        glorot_normal((128,))\n    except ValueError as e:\n        print(\"Caught expected error for invalid shape:\", e)\n```\n"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Map vertex to its index in V for ordering\n    v_index = {v: i for i, v in enumerate(V)}\n    # Initialize adjacency sets for each vertex\n    adj = {v: set() for v in V}\n    # Build adjacency sets\n    for u, w in E:\n        if u in adj and w in adj:\n            if u != w:  # Ignore self-loops\n                adj[u].add(w)\n                adj[w].add(u)\n            else:\n                # If self-loops should be ignored, do nothing\n                pass\n        # If u or w not in V, ignore the edge (robustness)\n    # Build the adjacency list, sorting neighbors by their order in V\n    G = []\n    for v in V:\n        # Sort neighbors by their index in V\n        neighbors = sorted(adj[v], key=lambda x: v_index[x])\n        G.append(neighbors)\n    return G\n\n# --- Example tests ---\n\nif __name__ == \"__main__\":\n    # Test 1: Simple triangle\n    V1 = ['a', 'b', 'c']\n    E1 = [('a', 'b'), ('b', 'c'), ('c', 'a')]\n    print(build_adj_list(V1, E1))\n    # Expected: [['b', 'c'], ['a', 'c'], ['a', 'b']]\n\n    # Test 2: Disconnected vertex\n    V2 = [1, 2, 3, 4]\n    E2 = [(1, 2), (2, 3)]\n    print(build_adj_list(V2, E2))\n    # Expected: [[2], [1, 3], [2], []]\n\n    # Test 3: Parallel edges and self-loops\n    V3 = ['x', 'y', 'z']\n    E3 = [('x', 'y'), ('y', 'x'), ('x', 'y'), ('x', 'x'), ('y', 'z')]\n    print(build_adj_list(V3, E3))\n    # Expected: [['y'], ['x', 'z'], ['y']]\n\n    # Test 4: Vertices of mixed types\n    V4 = [1, 'a', (2, 3)]\n    E4 = [(1, 'a'), ('a', (2, 3)), (1, (2, 3)), (1, 1)]\n    print(build_adj_list(V4, E4))\n    # Expected: [['a', (2, 3)], [1, (2, 3)], [1, 'a']]\n\n    # Test 5: Edge with vertex not in V\n    V5 = [1, 2]\n    E5 = [(1, 2), (2, 3), (4, 1)]\n    print(build_adj_list(V5, E5))\n    # Expected: [[2], [1]]\n```"}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    min_error = np.inf\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": None\n    }\n\n    for feature_index in range(n_features):\n        X_col = X[:, feature_index]\n        # Get sorted indices for this feature\n        sorted_idx = np.argsort(X_col)\n        X_sorted = X_col[sorted_idx]\n        y_sorted = y[sorted_idx]\n        w_sorted = sample_weights[sorted_idx]\n\n        # All possible thresholds: midpoints between unique values, plus -inf and +inf\n        unique_vals = np.unique(X_sorted)\n        thresholds = []\n\n        # Add threshold below the minimum value\n        thresholds.append(X_sorted[0] - 1)\n        # Midpoints between consecutive unique values\n        for i in range(1, len(unique_vals)):\n            t = (unique_vals[i-1] + unique_vals[i]) / 2.0\n            thresholds.append(t)\n        # Add threshold above the maximum value\n        thresholds.append(X_sorted[-1] + 1)\n\n        for polarity in [1, -1]:\n            # For efficient computation, we can use cumulative sums\n            # For polarity=1: predict 1 if x < t, -1 otherwise\n            # For polarity=-1: predict -1 if x < t, 1 otherwise\n\n            # For each threshold, we want to know the weighted error if we split at that threshold\n            # For polarity=1:\n            #   predict 1 for x < t, -1 for x >= t\n            #   error_left = sum of weights where y != 1 for x < t\n            #   error_right = sum of weights where y != -1 for x >= t\n            #   total error = error_left + error_right\n\n            # For polarity=-1:\n            #   predict -1 for x < t, 1 for x >= t\n            #   error_left = sum of weights where y != -1 for x < t\n            #   error_right = sum of weights where y != 1 for x >= t\n            #   total error = error_left + error_right\n\n            # Precompute masks\n            if polarity == 1:\n                incorrect_left = (y_sorted != 1)\n                incorrect_right = (y_sorted != -1)\n            else:\n                incorrect_left = (y_sorted != -1)\n                incorrect_right = (y_sorted != 1)\n\n            # Cumulative sum of weights for incorrect_left\n            cumsum_incorrect_left = np.cumsum(w_sorted * incorrect_left)\n            # Cumulative sum of weights for incorrect_right (from the end)\n            cumsum_incorrect_right = np.cumsum((w_sorted * incorrect_right)[::-1])[::-1]\n\n            # For each threshold, find the split index\n            # For threshold t, all x < t are to the left, x >= t are to the right\n            # Since X_sorted is sorted, we can use np.searchsorted\n            for t in thresholds:\n                # Find the index where X_sorted >= t\n                split_idx = np.searchsorted(X_sorted, t, side='left')\n                # error_left: sum of weights of incorrect_left for indices < split_idx\n                error_left = cumsum_incorrect_left[split_idx-1] if split_idx > 0 else 0.0\n                # error_right: sum of weights of incorrect_right for indices >= split_idx\n                error_right = cumsum_incorrect_right[split_idx] if split_idx < n_samples else 0.0\n                weighted_error = error_left + error_right\n\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": round(float(t), 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(float(weighted_error), 4)\n                    }\n\n    return best_stump\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    X = np.array([[1, 2],\n                  [2, 3],\n                  [3, 1],\n                  [4, 5]])\n    y = np.array([1, 1, -1, -1])\n    w = np.array([0.1, 0.2, 0.3, 0.4])\n    result = train_decision_stump(X, y, w)\n    print(result)\n```"}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert to lists if numpy arrays\n    try:\n        feature = feature.tolist()\n    except AttributeError:\n        pass\n    try:\n        target = target.tolist()\n    except AttributeError:\n        pass\n\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n\n    # Sort feature and target together by feature\n    sorted_data = sorted(zip(feature, target), key=lambda x: x[0])\n    sorted_feature = [x[0] for x in sorted_data]\n    sorted_target = [x[1] for x in sorted_data]\n\n    # Find all legal thresholds: halfway between consecutive distinct feature values\n    thresholds = []\n    for i in range(1, n):\n        if sorted_feature[i] != sorted_feature[i-1]:\n            t = (sorted_feature[i] + sorted_feature[i-1]) / 2.0\n            thresholds.append(t)\n\n    if not thresholds:\n        return (None, 0.0)\n\n    # Precompute parent entropy\n    def entropy(labels):\n        total = len(labels)\n        if total == 0:\n            return 0.0\n        counts = Counter(labels)\n        ent = 0.0\n        for c in counts.values():\n            p = c / total\n            if p > 0:\n                ent -= p * math.log2(p)\n        return ent\n\n    parent_entropy = entropy(sorted_target)\n\n    # If parent entropy is 0, all labels are the same, no split is useful\n    if parent_entropy == 0.0:\n        return (None, 0.0)\n\n    best_ig = -1\n    best_threshold = None\n\n    for t in thresholds:\n        # Find split index: first index where feature >= t\n        # Since sorted_feature is sorted, we can use binary search\n        left = 0\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if sorted_feature[mid] < t:\n                left = mid + 1\n            else:\n                right = mid\n        split_idx = left\n        left_labels = sorted_target[:split_idx]\n        right_labels = sorted_target[split_idx:]\n\n        nL = len(left_labels)\n        nR = len(right_labels)\n        if nL == 0 or nR == 0:\n            continue  # skip degenerate splits\n\n        hL = entropy(left_labels)\n        hR = entropy(right_labels)\n        ig = parent_entropy - (nL/n)*hL - (nR/n)*hR\n\n        # Only consider positive IG\n        if ig > best_ig + 1e-12:  # add small epsilon for floating point\n            best_ig = ig\n            best_threshold = t\n        elif abs(ig - best_ig) < 1e-12 and t < best_threshold:\n            best_threshold = t\n\n    if best_ig <= 0 or best_threshold is None:\n        return (None, 0.0)\n    else:\n        return (round(best_threshold, 4), round(best_ig, 4))\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple binary split\n    X = [2, 4, 6, 8, 10]\n    y = [0, 0, 1, 1, 1]\n    print(best_split(X, y))  # Should return a threshold and positive IG\n\n    # All features identical\n    X = [1, 1, 1, 1]\n    y = [0, 1, 0, 1]\n    print(best_split(X, y))  # (None, 0.0)\n\n    # All labels identical\n    X = [1, 2, 3, 4]\n    y = [1, 1, 1, 1]\n    print(best_split(X, y))  # (None, 0.0)\n\n    # Multi-class\n    X = [1, 2, 3, 4, 5]\n    y = [0, 1, 2, 1, 0]\n    print(best_split(X, y))\n```"}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    rows, cols = shape\n    rnd = random.Random(seed)\n    return [\n        [rnd.uniform(low, high) for _ in range(cols)]\n        for _ in range(rows)\n    ]\n\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name, None)\n    if obj is not None and callable(obj):\n        return obj\n    raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test zeros_init\n    init_fn = get_initializer(\"zeros_init\")\n    print(init_fn((2, 3)))  # [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n\n    # Test ones_init\n    init_fn = get_initializer(\"ones_init\")\n    print(init_fn((2, 2)))  # [[1.0, 1.0], [1.0, 1.0]]\n\n    # Test random_uniform_init\n    init_fn = get_initializer(\"random_uniform_init\")\n    print(init_fn((2, 2)))  # Deterministic output due to seed=42\n\n    # Test invalid name\n    try:\n        get_initializer(\"foobar\")\n    except ValueError as e:\n        print(e)  # Invalid initialization function.\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Calculate output spatial dimensions\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Forward pass: average pooling\n    pooled = np.zeros((N, C, out_h, out_w), dtype=X.dtype)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled[n, c, i, j] = np.mean(window)\n\n    # Backward pass: distribute gradient equally to each element in the window\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad\n\n    # Round to 4 decimals and convert to lists\n    pooled = np.round(pooled, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return pooled, grad_input\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example input\n    X = np.array([[[[1, 2, 3, 0],\n                    [4, 5, 6, 1],\n                    [7, 8, 9, 2],\n                    [0, 1, 2, 3]]]], dtype=float)  # shape (1,1,4,4)\n    pool_shape = (2, 2)\n    stride = (2, 2)\n    # Forward output shape: (1,1,2,2)\n    accum_grad = np.array([[[[1, 2],\n                             [3, 4]]]], dtype=float)\n    pooled, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n    print(\"Pooled output:\", pooled)\n    print(\"Grad input:\", grad_input)\n```"}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    tol = 1e-8\n\n    # Both are Leaf\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=tol, rtol=0)\n\n    # Both are Node\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=tol, rtol=0):\n            return False\n        return (compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n\n    # One is Node, one is Leaf (mismatched structure)\n    return False\n\n# --- Example usage and test cases ---\n\nif __name__ == \"__main__\":\n    # Simple identical trees\n    t1 = Node(0, 1.0, Leaf(5), Leaf([1.0, 2.0]))\n    t2 = Node(0, 1.0, Leaf(5), Leaf([1.0, 2.0]))\n    assert compare_trees(t1, t2) is True\n\n    # Different structure\n    t3 = Node(0, 1.0, Leaf(5), Node(1, 2.0, Leaf(3), Leaf(4)))\n    t4 = Node(0, 1.0, Leaf(5), Leaf(4))\n    assert compare_trees(t3, t4) is False\n\n    # Different feature\n    t5 = Node(1, 1.0, Leaf(5), Leaf([1.0, 2.0]))\n    assert compare_trees(t1, t5) is False\n\n    # Different threshold within tolerance\n    t6 = Node(0, 1.0 + 1e-9, Leaf(5), Leaf([1.0, 2.0]))\n    assert compare_trees(t1, t6) is True\n\n    # Different threshold outside tolerance\n    t7 = Node(0, 1.0 + 1e-6, Leaf(5), Leaf([1.0, 2.0]))\n    assert compare_trees(t1, t7) is False\n\n    # Different leaf value within tolerance\n    t8 = Node(0, 1.0, Leaf(5 + 1e-9), Leaf([1.0, 2.0]))\n    assert compare_trees(t1, t8) is True\n\n    # Different leaf value outside tolerance\n    t9 = Node(0, 1.0, Leaf(5.01), Leaf([1.0, 2.0]))\n    assert compare_trees(t1, t9) is False\n\n    # Different leaf value: arrays\n    t10 = Node(0, 1.0, Leaf(5), Leaf(np.array([1.0, 2.0 + 1e-9])))\n    assert compare_trees(t1, t10) is True\n\n    print(\"All tests passed.\")\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert to numpy arrays\n    arr1 = np.array(parent1)\n    arr2 = np.array(parent2)\n\n    # Validate shapes\n    if arr1.shape != arr2.shape:\n        return -1\n\n    n_rows, n_cols = arr1.shape\n\n    # Validate cutoff\n    if not (0 <= cutoff <= n_cols):\n        raise ValueError(f\"cutoff must be in [0, {n_cols}], got {cutoff}\")\n\n    # Create children by slicing and concatenating\n    # child1: left from arr1, right from arr2\n    # child2: left from arr2, right from arr1\n    child1 = np.hstack((arr1[:, :cutoff], arr2[:, cutoff:]))\n    child2 = np.hstack((arr2[:, :cutoff], arr1[:, cutoff:]))\n\n    # Convert to lists\n    return (child1.tolist(), child2.tolist())\n\n# Example usage and test\nif __name__ == \"__main__\":\n    p1 = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8]\n    ]\n    p2 = [\n        [10, 20, 30, 40],\n        [50, 60, 70, 80]\n    ]\n    for cutoff in range(5):\n        print(f\"Cutoff: {cutoff}\")\n        result = single_point_crossover(p1, p2, cutoff)\n        print(\"Child 1:\", result[0])\n        print(\"Child 2:\", result[1])\n        print()\n```"}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Handle empty graph\n    if not G or '_V2I' not in G or not G['_V2I']:\n        return {}\n\n    is_directed = G['is_directed']\n    v2i = G['_V2I']\n    i2v = [None] * len(v2i)\n    for v, i in v2i.items():\n        i2v[i] = v\n    adj: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in v2i}\n\n    if is_directed:\n        # For directed graphs, just add all edges as given\n        for i, edges in enumerate(G['_G']):\n            u = i2v[i]\n            for src, tgt, w in edges:\n                # Only add outgoing edges from u\n                if src == u:\n                    adj[u].append((tgt, w))\n        # Sort neighbour lists\n        for u in adj:\n            adj[u].sort(key=lambda x: x[0])\n    else:\n        # For undirected graphs, ensure each edge appears once in each direction\n        seen = set()  # set of (min(u,v), max(u,v), w)\n        for i, edges in enumerate(G['_G']):\n            u = i2v[i]\n            for src, tgt, w in edges:\n                # Only process each undirected edge once\n                a, b = min(src, tgt), max(src, tgt)\n                key = (a, b, w)\n                if key not in seen:\n                    seen.add(key)\n                    adj[src].append((tgt, w))\n                    if src != tgt:\n                        adj[tgt].append((src, w))\n        # Sort neighbour lists\n        for u in adj:\n            adj[u].sort(key=lambda x: x[0])\n\n    return adj\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Directed graph example\n    G1 = {\n        'is_directed': True,\n        '_V2I': {'A': 0, 'B': 1, 'C': 2},\n        '_G': [\n            [('A', 'B', 1.0), ('A', 'C', 2.0)],  # edges from A\n            [('B', 'C', 3.0)],                   # edges from B\n            []                                   # edges from C\n        ]\n    }\n    print(to_networkx(G1))\n    # Output: {'A': [('B', 1.0), ('C', 2.0)], 'B': [('C', 3.0)], 'C': []}\n\n    # Undirected graph example (with duplicate edges)\n    G2 = {\n        'is_directed': False,\n        '_V2I': {'A': 0, 'B': 1, 'C': 2},\n        '_G': [\n            [('A', 'B', 1.0), ('A', 'C', 2.0)],  # edges from A\n            [('B', 'A', 1.0), ('B', 'C', 3.0)],  # edges from B\n            [('C', 'A', 2.0), ('C', 'B', 3.0)]   # edges from C\n        ]\n    }\n    print(to_networkx(G2))\n    # Output: {'A': [('B', 1.0), ('C', 2.0)], 'B': [('A', 1.0), ('C', 3.0)], 'C': [('A', 2.0), ('B', 3.0)]}\n\n    # Empty graph\n    G3 = {\n        'is_directed': False,\n        '_V2I': {},\n        '_G': []\n    }\n    print(to_networkx(G3))\n    # Output: {}\n\n    # Graph with isolated vertex\n    G4 = {\n        'is_directed': True,\n        '_V2I': {'A': 0, 'B': 1},\n        '_G': [\n            [],  # A has no outgoing edges\n            []   # B has no outgoing edges\n        ]\n    }\n    print(to_networkx(G4))\n    # Output: {'A': [], 'B': []}\n```"}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    arr = np.asarray(x)\n    # For all elements, check if they are numerically equal to 0 or 1\n    return bool(np.all((arr == 0) | (arr == 1)))\n\n# Example usage and test cases:\nif __name__ == \"__main__\":\n    print(is_binary([0, 1, 1, 0]))                # True\n    print(is_binary(np.array([0.0, 1.0, 0.0])))   # True\n    print(is_binary(np.array([True, False, 1])))  # True\n    print(is_binary(np.array([0, 1, 2])))         # False\n    print(is_binary(np.array([[0, 1], [1, 0]])))  # True\n    print(is_binary(np.array([0.5, 1, 0])))       # False\n    print(is_binary(np.array([])))                # True (empty array)\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Helper to pad and tokenize a sentence\n    def pad_and_tokenize(sentence: str, N: int) -> List[str]:\n        tokens = sentence.strip().split()\n        if N == 1:\n            return tokens\n        else:\n            return ([\"<bol>\"] * (N-1)) + tokens + [\"<eol>\"]\n\n    # Count N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    unigram_count = Counter()\n    total_unigrams = 0\n\n    for sent in corpus:\n        tokens = pad_and_tokenize(sent, N)\n        if N == 1:\n            unigram_count.update(tokens)\n            total_unigrams += len(tokens)\n        else:\n            # N-grams\n            for i in range(len(tokens) - N + 1):\n                ngram = tuple(tokens[i:i+N])\n                ngram_counts[ngram] += 1\n                prefix = tuple(tokens[i:i+N-1])\n                prefix_counts[prefix] += 1\n\n    # For unigrams, we need the total number of tokens\n    if N == 1:\n        # Prepare query tokens\n        query_tokens = pad_and_tokenize(query, N)\n        if not query_tokens:\n            return float('-inf')\n        logprob = 0.0\n        for token in query_tokens:\n            count = unigram_count[token]\n            if count == 0 or total_unigrams == 0:\n                return float('-inf')\n            prob = count / total_unigrams\n            logprob += math.log(prob)\n        return round(logprob, 4)\n\n    # For N > 1\n    query_tokens = pad_and_tokenize(query, N)\n    if len(query_tokens) < N:\n        return float('-inf')\n    logprob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        prefix = tuple(query_tokens[i:i+N-1])\n        ngram_count = ngram_counts[ngram]\n        prefix_count = prefix_counts[prefix]\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        prob = ngram_count / prefix_count\n        logprob += math.log(prob)\n    return round(logprob, 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    corpus = [\"a b a\", \"b a b\"]\n    query = \"a b\"\n    N = 1\n    print(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n\n    # Bigram example\n    corpus = [\"a b a\", \"b a b\"]\n    query = \"a b\"\n    N = 2\n    print(ngram_log_prob(corpus, query, N))  # Output: -1.0986\n\n    # Trigram example (should be -inf if not enough context)\n    print(ngram_log_prob(corpus, query, 3))  # Output: -inf\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n\n    # Step 1: Build weighted adjacency matrix W\n    # Compute pairwise Euclidean distances\n    # Efficient computation: (x-y)^2 = x^2 + y^2 - 2xy\n    X_norm = np.sum(X ** 2, axis=1)\n    dists = np.sqrt(X_norm[:, None] + X_norm[None, :] - 2 * X @ X.T)\n    # Set diagonal to np.inf to avoid division by zero\n    np.fill_diagonal(dists, np.inf)\n    W = 1.0 / (1.0 + dists)\n    np.fill_diagonal(W, 0.0)  # Ensure diagonal is zero\n\n    # Step 2: Compute unnormalised graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # Step 3: Compute first k eigenvectors of L (smallest eigenvalues)\n    # Use eigh since L is symmetric\n    eigvals, eigvecs = np.linalg.eigh(L)\n    # Take the k eigenvectors corresponding to the k smallest eigenvalues\n    E = eigvecs[:, :k]  # shape (n, k)\n\n    # Step 4: Run k-means on rows of E\n    # Use first k rows of E as initial centroids\n    centroids = E[:k, :].copy()  # shape (k, k)\n    labels = np.zeros(n, dtype=int)\n    max_iter = 100\n\n    for it in range(max_iter):\n        # Compute distances from each point to each centroid\n        # shape: (n, k)\n        # dist^2 = sum((E - centroid)^2, axis=1)\n        dists = np.linalg.norm(E[:, None, :] - centroids[None, :, :], axis=2)\n        new_labels = np.argmin(dists, axis=1)\n\n        # Check for convergence\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n\n        # Update centroids\n        for i in range(k):\n            members = E[labels == i]\n            if len(members) == 0:\n                # Empty cluster: re-initialise centroid with a random row of E\n                rand_idx = np.random.choice(n)\n                centroids[i] = E[rand_idx]\n            else:\n                centroids[i] = np.mean(members, axis=0)\n\n    return labels.tolist()\n```\n"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n\n    lines = [\n        \"------------------------- DEBUG -------------------------\",\n        f\"Mine (prev) [{prev_label}]:\",\n        f\"{prev_mine}\",\n        \"\",\n        f\"Theirs (prev) [{prev_label}]:\",\n        f\"{prev_gold}\",\n        \"\",\n        f\"Mine [{curr_label}]:\",\n        f\"{curr_mine}\",\n        \"\",\n        f\"Theirs [{curr_label}]:\",\n        f\"{curr_gold}{warn_str}\",\n        \"----------------------- END DEBUG -----------------------\"\n    ]\n    return \"\\n\".join(lines)\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    N, M = X.shape\n\n    # Add intercept if needed\n    if fit_intercept:\n        X = np.hstack([np.ones((N, 1)), X])\n        M = M + 1\n\n    # Handle mu: broadcast scalar to vector if needed\n    if np.isscalar(mu):\n        mu_vec = np.full(M, mu, dtype=float)\n    else:\n        mu_vec = np.asarray(mu, dtype=float)\n        if mu_vec.ndim == 0:\n            mu_vec = np.full(M, mu_vec.item(), dtype=float)\n        elif mu_vec.shape[0] != M:\n            raise ValueError(f\"mu has length {mu_vec.shape[0]}, expected {M}\")\n    \n    # Handle V: None (identity), scalar, 1D (diagonal), or 2D (full)\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        if V == 0:\n            raise ValueError(\"Prior scale V cannot be zero.\")\n        V_inv = np.eye(M) / V\n    else:\n        V_arr = np.asarray(V, dtype=float)\n        if V_arr.ndim == 1:\n            if V_arr.shape[0] != M:\n                raise ValueError(f\"V diagonal has length {V_arr.shape[0]}, expected {M}\")\n            if np.any(V_arr == 0):\n                raise ValueError(\"Prior scale V diagonal cannot have zeros.\")\n            V_inv = np.diag(1.0 / V_arr)\n        elif V_arr.ndim == 2:\n            if V_arr.shape != (M, M):\n                raise ValueError(f\"V has shape {V_arr.shape}, expected ({M},{M})\")\n            V_inv = np.linalg.inv(V_arr)\n        else:\n            raise ValueError(\"V must be None, scalar, 1D, or 2D array.\")\n\n    # Compute posterior covariance (up to \u03c3\u00b2): \u03a3_b = (V\u207b\u00b9 + X\u1d40X)\u207b\u00b9\n    XtX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XtX)\n\n    # Compute posterior mean: \u03bc_b = \u03a3_b (V\u207b\u00b9 \u03bc + X\u1d40y)\n    V_inv_mu = V_inv @ mu_vec\n    Xty = X.T @ y\n    mu_b = Sigma_b @ (V_inv_mu + Xty)\n\n    # Round to 4 decimals and return as list\n    mu_b_rounded = np.round(mu_b, 4).tolist()\n    return mu_b_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test: 2D data, fit intercept\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([1, 2, 3])\n    result = bayesian_posterior_mean(X, y, mu=0, V=None, fit_intercept=True)\n    print(\"Posterior mean coefficients:\", result)\n```"}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    # Helper functions\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # 1. Compute Mel points\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n\n    # 2. Bin frequencies (DFT bins)\n    # DFT bins go from 0 to N//2 (inclusive)\n    bin_freqs = np.linspace(0, fs / 2, N // 2 + 1)\n\n    # 3. Build filterbank\n    filterbank = np.zeros((n_filters, N // 2 + 1), dtype=np.float64)\n\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        # Left slope: from f_left to f_center\n        left_slope = (bin_freqs - f_left) / (f_center - f_left)\n        # Right slope: from f_center to f_right\n        right_slope = (f_right - bin_freqs) / (f_right - f_center)\n\n        # Take the minimum of the two slopes, but not less than 0\n        weights = np.maximum(0, np.minimum(left_slope, right_slope))\n\n        if normalize:\n            # Normalize so that area in Mel space is 1\n            norm_factor = 2 / (hz_to_mel(f_right) - hz_to_mel(f_left))\n            weights *= norm_factor\n\n        filterbank[i, :] = weights\n\n    # 4. Round to 4 decimals and convert to list of lists\n    filterbank = np.round(filterbank, 4)\n    return filterbank.tolist()\n```\n"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    # Special cases\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    # Blackman-Harris coefficients\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n\n    n = np.arange(window_len)\n    factor = 2 * np.pi * n / N\n\n    w = (a0\n         - a1 * np.cos(factor)\n         + a2 * np.cos(2 * factor)\n         - a3 * np.cos(3 * factor))\n\n    # Round to 4 decimals and convert to list\n    w_rounded = np.round(w, 4).tolist()\n    return w_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(blackman_harris(8, symmetric=True))\n    print(blackman_harris(8, symmetric=False))\n    print(blackman_harris(1))\n    print(blackman_harris(0))\n```\n"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # =====  Write your code below this line  =====\n\n    def digamma(x):\n        # Handle positive x only (as per Dirichlet parameter constraints)\n        result = 0.0\n        # Use recurrence to shift x up to >= 6\n        while x < 6.0:\n            result -= 1.0 / x\n            x += 1.0\n        # Asymptotic expansion for digamma at large x\n        inv_x = 1.0 / x\n        inv_x2 = inv_x * inv_x\n        result += math.log(x) - 0.5 * inv_x - inv_x2 / 12.0 + inv_x2 * inv_x2 / 120.0 - inv_x2 * inv_x2 * inv_x2 / 252.0\n        return result\n\n    # Convert gamma to numpy array for easy indexing and summing\n    gamma_arr = np.array(gamma, dtype=float)\n    val1 = gamma_arr[d, t]\n    val2 = np.sum(gamma_arr[d, :])\n\n    psi1 = digamma(val1)\n    psi2 = digamma(val2)\n    result = psi1 - psi2\n\n    return round(result, 4)\n```\n**Example usage:**\n```python\nif __name__ == \"__main__\":\n    gamma = [[1.5, 2.0, 3.0], [0.5, 0.5, 0.5]]\n    print(expected_log_dirichlet(gamma, 0, 1))  # Example output\n    print(expected_log_dirichlet(gamma, 1, 2))  # Example output\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Header and footer\n    header = \"------------------------- DEBUG -------------------------\\n\"\n    footer = \"----------------------- END DEBUG -----------------------\"\n\n    # Previous index (clamped to 0)\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n\n    # Current index\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    # Compose the string\n    result = (\n        f\"{header}\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        f\"{footer}\"\n    )\n    return result\n```\n"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    # Initialize sample weights\n    w = np.full(n_samples, 1.0 / n_samples)\n    # To store the stumps and their weights\n    stumps = []\n    alphas = []\n\n    # Helper function: sign(z) = -1 if z < 0, +1 otherwise\n    def stump_sign(z):\n        return np.where(z < 0, -1, 1)\n\n    for m in range(n_estimators):\n        # Find the best decision stump\n        min_error = float('inf')\n        best_stump = None\n\n        for feature_i in range(n_features):\n            X_column = X_train[:, feature_i]\n            # Get all unique values and sort\n            thresholds = np.unique(X_column)\n            # For efficiency, consider thresholds between unique values\n            # For each pair of consecutive unique values, threshold is their midpoint\n            if len(thresholds) == 1:\n                candidate_thresholds = thresholds\n            else:\n                candidate_thresholds = (thresholds[:-1] + thresholds[1:]) / 2.0\n                candidate_thresholds = np.concatenate([thresholds[:1], candidate_thresholds, thresholds[-1:]])\n\n            for threshold in candidate_thresholds:\n                for polarity in [1, -1]:\n                    # Predict: h(x) = p * sign(x_j - t)\n                    preds = polarity * stump_sign(X_column - threshold)\n                    # Weighted error\n                    misclassified = preds != y_train\n                    error = np.dot(w, misclassified)\n                    # If error > 0.5, flip polarity (equivalent to swapping polarity and error)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature': feature_i,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'preds': preds.copy()\n                        }\n\n        # Compute alpha (stump weight)\n        # Avoid division by zero or log(0)\n        eps = 1e-10\n        error = min_error\n        error = max(eps, min(1 - eps, error))\n        alpha = 0.5 * math.log((1 - error) / error)\n\n        # Store the stump and its alpha\n        stumps.append({\n            'feature': best_stump['feature'],\n            'threshold': best_stump['threshold'],\n            'polarity': best_stump['polarity']\n        })\n        alphas.append(alpha)\n\n        # Update sample weights\n        # w_i <- w_i * exp(-alpha * y_i * h(x_i))\n        # Normalize w\n        w = w * np.exp(-alpha * y_train * best_stump['preds'])\n        w = w / np.sum(w)\n\n    # Prediction on X_test\n    agg = np.zeros(X_test.shape[0])\n    for stump, alpha in zip(stumps, alphas):\n        feature = stump['feature']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        preds = polarity * stump_sign(X_test[:, feature] - threshold)\n        agg += alpha * preds\n\n    final_preds = np.where(agg < 0, -1, 1)\n    return final_preds.tolist()\n```\n"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    if positive_only:\n        # Only non-negative frequencies: indices 0 ... floor(N/2)\n        k = np.arange(0, N//2 + 1)\n        freqs = k * (fs / N)\n    else:\n        # All bins, as in np.fft.fftfreq\n        freqs = np.fft.fftfreq(N, d=1/fs)\n\n    # Round to 4 decimals and convert to list\n    freqs_rounded = np.round(freqs, 4).tolist()\n    return freqs_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(dft_bins(8, 8000, True))   # [0.0, 1000.0, 2000.0, 3000.0, 4000.0]\n    print(dft_bins(8, 8000, False))  # [0.0, 1000.0, 2000.0, 3000.0, 4000.0, -3000.0, -2000.0, -1000.0]\n    print(dft_bins(7, 7000, True))   # [0.0, 1000.0, 2000.0, 3000.0]\n    print(dft_bins(7, 7000, False))  # [0.0, 1000.0, 2000.0, 3000.0, -3000.0, -2000.0, -1000.0]\n    print(dft_bins(0, 8000, True))   # []\n    print(dft_bins(8, 0, True))      # []\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n\n    # For each sample, get OOB predictions\n    # Mask predictions with oob_mask\n    # For each row, get the mean of predictions where oob_mask is True\n    n_samples = y_true.shape[0]\n    oob_means = []\n    squared_errors = []\n\n    for i in range(n_samples):\n        oob_preds = predictions[i][oob_mask[i]]\n        if oob_preds.size > 0:\n            mean_pred = np.mean(oob_preds)\n            squared_error = (mean_pred - y_true[i]) ** 2\n            squared_errors.append(squared_error)\n\n    if len(squared_errors) == 0:\n        return -1\n\n    mse = np.mean(squared_errors)\n    return round(float(mse), 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 3 samples, 4 trees\n    y_true = [1.0, 2.0, 3.0]\n    predictions = [\n        [1.1, 0.9, 1.2, 1.0],   # sample 0\n        [2.1, 2.2, 1.8, 2.0],   # sample 1\n        [2.9, 3.1, 3.0, 3.2],   # sample 2\n    ]\n    oob_mask = [\n        [1, 0, 1, 0],  # sample 0: OOB for tree 0 and 2\n        [0, 1, 1, 0],  # sample 1: OOB for tree 1 and 2\n        [0, 0, 0, 1],  # sample 2: OOB for tree 3 only\n    ]\n    print(oob_mse(y_true, predictions, oob_mask))  # Should print a float rounded to 4 decimals\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # 1. Count item supports (distinct transactions)\n    item_counter = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_counter.update(unique_items)\n\n    # 2. Discard infrequent items\n    frequent_items = {item for item, count in item_counter.items() if count >= min_support}\n\n    if not frequent_items:\n        return {\"support\": 0, \"children\": {}}\n\n    # 3. Global ordering: by decreasing support, then alphabetically\n    # Prepare a list of (item, support)\n    sorted_items = sorted(\n        frequent_items,\n        key=lambda item: (-item_counter[item], item)\n    )\n    # Map item to its order index for fast sorting\n    item_order = {item: idx for idx, item in enumerate(sorted_items)}\n\n    # 4. Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and order them\n        filtered = [item for item in set(transaction) if item in frequent_items]\n        if not filtered:\n            continue\n        ordered = sorted(filtered, key=lambda item: item_order[item])\n\n        # Walk the tree and update/extend the path\n        node = root\n        node[\"support\"] += 1  # Each transaction passes through root\n        for item in ordered:\n            children = node[\"children\"]\n            if item not in children:\n                children[item] = {\"support\": 0, \"children\": {}}\n            node = children[item]\n            node[\"support\"] += 1\n\n    return root\n\n# Example usage:\nif __name__ == \"__main__\":\n    transactions = [\n        [\"a\", \"b\", \"c\"],\n        [\"a\", \"c\"],\n        [\"a\", \"b\"],\n        [\"b\", \"c\"],\n        [\"a\", \"b\", \"c\"],\n    ]\n    min_support = 2\n    from pprint import pprint\n    pprint(build_fp_tree(transactions, min_support))\n```\n**How it works:**\n- Counts item supports per unique transaction.\n- Filters out infrequent items.\n- Orders items globally by support (desc), then alphabetically.\n- For each transaction, keeps only frequent items, sorts them, and inserts/updates the path in the tree, incrementing support at each node.\n\n**Output for the example:**\n```python\n{'children': {'a': {'children': {'b': {'children': {'c': {'children': {},\n                                                         'support': 2}},\n                                         'support': 3},\n                                 'c': {'children': {}, 'support': 1}},\n                         'support': 4},\n              'b': {'children': {'c': {'children': {}, 'support': 1}},\n                    'support': 1}},\n 'support': 5}\n```\nThis matches the required format."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert X to numpy array of float64\n    X_arr = np.array(X, dtype=np.float64)\n    # Handle empty X (N=0)\n    if X_arr.ndim != 2:\n        if X_arr.size == 0:\n            return []\n        else:\n            return -1\n    N, C = X_arr.shape\n\n    # If Y is None, set Y = X\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=np.float64)\n        if Y_arr.ndim != 2:\n            if Y_arr.size == 0:\n                # If Y is empty, but X is not, check for shape\n                if C == 0:\n                    return []\n                else:\n                    return -1\n            else:\n                return -1\n\n    # Check for compatible shapes\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n\n    # If X is empty, return empty list\n    if N == 0:\n        return []\n\n    # Compute kernel matrix: K = X @ Y.T + c0\n    K = X_arr @ Y_arr.T + c0\n\n    # Round to 4 decimals\n    K_rounded = np.round(K, 4)\n\n    # Convert to list of lists of floats\n    return K_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test 1: Simple case\n    X = [[1, 2], [3, 4]]\n    Y = [[5, 6], [7, 8]]\n    print(linear_kernel(X, Y, c0=1))  # [[18.0, 24.0], [40.0, 54.0]]\n\n    # Test 2: Homogeneous kernel, Y=None\n    print(linear_kernel(X, None, c0=0))  # [[5.0, 11.0], [11.0, 25.0]]\n\n    # Test 3: Incompatible shapes\n    X = [[1, 2, 3]]\n    Y = [[4, 5]]\n    print(linear_kernel(X, Y))  # -1\n\n    # Test 4: Empty X\n    X = []\n    print(linear_kernel(X, Y=[[1, 2]]))  # []\n\n    # Test 5: X and Y as numpy arrays\n    X = np.array([[1, 2], [3, 4]])\n    Y = np.array([[5, 6], [7, 8]])\n    print(linear_kernel(X, Y, c0=1))  # [[18.0, 24.0], [40.0, 54.0]]\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    # Update biased second raw moment estimate\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    # Compute bias-corrected first moment estimate\n    m_hat = m_t / (1 - beta1 ** t)\n    # Compute bias-corrected second raw moment estimate\n    v_hat = v_t / (1 - beta2 ** t)\n    # Update parameters\n    param_t = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    # Round and convert to lists\n    param_t_list = np.round(param_t, 8).tolist()\n    m_t_list = np.round(m_t, 8).tolist()\n    v_t_list = np.round(v_t, 8).tolist()\n\n    return (param_t_list, m_t_list, v_t_list)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 1D example\n    param = np.array([1.0, 2.0, 3.0])\n    grad = np.array([0.1, -0.2, 0.0])\n    m = np.zeros_like(param)\n    v = np.zeros_like(param)\n    t = 1\n    updated_param, new_m, new_v = adam_update(param, grad, t, m, v)\n    print(\"Updated param:\", updated_param)\n    print(\"New m:\", new_m)\n    print(\"New v:\", new_v)\n\n    # 2D example\n    param2 = np.array([[1.0, 2.0], [3.0, 4.0]])\n    grad2 = np.array([[0.0, 0.0], [0.5, -0.5]])\n    m2 = np.zeros_like(param2)\n    v2 = np.zeros_like(param2)\n    t2 = 1\n    updated_param2, new_m2, new_v2 = adam_update(param2, grad2, t2, m2, v2)\n    print(\"Updated param 2D:\", updated_param2)\n    print(\"New m 2D:\", new_m2)\n    print(\"New v 2D:\", new_v2)\n```"}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.asarray(rewards)\n    N = theta_samples.shape[0]\n    n_retain = int(retain_prcnt * N)\n    if n_retain < 1:\n        n_retain = 1  # Just in case, though prompt says always at least one\n\n    # Get indices of top n_retain rewards (descending order)\n    elite_indices = np.argsort(rewards)[-n_retain:]\n    elite_samples = theta_samples[elite_indices]\n\n    # Compute mean and variance per dimension\n    mean = np.mean(elite_samples, axis=0)\n    var = np.var(elite_samples, axis=0, ddof=0)  # population variance\n\n    # Round to 4 decimals and convert to lists\n    mean_rounded = [round(x, 4) for x in mean.tolist()]\n    var_rounded = [round(x, 4) for x in var.tolist()]\n\n    return mean_rounded, var_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    np.random.seed(42)\n    theta_samples = np.random.randn(10, 3)\n    rewards = np.random.uniform(0, 10, size=10)\n    retain_prcnt = 0.3\n    mean, var = cross_entropy_update(theta_samples, rewards, retain_prcnt)\n    print(\"Mean:\", mean)\n    print(\"Variance:\", var)\n```"}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert input to a list for multiple passes and len()\n    if isinstance(labels, np.ndarray):\n        labels = labels.flatten().tolist()\n    else:\n        labels = list(labels)\n    \n    n = len(labels)\n    if n == 0:\n        return 0.0\n\n    counts = Counter(labels)\n    if len(counts) == 1:\n        return 0.0\n\n    entropy = 0.0\n    for count in counts.values():\n        p = count / n\n        if p > 0:\n            entropy -= p * math.log2(p)\n    return round(entropy, 5)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(entropy([]))  # 0.0\n    print(entropy([1, 1, 1, 1]))  # 0.0\n    print(entropy([0, 1]))  # 1.0\n    print(entropy([0, 0, 1, 1]))  # 1.0\n    print(entropy([0, 0, 0, 1]))  # 0.81128\n    print(entropy(['a', 'b', 'b', 'c']))  # 1.5\n    print(entropy(np.array([1, 2, 2, 2, 3, 3, 3, 3])))  # 1.406\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    # Helper: parse padding\n    def parse_pad(pad, in_rows, in_cols, k_rows, k_cols, stride, dilation):\n        d = dilation\n        eff_k_rows = k_rows + d * (k_rows - 1)\n        eff_k_cols = k_cols + d * (k_cols - 1)\n        if isinstance(pad, str) and pad.lower() == 'same':\n            # Output size: ceil(input / stride)\n            out_rows = int(np.ceil(in_rows / stride))\n            out_cols = int(np.ceil(in_cols / stride))\n            pad_rows = max((out_rows - 1) * stride + eff_k_rows - in_rows, 0)\n            pad_cols = max((out_cols - 1) * stride + eff_k_cols - in_cols, 0)\n            pr1 = pad_rows // 2\n            pr2 = pad_rows - pr1\n            pc1 = pad_cols // 2\n            pc2 = pad_cols - pc1\n            return pr1, pr2, pc1, pc2\n        elif isinstance(pad, int):\n            return pad, pad, pad, pad\n        elif isinstance(pad, tuple):\n            if len(pad) == 2:\n                pr, pc = pad\n                return pr, pr, pc, pc\n            elif len(pad) == 4:\n                return pad\n        else:\n            raise ValueError(\"Invalid pad specification\")\n    \n    # Helper: im2col for batch\n    def im2col_batch(X, k_rows, k_cols, stride, dilation, out_rows, out_cols):\n        # X: (n_ex, in_rows, in_cols, in_ch)\n        n_ex, in_rows, in_cols, in_ch = X.shape\n        # Output: (n_ex, out_rows*out_cols, k_rows*k_cols*in_ch)\n        # For each output position, extract the patch\n        # Compute the indices for im2col\n        # Dilation: distance between kernel elements\n        d = dilation\n        # Compute the indices for the kernel\n        i0 = np.repeat(np.arange(k_rows), k_cols)\n        i0 = np.tile(i0, in_ch)\n        i_d = d * i0\n        j0 = np.tile(np.arange(k_cols), k_rows)\n        j0 = np.tile(j0, in_ch)\n        j_d = d * j0\n        # For channels\n        c0 = np.repeat(np.arange(in_ch), k_rows * k_cols)\n        # Output positions\n        i1 = np.arange(out_rows) * stride\n        j1 = np.arange(out_cols) * stride\n        # Create meshgrid for output positions\n        ii, jj = np.meshgrid(i1, j1, indexing='ij')  # shape (out_rows, out_cols)\n        # Flatten\n        ii = ii.flatten()\n        jj = jj.flatten()\n        # For each output position, get the patch indices\n        # Shape: (k_rows*k_cols*in_ch, out_rows*out_cols)\n        row_idx = i_d[:, None] + ii[None, :]\n        col_idx = j_d[:, None] + jj[None, :]\n        # Now, for each example in batch, extract the patches\n        # We'll use advanced indexing\n        # For each example, for each channel, for each patch\n        # X[n, row_idx, col_idx, c0]\n        # Output: (n_ex, out_rows*out_cols, k_rows*k_cols*in_ch)\n        cols = np.empty((n_ex, out_rows * out_cols, k_rows * k_cols * in_ch), dtype=X.dtype)\n        for n in range(n_ex):\n            # For each patch position\n            cols[n, :, :] = X[n][row_idx, col_idx, c0].T\n        return cols  # (n_ex, out_rows*out_cols, k_rows*k_cols*in_ch)\n    \n    # Get input/output/kernel shapes\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    k_rows, k_cols, k_in_ch, out_ch = W.shape\n    assert k_in_ch == in_ch, \"Kernel input channels must match input channels\"\n    d = dilation\n    # Parse padding\n    pr1, pr2, pc1, pc2 = parse_pad(pad, in_rows, in_cols, k_rows, k_cols, stride, d)\n    # Pad input\n    X_pad = np.pad(X, ((0,0), (pr1,pr2), (pc1,pc2), (0,0)), mode='constant')\n    in_rows_pad = in_rows + pr1 + pr2\n    in_cols_pad = in_cols + pc1 + pc2\n    # Effective kernel size\n    eff_k_rows = k_rows + d * (k_rows - 1)\n    eff_k_cols = k_cols + d * (k_cols - 1)\n    # Output spatial size\n    out_rows = (in_rows_pad - eff_k_rows) // stride + 1\n    out_cols = (in_cols_pad - eff_k_cols) // stride + 1\n    # im2col\n    cols = im2col_batch(X_pad, k_rows, k_cols, stride, d, out_rows, out_cols)  # (n_ex, out_rows*out_cols, k_rows*k_cols*in_ch)\n    # Reshape kernels\n    W_col = W.reshape(-1, out_ch)  # (k_rows*k_cols*in_ch, out_ch)\n    # GEMM\n    # For each example: (out_rows*out_cols, k_rows*k_cols*in_ch) @ (k_rows*k_cols*in_ch, out_ch) = (out_rows*out_cols, out_ch)\n    out = np.empty((n_ex, out_rows * out_cols, out_ch), dtype=X.dtype)\n    for n in range(n_ex):\n        out[n] = cols[n] @ W_col  # (out_rows*out_cols, out_ch)\n    # Reshape to (n_ex, out_rows, out_cols, out_ch)\n    out = out.reshape(n_ex, out_rows, out_cols, out_ch)\n    return out.tolist()\n```\n**Usage Example:**\n```python\nif __name__ == \"__main__\":\n    # Example: 2 images, 5x5, 3 channels; 3x3 kernel, 3 in_ch, 4 out_ch\n    X = np.random.randn(2, 5, 5, 3)\n    W = np.random.randn(3, 3, 3, 4)\n    stride = 1\n    pad = 'same'\n    dilation = 0\n    result = conv2D(X, W, stride, pad, dilation)\n    print(np.array(result).shape)  # (2, 5, 5, 4)\n```\n**Notes:**\n- The function supports all specified padding modes and dilation.\n- The output is always a Python list (not a NumPy array).\n- Only NumPy is used; no deep learning libraries.\n- The function performs cross-correlation (not true convolution, i.e., no kernel flip)."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # 1. Mean centering\n    X = np.asarray(data)\n    Xc = X - np.mean(X, axis=0)\n\n    n_samples, n_features = Xc.shape\n    max_components = min(n_samples, n_features)\n    n_components = min(n_components, max_components)\n\n    if solver == \"svd\":\n        # 2. SVD\n        # Xc = U S Vt\n        U, S, Vt = np.linalg.svd(Xc, full_matrices=False)\n        # Vt: (n_features, n_features), rows are principal directions\n        # S: (min(n_samples, n_features),)\n        # The principal directions are the rows of Vt (or columns of V)\n        components = Vt[:n_components]  # shape: (n_components, n_features)\n        # Explained variance: S**2 / (n_samples - 1)\n        explained_variance = (S[:n_components] ** 2) / (n_samples - 1)\n        total_var = np.sum(np.var(Xc, axis=0, ddof=1))\n        explained_variance_ratio = explained_variance / total_var if total_var > 0 else np.zeros_like(explained_variance)\n        # Projected data: Xc @ components.T\n        scores = Xc @ components.T  # shape: (n_samples, n_components)\n    elif solver == \"eigen\":\n        # 2. Covariance matrix\n        cov = np.cov(Xc, rowvar=False, ddof=1)  # shape: (n_features, n_features)\n        # 3. Eigen-decomposition\n        eigvals, eigvecs = np.linalg.eigh(cov)  # eigvals: (n_features,), eigvecs: (n_features, n_features)\n        # Sort in descending order\n        idx = np.argsort(eigvals)[::-1]\n        eigvals = eigvals[idx]\n        eigvecs = eigvecs[:, idx]\n        # Keep first n_components\n        components = eigvecs[:, :n_components].T  # shape: (n_components, n_features)\n        explained_variance = eigvals[:n_components]\n        total_var = np.sum(eigvals)\n        explained_variance_ratio = explained_variance / total_var if total_var > 0 else np.zeros_like(explained_variance)\n        # Projected data: Xc @ components.T\n        scores = Xc @ components.T  # shape: (n_samples, n_components)\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'\")\n\n    # 4. Deterministic sign fix\n    # For each component (row in components), if first nonzero loading is negative, flip sign\n    for i in range(components.shape[0]):\n        comp = components[i]\n        # Find first nonzero loading\n        nz = np.flatnonzero(comp)\n        if nz.size > 0:\n            first_idx = nz[0]\n            if comp[first_idx] < 0:\n                components[i] = -components[i]\n                scores[:, i] = -scores[:, i]\n\n    # 5. Round results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores_rounded, explained_variance_ratio_rounded\n```\n"}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # Assume value is a sequence of probabilities\n        # Return the index of the largest probability (ties: smallest index)\n        return max(\n            range(len(leaf.value)),\n            key=lambda i: leaf.value[i]\n        )\n    else:\n        # Regression: just return the scalar value\n        return leaf.value\n\n\n# --- Example usage and test cases ---\n\nif __name__ == \"__main__\":\n    # Classification example\n    leaf1 = Leaf([0.1, 0.7, 0.2])\n    print(leaf_predict(leaf1, classifier=True))  # Output: 1\n\n    # Classification with tie (should pick smallest index)\n    leaf2 = Leaf([0.5, 0.5, 0.2])\n    print(leaf_predict(leaf2, classifier=True))  # Output: 0\n\n    # Regression example (float)\n    leaf3 = Leaf(3.14159)\n    print(leaf_predict(leaf3, classifier=False))  # Output: 3.14159\n\n    # Regression example (int)\n    leaf4 = Leaf(42)\n    print(leaf_predict(leaf4, classifier=False))  # Output: 42\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    n_samples, n_features = data.shape\n\n    # Special case: K == 1\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        centroid = np.round(centroid, 4)\n        return [centroid.tolist()]\n\n    # 1. Initialise centroids with the first K samples\n    centroids = data[:K].astype(float).copy()\n\n    for _ in range(max_iters):\n        # 2a. Assign each sample to the closest centroid\n        # Compute squared Euclidean distances: shape (n_samples, K)\n        # For each centroid, compute distance to all points\n        # Efficient broadcasting: (n_samples, 1, n_features) - (1, K, n_features)\n        # But for clarity, use (K, n_features) and (n_samples, n_features)\n        # So: (n_samples, K, n_features)\n        # We'll use (n_samples, K)\n        dists = np.linalg.norm(data[:, None, :] - centroids[None, :, :], axis=2)\n        labels = np.argmin(dists, axis=1)  # (n_samples,)\n\n        # 2b. Recompute centroids\n        new_centroids = centroids.copy()\n        for k in range(K):\n            assigned = data[labels == k]\n            if assigned.shape[0] > 0:\n                new_centroids[k] = assigned.mean(axis=0)\n            # else: leave centroid unchanged\n\n        # 2c. Check for convergence (all centroids unchanged within tolerance)\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n        centroids = new_centroids\n\n    # 3. Sort centroids lexicographically and round to 4 decimals\n    centroids = np.round(centroids, 4)\n    # Lexicographical sort: use np.lexsort on columns in reverse order\n    # For 2D: sort by first column, then second, etc.\n    # np.lexsort expects keys in order of last key first, so reverse columns\n    sort_keys = [centroids[:, i] for i in reversed(range(n_features))]\n    order = np.lexsort(sort_keys)\n    centroids_sorted = centroids[order]\n\n    # Convert to list of lists\n    return centroids_sorted.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    data  = np.array([[1, 1],\n                      [1, 2],\n                      [2, 1],\n                      [8, 8],\n                      [9, 8],\n                      [8, 9]])\n    K     = 2\n    result = kmeans(data, K)\n    print(result)  # Should print: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to float NumPy array\n    arr = np.array(data, dtype=float)\n    if arr.ndim != 2:\n        raise ValueError(\"Input must be a 2-D structure.\")\n\n    # Compute row sums\n    row_sums = arr.sum(axis=1)\n\n    # Check for any row with sum == 0\n    if np.any(row_sums == 0):\n        return -1\n\n    # Normalize each row\n    normed = arr / row_sums[:, np.newaxis]\n\n    # Round to 4 decimals\n    normed_rounded = np.round(normed, 4)\n\n    # Convert to Python list of lists\n    return normed_rounded.tolist()\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Test 1: Normal case\n    data1 = [\n        [1, 2, 3],\n        [4, 5, 6]\n    ]\n    print(row_stochastic_matrix(data1))\n    # Output: [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]]\n\n    # Test 2: Row with all zeros\n    data2 = [\n        [0, 0, 0],\n        [1, 2, 3]\n    ]\n    print(row_stochastic_matrix(data2))\n    # Output: -1\n\n    # Test 3: NumPy array input\n    data3 = np.array([[0.5, 0.5], [2, 8]])\n    print(row_stochastic_matrix(data3))\n    # Output: [[0.5, 0.5], [0.2, 0.8]]\n\n    # Test 4: Single row\n    data4 = [[10, 0, 0]]\n    print(row_stochastic_matrix(data4))\n    # Output: [[1.0, 0.0, 0.0]]\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict as TypingDict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: TypingDict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_composite_continuous(space: Space) -> bool:\n        if isinstance(space, Tuple):\n            return all(isinstance(sub, Box) for sub in space.spaces)\n        elif isinstance(space, Dict):\n            return all(isinstance(sub, Box) for sub in space.spaces.values())\n        else:\n            # Not a composite space\n            return False\n\n    def check(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            return is_composite_continuous(space)\n        else:\n            return isinstance(space, Box)\n\n    cont_action = check(env.action_space, tuple_action)\n    cont_obs = check(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)\n\n# ----------------------------  Example test cases  ----------------------------\nif __name__ == \"__main__\":\n    # Simple Box spaces\n    env1 = Env(Box(-1, 1, (3,)), Box(0, 1, (2,)))\n    print(is_continuous(env1, False, False))  # (True, True)\n\n    # Discrete action, Box observation\n    env2 = Env(Discrete(5), Box(0, 1, (2,)))\n    print(is_continuous(env2, False, False))  # (False, True)\n\n    # Tuple of Boxes (continuous)\n    env3 = Env(Tuple([Box(0, 1, (2,)), Box(-1, 1, (1,))]), Box(0, 1, (2,)))\n    print(is_continuous(env3, True, False))   # (True, True)\n\n    # Tuple of Box and Discrete (not continuous)\n    env4 = Env(Tuple([Box(0, 1, (2,)), Discrete(3)]), Box(0, 1, (2,)))\n    print(is_continuous(env4, True, False))   # (False, True)\n\n    # Dict of Boxes (continuous)\n    env5 = Env(Dict({'a': Box(0, 1, (2,)), 'b': Box(-1, 1, (1,))}), Box(0, 1, (2,)))\n    print(is_continuous(env5, True, False))   # (True, True)\n\n    # Dict with a Discrete (not continuous)\n    env6 = Env(Dict({'a': Box(0, 1, (2,)), 'b': Discrete(2)}), Box(0, 1, (2,)))\n    print(is_continuous(env6, True, False))   # (False, True)\n\n    # Tuple observation space\n    env7 = Env(Box(0, 1, (2,)), Tuple([Box(0, 1, (2,)), Box(-1, 1, (1,))]))\n    print(is_continuous(env7, False, True))   # (True, True)\n\n    # Dict observation space with Discrete\n    env8 = Env(Box(0, 1, (2,)), Dict({'a': Box(0, 1, (2,)), 'b': Discrete(2)}))\n    print(is_continuous(env8, False, True))   # (True, False)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError(\"The updates list must not be empty.\")\n\n    # Determine the shape from the first update\n    shape = updates[0].shape\n    running_pred = np.zeros(shape, dtype=np.float64)\n\n    # Aggregate all updates: running_pred -= learning_rate * update\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    if regression:\n        # For regression, return 1D array rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax row-wise and return argmax\n        # Softmax: exp(x - max(x)) / sum(exp(x - max(x)))\n        # running_pred shape: (n_samples, n_classes)\n        # Subtract max for numerical stability\n        max_logits = np.max(running_pred, axis=1, keepdims=True)\n        exp_logits = np.exp(running_pred - max_logits)\n        probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        # Predicted class is argmax of probabilities\n        return np.argmax(probs, axis=1)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Regression example\n    np.random.seed(0)\n    n_samples = 5\n    updates_reg = [np.random.randn(n_samples) for _ in range(3)]\n    lr = 0.1\n    preds_reg = gradient_boosting_predict(updates_reg, lr, regression=True)\n    print(\"Regression predictions:\", preds_reg)\n\n    # Classification example\n    n_classes = 3\n    updates_clf = [np.random.randn(n_samples, n_classes) for _ in range(4)]\n    preds_clf = gradient_boosting_predict(updates_clf, lr, regression=False)\n    print(\"Classification predictions:\", preds_clf)\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    # Input shapes\n    n_examples, l_in, in_channels = X.shape\n    kW, k_in_channels, out_channels = W.shape\n    assert in_channels == k_in_channels, \"Input channels mismatch\"\n\n    # Dilation: effective kernel size\n    effective_kernel = (kW - 1) * (dilation + 1) + 1\n\n    # Padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif isinstance(pad, str):\n        if pad.lower() == \"same\":\n            # out_len = ceil(l_in / stride)\n            out_len = math.ceil(l_in / stride)\n            total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n            p_left = total_pad // 2\n            p_right = total_pad - p_left\n        else:\n            raise ValueError(\"pad string must be 'same' or an int/tuple\")\n    else:\n        raise ValueError(\"pad must be int, tuple, or 'same'\")\n\n    # Pad input\n    X_padded = np.pad(X, ((0,0), (p_left, p_right), (0,0)), mode='constant')\n\n    l_in_padded = X_padded.shape[1]\n\n    # Output length\n    out_len = (l_in_padded - effective_kernel) // stride + 1\n    if out_len <= 0:\n        raise ValueError(\"Output length is <= 0. Check your input, kernel, stride, dilation, and padding.\")\n\n    # Prepare output\n    Y = np.zeros((n_examples, out_len, out_channels), dtype=X.dtype)\n\n    # For each example in batch\n    for n in range(n_examples):\n        # For each output position\n        for i in range(out_len):\n            # The start index in the padded input\n            start = i * stride\n            # For each output channel\n            for oc in range(out_channels):\n                acc = 0.0\n                # For each kernel position\n                for k in range(kW):\n                    # Dilation: position in input\n                    idx = start + k * (dilation + 1)\n                    if idx < 0 or idx >= l_in_padded:\n                        continue  # Out of bounds (shouldn't happen with correct padding)\n                    # For each input channel\n                    for ic in range(in_channels):\n                        acc += X_padded[n, idx, ic] * W[k, ic, oc]\n                Y[n, i, oc] = acc\n\n    return Y.tolist()\n\n# Example usage and test\nif __name__ == \"__main__\":\n    # Example: batch=2, signal_length=5, in_channels=3, kernel_width=3, out_channels=2\n    np.random.seed(42)\n    X = np.random.randn(2, 5, 3)\n    W = np.random.randn(3, 3, 2)\n    stride = 2\n    pad = \"same\"\n    dilation = 1\n\n    result = conv1D(X, W, stride, pad, dilation)\n    print(\"Output shape:\", np.array(result).shape)\n    print(\"Output:\", result)\n```\n**Notes:**\n- The function supports all required features: batch, multi-channel, stride, padding (int, tuple, \"same\"), and dilation.\n- The output is a Python list as required.\n- The example at the end demonstrates usage and prints the output shape and values."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert input to numpy array for convenience\n    y = np.asarray(y)\n    if y.size == 0:\n        return 0.0\n\n    # Count occurrences of each class\n    _, counts = np.unique(y, return_counts=True)\n    probs = counts / counts.sum()\n    gini_impurity = 1.0 - np.sum(probs ** 2)\n    return round(float(gini_impurity), 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(gini([0, 0, 1, 1, 1]))      # Output: 0.48\n    print(gini([1, 1, 1, 1]))         # Output: 0.0\n    print(gini([]))                   # Output: 0.0\n    print(gini([0, 1, 2, 3]))         # Output: 0.75\n    print(gini(np.array([2, 2, 2, 2, 2, 3, 3, 3])))  # Output: 0.4688\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n        X: Feature matrix of shape (m, n)\n        y: Target vector of shape (m,)\n        learning_rate: Step size for gradient descent\n        n_iterations: Number of iterations\n\n    Returns:\n        (weights_list, bias) where weights_list is a list of floats (rounded to 4 decimals), bias is a float (rounded to 4 decimals)\n        If input data are inconsistent, returns -1\n    \"\"\"\n    # Check input consistency\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    m, n = X.shape\n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_hat = X @ theta + b  # shape (m,)\n        # Compute gradients\n        error = y_hat - y      # shape (m,)\n        dw = (2/m) * (X.T @ error)  # shape (n,)\n        db = (2/m) * np.sum(error)  # scalar\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Round results to 4 decimals\n    theta_rounded = [round(val, 4) for val in theta.tolist()]\n    b_rounded = round(b, 4)\n    return (theta_rounded, b_rounded)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test case\n    X = np.array([[1, 2], [2, 3], [4, 5]])\n    y = np.array([5, 8, 14])\n    weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=10000)\n    print(\"Weights:\", weights)\n    print(\"Bias:\", bias)\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Check if X is empty\n    if not X:\n        return False\n    n_rows = len(X)\n    # Check if all rows have the same length\n    if any(len(row) != n_rows for row in X):\n        return False\n    # Convert to numpy array\n    arr = np.array(X, dtype=float)\n    # Check symmetry using allclose with atol=1e-8\n    return np.allclose(arr, arr.T, atol=1e-8)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Symmetric integer matrix\n    A = [\n        [1, 2, 3],\n        [2, 5, 6],\n        [3, 6, 9]\n    ]\n    print(is_symmetric(A))  # True\n\n    # Not symmetric\n    B = [\n        [1, 0],\n        [2, 1]\n    ]\n    print(is_symmetric(B))  # False\n\n    # Symmetric with floats (within tolerance)\n    C = [\n        [1.0, 2.00000000001],\n        [2.00000000002, 3.0]\n    ]\n    print(is_symmetric(C))  # True\n\n    # Not square\n    D = [\n        [1, 2, 3],\n        [2, 5, 6]\n    ]\n    print(is_symmetric(D))  # False\n\n    # Empty matrix\n    E = []\n    print(is_symmetric(E))  # False\n\n    # Ragged matrix\n    F = [\n        [1, 2],\n        [2]\n    ]\n    print(is_symmetric(F))  # False\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for the logistic loss used in gradient boosting for binary classification.\n\n    Args:\n        y (list): Binary class labels (0 or 1).\n        f (list): Current prediction scores (floats).\n\n    Returns:\n        list: Negative gradients, each rounded to 4 decimal places.\n              If y contains values other than 0 or 1, returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    y = np.asarray(y)\n    f = np.asarray(f)\n    \n    # Check if y contains only 0 or 1\n    if not np.all(np.isin(y, [0, 1])):\n        return -1\n\n    # Convert y to y' in {-1, 1}\n    y_prime = 2 * y - 1\n\n    # Compute negative gradient: g_i = y'_i / (1 + exp(y'_i * f_i))\n    exp_term = np.exp(y_prime * f)\n    g = y_prime / (1 + exp_term)\n\n    # Round to 4 decimal places and convert to list\n    g_rounded = np.round(g, 4).tolist()\n    return g_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Valid input\n    y = [0, 1, 0, 1]\n    f = [0.0, 1.0, -1.0, 0.5]\n    print(logistic_negative_gradient(y, f))  # Example output\n\n    # Invalid input\n    y_invalid = [0, 2, 1]\n    f_invalid = [0.0, 0.0, 0.0]\n    print(logistic_negative_gradient(y_invalid, f_invalid))  # Output: -1\n```"}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # SELU constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to np.ndarray for vectorized ops\n    x_arr = np.asarray(x)\n    # Remember if input was scalar\n    is_scalar = np.isscalar(x) or (isinstance(x, np.ndarray) and x_arr.shape == ())\n\n    # Compute SELU and derivatives\n    if order == 0:\n        # SELU(x)\n        pos = x_arr > 0\n        out = np.where(pos, scale * x_arr, scale * alpha * (np.exp(x_arr) - 1))\n    elif order == 1:\n        # First derivative\n        pos = x_arr > 0\n        out = np.where(pos, scale, scale * alpha * np.exp(x_arr))\n    elif order == 2:\n        # Second derivative\n        pos = x_arr > 0\n        out = np.where(pos, 0.0, scale * alpha * np.exp(x_arr))\n    else:\n        raise ValueError(\"order must be 0, 1, or 2\")\n\n    # Round to 4 decimals\n    out = np.round(out, 4)\n\n    # Convert to list or scalar\n    if is_scalar:\n        return float(out)\n    else:\n        return out.tolist()\n```\n"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.asarray(x, dtype=float)\n    y = np.asarray(y, dtype=float)\n    N = len(x)\n    # Initial prediction: mean of targets\n    y_pred = np.full(N, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - y_pred\n\n        # Sort by x\n        sort_idx = np.argsort(x)\n        x_sorted = x[sort_idx]\n        r_sorted = residuals[sort_idx]\n\n        # Find all valid split points (between different consecutive x values)\n        diffs = np.diff(x_sorted)\n        valid_split_mask = diffs > 0\n        if not np.any(valid_split_mask):\n            # All x are identical, no split possible\n            stump_pred = np.full(N, np.mean(residuals))\n        else:\n            # Candidate split positions: halfway between different consecutive x values\n            split_indices = np.where(valid_split_mask)[0]\n            split_points = (x_sorted[split_indices] + x_sorted[split_indices + 1]) / 2\n\n            # Precompute cumulative sums for efficient SSE calculation\n            cumsum_r = np.cumsum(r_sorted)\n            cumsum_r2 = np.cumsum(r_sorted ** 2)\n            total_sum = cumsum_r[-1]\n            total_sum2 = cumsum_r2[-1]\n\n            best_sse = np.inf\n            best_split = None\n            best_left_mean = None\n            best_right_mean = None\n            best_split_idx = None\n\n            for idx, split_at in zip(split_indices, split_points):\n                n_left = idx + 1\n                n_right = N - n_left\n\n                if n_left == 0 or n_right == 0:\n                    continue  # skip degenerate splits\n\n                sum_left = cumsum_r[idx]\n                sum2_left = cumsum_r2[idx]\n                sum_right = total_sum - sum_left\n                sum2_right = total_sum2 - sum2_left\n\n                mean_left = sum_left / n_left\n                mean_right = sum_right / n_right\n\n                # SSE = sum((r_i - mean)^2) = sum(r_i^2) - 2*mean*sum(r_i) + n*mean^2\n                sse_left = sum2_left - 2 * mean_left * sum_left + n_left * mean_left ** 2\n                sse_right = sum2_right - 2 * mean_right * sum_right + n_right * mean_right ** 2\n                sse_total = sse_left + sse_right\n\n                if sse_total < best_sse:\n                    best_sse = sse_total\n                    best_split = split_at\n                    best_left_mean = mean_left\n                    best_right_mean = mean_right\n                    best_split_idx = idx\n\n            # Build the stump prediction for all samples\n            stump_pred = np.empty(N)\n            # For each sample, assign left or right mean based on x <= split\n            left_mask = x <= best_split\n            stump_pred[left_mask] = best_left_mean\n            stump_pred[~left_mask] = best_right_mean\n\n        # Update predictions\n        y_pred += learning_rate * stump_pred\n\n    return np.round(y_pred, 4).tolist()\n```\n"}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # Update running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * (grad ** 2)\n\n    # Parameter update\n    w_next = w - (learning_rate * grad) / (np.sqrt(Eg_next + epsilon))\n\n    # Round to 4 decimal places and convert to lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n\n    return w_next_rounded, Eg_next_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    w = np.array([1.0, 2.0, 3.0])\n    grad = np.array([0.1, -0.2, 0.3])\n    Eg = None\n    w_next, Eg_next = rmsprop_update(w, grad, Eg, learning_rate=0.01, rho=0.9)\n    print(\"Updated w:\", w_next)\n    print(\"Updated Eg:\", Eg_next)\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to numpy array for vectorized operations\n    x_arr = np.asarray(x, dtype=np.float64)\n    \n    # Compute ELU activation\n    elu_vals = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    \n    if not derivative:\n        result = elu_vals\n    else:\n        # For x >= 0: derivative is 1\n        # For x < 0: derivative is ELU(x, alpha) + alpha\n        grad = np.where(x_arr >= 0, 1.0, elu_vals + alpha)\n        result = grad\n\n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    x = [-2, -1, 0, 1, 2]\n    print(\"ELU:\", elu(x))                # Activation\n    print(\"ELU derivative:\", elu(x, derivative=True))  # Gradient\n```\n"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze(lst):\n        # Check if at least one element is an iterable (list/tuple/np.ndarray)\n        tuple_flag = any(\n            isinstance(x, (list, tuple, np.ndarray)) and not isinstance(x, (str, bytes))\n            for x in lst\n        )\n        # Determine dimensionality\n        if len(lst) == 0:\n            # Edge case: empty list\n            dim = 0\n            multidim_flag = False\n            per_dim_values = []\n            n_per_dim = []\n            ids_per_dim = []\n            continuous_flag = False\n        else:\n            first = lst[0]\n            if isinstance(first, (list, tuple, np.ndarray)) and not isinstance(first, (str, bytes)):\n                dim = len(first)\n                multidim_flag = dim > 1\n                # Collect values per dimension\n                per_dim_values = [[] for _ in range(dim)]\n                for x in lst:\n                    for i in range(dim):\n                        per_dim_values[i].append(x[i])\n            else:\n                dim = 1\n                multidim_flag = False\n                per_dim_values = [[x] for x in lst]\n                # per_dim_values will be a list of lists, need to transpose\n                per_dim_values = [ [x for x in lst] ]\n            # For each dimension, get unique sorted values\n            ids_per_dim = []\n            n_per_dim = []\n            for values in per_dim_values:\n                unique_vals = sorted(set(values), key=lambda v: (isinstance(v, float), v))\n                ids_per_dim.append(unique_vals)\n                n_per_dim.append(len(unique_vals))\n            # Flatten all values for continuous check\n            flat = []\n            if dim == 1:\n                flat = per_dim_values[0]\n            else:\n                for i in range(dim):\n                    flat.extend(per_dim_values[i])\n            # Check for continuous: at least one value is a non-integer float\n            continuous_flag = any(\n                isinstance(v, float) and not np.isclose(v, int(v))\n                for v in flat\n            )\n        return {\n            'tuple': tuple_flag,\n            'multidim': multidim_flag,\n            'dim': dim,\n            'n_per_dim': n_per_dim,\n            'ids_per_dim': ids_per_dim,\n            'continuous': continuous_flag\n        }\n\n    a = analyze(actions)\n    o = analyze(observations)\n    return {\n        'tuple_actions': a['tuple'],\n        'tuple_observations': o['tuple'],\n        'multidim_actions': a['multidim'],\n        'multidim_observations': o['multidim'],\n        'continuous_actions': a['continuous'],\n        'continuous_observations': o['continuous'],\n        'n_actions_per_dim': a['n_per_dim'],\n        'n_obs_per_dim': o['n_per_dim'],\n        'action_dim': a['dim'],\n        'obs_dim': o['dim'],\n        'action_ids': a['ids_per_dim'],\n        'obs_ids': o['ids_per_dim'],\n    }\n\n# Example usage:\nif __name__ == \"__main__\":\n    actions = [(0, 1), (1, 0), (1, 1)]\n    observations = [10.0, 11.5, 12.0]\n    stats = env_stats(actions, observations)\n    import pprint\n    pprint.pprint(stats)\n    # Expected output:\n    # {\n    #   'tuple_actions': True,\n    #   'tuple_observations': False,\n    #   'multidim_actions': True,\n    #   'multidim_observations': False,\n    #   'continuous_actions': False,\n    #   'continuous_observations': True,\n    #   'n_actions_per_dim': [2, 2],\n    #   'action_dim': 2,\n    #   'n_obs_per_dim': [3],\n    #   'obs_dim': 1,\n    #   'action_ids': [[0, 1], [0, 1]],\n    #   'obs_ids': [[10.0, 11.5, 12.0]]\n    # }\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    # --- Regression Tree Implementation ---\n    class TreeNode:\n        def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n            self.feature = feature      # int or None\n            self.threshold = threshold  # float or None\n            self.left = left            # TreeNode or None\n            self.right = right          # TreeNode or None\n            self.value = value          # float or None\n\n        def is_leaf(self):\n            return self.value is not None\n\n    class RegressionTree:\n        def __init__(self, max_depth=3, min_samples_split=2):\n            self.max_depth = max_depth\n            self.min_samples_split = min_samples_split\n            self.root = None\n\n        def fit(self, X, y):\n            self.root = self._build(X, y, depth=0)\n\n        def _build(self, X, y, depth):\n            n_samples, n_features = X.shape\n            if depth >= self.max_depth or n_samples < self.min_samples_split or np.all(y == y[0]):\n                return TreeNode(value=np.mean(y))\n            # Find best split\n            best_feat, best_thresh, best_loss, best_left_idx, best_right_idx = None, None, np.inf, None, None\n            for feat in range(n_features):\n                X_col = X[:, feat]\n                # Try unique split points between sorted values\n                sorted_idx = np.argsort(X_col)\n                X_col_sorted = X_col[sorted_idx]\n                y_sorted = y[sorted_idx]\n                for i in range(1, n_samples):\n                    if X_col_sorted[i] == X_col_sorted[i-1]:\n                        continue\n                    thresh = (X_col_sorted[i] + X_col_sorted[i-1]) / 2\n                    left_mask = X_col <= thresh\n                    right_mask = X_col > thresh\n                    if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                        continue\n                    y_left = y[left_mask]\n                    y_right = y[right_mask]\n                    loss = (np.var(y_left) * len(y_left) + np.var(y_right) * len(y_right))\n                    if loss < best_loss:\n                        best_feat = feat\n                        best_thresh = thresh\n                        best_loss = loss\n                        best_left_idx = left_mask\n                        best_right_idx = right_mask\n            if best_feat is None:\n                return TreeNode(value=np.mean(y))\n            # If no improvement, make leaf\n            parent_var = np.var(y) * len(y)\n            if best_loss >= parent_var - 1e-10:\n                return TreeNode(value=np.mean(y))\n            left = self._build(X[best_left_idx], y[best_left_idx], depth+1)\n            right = self._build(X[best_right_idx], y[best_right_idx], depth+1)\n            return TreeNode(feature=best_feat, threshold=best_thresh, left=left, right=right)\n\n        def _predict_row(self, x, node):\n            while not node.is_leaf():\n                if x[node.feature] <= node.threshold:\n                    node = node.left\n                else:\n                    node = node.right\n            return node.value\n\n        def predict(self, X):\n            return np.array([self._predict_row(x, self.root) for x in X])\n\n    # --- GBDT Main Loop ---\n    n_train = X_train.shape[0]\n    y_pred = np.full(n_train, np.mean(y_train))\n    trees = []\n    for est in range(n_estimators):\n        # Compute residuals (negative gradient of squared error)\n        residuals = y_train - y_pred\n        # Fit regression tree to residuals\n        tree = RegressionTree(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n        update = tree.predict(X_train)\n        y_pred += learning_rate * update\n        trees.append(tree)\n\n    # --- Prediction on X_test ---\n    y_test_pred = np.full(X_test.shape[0], np.mean(y_train))\n    for tree in trees:\n        y_test_pred += learning_rate * tree.predict(X_test)\n\n    # Round to 4 decimals and convert to list\n    return [round(float(x), 4) for x in y_test_pred]\n```\n"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the PDF values of a multivariate Gaussian distribution for given data points.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Data points, shape (n_samples, n_features) or (n_samples,) or (n_features,)\n    mean : np.ndarray\n        Mean vector of the distribution, shape (n_features,)\n    cov : np.ndarray\n        Covariance matrix, shape (n_features, n_features), must be positive-definite\n\n    Returns\n    -------\n    list\n        List of PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    X = np.asarray(X)\n    mean = np.asarray(mean)\n    cov = np.asarray(cov)\n\n    # Ensure X is 2D: (n_samples, n_features)\n    if X.ndim == 1:\n        if mean.shape == X.shape:\n            X = X.reshape(1, -1)\n        else:\n            X = X.reshape(-1, 1)\n\n    n_samples, n_features = X.shape\n\n    # Precompute constants\n    try:\n        cov_det = np.linalg.det(cov)\n        cov_inv = np.linalg.inv(cov)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Covariance matrix must be positive-definite and invertible.\")\n\n    if cov_det <= 0:\n        raise ValueError(\"Covariance matrix must be positive-definite (determinant > 0).\")\n\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** n_features * cov_det)\n\n    # Compute exponent for each sample\n    diffs = X - mean  # shape: (n_samples, n_features)\n    exponents = -0.5 * np.einsum('ij,jk,ik->i', diffs, cov_inv, diffs)\n\n    pdfs = norm_const * np.exp(exponents)\n\n    # Round to 4 decimal places and return as list\n    return [round(float(val), 4) for val in pdfs]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 2D example\n    X = np.array([[0, 0], [1, 1], [2, 2]])\n    mean = np.array([0, 0])\n    cov = np.array([[1, 0.5], [0.5, 1]])\n    print(multivariate_gaussian_pdf(X, mean, cov))  # [0.1838, 0.0710, 0.0066]\n\n    # 1D example\n    X1 = np.array([0, 1, 2])\n    mean1 = np.array([0])\n    cov1 = np.array([[1]])\n    print(multivariate_gaussian_pdf(X1, mean1, cov1))  # [0.3989, 0.2419, 0.0539]\n```"}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # 1. Add intercept if needed\n    def add_intercept(A):\n        return np.hstack([np.ones((A.shape[0], 1)), A])\n\n    if fit_intercept:\n        if X.ndim == 1:\n            X = X.reshape(-1, 1)\n        if X_new.ndim == 1:\n            X_new = X_new.reshape(-1, 1)\n        X = add_intercept(X)\n        X_new = add_intercept(X_new)\n\n    N, M = X.shape\n\n    # 2. Handle mu\n    if np.isscalar(mu):\n        mu_vec = np.full(M, mu, dtype=float)\n    else:\n        mu = np.asarray(mu, dtype=float)\n        if mu.ndim == 0:\n            mu_vec = np.full(M, mu.item(), dtype=float)\n        elif mu.shape == (M,):\n            mu_vec = mu\n        else:\n            raise ValueError(\"mu must be a scalar or a vector of length matching the number of features (with intercept if fitted)\")\n\n    # 3. Handle V\n    if V is None:\n        V_mat = np.eye(M)\n    elif np.isscalar(V):\n        V_mat = np.eye(M) * float(V)\n    else:\n        V = np.asarray(V, dtype=float)\n        if V.ndim == 1:\n            if V.shape[0] != M:\n                raise ValueError(\"V diagonal length does not match number of features\")\n            V_mat = np.diag(V)\n        elif V.shape == (M, M):\n            V_mat = V\n        else:\n            raise ValueError(\"V must be a scalar, a vector of length M, or a (M,M) matrix\")\n\n    # 4. Compute V^{-1}\n    try:\n        V_inv = np.linalg.inv(V_mat)\n    except np.linalg.LinAlgError:\n        raise ValueError(\"Prior covariance V is not invertible\")\n\n    # 5. Compute posterior covariance and mean\n    XT_X = X.T @ X\n    Sigma_p_inv = V_inv + XT_X\n    try:\n        Sigma_p = np.linalg.inv(Sigma_p_inv)\n    except np.linalg.LinAlgError:\n        # Use pseudo-inverse as fallback\n        Sigma_p = np.linalg.pinv(Sigma_p_inv)\n\n    XT_y = X.T @ y\n    mu_p = Sigma_p @ (V_inv @ mu_vec + XT_y)\n\n    # 6. Predictive mean\n    y_pred = X_new @ mu_p\n\n    # 7. Round and return as list\n    return [round(float(val), 4) for val in y_pred]\n```\n"}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE) between two lists.\"\"\"\n    # Validation: Check equal length\n    if len(actual) != len(predicted):\n        return -1\n    # Validation: Check all elements are non-negative numbers (int or float)\n    for a, p in zip(actual, predicted):\n        if (not isinstance(a, (int, float))) or (not isinstance(p, (int, float))):\n            return -1\n        if a < 0 or p < 0:\n            return -1\n    # Convert to numpy arrays for vectorized operations\n    actual_arr = np.array(actual, dtype=np.float64)\n    predicted_arr = np.array(predicted, dtype=np.float64)\n    # Compute log(1 + x) for both arrays\n    log_actual = np.log1p(actual_arr)\n    log_predicted = np.log1p(predicted_arr)\n    # Compute squared differences\n    squared_diff = (log_predicted - log_actual) ** 2\n    # Mean and sqrt\n    mean_squared_log_error = np.mean(squared_diff)\n    rmsle = np.sqrt(mean_squared_log_error)\n    # Round to 4 decimal places\n    return round(rmsle, 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Valid example\n    actual = [3, 5, 2.5, 7]\n    predicted = [2.5, 5, 4, 8]\n    print(root_mean_squared_log_error(actual, predicted))  # Output: 0.1202\n\n    # Invalid example (different lengths)\n    print(root_mean_squared_log_error([1, 2], [1]))  # Output: -1\n\n    # Invalid example (negative value)\n    print(root_mean_squared_log_error([1, -2], [1, 2]))  # Output: -1\n\n    # Invalid example (non-numeric)\n    print(root_mean_squared_log_error([1, \"a\"], [1, 2]))  # Output: -1\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n\n    n = np.arange(window_len)\n    # For periodic, n is 0..window_len-1, but N is window_len+1\n    # For symmetric, n is 0..window_len-1, N is window_len\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (N - 1))\n\n    # For periodic, drop the last sample (already handled by n)\n    # For symmetric, use as is\n\n    # Round to 4 decimal places\n    window = np.round(window, 4)\n    return window.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(\"Symmetric, N=8:\", hann(8, symmetric=True))\n    print(\"Periodic, N=8:\", hann(8, symmetric=False))\n    print(\"N=1:\", hann(1))\n    print(\"N=0:\", hann(0))\n    print(\"N=-5:\", hann(-5))\n```\n"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # 2D convolutional kernel: (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        # All other cases: use first two dimensions directly\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)\n\n# Example usage and test cases:\nif __name__ == \"__main__\":\n    # 4D conv kernel: (out_channels, in_channels, kernel_height, kernel_width)\n    print(glorot_fan((64, 3, 7, 7)))      # (3*7*7, 64*7*7) => (147.0, 3136.0)\n    print(glorot_fan([32, 16, 3, 3]))     # (16*3*3, 32*3*3) => (144.0, 288.0)\n    # Dense layer: (input_dim, output_dim)\n    print(glorot_fan((128, 256)))         # (128.0, 256.0)\n    # Embedding matrix: (num_embeddings, embedding_dim)\n    print(glorot_fan([10000, 300]))       # (10000.0, 300.0)\n    # Higher-dimensional tensor (not 4D): use first two dims\n    print(glorot_fan((10, 20, 5, 5, 2)))  # (10.0, 20.0)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert inputs to numpy arrays of float type\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = X.shape[0]\n\n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * m\n\n    # Initial prediction: mean of y\n    y_pred = np.full(m, np.mean(y), dtype=float)\n\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n\n        # Fit OLS linear regression (with intercept) to predict residuals from X\n        # Add intercept column\n        X_aug = np.hstack([np.ones((m, 1)), X])  # shape (m, d+1)\n        # Solve for coefficients: beta = (X^T X)^(-1) X^T y\n        # Use lstsq for numerical stability\n        beta, *_ = np.linalg.lstsq(X_aug, residuals, rcond=None)  # shape (d+1,)\n\n        # Weak learner prediction on X\n        h = X_aug @ beta  # shape (m,)\n\n        # Update overall prediction\n        y_pred += learning_rate * h\n\n    # Round to 4 decimals and convert to list\n    return [round(val, 4) for val in y_pred]\n```\n"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check for valid order\n    if order not in (0, 1, 2):\n        return -1\n\n    # Determine if input is scalar\n    is_scalar = np.isscalar(x)\n    # Convert input to ndarray for unified processing\n    arr = np.array(x, dtype=np.float64) if not is_scalar else float(x)\n\n    # Compute sigmoid\n    def _sigmoid(z):\n        # Use np.clip for numerical stability\n        return 1.0 / (1.0 + np.exp(-z))\n\n    if is_scalar:\n        s = _sigmoid(arr)\n        if order == 0:\n            result = s\n        elif order == 1:\n            result = s * (1 - s)\n        else:  # order == 2\n            result = s * (1 - s) * (1 - 2 * s)\n        return round(result, 4)\n    else:\n        s = _sigmoid(arr)\n        if order == 0:\n            result = s\n        elif order == 1:\n            result = s * (1 - s)\n        else:  # order == 2\n            result = s * (1 - s) * (1 - 2 * s)\n        # Round to 4 decimals and return as list\n        return np.round(result, 4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Scalar\n    print(sigmoid(0))           # 0.5\n    print(sigmoid(0, 1))        # 0.25\n    print(sigmoid(0, 2))        # 0.0\n    print(sigmoid(0, 3))        # -1\n\n    # List\n    print(sigmoid([0, 1, -1]))          # [0.5, 0.7311, 0.2689]\n    print(sigmoid([0, 1, -1], 1))       # [0.25, 0.1966, 0.1966]\n    print(sigmoid([0, 1, -1], 2))       # [0.0, -0.0196, 0.0196]\n\n    # Numpy array\n    arr = np.array([[0, 2], [-2, 1]])\n    print(sigmoid(arr))                 # [[0.5, 0.8808], [0.1192, 0.7311]]\n    print(sigmoid(arr, 1))              # [[0.25, 0.10499], [0.10499, 0.1966]]\n    print(sigmoid(arr, 2))              # [[0.0, -0.0921], [0.0921, -0.0196]]\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a numpy array of integers\n    y_arr = np.asarray(y)\n    if y_arr.ndim != 1:\n        raise ValueError(\"Input y must be 1-D.\")\n    if y_arr.size == 0:\n        # Empty input: return empty list\n        return []\n    if np.any(y_arr < 0):\n        raise ValueError(\"Class labels must be non-negative integers.\")\n\n    max_label = int(np.max(y_arr))\n    required_classes = max_label + 1\n\n    if num_classes is None:\n        num_classes = required_classes\n    elif num_classes < required_classes:\n        return -1\n\n    # Create one-hot encoding\n    one_hot = np.zeros((y_arr.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y_arr.shape[0]), y_arr] = 1\n    return one_hot.tolist()\n\n# --- Example test cases ---\nif __name__ == \"__main__\":\n    # Basic test\n    print(to_categorical([0, 2, 1, 3]))  # [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]]\n    # With num_classes\n    print(to_categorical([1, 0, 2], num_classes=4))  # [[0,1,0,0],[1,0,0,0],[0,0,1,0]]\n    # num_classes too small\n    print(to_categorical([0, 1, 2], num_classes=2))  # -1\n    # Empty input\n    print(to_categorical([], num_classes=3))  # []\n    # Numpy array input\n    print(to_categorical(np.array([2, 0, 1])))  # [[0,0,1],[1,0,0],[0,1,0]]\n    # Single element\n    print(to_categorical([0]))  # [[1]]\n    # All zeros\n    print(to_categorical([0, 0, 0], num_classes=1))  # [[1],[1],[1]]\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\nfrom collections import defaultdict\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    if not 0 < min_sup <= 1:\n        raise ValueError(\"min_sup must be in (0, 1].\")\n    if not transactions:\n        return []\n\n    num_transactions = len(transactions)\n    min_count = min_sup * num_transactions\n\n    # Convert transactions to list of sets for fast lookup\n    transaction_sets = [set(t) for t in transactions]\n\n    # 1. Find frequent 1-itemsets\n    item_counts = defaultdict(int)\n    for t in transaction_sets:\n        for item in t:\n            item_counts[item] += 1\n\n    # Only keep items meeting min_sup\n    freq_itemsets = []\n    L1 = []\n    for item in item_counts:\n        if item_counts[item] >= min_count:\n            L1.append( (item,) )\n    L1.sort()  # lex order\n    freq_itemsets.extend(L1)\n\n    # Prepare for k >= 2\n    k = 2\n    Lk_minus_1 = [tuple(sorted(itemset)) for itemset in L1]  # list of tuples\n    Lk_minus_1_set = set(Lk_minus_1)\n\n    while Lk_minus_1:\n        # 2. Candidate generation: self-join Lk_minus_1\n        candidates = set()\n        Lk_minus_1_sorted = sorted(Lk_minus_1)\n        n = len(Lk_minus_1_sorted)\n        for i in range(n):\n            for j in range(i+1, n):\n                l1 = Lk_minus_1_sorted[i]\n                l2 = Lk_minus_1_sorted[j]\n                # Join if first k-2 items are the same\n                if l1[:-1] == l2[:-1]:\n                    candidate = tuple(sorted(set(l1) | set(l2)))\n                    if len(candidate) == k:\n                        # Prune: all (k-1)-subsets must be frequent\n                        all_subsets_frequent = True\n                        for subset in itertools.combinations(candidate, k-1):\n                            if tuple(sorted(subset)) not in Lk_minus_1_set:\n                                all_subsets_frequent = False\n                                break\n                        if all_subsets_frequent:\n                            candidates.add(candidate)\n                else:\n                    break  # because Lk_minus_1_sorted is sorted\n\n        # 3. Count support for candidates\n        candidate_counts = defaultdict(int)\n        for t in transaction_sets:\n            for candidate in candidates:\n                if set(candidate).issubset(t):\n                    candidate_counts[candidate] += 1\n\n        # 4. Keep only those meeting min_sup\n        Lk = []\n        for candidate, count in candidate_counts.items():\n            if count >= min_count:\n                Lk.append(tuple(sorted(candidate)))\n        Lk.sort()  # lex order\n\n        freq_itemsets.extend(Lk)\n        Lk_minus_1 = Lk\n        Lk_minus_1_set = set(Lk)\n\n        k += 1\n\n    # Sort by length, then lex\n    freq_itemsets.sort(key=lambda x: (len(x), x))\n    return freq_itemsets\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example: transactions with strings\n    transactions = [\n        ['milk', 'bread', 'eggs'],\n        ['milk', 'bread'],\n        ['milk', 'eggs'],\n        ['bread', 'eggs'],\n        ['milk', 'bread', 'eggs'],\n        ['bread'],\n    ]\n    min_sup = 0.5\n    result = apriori_frequent_itemsets(transactions, min_sup)\n    for itemset in result:\n        print(itemset)\n    # Output: frequent itemsets of support >= 0.5\n```"}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    arr = np.array(predictions)  # shape: (n_estimators, n_samples, n_classes)\n    # Average over estimators (axis=0)\n    avg_probs = np.mean(arr, axis=0)  # shape: (n_samples, n_classes)\n    # Round to 4 decimal places\n    avg_probs_rounded = np.round(avg_probs, 4)\n    # Convert to python list\n    avg_probs_list = avg_probs_rounded.tolist()\n    # For each sample, get the index of the maximal probability (ties broken by smallest index)\n    pred_labels = [int(np.argmax(probs)) for probs in avg_probs_list]\n    return avg_probs_list, pred_labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 2 estimators, 3 samples, 4 classes\n    predictions = [\n        [  # Estimator 1\n            [0.1, 0.2, 0.3, 0.4],\n            [0.25, 0.25, 0.25, 0.25],\n            [0.0, 0.0, 1.0, 0.0]\n        ],\n        [  # Estimator 2\n            [0.2, 0.2, 0.2, 0.4],\n            [0.1, 0.2, 0.3, 0.4],\n            [0.0, 0.0, 0.0, 1.0]\n        ]\n    ]\n    avg_probs, pred_labels = aggregate_predictions(predictions)\n    print(\"Averaged probabilities:\")\n    for row in avg_probs:\n        print(row)\n    print(\"Predicted class labels:\", pred_labels)\n```\n**Sample Output:**\n```\nAveraged probabilities:\n[0.15, 0.2, 0.25, 0.4]\n[0.18, 0.23, 0.28, 0.33]\n[0.0, 0.0, 0.5, 0.5]\nPredicted class labels: [3, 3, 2]\n```\n*(Note: For the last sample, classes 2 and 3 are tied at 0.5, so class 2 is chosen.)*"}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Input validation: X\n    if not isinstance(X, list) or len(X) == 0:\n        return -1\n    if not all(isinstance(row, list) and len(row) == len(X[0]) for row in X):\n        return -1\n    N = len(X)\n    C = len(X[0])\n    if C == 0:\n        return -1\n\n    # Input validation: Y\n    if Y is None:\n        Y = X\n    else:\n        if not isinstance(Y, list) or len(Y) == 0:\n            return -1\n        if not all(isinstance(row, list) and len(row) == len(Y[0]) for row in Y):\n            return -1\n        M = len(Y)\n        C2 = len(Y[0])\n        if C2 != C:\n            return -1\n    M = len(Y)\n\n    # Input validation: sigma\n    if sigma is None:\n        sigma_arr = np.full(C, np.sqrt(C/2))\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_arr = np.full(C, float(sigma))\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C:\n            return -1\n        try:\n            sigma_arr = np.array(sigma, dtype=float)\n        except Exception:\n            return -1\n        if np.any(sigma_arr <= 0):\n            return -1\n    else:\n        return -1\n\n    # Convert X and Y to numpy arrays\n    try:\n        X_arr = np.array(X, dtype=float)\n        Y_arr = np.array(Y, dtype=float)\n    except Exception:\n        return -1\n\n    # Compute the kernel matrix\n    # For each pair (i, j): sum_k ((X[i,k] - Y[j,k])/sigma_k)^2\n    # Efficient vectorized computation:\n    # (X[:, None, :] - Y[None, :, :]) shape: (N, M, C)\n    # Divide by sigma_arr: (N, M, C) / (C,) => (N, M, C)\n    diff = (X_arr[:, None, :] - Y_arr[None, :, :]) / sigma_arr\n    sq_dist = np.sum(diff ** 2, axis=2)  # shape (N, M)\n    K = np.exp(-0.5 * sq_dist)\n\n    # Round to 4 decimal places and convert to nested list\n    K_rounded = np.round(K, 4).tolist()\n    return K_rounded\n```\n"}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples, n_features = X.shape\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probs = counts[counts > 0] / len(labels)\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels):\n        if len(labels) == 0:\n            return None\n        counter = Counter(labels)\n        max_count = max(counter.values())\n        candidates = [lbl for lbl, cnt in counter.items() if cnt == max_count]\n        return min(candidates)\n\n    # Compute parent entropy\n    parent_entropy = entropy(y)\n    if parent_entropy == 0.0:\n        # All labels are the same\n        maj = majority_label(y)\n        return (-1, None, maj, maj)\n\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = None\n    best_left_majority = None\n    best_right_majority = None\n\n    for j in range(n_features):\n        feature_values = X[:, j]\n        # Sort feature values and corresponding labels\n        sorted_idx = np.argsort(feature_values)\n        sorted_values = feature_values[sorted_idx]\n        sorted_labels = y[sorted_idx]\n\n        # Find candidate thresholds: midpoints between successive distinct values\n        thresholds = []\n        for i in range(1, n_samples):\n            if sorted_values[i] != sorted_values[i-1]:\n                thr = (sorted_values[i] + sorted_values[i-1]) / 2.0\n                thresholds.append(thr)\n        # Remove duplicates (shouldn't be any, but just in case)\n        thresholds = np.unique(thresholds)\n\n        for thr in thresholds:\n            left_mask = feature_values <= thr\n            right_mask = ~left_mask\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            n_left = len(y_left)\n            n_right = len(y_right)\n            if n_left == 0 or n_right == 0:\n                continue  # skip degenerate splits\n\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n            p_left = n_left / n_samples\n            p_right = n_right / n_samples\n            gain = parent_entropy - (p_left * H_left + p_right * H_right)\n\n            # Tie-breaking: higher gain, then smaller feature index, then smaller threshold\n            update = False\n            if gain > best_gain:\n                update = True\n            elif np.isclose(gain, best_gain):\n                if j < best_feature:\n                    update = True\n                elif j == best_feature:\n                    if thr < best_threshold:\n                        update = True\n            if update:\n                best_gain = gain\n                best_feature = j\n                best_threshold = thr\n                best_left_majority = majority_label(y_left)\n                best_right_majority = majority_label(y_right)\n\n    if best_gain <= 0 or best_feature == -1:\n        maj = majority_label(y)\n        return (-1, None, maj, maj)\n    else:\n        return (best_feature, round(best_threshold, 4), best_left_majority, best_right_majority)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Simple test: perfectly separable\n    X = [[1.0], [2.0], [3.0], [10.0], [12.0], [13.0]]\n    y = [0, 0, 0, 1, 1, 1]\n    print(decision_stump(X, y))  # Should split at feature 0, threshold between 3.0 and 10.0\n\n    # All same label\n    X2 = [[1.0], [2.0], [3.0]]\n    y2 = [1, 1, 1]\n    print(decision_stump(X2, y2))  # Should return (-1, None, 1, 1)\n\n    # Tie in majority label\n    X3 = [[1.0], [2.0], [3.0], [4.0]]\n    y3 = [0, 1, 0, 1]\n    print(decision_stump(X3, y3))  # Should split at feature 0, threshold 1.5, left_majority 0, right_majority 0 or 1 (check tie-breaking)\n```"}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # ======  Write your code below this line  ======\n    # Convert X to np.ndarray if it's a list\n    X_arr = np.array(X) if not isinstance(X, np.ndarray) else X\n\n    # Prepare lists to collect indices\n    idx1 = []\n    idx2 = []\n\n    # Determine if threshold is numeric\n    is_numeric = isinstance(threshold, (int, float)) and not isinstance(threshold, bool)\n\n    # Iterate and split\n    for i, row in enumerate(X_arr):\n        value = row[feature_i]\n        if is_numeric:\n            # Numeric split: >= threshold\n            if value >= threshold:\n                idx1.append(i)\n            else:\n                idx2.append(i)\n        else:\n            # Categorical split: == threshold\n            if value == threshold:\n                idx1.append(i)\n            else:\n                idx2.append(i)\n\n    subset1 = X_arr[idx1] if idx1 else np.empty((0, X_arr.shape[1]), dtype=X_arr.dtype)\n    subset2 = X_arr[idx2] if idx2 else np.empty((0, X_arr.shape[1]), dtype=X_arr.dtype)\n\n    return [subset1.tolist(), subset2.tolist()]\n\n# ================== Example usage and test cases ==================\n\nif __name__ == \"__main__\":\n    # Numeric split example\n    X1 = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\n    feature_i1 = 0\n    threshold1 = 3\n    result1 = divide_on_feature(X1, feature_i1, threshold1)\n    print(\"Numeric split result:\")\n    print(result1)\n    # Expected: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\n    # Categorical split example\n    X2 = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\n    feature_i2 = 1\n    threshold2 = \"A\"\n    result2 = divide_on_feature(X2, feature_i2, threshold2)\n    print(\"\\nCategorical split result:\")\n    print(result2)\n    # Expected: [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n\n    # Edge case: all in first subset\n    X3 = [[5, 10], [6, 20]]\n    feature_i3 = 0\n    threshold3 = 4\n    result3 = divide_on_feature(X3, feature_i3, threshold3)\n    print(\"\\nAll in first subset:\")\n    print(result3)\n    # Expected: [[[5, 10], [6, 20]], []]\n\n    # Edge case: all in second subset\n    X4 = [[1, 2], [2, 3]]\n    feature_i4 = 1\n    threshold4 = 10\n    result4 = divide_on_feature(X4, feature_i4, threshold4)\n    print(\"\\nAll in second subset:\")\n    print(result4)\n    # Expected: [[], [[1, 2], [2, 3]]]\n\n    # Edge case: empty input\n    X5 = []\n    feature_i5 = 0\n    threshold5 = 1\n    result5 = divide_on_feature(X5, feature_i5, threshold5)\n    print(\"\\nEmpty input:\")\n    print(result5)\n    # Expected: [[], []]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Input validation\n    # Q and Q_next must be numpy arrays of shape (batch, n_actions)\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if Q.ndim != 2:\n        return -1\n    batch_size, n_actions = Q.shape\n\n    # Check lengths of actions, rewards, dones\n    if not (len(actions) == len(rewards) == len(dones) == batch_size):\n        return -1\n\n    # Check gamma\n    if not (isinstance(gamma, float) or isinstance(gamma, int)):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Check that all actions are valid indices\n    if not all(isinstance(a, int) and 0 <= a < n_actions for a in actions):\n        return -1\n\n    # Copy Q to avoid modifying input\n    y = Q.copy()\n\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i, actions[i]] = target\n\n    # Round to 4 decimals and convert to nested list\n    y_rounded = np.round(y, 4).tolist()\n    return y_rounded\n```\n"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a list for uniformity\n    if isinstance(labels, np.ndarray):\n        labels_list = labels.tolist()\n    else:\n        labels_list = list(labels)\n\n    # Check for empty input\n    if len(labels_list) == 0:\n        if num_classes is None:\n            return []\n        else:\n            return []\n\n    # Check all labels are integers and non-negative\n    for label in labels_list:\n        if not isinstance(label, (int, np.integer)) or label < 0:\n            return -1\n\n    max_label = max(labels_list)\n    inferred_classes = max_label + 1\n\n    if num_classes is None:\n        num_classes = inferred_classes\n    elif num_classes < inferred_classes:\n        return -1\n\n    # Build one-hot encoding\n    result = []\n    for label in labels_list:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(to_categorical([0, 2, 1, 3]))  # [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]]\n    print(to_categorical(np.array([1, 0, 2]), num_classes=4))  # [[0,1,0,0],[1,0,0,0],[0,0,1,0]]\n    print(to_categorical([0, 1, 2], num_classes=2))  # -1\n    print(to_categorical([0, -1, 2]))  # -1\n    print(to_categorical([], num_classes=3))  # []\n    print(to_categorical([]))  # []\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    x = np.asarray(x, dtype=float)\n    y = np.asarray(y, dtype=float)\n    n = len(x)\n    if n_estimators <= 0 or n == 0:\n        mean_y = np.mean(y) if n > 0 else 0.0\n        return np.round([mean_y]*n, 4).tolist()\n\n    # Initial prediction: mean of y\n    y_pred = np.full(n, np.mean(y), dtype=float)\n\n    for est in range(n_estimators):\n        residuals = y - y_pred\n\n        # Early stopping if all residuals are (close to) zero\n        if np.allclose(residuals, 0):\n            break\n\n        # Find all possible split thresholds (unique x except the greatest)\n        unique_x = np.unique(x)\n        if unique_x.size == 1:\n            # All x identical, no split possible\n            best_split = None\n        else:\n            thresholds = unique_x[:-1]  # exclude the greatest\n            best_sse = None\n            best_split = None\n            best_vL = None\n            best_vR = None\n\n            for t in thresholds:\n                left_mask = x <= t\n                right_mask = x > t\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue  # skip invalid splits\n\n                r_left = residuals[left_mask]\n                r_right = residuals[right_mask]\n                vL = np.mean(r_left)\n                vR = np.mean(r_right)\n                sse_left = np.sum((r_left - vL) ** 2)\n                sse_right = np.sum((r_right - vR) ** 2)\n                sse = sse_left + sse_right\n\n                if (best_sse is None) or (sse < best_sse):\n                    best_sse = sse\n                    best_split = t\n                    best_vL = vL\n                    best_vR = vR\n\n        if best_split is not None:\n            # Use the best split found\n            t = best_split\n            vL = best_vL\n            vR = best_vR\n            stump_pred = np.where(x <= t, vL, vR)\n        else:\n            # No valid split: predict mean residual for all\n            v = np.mean(residuals)\n            stump_pred = np.full(n, v)\n\n        # Update predictions\n        y_pred += learning_rate * stump_pred\n\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    x = [1, 2, 3, 4, 5]\n    y = [1, 2, 1.5, 3.5, 2]\n    preds = gradient_boosting_regressor(x, y, n_estimators=3, learning_rate=0.5)\n    print(preds)\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Copy Q-table to avoid in-place modification\n    Q = [row[:] for row in q_table]\n    n_actions = len(Q[0])\n\n    if next_state is not None:\n        q_next = Q[next_state]\n        max_q = max(q_next)\n        # Find the first greedy action (ties resolved by first occurrence)\n        greedy_action = q_next.index(max_q)\n        # Build the epsilon-soft policy for next_state\n        pi = [epsilon / n_actions] * n_actions\n        pi[greedy_action] += 1 - epsilon\n        # Compute expected Q for next_state\n        expected_q = sum(pi[a] * q_next[a] for a in range(n_actions))\n        target = reward + gamma * expected_q\n    else:\n        target = reward  # Terminal state: no future expected value\n\n    # TD(0) update\n    Q[state][action] += lr * (target - Q[state][action])\n\n    # Round all entries to 4 decimals\n    Q_rounded = [[round(val, 4) for val in row] for row in Q]\n    return Q_rounded\n```\n"}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n\n    X_train_list = []\n    X_val_list = []\n    Y_train_list = []\n    Y_val_list = []\n\n    for i in range(m):\n        # x: U([(floor(i/2)+0.1)*10, (floor(i/2)+0.9)*10])\n        x_low = (np.floor(i/2) + 0.1) * 10\n        x_high = (np.floor(i/2) + 0.9) * 10\n\n        # y: U([((i mod 2)*interval+0.1)*10, ((i mod 2)*interval+0.9)*10])\n        y_base = (i % 2) * interval\n        y_low = (y_base + 0.1) * 10\n        y_high = (y_base + 0.9) * 10\n\n        # label: (i-0.5)*2\n        label = (i - 0.5) * 2\n\n        # Training samples\n        x_train = np.random.uniform(x_low, x_high, n_train)\n        y_train = np.random.uniform(y_low, y_high, n_train)\n        X_train_class = np.stack([x_train, y_train], axis=1)\n        Y_train_class = np.full(n_train, label)\n\n        # Validation samples\n        x_val = np.random.uniform(x_low, x_high, n_val)\n        y_val = np.random.uniform(y_low, y_high, n_val)\n        X_val_class = np.stack([x_val, y_val], axis=1)\n        Y_val_class = np.full(n_val, label)\n\n        X_train_list.append(X_train_class)\n        Y_train_list.append(Y_train_class)\n        X_val_list.append(X_val_class)\n        Y_val_list.append(Y_val_class)\n\n    X_train = np.vstack(X_train_list)\n    X_val = np.vstack(X_val_list)\n    Y_train = np.concatenate(Y_train_list)\n    Y_val = np.concatenate(Y_val_list)\n\n    # Round to 4 decimals\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nif __name__ == \"__main__\":\n    X_train, X_val, Y_train, Y_val = generate_data(\n        m=2, n_train=5, n_val=3, interval=1, seed=42\n    )\n    print(\"X_train:\\n\", X_train)\n    print(\"Y_train:\\n\", Y_train)\n    print(\"X_val:\\n\", X_val)\n    print(\"Y_val:\\n\", Y_val)\n```\n"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Convert inputs to np.ndarray for unified handling\n    grad = np.asarray(grad)\n    w = np.asarray(w)\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    else:\n        m_prev = np.asarray(m_prev)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    else:\n        v_prev = np.asarray(v_prev)\n\n    # Update biased first and second moment estimates\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad * grad)\n\n    # Compute bias-corrected moment estimates\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n\n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    # If input was scalar, return scalars\n    def maybe_scalar(x, ref):\n        # If ref is a scalar, return scalar, else array\n        if np.isscalar(ref):\n            return np.asscalar(np.asarray(x))\n        return x\n\n    # For compatibility with both scalars and arrays\n    if np.isscalar(w) and np.isscalar(grad):\n        # All are scalars\n        return float(w_new), float(m_new), float(v_new)\n    else:\n        return w_new, m_new, v_new\n\n# Example usage and test\nif __name__ == \"__main__\":\n    # Scalar test\n    w_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\n    print(\"w_new:\", w_new)\n    print(\"m_new:\", m_new)\n    print(\"v_new:\", v_new)\n    print(\"w_new rounded:\", round(w_new, 9))  # Should be \u2248 0.999000001\n\n    # Array test\n    w = np.array([1.0, 2.0])\n    grad = np.array([0.1, -0.2])\n    m_prev = None\n    v_prev = None\n    t = 1\n    w_new, m_new, v_new = adam_update(w, grad, m_prev, v_prev, t)\n    print(\"w_new (array):\", w_new)\n    print(\"m_new (array):\", m_new)\n    print(\"v_new (array):\", v_new)\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    if not rewards or not rewards[0]:\n        return []\n\n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n\n    # Initialize value estimates and counters\n    value_estimates = [ev_prior for _ in range(num_arms)]\n    counts = [0 for _ in range(num_arms)]\n\n    for t in range(num_steps):\n        # Decide whether to explore or exploit\n        if np.random.rand() < epsilon:\n            # Explore: choose random arm\n            arm = np.random.randint(num_arms)\n        else:\n            # Exploit: choose arm with highest estimated value (break ties by smallest index)\n            max_value = max(value_estimates)\n            # Find all arms with max_value, pick the one with smallest index\n            arm = next(i for i, v in enumerate(value_estimates) if v == max_value)\n\n        # Get reward for chosen arm at this time-step\n        reward = rewards[t][arm]\n\n        # Update counts and value estimate for chosen arm\n        counts[arm] += 1\n        # Incremental mean update\n        value_estimates[arm] += (reward - value_estimates[arm]) / counts[arm]\n\n    # Round to 4 decimals\n    return [round(v, 4) for v in value_estimates]\n\n# Example usage:\nif __name__ == \"__main__\":\n    rewards = [\n        [1.0, 0.0, 0.0],\n        [0.0, 1.0, 0.0],\n        [0.0, 0.0, 1.0],\n        [1.0, 0.0, 0.0],\n        [0.0, 1.0, 0.0],\n        [0.0, 0.0, 1.0],\n    ]\n    result = epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42)\n    print(result)\n```"}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    n_samples = data.shape[0]\n    labels = np.full(n_samples, -1, dtype=int)  # -1 means noise/unassigned\n\n    # Precompute all pairwise distances for efficiency\n    # (n_samples, n_samples) matrix\n    # Use broadcasting for efficient computation\n    sq_dists = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    dists = np.sqrt(sq_dists)\n\n    # For each point, find its neighbors (including itself)\n    neighbors = [np.where(dists[i] <= eps)[0] for i in range(n_samples)]\n\n    visited = np.zeros(n_samples, dtype=bool)\n    cluster_id = 0\n\n    for i in range(n_samples):\n        if visited[i]:\n            continue\n        visited[i] = True\n\n        # Check if core point\n        if len(neighbors[i]) < min_samples:\n            # Not a core point, leave as noise for now\n            continue\n\n        # Start a new cluster\n        labels[i] = cluster_id\n        # Seeds: all neighbors of i (including itself)\n        seeds = set(neighbors[i])\n        seeds.discard(i)  # Already labeled\n\n        # Expand cluster\n        while seeds:\n            j = seeds.pop()\n            if not visited[j]:\n                visited[j] = True\n                if len(neighbors[j]) >= min_samples:\n                    # Core point: add its neighbors to seeds\n                    seeds.update(set(neighbors[j]))\n            if labels[j] == -1:\n                # Assign to cluster (either border or core)\n                labels[j] = cluster_id\n        cluster_id += 1\n\n    return labels.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    import matplotlib.pyplot as plt\n\n    # Two clusters and some noise\n    np.random.seed(0)\n    cluster1 = np.random.randn(50, 2) + np.array([5, 5])\n    cluster2 = np.random.randn(50, 2) + np.array([-5, -5])\n    noise = np.random.uniform(-10, 10, (10, 2))\n    data = np.vstack([cluster1, cluster2, noise])\n\n    labels = dbscan(data, eps=1.5, min_samples=5)\n    labels = np.array(labels)\n\n    plt.scatter(data[:, 0], data[:, 1], c=labels, cmap='tab10', s=40, edgecolor='k')\n    plt.title(\"DBSCAN clustering from scratch\")\n    plt.show()\n```"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int).ravel()\n    if y.ndim != 1:\n        raise ValueError(\"Input y must be a 1-D array-like of integer labels.\")\n    if np.any(y < 0):\n        raise ValueError(\"All labels must be non-negative integers.\")\n\n    if num_classes is None:\n        if y.size == 0:\n            num_classes = 0\n        else:\n            num_classes = int(np.max(y)) + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError(\"num_classes must be a positive integer.\")\n        if np.any(y >= num_classes):\n            raise ValueError(\"All labels must be less than num_classes.\")\n\n    out = np.zeros((y.size, num_classes), dtype=int)\n    if y.size > 0:\n        out[np.arange(y.size), y] = 1\n    return out\n\n# Example usage and test cases:\nif __name__ == \"__main__\":\n    # Basic test\n    print(to_categorical([0, 2, 1, 3]))\n    # With explicit num_classes\n    print(to_categorical([1, 0, 2], num_classes=4))\n    # Edge case: empty input\n    print(to_categorical([], num_classes=3))\n    # Edge case: single label\n    print(to_categorical([2]))\n    # Error: label out of range\n    try:\n        print(to_categorical([0, 4], num_classes=4))\n    except ValueError as e:\n        print(\"Caught error:\", e)\n    # Error: negative label\n    try:\n        print(to_categorical([0, -1, 2]))\n    except ValueError as e:\n        print(\"Caught error:\", e)\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) == 0:\n        return []\n\n    X_train = np.asarray(X_train, dtype=float)\n    y_train = np.asarray(y_train, dtype=float)\n\n    class Node:\n        __slots__ = ['is_leaf', 'value', 'split', 'left', 'right']\n        def __init__(self, is_leaf, value=None, split=None, left=None, right=None):\n            self.is_leaf = is_leaf\n            self.value = value\n            self.split = split\n            self.left = left\n            self.right = right\n\n    def build_tree(X, y, depth):\n        # Stopping criteria\n        if depth == max_depth or len(X) < 2:\n            return Node(is_leaf=True, value=float(np.mean(y)))\n        # Sort by X for efficient split search\n        sort_idx = np.argsort(X)\n        X_sorted = X[sort_idx]\n        y_sorted = y[sort_idx]\n        # Find all possible split points (between unique X values)\n        unique_X = np.unique(X_sorted)\n        if len(unique_X) == 1:\n            # All X are the same, cannot split further\n            return Node(is_leaf=True, value=float(np.mean(y)))\n        # Candidate splits: midpoints between consecutive unique X values\n        split_candidates = (unique_X[:-1] + unique_X[1:]) / 2\n        best_sse = np.inf\n        best_split = None\n        best_left_idx = None\n        for split in split_candidates:\n            left_mask = X_sorted <= split\n            right_mask = ~left_mask\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue  # skip invalid splits\n            y_left = y_sorted[left_mask]\n            y_right = y_sorted[right_mask]\n            mean_left = np.mean(y_left)\n            mean_right = np.mean(y_right)\n            sse_left = np.sum((y_left - mean_left) ** 2)\n            sse_right = np.sum((y_right - mean_right) ** 2)\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split\n                best_left_idx = left_mask\n        if best_split is None:\n            # No valid split found\n            return Node(is_leaf=True, value=float(np.mean(y)))\n        # Split and recurse\n        left = build_tree(X_sorted[best_left_idx], y_sorted[best_left_idx], depth + 1)\n        right = build_tree(X_sorted[~best_left_idx], y_sorted[~best_left_idx], depth + 1)\n        return Node(is_leaf=False, split=best_split, left=left, right=right)\n\n    tree = build_tree(X_train, y_train, 0)\n\n    def predict_one(x, node):\n        while not node.is_leaf:\n            if x <= node.split:\n                node = node.left\n            else:\n                node = node.right\n        return node.value\n\n    return [predict_one(float(x), tree) for x in X_test]\n```\n"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to numpy array for uniform processing\n    arr = np.array(x)\n    # Handle empty input\n    if arr.size == 0:\n        return []\n    # Ensure arr is 1D\n    arr = arr.flatten()\n    # Create diagonal matrix\n    diag_matrix = np.diag(arr)\n    # Convert to list of lists\n    return diag_matrix.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(make_diagonal([1, 2, 3]))         # [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n    print(make_diagonal((4.5, 5.5)))        # [[4.5, 0.0], [0.0, 5.5]]\n    print(make_diagonal(np.array([7])))     # [[7]]\n    print(make_diagonal([]))                # []\n    print(make_diagonal(np.array([])))      # []\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass FPTreeNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None  # Next node with the same item\n\n    def increment(self, count):\n        self.count += count\n\ndef build_fp_tree(transactions, min_sup):\n    # First pass: count item frequencies\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(transaction)\n    # Remove infrequent items\n    freq_items = {item for item, cnt in item_counter.items() if cnt >= min_sup}\n    if not freq_items:\n        return None, None\n\n    # Order frequent items by descending frequency, then lex\n    def sort_items(transaction):\n        items = [item for item in transaction if item in freq_items]\n        # Sort by (-freq, item) so that more frequent comes first, then lex\n        items.sort(key=lambda x: (-item_counter[x], x))\n        return items\n\n    # Header table: item -> [support, first_node]\n    header_table = {}\n    for item in freq_items:\n        header_table[item] = [item_counter[item], None]\n\n    # Build the tree\n    root = FPTreeNode(None, 0, None)\n    for transaction in transactions:\n        ordered_items = sort_items(transaction)\n        current_node = root\n        for item in ordered_items:\n            if item in current_node.children:\n                child = current_node.children[item]\n                child.increment(1)\n            else:\n                child = FPTreeNode(item, 1, current_node)\n                current_node.children[item] = child\n                # Link into header table\n                if header_table[item][1] is None:\n                    header_table[item][1] = child\n                else:\n                    # Follow link to last node and append\n                    node = header_table[item][1]\n                    while node.link is not None:\n                        node = node.link\n                    node.link = child\n            current_node = child\n    return root, header_table\n\ndef ascend_fp_tree(node):\n    \"\"\"Ascend from leaf to root, collecting the path (excluding the node itself).\"\"\"\n    path = []\n    while node.parent is not None and node.parent.item is not None:\n        node = node.parent\n        path.append(node.item)\n    return path[::-1]  # from root to leaf\n\ndef find_prefix_paths(base_pat, node):\n    \"\"\"Find all prefix paths ending with given base_pat node.\"\"\"\n    cond_pats = []\n    while node is not None:\n        path = ascend_fp_tree(node)\n        if path:\n            cond_pats.append((path, node.count))\n        node = node.link\n    return cond_pats\n\ndef mine_fp_tree(header_table, prefix, min_sup, results):\n    # Items in header_table are sorted by frequency ascending (for mining order)\n    items = sorted(header_table.items(), key=lambda x: (x[1][0], x[0]))\n    for item, (support, node) in items:\n        new_freq_set = prefix + [item]\n        results.append(tuple(sorted(new_freq_set)))\n        # Build conditional pattern base\n        cond_pats = find_prefix_paths(item, node)\n        # Build conditional FP-tree\n        cond_transactions = []\n        for path, count in cond_pats:\n            cond_transactions.extend([path] * count)\n        cond_tree, cond_header = build_fp_tree(cond_transactions, min_sup)\n        if cond_header is not None:\n            # Check if conditional tree is a single path\n            single_path = True\n            curr = cond_tree\n            while True:\n                if len(curr.children) > 1:\n                    single_path = False\n                    break\n                elif len(curr.children) == 0:\n                    break\n                else:\n                    # Move to the only child\n                    curr = next(iter(curr.children.values()))\n            if single_path:\n                # Get all items on the path\n                path_items = []\n                curr = cond_tree\n                while True:\n                    if len(curr.children) == 0:\n                        break\n                    curr = next(iter(curr.children.values()))\n                    path_items.append(curr.item)\n                # All non-empty combinations of path_items\n                for i in range(1, len(path_items)+1):\n                    for comb in itertools.combinations(path_items, i):\n                        results.append(tuple(sorted(new_freq_set + list(comb))))\n            else:\n                mine_fp_tree(cond_header, new_freq_set, min_sup, results)\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # Convert to list of lists for multiple passes\n    transactions = [list(t) for t in transactions]\n    # Build initial FP-tree\n    tree, header_table = build_fp_tree(transactions, min_sup)\n    if tree is None or header_table is None:\n        return []\n    results = []\n    mine_fp_tree(header_table, [], min_sup, results)\n    # Remove duplicates (can happen in single-path case)\n    results = set(tuple(sorted(t)) for t in results)\n    # Sort as required: by length, then lex\n    results = sorted(results, key=lambda x: (len(x), x))\n    return results\n\n# Example usage:\nif __name__ == \"__main__\":\n    Transactions = [\n        [\"A\",\"B\",\"D\",\"E\"],\n        [\"B\",\"C\",\"E\"],\n        [\"A\",\"B\",\"D\",\"E\"],\n        [\"A\",\"B\",\"C\",\"E\"],\n        [\"A\",\"B\",\"C\",\"D\",\"E\"],\n        [\"B\",\"C\",\"D\"]\n    ]\n    min_sup = 3\n    result = fp_growth(Transactions, min_sup)\n    for itemset in result:\n        print(itemset)\n```"}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.asarray(X, dtype=float)\n    n_samples, n_features = X.shape\n\n    # Generate all exponent tuples (k0, ..., k_{m-1}) with sum <= degree\n    # For each total degree d' in 0..degree, generate all combinations with replacement\n    # and count exponents for each feature\n    exponent_tuples = []\n    for total_deg in range(degree + 1):\n        # Each combination is a tuple of feature indices, length=total_deg\n        # For total_deg=0, this yields [()] (the constant term)\n        for comb in combinations_with_replacement(range(n_features), total_deg):\n            # Count the number of times each feature index appears in comb\n            exponents = [0] * n_features\n            for idx in comb:\n                exponents[idx] += 1\n            exponent_tuples.append(tuple(exponents))\n\n    # For each sample, compute all monomials\n    result = []\n    for row in X:\n        features = np.array(row)\n        monomials = []\n        for exponents in exponent_tuples:\n            # Compute product of features**exponents\n            val = 1.0\n            for f, exp in zip(features, exponents):\n                if exp == 0:\n                    continue\n                val *= f ** exp\n            monomials.append(val)\n        result.append(monomials)\n\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 2 samples, 2 features, degree=2\n    X = [[2, 3], [4, 5]]\n    degree = 2\n    out = polynomial_features(X, degree)\n    print(out)\n    # Output should be:\n    # [\n    #   [1.0, 2.0, 3.0, 4.0, 6.0, 9.0],  # [1, x0, x1, x0^2, x0*x1, x1^2] for [2,3]\n    #   [1.0, 4.0, 5.0, 16.0, 20.0, 25.0]\n    # ]\n```"}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Convert input to numpy array for easy computation\n    arr = np.asarray(y)\n    # Flatten in case of accidental 2D input\n    arr = arr.ravel()\n    # Check for empty input\n    if arr.size == 0:\n        return -1\n    # Compute mean\n    mean = np.mean(arr)\n    # Compute squared differences and mean\n    mse_val = np.mean((arr - mean) ** 2)\n    # Round to 4 decimal places\n    return round(float(mse_val), 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(mse([1, 2, 3, 4, 5]))         # 2.0\n    print(mse(np.array([1.0, 2.0, 3.0]))) # 0.6667\n    print(mse([]))                        # -1\n    print(mse([10]))                      # 0.0\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy array, flatten to 1D\n    arr = np.array(x).flatten()\n    # Compute affine activation\n    y = slope * arr + intercept\n    # First derivative is slope, same shape as arr\n    grad = np.full_like(arr, slope, dtype=np.float64)\n    # Second derivative is zero, same shape as arr\n    grad2 = np.zeros_like(arr, dtype=np.float64)\n    # Round all to 4 decimals and convert to lists\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test with a list\n    x = [1, 2, 3.12345]\n    y, grad, grad2 = apply_affine(x, slope=2.5, intercept=-1.1)\n    print(\"y:\", y)\n    print(\"grad:\", grad)\n    print(\"grad2:\", grad2)\n    # Test with a numpy array\n    x2 = np.array([0, -1, 4.5678])\n    print(apply_affine(x2))\n    # Test with a scalar\n    print(apply_affine(7))\n```\n"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check input validity\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D numpy array.\")\n    n_samples, n_features = data.shape\n    if not (1 <= k <= n_features):\n        return -1\n\n    # 1. Standardise each feature (zero mean, unit *population* variance)\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=0)  # population std (ddof=0)\n    # Avoid division by zero: if std==0, leave as is after centering\n    std_nozero = std.copy()\n    std_nozero[std_nozero == 0] = 1.0\n    data_centered = data - mean\n    data_std = data_centered / std_nozero\n    # For features with zero variance, set to zero (already centered)\n    data_std[:, std == 0] = 0.0\n\n    # 2. Compute sample covariance matrix (Bessel's correction: n-1)\n    cov = np.dot(data_std.T, data_std) / (n_samples - 1)\n\n    # 3. Eigen-decomposition\n    eigvals, eigvecs = np.linalg.eigh(cov)  # symmetric matrix\n\n    # 4. Sort eigenvalues (descending) and eigenvectors accordingly\n    idx = np.argsort(eigvals)[::-1]\n    eigvals = eigvals[idx]\n    eigvecs = eigvecs[:, idx]\n\n    # 5. Fix sign of each eigenvector\n    for i in range(eigvecs.shape[1]):\n        vec = eigvecs[:, i]\n        max_abs_idx = np.argmax(np.abs(vec))\n        if vec[max_abs_idx] < 0:\n            eigvecs[:, i] = -vec\n\n    # 6. Project data onto first k eigenvectors\n    principal_components = eigvecs[:, :k]  # shape: (n_features, k)\n    projected = np.dot(data_std, principal_components)  # shape: (n_samples, k)\n\n    # 7. Round and convert to list\n    projected_rounded = np.round(projected, 4).tolist()\n    return projected_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    X = np.array([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9],\n                  [1, 3, 5]])\n    print(pca_transform(X, 2))\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    X_test = np.array(X_test, dtype=float)\n    n_samples, n_features = X_train.shape\n\n    # Initial prediction: mean of y_train\n    c = np.mean(y_train)\n    F_train = np.full(n_samples, c)\n\n    # Store the stumps: (feature_index, threshold, left_value, right_value)\n    stumps = []\n\n    for m in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F_train\n\n        best_feature = None\n        best_threshold = None\n        best_left_value = None\n        best_right_value = None\n        best_error = np.inf\n\n        # For each feature, find the best threshold and values\n        for feature_idx in range(n_features):\n            Xf = X_train[:, feature_idx]\n            # Get sorted unique values for possible split points\n            sorted_idx = np.argsort(Xf)\n            Xf_sorted = Xf[sorted_idx]\n            residuals_sorted = residuals[sorted_idx]\n\n            # Possible thresholds: midpoints between consecutive unique values\n            unique_vals = np.unique(Xf_sorted)\n            if len(unique_vals) == 1:\n                # Only one value, can't split\n                continue\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n\n            # For each threshold, compute left/right means and squared error\n            for thresh in thresholds:\n                left_mask = Xf <= thresh\n                right_mask = ~left_mask\n\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue  # skip degenerate splits\n\n                left_value = np.mean(residuals[left_mask])\n                right_value = np.mean(residuals[right_mask])\n\n                # Compute squared error\n                left_error = np.sum((residuals[left_mask] - left_value) ** 2)\n                right_error = np.sum((residuals[right_mask] - right_value) ** 2)\n                total_error = left_error + right_error\n\n                if total_error < best_error:\n                    best_error = total_error\n                    best_feature = feature_idx\n                    best_threshold = thresh\n                    best_left_value = left_value\n                    best_right_value = right_value\n\n        # If no split found (shouldn't happen with clean data), break\n        if best_feature is None:\n            break\n\n        # Save the stump\n        stumps.append((best_feature, best_threshold, best_left_value, best_right_value))\n\n        # Update F_train\n        mask_left = X_train[:, best_feature] <= best_threshold\n        mask_right = ~mask_left\n        F_train[mask_left] += learning_rate * best_left_value\n        F_train[mask_right] += learning_rate * best_right_value\n\n    # Prediction on X_test\n    F_test = np.full(X_test.shape[0], c)\n    for feature_idx, threshold, left_value, right_value in stumps:\n        mask_left = X_test[:, feature_idx] <= threshold\n        mask_right = ~mask_left\n        F_test[mask_left] += learning_rate * left_value\n        F_test[mask_right] += learning_rate * right_value\n\n    # Threshold at 0.5\n    y_pred = (F_test >= 0.5).astype(int)\n    return y_pred.tolist()\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    def sigmoid(x):\n        return 1.0 / (1.0 + np.exp(-x))\n\n    m = X.shape[0]  # batch size\n\n    # Positive phase: compute hidden probabilities given data\n    h0_prob = sigmoid(np.dot(X, W) + hbias)  # shape: (m, n_h)\n\n    # Start Gibbs chain at data\n    v_prob = X.copy()\n    h_prob = h0_prob.copy()\n\n    for step in range(k):\n        # Hidden probabilities given visible\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)  # (m, n_h)\n        # Visible probabilities given hidden\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)  # (m, n_v)\n\n    # After k steps, v_prob and h_prob are the negative phase samples\n    v_k_prob = v_prob  # (m, n_v)\n    h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)  # (m, n_h)\n\n    # Positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)  # (n_v, n_h)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)  # (n_v, n_h)\n\n    # Weight update\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Round to 4 decimals and convert to list of lists\n    W_new_rounded = np.round(W_new, 4).tolist()\n    return W_new_rounded\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays (if not already)\n    x_arr = np.asarray(x, dtype=float)\n    y_arr = np.asarray(y, dtype=float)\n\n    # Check if both are 1D and have the same length\n    if x_arr.shape != y_arr.shape or x_arr.ndim != 1:\n        return -1\n\n    # Compute Chebyshev distance\n    max_diff = np.max(np.abs(x_arr - y_arr))\n    return round(float(max_diff), 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    x = [1, 2, 3]\n    y = [2, 4, 6]\n    print(chebyshev(x, y))  # Output: 3.0\n\n    # Additional test cases\n    print(chebyshev([1.5, 2.5], [1.0, 4.0]))  # Output: 1.5\n    print(chebyshev([1, 2, 3], [1, 2]))       # Output: -1\n    print(chebyshev(np.array([1, 2, 3]), np.array([4, 2, 0])))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    # Clip y_pred for numerical stability\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    # Binary cross-entropy (elementwise)\n    recon_loss = - (y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    # Sum over features, then mean over batch\n    recon_loss_sum = np.sum(recon_loss, axis=1)  # shape: (batch_size,)\n    # KL divergence for each sample\n    # KL = -0.5 * sum(1 + log_var - mean^2 - exp(log_var))\n    kl = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    # Total loss per sample\n    total_loss = recon_loss_sum + kl\n    # Mean over batch\n    avg_loss = np.mean(total_loss)\n    # Round to 6 decimal places\n    return round(float(avg_loss), 6)\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X, dtype=np.float64)           # (n_samples, n_features)\n    w = np.array(w, dtype=np.float64)           # (n_features,)\n    V = np.array(V, dtype=np.float64)           # (n_features, k)\n\n    # Linear part: w0 + X @ w\n    linear_part = w0 + X @ w                    # (n_samples,)\n\n    # Interaction part\n    # (X @ V): (n_samples, k)\n    XV = X @ V                                  # (n_samples, k)\n    XV_squared = XV ** 2                        # (n_samples, k)\n\n    # (X**2) @ (V**2): (n_samples, k)\n    X_squared = X ** 2\n    V_squared = V ** 2\n    X_V_squared = X_squared @ V_squared         # (n_samples, k)\n\n    # Sum over latent factors (axis=1)\n    interaction_part = 0.5 * np.sum(XV_squared - X_V_squared, axis=1)  # (n_samples,)\n\n    # Final prediction\n    y_pred = linear_part + interaction_part\n\n    # Round to 4 decimal places and convert to list\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # 2 samples, 3 features, 2 latent factors\n    X = [\n        [1.0, 2.0, 3.0],\n        [0.5, -1.0, 2.0]\n    ]\n    w0 = 0.1\n    w = [0.2, -0.1, 0.3]\n    V = [\n        [0.5, 0.1],\n        [0.2, 0.3],\n        [-0.4, 0.2]\n    ]\n    preds = fm_predict(X, w0, w, V)\n    print(preds)  # Example output: [1.682, 0.49]\n```"}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    def _sigmoid_np(x):\n        # Numerically stable sigmoid\n        x = np.asarray(x)\n        # For positive x: 1 / (1 + exp(-x))\n        # For negative x: exp(x) / (1 + exp(x))\n        out = np.empty_like(x, dtype=np.float64)\n        pos_mask = x >= 0\n        neg_mask = ~pos_mask\n        # For x >= 0\n        out[pos_mask] = 1 / (1 + np.exp(-x[pos_mask]))\n        # For x < 0\n        exp_x = np.exp(x[neg_mask])\n        out[neg_mask] = exp_x / (1 + exp_x)\n        return out\n\n    # Check if scalar\n    if np.isscalar(z):\n        # Scalar input\n        x = float(z)\n        if x >= 0:\n            res = 1 / (1 + np.exp(-x))\n        else:\n            exp_x = np.exp(x)\n            res = exp_x / (1 + exp_x)\n        return round(res, 4)\n    else:\n        # Convert input to np.ndarray\n        arr = np.asarray(z, dtype=np.float64)\n        sig = _sigmoid_np(arr)\n        sig_rounded = np.round(sig, 4)\n        return sig_rounded.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(sigmoid([-1, 0, 1]))         # [0.2689, 0.5, 0.7311]\n    print(sigmoid(0))                  # 0.5\n    print(sigmoid([1000, -1000]))      # [1.0, 0.0]\n    print(sigmoid(np.array([[0, 2], [-2, 0.5]])))  # [[0.5, 0.8808], [0.1192, 0.6225]]\n    print(sigmoid((1, 2, 3)))          # [0.7311, 0.8808, 0.9526]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    # =======  Write your code below  =======\n    def wrapper(actual, predicted):\n        # Convert actual if needed\n        if (\n            isinstance(actual, np.ndarray)\n            and actual.ndim == 2\n            and actual.shape[1] > 1\n        ):\n            actual_proc = actual.argmax(axis=1)\n        else:\n            actual_proc = actual\n\n        # Convert predicted if needed\n        if (\n            isinstance(predicted, np.ndarray)\n            and predicted.ndim == 2\n            and predicted.shape[1] > 1\n        ):\n            predicted_proc = predicted.argmax(axis=1)\n        else:\n            predicted_proc = predicted\n\n        return function(actual_proc, predicted_proc)\n    # =======  End of your code  =======\n    \n    return wrapper\n\n# ======= Example usage and test =======\nif __name__ == \"__main__\":\n    @unhot\n    def accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n        \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n        return float(np.round(np.mean(actual == predicted), 4))\n\n    # One-hot encoded arrays\n    actual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # [1,0,2]\n    predicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # [1,1,2]\n    print(accuracy(actual, predicted))  # 0.6667\n\n    # Already 1D arrays\n    actual_1d = np.array([1, 0, 2])\n    predicted_1d = np.array([1, 1, 2])\n    print(accuracy(actual_1d, predicted_1d))  # 0.6667\n\n    # (n,1) arrays (should stay unchanged)\n    actual_n1 = np.array([[1], [0], [2]])\n    predicted_n1 = np.array([[1], [1], [2]])\n    print(accuracy(actual_n1, predicted_n1))  # 0.6667\n\n    # Mixed: one-hot for actual, 1D for predicted\n    print(accuracy(actual, predicted_1d))  # 0.6667\n\n    # Mixed: 1D for actual, one-hot for predicted\n    print(accuracy(actual_1d, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def grad_scalar(x):\n        return float(np.round(x * (1 - x), 4))\n\n    # Handle scalar input (int, float, np.generic)\n    if isinstance(z, (int, float, np.generic)):\n        return grad_scalar(z)\n\n    # Handle empty list\n    if isinstance(z, list) and len(z) == 0:\n        return []\n\n    # Handle numpy arrays\n    if isinstance(z, np.ndarray):\n        # Compute elementwise, round, convert to nested list\n        grad = np.round(z * (1 - z), 4)\n        return grad.tolist()\n\n    # Handle nested lists recursively\n    if isinstance(z, list):\n        # Check if this is a list of lists (2D or more)\n        return [sigmoid_grad(item) for item in z]\n\n    # If input is of unknown type, raise error\n    raise TypeError(\"Input must be a scalar, list, or numpy array.\")\n\n# Example test cases:\nif __name__ == \"__main__\":\n    # Scalar\n    print(sigmoid_grad(0.5))  # 0.25\n\n    # 1D list\n    print(sigmoid_grad([0, 0.5, 1]))  # [0.0, 0.25, 0.0]\n\n    # 2D list\n    print(sigmoid_grad([[0.1, 0.9], [0.5, 0.8]]))  # [[0.09, 0.09], [0.25, 0.16]]\n\n    # 1D numpy array\n    print(sigmoid_grad(np.array([0.2, 0.8])))  # [0.16, 0.16]\n\n    # 2D numpy array\n    print(sigmoid_grad(np.array([[0.2, 0.8], [0.5, 1.0]])))  # [[0.16, 0.16], [0.25, 0.0]]\n\n    # Empty list\n    print(sigmoid_grad([]))  # []\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to numpy array for easy slicing\n    X_np = np.array(X)\n    # Get min and max for each axis\n    x1_min, x1_max = X_np[:,0].min(), X_np[:,0].max()\n    x2_min, x2_max = X_np[:,1].min(), X_np[:,1].max()\n    # Create equally spaced arrays\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    # Create meshgrid\n    xx1, xx2 = np.meshgrid(x1_plot, x2_plot)\n    # Compute classifier output for each grid point\n    Z = W[0]*xx1 + W[1]*xx2 + b\n    # Apply sign rule: 1 if >=0, else -1\n    labels = np.where(Z >= 0, 1, -1)\n    # Convert to nested Python list\n    return labels.tolist()\n```\n\n**Example usage:**\n```python\nif __name__ == \"__main__\":\n    # Example data\n    X = [[0,0], [1,1], [2,2], [3,3], [4,4]]\n    W = [1, -1]\n    b = 0\n    grid = decision_boundary_grid(X, W, b, grid_n=5)\n    for row in grid:\n        print(row)\n```\nThis will print a 5x5 grid of 1s and -1s according to the decision boundary."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    eps = 1e-9  # To avoid division by zero in std\n\n    classes = [0, 1]\n    n_features = X_train.shape[1]\n\n    # Compute class priors\n    priors = {}\n    for c in classes:\n        priors[c] = np.mean(y_train == c)\n\n    # Compute mean and std for each feature per class\n    means = {}\n    stds = {}\n    for c in classes:\n        X_c = X_train[y_train == c]\n        means[c] = X_c.mean(axis=0)\n        stds[c] = X_c.std(axis=0) + eps  # Add eps to avoid zero std\n\n    # Precompute log priors for numerical stability\n    log_priors = {c: np.log(priors[c]) for c in classes}\n\n    # For each test sample, compute log-posterior for each class\n    predictions = []\n    for x in X_test:\n        log_posteriors = {}\n        for c in classes:\n            # Gaussian log-likelihood for each feature\n            mu = means[c]\n            sigma = stds[c]\n            # log N(x|mu,sigma^2) = -0.5*log(2pi) - log(sigma) - 0.5*((x-mu)/sigma)^2\n            log_likelihood = (\n                -0.5 * np.log(2 * np.pi)\n                - np.log(sigma)\n                - 0.5 * ((x - mu) / sigma) ** 2\n            )\n            total_log_likelihood = np.sum(log_likelihood)\n            log_posteriors[c] = log_priors[c] + total_log_likelihood\n        # Pick class with higher log-posterior\n        pred = max(log_posteriors, key=log_posteriors.get)\n        predictions.append(pred)\n    return predictions\n```\n"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Args:\n        AL (np.ndarray): Predicted probabilities, shape (m,) or (1, m)\n        Y (np.ndarray): Ground-truth labels (0 or 1), same shape as AL\n\n    Returns:\n        float: Scalar cost value\n    \"\"\"\n    # Flatten arrays to 1D for consistency\n    AL = AL.reshape(-1)\n    Y = Y.reshape(-1)\n    # Clip AL to avoid log(0)\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    # Compute cost\n    m = Y.shape[0]\n    cost = - (1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(cost)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example: 3 samples\n    AL = np.array([0.9, 0.2, 0.8])\n    Y = np.array([1, 0, 1])\n    cost = compute_cost(AL, Y)\n    print(round(cost, 4))  # Output rounded to 4 decimal places\n```"}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Check t is valid\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n\n    pi = np.array(hmm['pi'])        # shape: (N,)\n    A = np.array(hmm['A'])          # shape: (N, N)\n    B = np.array(hmm['B'])          # shape: (N, M)\n    N = pi.shape[0]\n\n    # Forward algorithm: alpha[t][i] = P(o_0,...,o_t, q_t = s_i | lambda)\n    alpha = np.zeros((T, N))\n    # Initialization\n    alpha[0] = pi * B[:, observations[0]]\n    # Induction\n    for tt in range(1, T):\n        for j in range(N):\n            alpha[tt, j] = np.dot(alpha[tt-1], A[:, j]) * B[j, observations[tt]]\n\n    # Backward algorithm: beta[t][i] = P(o_{t+1},...,o_{T-1} | q_t = s_i, lambda)\n    beta = np.zeros((T, N))\n    # Initialization\n    beta[T-1] = 1.0\n    # Induction\n    for tt in range(T-2, -1, -1):\n        for i in range(N):\n            beta[tt, i] = np.sum(A[i, :] * B[:, observations[tt+1]] * beta[tt+1, :])\n\n    # Compute gamma_t(i) = alpha_t(i) * beta_t(i) / sum_j alpha_t(j) * beta_t(j)\n    numer = alpha[t] * beta[t]\n    denom = np.sum(numer)\n    if denom == 0:\n        # Avoid division by zero, return uniform or zeros\n        gamma = np.zeros(N)\n    else:\n        gamma = numer / denom\n\n    # Round to 4 decimals and return as list\n    gamma_rounded = [round(float(x), 4) for x in gamma]\n    return gamma_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example HMM with 2 states and 3 observation symbols\n    hmm = {\n        'pi': [0.6, 0.4],\n        'A': [[0.7, 0.3],\n              [0.4, 0.6]],\n        'B': [[0.5, 0.4, 0.1],\n              [0.1, 0.3, 0.6]]\n    }\n    observations = [0, 1, 2]  # observation indices\n    t = 1\n    print(gamma_probabilities(hmm, observations, t))  # Example output\n```"}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    # Step 1: Compute pairwise Euclidean distances\n    # Efficient vectorized computation\n    sq_norms = np.sum(data ** 2, axis=1)\n    dists = np.sqrt(\n        sq_norms[:, None] + sq_norms[None, :] - 2 * np.dot(data, data.T)\n    )\n\n    # Step 2: Build neighborhood list for each sample\n    neighborhoods = [np.where(dists[i] <= eps)[0].tolist() for i in range(n_samples)]\n\n    # Step 3: Identify core points\n    is_core = np.array([len(neigh) >= min_samples for neigh in neighborhoods])\n\n    # Step 4: Cluster expansion\n    labels = [0] * n_samples  # 0: unvisited/unlabeled, -1: noise, 1,2,...: cluster ids\n    cluster_id = 1\n\n    for i in range(n_samples):\n        if labels[i] != 0 or not is_core[i]:\n            continue  # Already processed or not a core point\n\n        # Start a new cluster\n        labels[i] = cluster_id\n        queue = deque()\n        queue.append(i)\n\n        while queue:\n            point = queue.popleft()\n            for neighbor in neighborhoods[point]:\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    if is_core[neighbor]:\n                        queue.append(neighbor)\n        cluster_id += 1\n\n    # Step 5: Mark noise\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n\n    return labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test: two clusters and some noise\n    np.random.seed(0)\n    cluster1 = np.random.randn(10, 2) + np.array([0, 0])\n    cluster2 = np.random.randn(10, 2) + np.array([5, 5])\n    noise = np.array([[10, 10], [15, 15]])\n    data = np.vstack([cluster1, cluster2, noise])\n\n    labels = dbscan(data, eps=1.5, min_samples=3)\n    print(\"Labels:\", labels)\n    # Should print two clusters (1,2) and two noise points (-1)\n```"}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fit a Gaussian Mixture Model to the data using the EM algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Array of shape (N, D) with N samples and D features.\n    k : int\n        Number of Gaussian components.\n    max_iter : int, optional\n        Maximum number of EM iterations (default: 200).\n    epsilon : float, optional\n        Convergence threshold for change in mixture weights (default: 1e-4).\n\n    Returns\n    -------\n    labels : list[int]\n        List of length N with cluster labels (0..K-1), sorted by the first coordinate of the means.\n    \"\"\"\n    N, D = data.shape\n\n    if k == 1:\n        return [0] * N\n\n    # Set random seed for reproducibility\n    rng = np.random.default_rng(42)\n\n    # Initialize mixture weights uniformly\n    pi = np.full(k, 1.0 / k)\n\n    # Initialize means: randomly pick k data points\n    means = data[rng.choice(N, k, replace=False)].copy()\n\n    # Initialize covariances: all to empirical covariance + small regularization\n    covs = np.array([np.cov(data, rowvar=False) + 1e-6 * np.eye(D) for _ in range(k)])\n\n    prev_pi = pi.copy()\n\n    for iteration in range(max_iter):\n        # E-step: compute responsibilities\n        resp = np.zeros((N, k))\n        for j in range(k):\n            # Multivariate normal PDF\n            diff = data - means[j]\n            try:\n                cov_inv = np.linalg.inv(covs[j])\n                cov_det = np.linalg.det(covs[j])\n            except np.linalg.LinAlgError:\n                # Add regularization if covariance is singular\n                covs[j] += 1e-6 * np.eye(D)\n                cov_inv = np.linalg.inv(covs[j])\n                cov_det = np.linalg.det(covs[j])\n            norm_const = 1.0 / (np.power((2 * np.pi), D / 2) * np.sqrt(cov_det))\n            exp_term = np.einsum('ij,jk,ik->i', diff, cov_inv, diff)\n            resp[:, j] = pi[j] * norm_const * np.exp(-0.5 * exp_term)\n\n        # Normalize responsibilities\n        resp_sum = resp.sum(axis=1, keepdims=True)\n        # Avoid division by zero\n        resp_sum[resp_sum == 0] = 1e-16\n        resp /= resp_sum\n\n        # M-step: update parameters\n        N_k = resp.sum(axis=0)  # shape (k,)\n        pi = N_k / N\n\n        means = (resp.T @ data) / N_k[:, None]  # shape (k, D)\n\n        for j in range(k):\n            diff = data - means[j]\n            weighted = diff.T * resp[:, j]\n            covs[j] = weighted @ diff / N_k[j]\n            # Regularize covariance to avoid singularity\n            covs[j] += 1e-6 * np.eye(D)\n\n        # Check convergence (change in mixture weights)\n        if np.linalg.norm(pi - prev_pi, ord=1) < epsilon:\n            break\n        prev_pi = pi.copy()\n\n    # Assign each sample to the component with highest responsibility\n    labels = np.argmax(resp, axis=1)\n\n    # Sort components by the first coordinate of their mean\n    sort_idx = np.argsort(means[:, 0])\n    # Map old component indices to new labels\n    label_map = np.zeros(k, dtype=int)\n    label_map[sort_idx] = np.arange(k)\n    # Relabel assignments\n    final_labels = label_map[labels]\n\n    return final_labels.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Generate synthetic data for testing\n    np.random.seed(0)\n    N = 300\n    D = 2\n    K = 3\n    means = np.array([[0, 0], [5, 5], [10, 0]])\n    covs = [np.eye(2), np.eye(2), np.eye(2)]\n    data = np.vstack([\n        np.random.multivariate_normal(means[0], covs[0], N // 3),\n        np.random.multivariate_normal(means[1], covs[1], N // 3),\n        np.random.multivariate_normal(means[2], covs[2], N // 3)\n    ])\n    labels = gmm_em(data, K)\n    print(labels[:10])  # Print first 10 labels\n```"}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    # Step 1: Build similarity matrix W using Gaussian kernel\n    # Compute pairwise squared Euclidean distances\n    sum_sq = np.sum(np.square(data), axis=1)\n    dists = sum_sq[:, None] + sum_sq[None, :] - 2 * np.dot(data, data.T)\n    # Numerical stability: set small negatives to zero\n    dists = np.maximum(dists, 0)\n    W = np.exp(-gamma * dists)\n    # Set diagonal to zero (optional, but common in spectral clustering)\n    np.fill_diagonal(W, 0.0)\n\n    # Step 2: Construct Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    if method == 'unnormalized':\n        laplacian = L\n    elif method == 'normalized':\n        # Symmetric normalized Laplacian: L_sym = D^{-1/2} L D^{-1/2}\n        with np.errstate(divide='ignore'):\n            D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        D_inv_sqrt[np.isinf(D_inv_sqrt)] = 0.0  # handle isolated nodes\n        laplacian = D_inv_sqrt @ L @ D_inv_sqrt\n    else:\n        raise ValueError(\"method must be 'unnormalized' or 'normalized'\")\n\n    # Step 3: Eigen decomposition\n    # Compute n_cluster smallest eigenvalues and corresponding eigenvectors\n    # Since Laplacian is symmetric, use eigh\n    eigvals, eigvecs = np.linalg.eigh(laplacian)\n    # Take the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    idx = np.argsort(eigvals)[:n_cluster]\n    X = eigvecs[:, idx]  # shape (N, n_cluster)\n\n    # For normalized Laplacian, row-normalize the eigenvector matrix\n    if method == 'normalized':\n        # Normalize each row to have unit length\n        row_norms = np.linalg.norm(X, axis=1, keepdims=True)\n        # Avoid division by zero\n        row_norms[row_norms == 0] = 1\n        X = X / row_norms\n\n    # Step 4: Deterministic k-means in eigenvector space\n    # Use first n_cluster samples as initial centroids\n    centroids = X[:n_cluster].copy()  # shape (n_cluster, n_cluster)\n    labels = np.zeros(N, dtype=int)\n    max_iter = 300\n    for _ in range(max_iter):\n        # Assign labels\n        # Compute squared distances to centroids\n        dists = np.sum((X[:, None, :] - centroids[None, :, :]) ** 2, axis=2)  # (N, n_cluster)\n        new_labels = np.argmin(dists, axis=1)\n        if np.all(new_labels == labels):\n            break\n        labels = new_labels\n        # Update centroids\n        for k in range(n_cluster):\n            members = X[labels == k]\n            if len(members) > 0:\n                centroids[k] = np.mean(members, axis=0)\n            else:\n                # If a cluster lost all members, reinitialize to a random point (deterministically: pick next unused sample)\n                unused = [i for i in range(N) if i not in labels[:n_cluster]]\n                if unused:\n                    centroids[k] = X[unused[0]]\n                else:\n                    centroids[k] = X[0]  # fallback\n\n    # Step 5: Relabel clusters so that the cluster containing the smallest original index gets label 0, etc.\n    # For each cluster, find the smallest index in it\n    cluster_min_idx = []\n    for k in range(n_cluster):\n        idxs = np.where(labels == k)[0]\n        if len(idxs) == 0:\n            cluster_min_idx.append(N + k)  # ensure empty clusters are sorted last\n        else:\n            cluster_min_idx.append(np.min(idxs))\n    # Get new label order\n    new_order = np.argsort(cluster_min_idx)\n    # Map old labels to new labels\n    label_map = np.zeros(n_cluster, dtype=int)\n    for new_label, old_label in enumerate(new_order):\n        label_map[old_label] = new_label\n    final_labels = label_map[labels]\n\n    return final_labels.tolist()\n```\n"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Build Gram matrix G[i, j] = X_data[i] \u00b7 X_data[j]\n    G = X_data @ X_data.T  # shape (N, N)\n\n    for epoch in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = sum_j alpha_j * y_j * G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n\n    # Recover w = sum_i alpha_i * y_i * x_i\n    w = np.sum((alpha * y_data)[:, np.newaxis] * X_data, axis=0)\n\n    # Round w and b to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\n```\n"}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label  # feature index to inspect (internal nodes)\n        self.x = x          # value for edge from parent (classification)\n        self.s = s          # split point (regression)\n        self.y = y          # value in leaf (class label or real number)\n        self.child = child if child is not None else []  # list of children\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    node = root\n    while True:\n        if hasattr(node, 'y') and node.y is not None:\n            return node.y\n        if task_type == 'classification':\n            feature_value = features[node.label]\n            # Find first child whose x equals feature_value\n            for child in node.child:\n                if child.x == feature_value:\n                    node = child\n                    break\n            else:\n                # Default to second child if no match\n                node = node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                node = node.child[0]\n            else:\n                node = node.child[1]\n        else:\n            raise ValueError(\"Unknown task_type: must be 'classification' or 'regression'\")\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Classification tree example:\n    # If feature 0 == 1 -> class 10\n    # If feature 0 == 2 -> class 20\n    # Otherwise -> class 99 (default)\n    leaf1 = Node(y=10, x=1)\n    leaf2 = Node(y=20, x=2)\n    leaf_default = Node(y=99, x=0)\n    root_class = Node(label=0, child=[leaf1, leaf_default, leaf2])\n\n    print(predict_sample(root_class, [1], 'classification'))  # 10\n    print(predict_sample(root_class, [2], 'classification'))  # 20\n    print(predict_sample(root_class, [0], 'classification'))  # 99\n    print(predict_sample(root_class, [5], 'classification'))  # 99\n\n    # Regression tree example:\n    # If feature 1 <= 3.5 -> 1.23\n    # Else -> 4.56\n    leaf_left = Node(y=1.23)\n    leaf_right = Node(y=4.56)\n    root_reg = Node(label=1, s=3.5, child=[leaf_left, leaf_right])\n\n    print(predict_sample(root_reg, [0, 2], 'regression'))  # 1.23\n    print(predict_sample(root_reg, [0, 4], 'regression'))  # 4.56\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    def entropy(labels):\n        \"\"\"Compute entropy of a 1D array of integer labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        _, counts = np.unique(labels, return_counts=True)\n        probs = counts / counts.sum()\n        # Avoid log2(0) by masking zero probabilities\n        return -np.sum(probs * np.log2(probs + 1e-12))\n\n    n_samples, n_features = X.shape\n    H_y = entropy(y)\n    max_ig = -np.inf\n    best_idx = -1\n\n    for feat_idx in range(n_features):\n        feature_col = X[:, feat_idx]\n        values, value_counts = np.unique(feature_col, return_counts=True)\n        H_y_given_A = 0.0\n        for v, count in zip(values, value_counts):\n            mask = (feature_col == v)\n            y_sub = y[mask]\n            H_y_given_A += (count / n_samples) * entropy(y_sub)\n        ig = H_y - H_y_given_A\n        # Use < to ensure smallest index in case of tie\n        if ig > max_ig or (math.isclose(ig, max_ig, abs_tol=1e-10) and feat_idx < best_idx):\n            max_ig = ig\n            best_idx = feat_idx\n\n    return (best_idx, round(max_ig, 6))\n```\n\n**Example usage:**\n```python\nif __name__ == \"__main__\":\n    # Example: 4 samples, 2 features, 2 classes\n    X = np.array([\n        [0, 1],\n        [1, 1],\n        [0, 0],\n        [1, 0]\n    ])\n    y = np.array([0, 0, 1, 1])\n    print(choose_best_feature(X, y))  # Output: (0, 1.0)\n```"}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    n_samples, n_features = data.shape\n\n    if epsilon == 0:\n        return []\n\n    # Precompute c(n) for all possible n up to sample_size\n    def c(n):\n        if n <= 1:\n            return 0.0\n        else:\n            return 2.0 * np.log(n - 1) + 0.5772156649 - 2.0 * (n - 1) / n\n\n    # Compute phi for normalization\n    if n_samples > 1:\n        phi = 2.0 * np.log(n_samples - 1) - 2.0 * (n_samples - 1) / n_samples\n    else:\n        phi = 1.0  # Avoid division by zero, but this case is degenerate\n\n    # Each tree is built on a subsample of the data\n    height_limit = int(math.ceil(math.log2(sample_size)))\n\n    class Node:\n        __slots__ = ['feature', 'threshold', 'left', 'right', 'size', 'is_leaf']\n        def __init__(self, feature=None, threshold=None, left=None, right=None, size=None, is_leaf=False):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.size = size\n            self.is_leaf = is_leaf\n\n    def build_tree(X, current_depth, height_limit):\n        n, m = X.shape\n        if current_depth >= height_limit or n <= 1:\n            # Make a leaf node\n            return Node(size=n, is_leaf=True)\n        # Randomly select a feature\n        feature = np.random.randint(m)\n        min_val = X[:, feature].min()\n        max_val = X[:, feature].max()\n        if min_val == max_val:\n            # Can't split further on this feature, make a leaf\n            return Node(size=n, is_leaf=True)\n        # Random threshold in [min, max)\n        threshold = np.random.uniform(min_val, max_val)\n        left_mask = X[:, feature] < threshold\n        right_mask = ~left_mask\n        # If all go to one side, make a leaf\n        if left_mask.sum() == 0 or right_mask.sum() == 0:\n            return Node(size=n, is_leaf=True)\n        left = build_tree(X[left_mask], current_depth + 1, height_limit)\n        right = build_tree(X[right_mask], current_depth + 1, height_limit)\n        return Node(feature=feature, threshold=threshold, left=left, right=right, is_leaf=False)\n\n    def path_length(x, node, current_depth):\n        if node.is_leaf:\n            return current_depth + c(node.size)\n        if x[node.feature] < node.threshold:\n            return path_length(x, node.left, current_depth + 1)\n        else:\n            return path_length(x, node.right, current_depth + 1)\n\n    # Build all trees and keep their roots and the indices of the subsamples\n    trees = []\n    subsample_indices = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            idx = np.arange(n_samples)\n        else:\n            idx = np.random.choice(n_samples, size=sample_size, replace=False)\n        X_sub = data[idx]\n        tree = build_tree(X_sub, 0, height_limit)\n        trees.append(tree)\n        subsample_indices.append(idx)\n\n    # For each sample, compute its path length in each tree\n    path_lengths = np.zeros((n_samples, n_trees), dtype=float)\n    for t, (tree, idx) in enumerate(zip(trees, subsample_indices)):\n        X_sub = data[idx]\n        # For each sample in the original data\n        for i in range(n_samples):\n            x = data[i]\n            # Traverse the tree as if x was in the subsample\n            path_lengths[i, t] = path_length(x, tree, 0)\n\n    # Average path length for each sample\n    avg_path_length = path_lengths.mean(axis=1)\n\n    # Compute anomaly scores\n    scores = np.power(2, -avg_path_length / phi)\n\n    # Find the top epsilon fraction as outliers\n    n_outliers = int(np.floor(epsilon * n_samples))\n    if n_outliers == 0:\n        return []\n    # Get indices of the largest scores\n    outlier_indices = np.argpartition(-scores, n_outliers - 1)[:n_outliers]\n    # Sort indices increasingly\n    outlier_indices_sorted = np.sort(outlier_indices)\n    return outlier_indices_sorted.tolist()\n```\n"}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"\n    Maximum Entropy classifier using Generalized Iterative Scaling (GIS).\n    \"\"\"\n\n    # 1. Enumerate all (feature_index, feature_value, label) pairs in training data\n    n_samples, n_features = X_train.shape\n    y_train = np.asarray(y_train)\n    labels = sorted(set(y_train))\n    label2idx = {y: i for i, y in enumerate(labels)}\n    idx2label = {i: y for y, i in label2idx.items()}\n    n_labels = len(labels)\n\n    # For each feature, get all values in training data\n    feature_values = []\n    for j in range(n_features):\n        feature_values.append(sorted(set(X_train[:, j])))\n\n    # Build feature function index: (feature_index, feature_value, label) -> idx\n    featval_label2idx = dict()\n    idx2featval_label = dict()\n    idx = 0\n    for j in range(n_features):\n        for v in feature_values[j]:\n            for y in labels:\n                key = (j, v, y)\n                featval_label2idx[key] = idx\n                idx2featval_label[idx] = key\n                idx += 1\n    n_features_total = idx\n\n    # 2. Compute empirical expectation of features\n    # Empirical expectation: E_p[f_j] = (1/N) sum_i f_j(x_i, y_i)\n    empirical_counts = np.zeros(n_features_total)\n    for i in range(n_samples):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(n_features):\n            v = x[j]\n            key = (j, v, y)\n            idx = featval_label2idx.get(key)\n            if idx is not None:\n                empirical_counts[idx] += 1\n    empirical_expectation = empirical_counts / n_samples\n\n    # 3. Compute C: maximum number of active features per (x, y)\n    # For categorical features, for each (x, y), the number of active features is n_features\n    C = n_features\n\n    # 4. Initialize weights\n    w = np.zeros(n_features_total)\n\n    # 5. Precompute for each training sample, for each label, the active feature indices\n    # For each x, for each y, the set of indices j where f_j(x, y) == 1\n    # For GIS, we need to compute model expectation over training data\n    # For efficiency, precompute for all (x, y) pairs\n    # For each training sample, for each label, store the list of active feature indices\n    train_feat_indices = []\n    for i in range(n_samples):\n        x = X_train[i]\n        x_feat_indices = []\n        for y in labels:\n            indices = []\n            for j in range(n_features):\n                v = x[j]\n                key = (j, v, y)\n                idx = featval_label2idx.get(key)\n                if idx is not None:\n                    indices.append(idx)\n            x_feat_indices.append(indices)\n        train_feat_indices.append(x_feat_indices)\n    # train_feat_indices[i][y_idx] = list of feature indices active for (x_i, y)\n\n    # 6. GIS main loop\n    for it in range(n_iter):\n        # 6.1. Compute model expectation of features\n        model_expectation = np.zeros(n_features_total)\n        for i in range(n_samples):\n            # For each label, compute score\n            scores = []\n            for y_idx, y in enumerate(labels):\n                indices = train_feat_indices[i][y_idx]\n                s = sum(w[idx] for idx in indices)\n                scores.append(s)\n            # Compute denominator Z(x)\n            max_score = max(scores)\n            exp_scores = [math.exp(s - max_score) for s in scores]  # for numerical stability\n            Z = sum(exp_scores)\n            probs = [e / Z for e in exp_scores]\n            # For each label, add to model expectation\n            for y_idx, p in enumerate(probs):\n                indices = train_feat_indices[i][y_idx]\n                for idx in indices:\n                    model_expectation[idx] += p / n_samples  # average over N\n\n        # 6.2. Update weights\n        max_delta = 0.0\n        for idx in range(n_features_total):\n            emp = empirical_expectation[idx]\n            mod = model_expectation[idx]\n            # To avoid division by zero, only update if emp > 0\n            if emp > 0 and mod > 0:\n                delta = (1.0 / C) * math.log(emp / mod)\n                w[idx] += delta\n                max_delta = max(max_delta, abs(delta))\n            # If emp == 0, GIS update is not needed (weight remains at 0)\n        if max_delta < epsilon:\n            break\n\n    # 7. Predict for test data\n    y_pred = []\n    for i in range(X_test.shape[0]):\n        x = X_test[i]\n        scores = []\n        for y in labels:\n            s = 0.0\n            for j in range(n_features):\n                v = x[j]\n                key = (j, v, y)\n                idx = featval_label2idx.get(key)\n                if idx is not None:\n                    s += w[idx]\n            scores.append(s)\n        # Compute probabilities (not strictly needed, just argmax)\n        # For numerical stability, subtract max\n        max_score = max(scores)\n        exp_scores = [math.exp(s - max_score) for s in scores]\n        Z = sum(exp_scores)\n        probs = [e / Z for e in exp_scores]\n        y_idx = np.argmax(probs)\n        y_pred.append(labels[y_idx])\n\n    return y_pred\n```\n"}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count in how many documents each word appears\n    doc_freq = Counter()\n    total_docs = len(data)\n    for _, words in data:\n        unique_words = set(words)\n        doc_freq.update(unique_words)\n    # Compute document-frequency ratio, rounded to 4 decimals\n    word_ratios = [\n        (word, round(count / total_docs, 4))\n        for word, count in doc_freq.items()\n    ]\n    # Sort by ratio descending\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    # Prepare the set of most common words\n    if cut_off is None:\n        top_words = set(doc_freq.keys())\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        # Take the first cut_off words from the sorted list\n        top_words = set(word for word, _ in word_ratios[:cut_off])\n    return word_ratios, top_words\n\n# Example usage and test\nif __name__ == \"__main__\":\n    docs = [\n        (\"doc1\", [\"apple\", \"banana\", \"apple\", \"cherry\"]),\n        (\"doc2\", [\"banana\", \"durian\", \"apple\"]),\n        (\"doc3\", [\"banana\", \"cherry\", \"eggfruit\"]),\n        (\"doc4\", [\"fig\", \"grape\", \"apple\"]),\n    ]\n    ratios, top = statistic_key_word(docs, cut_off=3)\n    print(\"Word ratios:\", ratios)\n    print(\"Top 3 words:\", top)\n    ratios_all, top_all = statistic_key_word(docs, cut_off=None)\n    print(\"All word ratios:\", ratios_all)\n    print(\"All words:\", top_all)\n    ratios_zero, top_zero = statistic_key_word(docs, cut_off=0)\n    print(\"Zero cut_off set:\", top_zero)\n```\n**How it works:**\n- Counts for each word in how many documents it appears (not how many times in total).\n- Computes the document-frequency ratio for each word.\n- Sorts the list of (word, ratio) pairs from most to least common.\n- Returns the top `cut_off` words as a set (or all, or empty set as specified).\n\n**Test Output Example:**\n```\nWord ratios: [('apple', 0.75), ('banana', 0.75), ('cherry', 0.5)]\nTop 3 words: {'banana', 'apple', 'cherry'}\nAll word ratios: [('apple', 0.75), ('banana', 0.75), ('cherry', 0.5), ('durian', 0.25), ('eggfruit', 0.25), ('fig', 0.25), ('grape', 0.25)]\nAll words: {'banana', 'apple', 'cherry', 'durian', 'eggfruit', 'fig', 'grape'}\nZero cut_off set: set()\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector: w = X^T @ (alpha * y)\n    # alpha and y are (n_samples,), so (alpha * y) is (n_samples,)\n    # X.T is (n_features, n_samples)\n    # So w is (n_features,)\n    ay = alpha * y\n    w = X.T @ ay  # shape (n_features,)\n\n    # Compute the bias: b = (1/n) * sum_i (y_i - w^T x_i)\n    wx = X @ w  # shape (n_samples,)\n    b = np.mean(y - wx)\n\n    # Round results\n    w_rounded = np.round(w, 4)\n    b_rounded = round(float(b), 4)\n\n    # Convert w to a Python list\n    w_list = w_rounded.tolist()\n\n    return (w_list, b_rounded)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example with 2 features\n    X = np.array([[1, 2], [2, 3], [3, 3]])\n    y = np.array([1, -1, 1])\n    alpha = np.array([0.5, 0.3, 0.2])\n    w, b = compute_svm_parameters(X, y, alpha)\n    print(\"w:\", w)\n    print(\"b:\", b)\n\n    # Example with 1 feature\n    X1 = np.array([[1], [2], [3]])\n    y1 = np.array([1, -1, 1])\n    alpha1 = np.array([0.5, 0.3, 0.2])\n    w1, b1 = compute_svm_parameters(X1, y1, alpha1)\n    print(\"w (1 feature):\", w1)\n    print(\"b (1 feature):\", b1)\n```"}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute LOF scores for each sample in data.\n\n    Parameters\n    ----------\n    data : np.ndarray, shape (n_samples, n_features)\n        The input data.\n    k : int\n        Number of neighbors.\n    epsilon : float\n        Threshold for outlier detection.\n\n    Returns\n    -------\n    tuple\n        (list_of_scores, list_of_outlier_indices)\n        list_of_scores: list of LOF scores (rounded to 4 decimals)\n        list_of_outlier_indices: sorted list of indices where LOF > epsilon\n    \"\"\"\n    data = np.asarray(data)\n    n = data.shape[0]\n    # 1. Compute full pairwise Euclidean distance matrix\n    # Efficient vectorized computation\n    sum_sq = np.sum(data**2, axis=1)\n    dists = np.sqrt(np.maximum(\n        sum_sq[:, None] + sum_sq[None, :] - 2 * np.dot(data, data.T), 0.0\n    ))\n    # 2. For every sample p, obtain its k-distance and k nearest neighbors\n    # For each row, sort distances (excluding self)\n    # argsort returns indices of sorted distances\n    # For ties, np.argsort is stable, so k-th neighbor is well-defined\n    # Exclude self (distance 0 at diagonal)\n    neighbor_indices = np.argsort(dists, axis=1)\n    # k nearest neighbors (excluding self)\n    N_k = []\n    k_distances = np.zeros(n)\n    for i in range(n):\n        # Exclude self (neighbor_indices[0] == i)\n        neighbors = neighbor_indices[i][1:k+1]\n        N_k.append(neighbors)\n        # k-distance: distance to k-th nearest neighbor (1-based, so index k)\n        k_distances[i] = dists[i, neighbor_indices[i][k]]\n    # 3. reach-dist_k(p, q) = max(k-distance(q), dist(p, q))\n    # For each p, for each q in N_k(p)\n    # 4. Compute LRD_k(p)\n    lrd = np.zeros(n)\n    for i in range(n):\n        reach_dists = []\n        for q in N_k[i]:\n            reach_dist = max(k_distances[q], dists[i, q])\n            reach_dists.append(reach_dist)\n        # Avoid division by zero\n        denom = np.sum(reach_dists)\n        if denom == 0:\n            lrd[i] = float('inf')\n        else:\n            lrd[i] = k / denom\n    # 5. Compute LOF_k(p)\n    lof = np.zeros(n)\n    for i in range(n):\n        lrd_ratios = []\n        for q in N_k[i]:\n            lrd_ratios.append(lrd[q])\n        num = np.sum(lrd_ratios) / k\n        if lrd[i] == 0:\n            lof[i] = float('inf')\n        else:\n            lof[i] = num / lrd[i]\n    # Round LOF scores to 4 decimals\n    lof_rounded = np.round(lof, 4)\n    # Indices of samples with LOF > epsilon\n    outlier_indices = np.where(lof_rounded > epsilon)[0]\n    outlier_indices = np.sort(outlier_indices).tolist()\n    return lof_rounded.tolist(), outlier_indices\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test: 2D data, one outlier\n    X = np.array([\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1],\n        [10, 10]  # outlier\n    ])\n    scores, outliers = local_outlier_factor(X, k=2, epsilon=1.5)\n    print(\"LOF scores:\", scores)\n    print(\"Outlier indices:\", outliers)\n```"}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train_list = []\n    X_val_list = []\n    y_train_list = []\n    y_val_list = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        low = base + 1\n        high = base + 9\n\n        # Training points\n        x_train = np.random.uniform(low, high, size=(n_train, 2))\n        x_train = np.round(x_train, 4)\n        X_train_list.append(x_train)\n        y_train_list.append(np.full(n_train, c, dtype=int))\n\n        # Validation points\n        x_val = np.random.uniform(low, high, size=(n_val, 2))\n        x_val = np.round(x_val, 4)\n        X_val_list.append(x_val)\n        y_val_list.append(np.full(n_val, c, dtype=int))\n\n    X_train = np.vstack(X_train_list)\n    X_val = np.vstack(X_val_list)\n    y_train = np.concatenate(y_train_list)\n    y_val = np.concatenate(y_val_list)\n\n    return X_train, X_val, y_train, y_val\n\n# Example usage:\nif __name__ == \"__main__\":\n    X_train, X_val, y_train, y_val = generate_data(m=3, n_train=5, n_val=2, seed=42)\n    print(\"X_train:\\n\", X_train)\n    print(\"y_train:\\n\", y_train)\n    print(\"X_val:\\n\", X_val)\n    print(\"y_val:\\n\", y_val)\n```\n"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Step 1: Initialisation\n    centres = X[:k].copy()  # shape (k, d)\n    labels = np.zeros(m, dtype=int)\n    for iteration in range(max_iters):\n        # Step 2: Assignment\n        # Compute squared Euclidean distances from each point to each centre\n        # Resulting shape: (m, k)\n        dists = np.linalg.norm(X[:, None, :] - centres[None, :, :], axis=2)\n        # For each point, assign to the nearest centre (with tie-breaking)\n        new_labels = np.argmin(dists, axis=1)\n        # Step 4: Check for convergence\n        if iteration > 0 and np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        # Step 3: Update\n        new_centres = centres.copy()\n        for i in range(k):\n            assigned = X[labels == i]\n            if assigned.shape[0] > 0:\n                new_centres[i] = assigned.mean(axis=0)\n            # else: leave centre unchanged\n        centres = new_centres\n    # Round centres to 4 decimals\n    rounded_centres = np.round(centres, 4).tolist()\n    return labels.tolist(), rounded_centres\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    X = np.array([\n        [1.0, 2.0],\n        [1.5, 1.8],\n        [5.0, 8.0],\n        [8.0, 8.0],\n        [1.0, 0.6],\n        [9.0, 11.0]\n    ])\n    k = 2\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```"}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    # Early exit if no learning\n    if learning_rate == 0 or iterations == 0:\n        return [0.0] * n, 0.0\n\n    w = np.zeros(n)\n    b = 0.0\n\n    for _ in range(iterations):\n        y_hat = X @ w + b\n        r = y - y_hat  # residuals, shape (m,)\n\n        # Compute gradient for weights\n        # sign(0) = -1 as per instructions\n        sign_w = np.where(w == 0, -1, np.sign(w))\n        grad_w = (-2 * X.T @ r) + l1_penalty * sign_w + 2 * l2_penalty * w\n        grad_w /= m\n\n        # Compute gradient for bias\n        grad_b = (-2 * np.sum(r)) / m\n\n        # Update parameters\n        w = w - learning_rate * grad_w\n        b = b - learning_rate * grad_b\n\n    # Round results\n    w_rounded = [round(float(val), 4) for val in w]\n    b_rounded = round(float(b), 4)\n    return w_rounded, b_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Simple test\n    X = np.array([[1, 2], [3, 4], [5, 6]], dtype=float)\n    y = np.array([1, 2, 3], dtype=float)\n    weights, bias = elastic_net_regression(X, y, learning_rate=0.01, iterations=1000, l1_penalty=0.1, l2_penalty=0.1)\n    print(\"Weights:\", weights)\n    print(\"Bias:\", bias)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    a = np.array(x, dtype=float)\n    n_layers = len(weights)\n    for L in range(n_layers):\n        # Add bias input\n        a_with_bias = np.concatenate(([1.0], a))\n        # Build weight matrix for this layer: shape (n_neurons, prev_layer_size+1)\n        W = np.array(weights[L], dtype=float)\n        # Compute pre-activation: z = W @ a_with_bias\n        z = W @ a_with_bias\n        # Apply activation: ReLU for hidden layers, identity for last\n        if L < n_layers - 1:\n            a = np.maximum(0, z)\n        else:\n            a = z\n    # Prepare output\n    if a.shape[0] == 1:\n        return round(float(a[0]), 4)\n    else:\n        return [round(float(v), 4) for v in a]\n```\n\n**Example usage:**\n```python\nif __name__ == \"__main__\":\n    # Example: 2 inputs, 1 hidden layer (3 neurons), 1 output neuron\n    # weights[0]: 3 neurons, each with 1 bias + 2 input weights\n    # weights[1]: 1 neuron, with 1 bias + 3 hidden weights\n    weights = [\n        [ [0.5, 0.2, -0.3],   # neuron 1 in hidden layer\n          [-0.1, 0.4, 0.1],   # neuron 2 in hidden layer\n          [0.0, -0.2, 0.3] ], # neuron 3 in hidden layer\n        [ [0.7, 0.6, -0.5, 0.2] ] # output neuron\n    ]\n    x = [1.0, -1.0]\n    print(neural_net_predict(weights, x))  # Output: float rounded to 4 decimals\n```\n"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    K-Means clustering: compute centroids only.\n    Args:\n        X: np.ndarray of shape (n_samples, n_features)\n        k: number of clusters\n        max_iters: maximum number of iterations\n    Returns:\n        List of k centroids (each a list of floats), sorted lexicographically and rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X.shape\n    # 1. Initialise centroids with the first k samples\n    centroids = X[:k].astype(float).copy()  # shape: (k, n_features)\n\n    for _ in range(max_iters):\n        # 2a. Assign each sample to the nearest centroid (squared Euclidean distance)\n        # Compute distance matrix: shape (n_samples, k)\n        dists = np.sum((X[:, None, :] - centroids[None, :, :]) ** 2, axis=2)\n        labels = np.argmin(dists, axis=1)  # shape: (n_samples,)\n\n        # 2b. Update centroids\n        new_centroids = centroids.copy()\n        for i in range(k):\n            mask = (labels == i)\n            if np.any(mask):\n                new_centroids[i] = X[mask].mean(axis=0)\n            # else: leave centroid unchanged if cluster is empty\n\n        # 3. Check for convergence (all centroids move less than 1e-4)\n        shifts = np.linalg.norm(new_centroids - centroids, axis=1)\n        if np.all(shifts < 1e-4):\n            centroids = new_centroids\n            break\n        centroids = new_centroids\n\n    # 5. Sort centroids lexicographically and round to 4 decimals\n    centroids_rounded = np.round(centroids, 4)\n    # Lexicographical sort: use np.lexsort on columns in reverse order\n    sort_idx = np.lexsort(centroids_rounded.T[::-1])\n    centroids_sorted = centroids_rounded[sort_idx]\n\n    # Convert to list of lists\n    return centroids_sorted.tolist()\n```\n"}

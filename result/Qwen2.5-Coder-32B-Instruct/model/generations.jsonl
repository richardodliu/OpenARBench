{"task_id": 0, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Ridge Regression using its closed-form solution. The function `ridge_regression` takes a NumPy array `data` where the last column is the target vector \\(\\mathbf{y}\\) and all preceding columns are the feature matrix \\(\\mathbf{X}\\). It also takes a regularization strength \\(\\alpha\\). The function adds a bias term, computes the weight vector using the closed-form solution, and returns the weight vector rounded to 4 decimal places as a Python list.\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, where the last column is the target vector y and all preceding columns are the feature matrix X.\n    - alpha: float, the regularization strength (default is 0.0).\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places.\n    \"\"\"\n    # Split the data into features (X) and target (y)\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to X\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    \n    # Compute the identity matrix I with the appropriate size\n    I = np.identity(X_b.shape[1])\n    \n    # Compute the matrix (X^T X + alpha * I)\n    A = X_b.T @ X_b + alpha * I\n    \n    # Check if the matrix A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector w\n    w = np.linalg.inv(A) @ X_b.T @ y\n    \n    # Return the weight vector rounded to 4 decimal places as a list\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\n### Explanation:\n1. **Data Splitting**: The input `data` is split into features `X` and target `y`.\n2. **Bias Term**: A column of ones is added to `X` to account for the bias term.\n3. **Identity Matrix**: An identity matrix `I` of the appropriate size is created.\n4. **Matrix Computation**: The matrix \\((\\mathbf{X}^\\top \\mathbf{X} + \\alpha \\mathbf{I})\\) is computed.\n5. **Invertibility Check**: The determinant of the matrix is checked to ensure it is invertible. If the determinant is zero, the function returns `-1`.\n6. **Weight Vector Calculation**: The weight vector \\(\\hat{\\mathbf{w}}\\) is computed using the closed-form solution.\n7. **Rounding and Returning**: The weight vector is rounded to 4 decimal places and returned as a Python list.\n\nThis implementation ensures that the Ridge Regression is performed correctly and handles the case where the matrix is not invertible."}
{"task_id": 1, "completion_id": 0, "completion": "Certainly! Below is the implementation of the dual-form perceptron learning algorithm as described in the task. The function `perceptron_dual` takes the training data, labels, learning rate, and maximum number of iterations as inputs and returns the weight vector and bias rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    \n    # Initialize dual parameters and bias\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    # Number of updates\n    updates = 0\n    \n    # Training loop\n    while updates < n_iter:\n        all_correct = True\n        for i in range(n_samples):\n            # Compute the activation\n            activation = np.sum(alpha * y_train * K[:, i])\n            # Compute the margin\n            margin = y_train[i] * (activation + b)\n            # Check if the sample is misclassified\n            if margin <= 0:\n                # Update alpha and bias\n                alpha[i] += eta\n                b += eta * y_train[i]\n                all_correct = False\n                updates += 1\n                # Restart the scan\n                break\n        \n        # If no misclassified samples, stop\n        if all_correct:\n            break\n    \n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    \n    # Return w and b rounded to 4 decimal places\n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y_train = np.array([1, 1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the dual parameters `alpha` to zero and the bias `b` to zero.\n2. **Gram Matrix**: We compute the Gram matrix `K` which contains the inner products of all pairs of training samples.\n3. **Training Loop**: We iterate over the samples, compute the activation and margin for each sample, and update `alpha` and `b` if the sample is misclassified.\n4. **Restart Condition**: If a misclassified sample is found, we update the parameters and restart the scan from the beginning.\n5. **Stopping Condition**: The loop stops when a complete pass over the data is made without any updates or when the maximum number of updates is reached.\n6. **Primal Weight Vector**: After training, we compute the primal weight vector `w` using the final `alpha` values.\n7. **Rounding**: The weight vector `w` and bias `b` are rounded to four decimal places before returning.\n\nThis implementation ensures that the dual-form perceptron learning algorithm is correctly applied to the given training data."}
{"task_id": 2, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `glm_links` function that returns the required link functions, their inverses, and their derivatives for the identity, log, and logit links.\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"eta (logit link):\", np.round(eta, 4))\nprint(\"mu2 (logit inv_link):\", np.round(mu2, 4))\n```\n\n### Explanation:\n1. **Identity Link**:\n   - `link`: \\( g(\\mu) = \\mu \\)\n   - `inv_link`: \\( g^{-1}(\\eta) = \\eta \\)\n   - `derivative`: \\( g'(\\mu) = 1 \\)\n\n2. **Log Link**:\n   - `link`: \\( g(\\mu) = \\log(\\mu) \\)\n   - `inv_link`: \\( g^{-1}(\\eta) = \\exp(\\eta) \\)\n   - `derivative`: \\( g'(\\mu) = \\frac{1}{\\mu} \\)\n\n3. **Logit Link**:\n   - `link`: \\( g(\\mu) = \\log\\left(\\frac{\\mu}{1 - \\mu}\\right) \\)\n   - `inv_link`: \\( g^{-1}(\\eta) = \\frac{1}{1 + \\exp(-\\eta)} \\)\n   - `derivative`: \\( g'(\\mu) = \\frac{1}{\\mu (1 - \\mu)} \\)\n\nEach function is designed to handle numpy scalars and arrays element-wise, ensuring compatibility with the requirements. The example usage demonstrates how to use the returned functions and prints the results rounded to four decimal places."}
{"task_id": 3, "completion_id": 0, "completion": "To implement the isolation tree and compute the path lengths for each sample, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n1. **Node Structure**: We'll define a class `IsolationTreeNode` to represent each node in the tree. Each node will store the indices of the samples that reach it, and pointers to its left and right children.\n\n2. **Tree Construction**: We'll recursively build the tree by selecting a random feature and a random split value within the range of the feature values for the samples reaching the node.\n\n3. **Path Length Calculation**: After constructing the tree, we'll traverse it to determine the depth of the leaf node for each sample.\n\n4. **Reproducibility**: We'll set the random seed to 0 at the beginning of the function to ensure that the results are reproducible.\n\nHere's the complete code:\n\n```python\nimport numpy as np\n\nclass IsolationTreeNode:\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.feature = None\n        self.threshold = None\n\ndef build_isolation_tree(data, indices):\n    if len(indices) < 3:\n        # This node becomes a leaf\n        return IsolationTreeNode(indices)\n    \n    # Choose a feature index uniformly at random\n    feature = np.random.choice(data.shape[1])\n    feature_values = data[indices, feature]\n    \n    # Find the min and max values of the feature for the samples reaching this node\n    down = np.min(feature_values)\n    up = np.max(feature_values)\n    \n    if down == up:\n        # If all values are the same, this node becomes a leaf\n        return IsolationTreeNode(indices)\n    \n    # Draw a real number v uniformly from [down, up]\n    threshold = np.random.uniform(down, up)\n    \n    # Split the indices into left and right based on the threshold\n    left_indices = indices[feature_values <= threshold]\n    right_indices = indices[feature_values > threshold]\n    \n    # Create the node and recursively build the left and right subtrees\n    node = IsolationTreeNode(indices)\n    node.feature = feature\n    node.threshold = threshold\n    node.left = build_isolation_tree(data, left_indices)\n    node.right = build_isolation_tree(data, right_indices)\n    \n    return node\n\ndef compute_path_lengths(node, data, path_lengths, depth=0):\n    if node.left is None and node.right is None:\n        # This is a leaf node\n        for index in node.indices:\n            path_lengths[index] = depth\n        return\n    \n    # Traverse the left and right subtrees\n    if node.left is not None:\n        compute_path_lengths(node.left, data, path_lengths, depth + 1)\n    if node.right is not None:\n        compute_path_lengths(node.right, data, path_lengths, depth + 1)\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    path_lengths = [0] * n_samples\n    \n    # Build the isolation tree\n    root = build_isolation_tree(data, np.arange(n_samples))\n    \n    # Compute the path lengths\n    compute_path_lengths(root, data, path_lengths)\n    \n    return path_lengths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\n### Explanation:\n- **IsolationTreeNode Class**: This class represents a node in the isolation tree. It stores the indices of the samples that reach it, and pointers to its left and right children.\n- **build_isolation_tree Function**: This function recursively builds the isolation tree. It selects a random feature and a random split value, then splits the samples into left and right subsets based on the split value.\n- **compute_path_lengths Function**: This function traverses the tree and records the depth of the leaf node for each sample.\n- **isolation_tree_path_length Function**: This is the main function that sets the random seed, builds the tree, and computes the path lengths for each sample.\n\nThis implementation ensures that the tree is built and traversed correctly, and the path lengths are computed as specified."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of frequent itemset mining, we can use the Apriori algorithm, which is a classic algorithm for mining frequent itemsets. The algorithm works by iteratively generating candidate itemsets and then pruning those that do not meet the minimum support threshold.\n\nHere's a step-by-step breakdown of the approach:\n\n1. **Initialize**: Start with the frequent 1-itemsets.\n2. **Generate Candidates**: Generate candidate itemsets of length k+1 from frequent itemsets of length k.\n3. **Prune Candidates**: Remove candidates that do not have all subsets of length k that are frequent.\n4. **Count Support**: Count the support of each candidate in the transactions.\n5. **Filter by Support**: Keep only those candidates that meet the minimum support threshold.\n6. **Repeat**: Repeat the process until no more frequent itemsets can be found.\n\nLet's implement this in the `find_frequent_itemsets` function:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Step 1: Generate frequent 1-itemsets\n    item_counter = Counter(item for transaction in transactions for item in transaction)\n    frequent_itemsets = {frozenset([item]): count for item, count in item_counter.items() if count >= min_support_count}\n    \n    # Function to generate candidate itemsets of length k+1\n    def generate_candidates(frequent_itemsets, k):\n        candidates = set()\n        frequent_items = list(frequent_itemsets.keys())\n        for i in range(len(frequent_items)):\n            for j in range(i + 1, len(frequent_items)):\n                a = frequent_items[i]\n                b = frequent_items[j]\n                if len(a | b) == k + 1:\n                    candidates.add(a | b)\n        return candidates\n    \n    # Function to prune candidates\n    def prune_candidates(candidates, frequent_itemsets, k):\n        pruned_candidates = set()\n        for candidate in candidates:\n            for subset in combinations(candidate, k):\n                if frozenset(subset) not in frequent_itemsets:\n                    break\n            else:\n                pruned_candidates.add(candidate)\n        return pruned_candidates\n    \n    # Step 2: Generate frequent k-itemsets for k > 1\n    k = 1\n    while frequent_itemsets:\n        k += 1\n        candidates = generate_candidates(frequent_itemsets, k)\n        candidates = prune_candidates(candidates, frequent_itemsets, k - 1)\n        \n        # Count support for each candidate\n        candidate_counter = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in candidates:\n                if candidate.issubset(transaction_set):\n                    candidate_counter[candidate] += 1\n        \n        # Filter candidates by support\n        frequent_itemsets = {candidate: count for candidate, count in candidate_counter.items() if count >= min_support_count}\n    \n    # Convert frozensets to sorted tuples for the final result\n    result = {tuple(sorted(itemset)): count for itemset, count in frequent_itemsets.items()}\n    return result\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis code will correctly find all frequent itemsets in the given transactions that meet the minimum support threshold. The function uses the Apriori algorithm to efficiently generate and prune candidate itemsets, ensuring that only those with sufficient support are included in the final result."}
{"task_id": 11, "completion_id": 0, "completion": "Certainly! Below is the implementation of the K-Means clustering algorithm from scratch, adhering to the specified requirements:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the centres with the first k samples\n    centres = data[:k].copy()\n    \n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        \n        # Step 3: Recompute each centre as the mean of the samples assigned to it\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        \n        # Handle empty clusters by re-initializing them with a random sample\n        for i in range(k):\n            if counts[i] == 0:\n                random_index = np.random.randint(0, data.shape[0])\n                new_centres[i] = data[random_index]\n            else:\n                new_centres[i] /= counts[i]\n        \n        # Step 4: Check for convergence\n        max_change = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    \n    return rounded_centres, labels\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 3\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```\n\n### Explanation:\n1. **Initialization**: The initial centres are chosen as the first `k` samples from the dataset.\n2. **Assignment**: Each sample is assigned to the nearest centre using the squared Euclidean distance.\n3. **Recomputation**: Each centre is updated to be the mean of all samples assigned to it.\n4. **Empty Cluster Handling**: If a cluster becomes empty, it is re-initialized with a random sample from the dataset.\n5. **Convergence Check**: The algorithm stops if the maximum change in any centre's position is less than `epsilon` or if the maximum number of iterations (`max_iter`) is reached.\n6. **Rounding**: The final centres are rounded to 4 decimal places before being returned.\n\nThis implementation ensures that the algorithm is deterministic and testable, as required."}
{"task_id": 13, "completion_id": 0, "completion": "To implement the item-based k-NN collaborative filtering recommender in pure Python and NumPy, we will follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    \n    # Step 1: Build the item-item similarity matrix S\n    S = np.zeros((n_item, n_item))\n    \n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            # Find users who rated both items i and j\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            \n            if len(users_who_rated_both) == 0:\n                S[i, j] = 0\n                S[j, i] = 0\n            else:\n                v1 = data[users_who_rated_both, i]\n                v2 = data[users_who_rated_both, j]\n                \n                if criterion == 'cosine':\n                    # Mean center the vectors if their standard deviation is larger than 1e-3\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    \n                    # Compute cosine similarity\n                    S[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)) if np.linalg.norm(v1) * np.linalg.norm(v2) != 0 else 0\n                    S[j, i] = S[i, j]\n                elif criterion == 'pearson':\n                    # Compute Pearson correlation\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                    S[j, i] = S[i, j]\n    \n    # Step 2: Collect the indices of the items the active user has already rated\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness score for every yet unrated item\n    scores = defaultdict(float)\n    \n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            scores[t] = numerator / denominator if denominator != 0 else 0\n    \n    # Step 4: Return the indices of the k most promising items\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    \n    return recommended_items\n\n# Example usage:\n# data = np.array([[5, 3, 0, 1],\n#                  [4, 0, 0, 1],\n#                  [1, 1, 0, 5],\n#                  [1, 0, 0, 4],\n#                  [0, 1, 5, 4]])\n# user_ind = 0\n# k = 2\n# criterion = 'cosine'\n# print(knn_recommend(data, user_ind, k, criterion))\n```\n\n### Explanation:\n1. **Item-Item Similarity Matrix (`S`)**:\n   - We iterate over all pairs of items `(i, j)`.\n   - For each pair, we find the users who rated both items.\n   - If no users rated both items, the similarity is set to 0.\n   - If there are users who rated both items, we compute the similarity based on the chosen criterion (`cosine` or `pearson`).\n\n2. **Collecting Rated Items**:\n   - We identify the items that the active user has rated.\n\n3. **Predicting Attractiveness Scores**:\n   - For each unrated item, we compute the predicted attractiveness score using the formula provided.\n\n4. **Returning Recommendations**:\n   - We sort the items by their predicted scores in descending order and return the top `k` items.\n\nThis implementation ensures that the recommendations are based on the similarity between items and the ratings of the active user, adhering to the constraints and requirements specified."}
{"task_id": 19, "completion_id": 0, "completion": "To solve the problem of finding the best split for a gradient-boosting tree, we need to evaluate all possible splits for each feature and determine which one yields the maximum gain. Here's a step-by-step breakdown of how to implement the `best_split` function:\n\n1. **Calculate the Loss for the Current Node**: Compute the loss for the current node using the provided gradients and Hessians.\n2. **Evaluate All Possible Splits**: For each feature, consider every unique value as a potential threshold. For each threshold, split the data into left and right subsets and compute the loss for each subset.\n3. **Compute the Gain**: For each split, compute the gain as the difference between the current node's loss and the sum of the left and right children's losses.\n4. **Select the Best Split**: Track the split with the highest gain. Ensure that the split leaves at least two instances on each side.\n5. **Return the Best Split**: If a valid split with positive gain is found, return it; otherwise, return `None`.\n\nHere's the implementation of the `best_split` function:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    # Calculate the loss for the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * (G**2) / (H + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Get unique values of the feature and sort them\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n\n        # Sort the indices based on the feature values\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X = X[sorted_indices, feature_index]\n\n        # Initialize accumulators for the left child\n        G_L = 0\n        H_L = 0\n\n        # Iterate over possible thresholds\n        for i in range(1, n_samples - 1):\n            G_L += sorted_g[i - 1]\n            H_L += sorted_h[i - 1]\n            G_R = G - G_L\n            H_R = H - H_L\n\n            # Calculate the loss for the left and right children\n            loss_L = -0.5 * (G_L**2) / (H_L + lam) + gamma\n            loss_R = -0.5 * (G_R**2) / (H_R + lam) + gamma\n\n            # Calculate the gain\n            gain = current_loss - (loss_L + loss_R)\n\n            # Check if this is the best gain so far\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = (sorted_X[i - 1] + sorted_X[i]) / 2.0\n\n    # Return the best split if a positive gain was found\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\n```\n\n### Explanation:\n- **Current Node Loss**: We first calculate the loss for the current node using the provided gradients and Hessians.\n- **Sorting and Splitting**: For each feature, we sort the data based on the feature values and iterate over possible thresholds. We maintain accumulators for the left child's gradients and Hessians.\n- **Loss Calculation**: For each potential split, we calculate the loss for the left and right children and then compute the gain.\n- **Best Split Selection**: We keep track of the split with the highest gain and ensure that the split leaves at least two instances on each side.\n- **Return**: If a valid split with positive gain is found, we return it; otherwise, we return `None`.\n\nThis approach ensures that we efficiently find the best split for the given data and parameters."}
{"task_id": 20, "completion_id": 0, "completion": "To implement the sigmoid activation function and its gradient, we need to follow these steps:\n\n1. **Sigmoid Function**: The sigmoid function is defined as:\n   \\[\n   \\sigma(x) = \\frac{1}{1 + e^{-x}}\n   \\]\n\n2. **Gradient of Sigmoid**: The gradient of the sigmoid function is:\n   \\[\n   \\sigma'(x) = \\sigma(x) \\cdot (1 - \\sigma(x))\n   \\]\n\n3. **Handling Different Input Types**: We need to handle scalar inputs (`int` or `float`), 1-D/2-D NumPy arrays, and Python lists. For lists, we will convert them to NumPy arrays for computation and then convert the results back to lists.\n\n4. **Rounding**: All results should be rounded to 4 decimal places.\n\n5. **Return Type**: The function should return a tuple where each element is either a `float` (for scalar inputs) or a `list` (for array-like inputs).\n\nHere is the implementation of the `sigmoid_activation` function:\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute the sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if the input was a scalar\n    if isinstance(x, (int, float)) or (isinstance(x, np.ndarray) and x.ndim == 0):\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# scalar_input = 0.5\n# array_input = np.array([0.5, -1.0, 2.0])\n# list_input = [0.5, -1.0, 2.0]\n\n# print(sigmoid_activation(scalar_input))\n# print(sigmoid_activation(array_input))\n# print(sigmoid_activation(list_input))\n```\n\n### Explanation:\n- **Conversion**: We first check if the input is a list and convert it to a NumPy array for uniform processing.\n- **Sigmoid Calculation**: We compute the sigmoid using the formula \\( \\sigma(x) = \\frac{1}{1 + e^{-x}} \\).\n- **Gradient Calculation**: The gradient is computed using \\( \\sigma'(x) = \\sigma(x) \\cdot (1 - \\sigma(x)) \\).\n- **Rounding**: We use `np.round` to round the results to 4 decimal places.\n- **Return Type**: We check if the input was a scalar and return a tuple of floats. Otherwise, we convert the NumPy arrays to lists using `.tolist()` and return them.\n\nThis implementation ensures that the function works correctly for all specified input types and formats the output as required."}
{"task_id": 21, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with one-dimensional decision stumps from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    def predict_stump(x, d, theta):\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n\n    def weighted_error(stump, weights):\n        d, theta = stump\n        predictions = np.array([predict_stump(x, d, theta) for x in x_train])\n        return np.sum(weights[predictions != y_train])\n\n    while True:\n        best_stump = None\n        min_error = float('inf')\n        sorted_indices = np.argsort(x_train)\n        sorted_x = np.array(x_train)[sorted_indices]\n        sorted_y = np.array(y_train)[sorted_indices]\n        sorted_weights = weights[sorted_indices]\n\n        for i in range(n_samples - 1):\n            theta = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            for d in [0, 1]:\n                stump = (d, theta)\n                error = weighted_error(stump, sorted_weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n\n        if min_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n        \n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        predictions = np.array([predict_stump(x, best_stump[0], best_stump[1]) for x in x_train])\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        ensemble_predictions = np.sum([alpha * predict_stump(x, d, theta) for alpha, (d, theta) in zip(alphas, stumps)], axis=0)\n        ensemble_error = np.mean(np.sign(ensemble_predictions) != y_train)\n        \n        if ensemble_error <= epsilon:\n            break\n\n    def predict_ensemble(x):\n        return np.sign(np.sum([alpha * predict_stump(x, d, theta) for alpha, (d, theta) in zip(alphas, stumps)]))\n\n    return [predict_ensemble(x) for x in x_test]\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [1, 1, -1, -1, -1]\n# x_test = [1.5, 3.5, 4.5]\n# epsilon = 0.1\n# predictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\n# print(predictions)  # Output should be [1, -1, -1]\n```\n\n### Explanation:\n1. **Initialization**: We start with uniform weights for each training sample.\n2. **Stump Selection**: For each possible threshold (halfway between consecutive sorted training points) and direction (`d = 0` or `d = 1`), we calculate the weighted error.\n3. **Alpha Calculation**: The coefficient `alpha` for the chosen stump is calculated using the formula `alpha = 0.5 * ln((1 - error) / error)`.\n4. **Weight Update**: The weights are updated based on the predictions of the chosen stump and normalized.\n5. **Ensemble Error Check**: The training error of the current ensemble is checked. If it is less than or equal to `epsilon`, training stops.\n6. **Prediction**: After training, the ensemble prediction for each test sample is computed by summing the weighted predictions of all stumps and taking the sign of the result.\n\nThis implementation ensures that the AdaBoost algorithm is correctly applied to one-dimensional data using decision stumps as weak learners."}
{"task_id": 25, "completion_id": 0, "completion": "To implement the Gaussian Kernel SVM prediction function, we need to follow these steps:\n\n1. Compute the Euclidean distance between each test sample and each training sample.\n2. Apply the Gaussian (RBF) kernel to these distances.\n3. Use the kernel values, along with the Lagrange multipliers, training labels, and bias term, to compute the decision function for each test sample.\n4. Determine the predicted class for each test sample by taking the sign of the decision function.\n\nHere's the fully vectorized implementation using NumPy:\n\n```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the squared Euclidean distance matrix between X_test and X_train\n    # This is done using broadcasting and vectorized operations\n    X_test_squared = np.sum(X_test ** 2, axis=1, keepdims=True)\n    X_train_squared = np.sum(X_train ** 2, axis=1)\n    distances = X_test_squared + X_train_squared - 2 * np.dot(X_test, X_train.T)\n    \n    # Apply the Gaussian (RBF) kernel\n    kernel_matrix = np.exp(-gamma * distances)\n    \n    # Compute the decision function for each test sample\n    # g(z) = \u03a3_{i=1..n} \u03b1_i \u00b7 y_i \u00b7 exp( \u2212\u03b3 \u00b7 ||x_i \u2212 z||\u00b2 )  +  b\n    decision_function = np.dot(alpha * y_train, kernel_matrix) + b\n    \n    # Determine the predicted class for each test sample\n    predictions = np.sign(decision_function)\n    \n    # Convert the predictions to a list of integers\n    return predictions.astype(int).tolist()\n```\n\n### Explanation:\n1. **Distance Calculation**:\n   - We compute the squared Euclidean distances between each test sample and each training sample using broadcasting and vectorized operations. This avoids explicit loops and is efficient.\n   \n2. **Kernel Application**:\n   - The Gaussian (RBF) kernel is applied to these distances to get the kernel matrix. The kernel value for each pair of test and training samples is computed as \\( \\exp(-\\gamma \\cdot \\text{distance}) \\).\n\n3. **Decision Function**:\n   - The decision function for each test sample is computed by taking the dot product of the kernel matrix with the product of the Lagrange multipliers and training labels, and then adding the bias term.\n\n4. **Prediction**:\n   - The predicted class for each test sample is determined by taking the sign of the decision function. The result is converted to a list of integers before returning.\n\nThis implementation is fully vectorized and leverages NumPy for efficient computation."}
{"task_id": 28, "completion_id": 0, "completion": "To solve this task, we will use the `numpy` library to perform Singular Value Decomposition (SVD) on the input matrix \\(X\\). The truncated SVD will help us reduce the dimensionality of the data to \\(k\\) latent dimensions, and then we will reconstruct the matrix from these dimensions. Finally, we will calculate the mean squared error (MSE) between the original and reconstructed matrices.\n\nHere's the complete implementation of the function:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array\n    X_np = np.array(X)\n    \n    # Get the dimensions of the matrix\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD components to keep only the first k singular values/vectors\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix using the truncated SVD components\n    X_hat_np = U_k @ np.diag(s_k) @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to four decimal places\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = np.round(mse, 4)\n    \n    return X_hat, mse\n```\n\n### Explanation:\n1. **Input Conversion**: The input list of lists is converted to a numpy array for easier manipulation.\n2. **Dimension Check**: We check if \\(k\\) is within the valid range. If not, the function returns \\(-1\\).\n3. **Truncated SVD**: We perform SVD on the matrix and truncate the results to keep only the first \\(k\\) singular values and corresponding vectors.\n4. **Reconstruction**: The matrix is reconstructed using the truncated SVD components.\n5. **MSE Calculation**: The mean squared error between the original and reconstructed matrices is calculated.\n6. **Rounding**: Both the reconstructed matrix and the MSE are rounded to four decimal places.\n7. **Return**: The function returns the reconstructed matrix and the MSE as a tuple.\n\nThis function should work efficiently for the given constraints and provide the desired output."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the one-dimensional gradient boosting regressor using decision stumps, we need to follow the outlined steps. Here's the complete implementation of the `predict_boosting_tree` function:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    \n    # Initialize residuals as the target values\n    residuals = y_train_sorted.copy()\n    \n    # Initialize the ensemble prediction\n    ensemble_prediction = np.zeros_like(y_train_sorted)\n    \n    # Calculate initial RSS\n    current_rss = np.sum(residuals ** 2)\n    \n    # List to store the stumps (split point, c1, c2)\n    stumps = []\n    \n    # Iterate until the RSS is below the tolerance\n    while current_rss > epsilon:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        # Generate candidate split points (midpoints between consecutive x values)\n        candidate_splits = (x_train_sorted[1:] + x_train_sorted[:-1]) / 2.0\n        \n        # Evaluate each candidate split\n        for split in candidate_splits:\n            # Split the data based on the candidate split\n            left_indices = x_train_sorted <= split\n            right_indices = x_train_sorted > split\n            \n            # Calculate c1 and c2 as the mean of residuals on each side of the split\n            c1 = np.mean(residuals[left_indices])\n            c2 = np.mean(residuals[right_indices])\n            \n            # Calculate the RSS for this split\n            rss = np.sum(residuals[left_indices] ** 2) + np.sum(residuals[right_indices] ** 2)\n            \n            # Check if this split is better than the current best\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Add the best stump to the ensemble\n        stumps.append((best_split, best_c1, best_c2))\n        \n        # Update the ensemble prediction\n        ensemble_prediction[left_indices] += best_c1\n        ensemble_prediction[right_indices] += best_c2\n        \n        # Update the residuals\n        residuals = y_train_sorted - ensemble_prediction\n        \n        # Update the current RSS\n        current_rss = best_rss\n    \n    # Predict the value for x_query\n    prediction = 0.0\n    for split, c1, c2 in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    return round(prediction, 4)\n```\n\n### Explanation:\n1. **Sorting the Data**: The training data is sorted by the feature values to facilitate the calculation of candidate split points.\n2. **Candidate Split Points**: These are the midpoints between every two consecutive feature values.\n3. **Iterative Stump Addition**: The algorithm iteratively adds the stump that minimizes the residual sum of squares (RSS) until the RSS is below the specified tolerance.\n4. **Residual Update**: After adding a stump, the residuals are updated by subtracting the prediction of the current ensemble from the true targets.\n5. **Prediction**: For a given query point, the prediction is obtained by summing the contributions of all learned stumps.\n\nThis implementation ensures that the predictions are rounded to four decimal places as required."}
{"task_id": 34, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `random_binary_tensor` function according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple representing the desired shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with dtype float, containing 0.0s and 1.0s.\n    - Returns -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a random array with the specified shape\n    random_array = np.random.rand(*shape)\n    \n    # Convert the random array to a binary tensor based on the sparsity\n    binary_tensor = (random_array < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# result = random_binary_tensor(shape=(2, 3), sparsity=0.3, seed=42)\n# print(result)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the `sparsity` value is within the valid range \\([0, 1]\\). If not, it returns `-1`.\n2. **Seed Setting**: If a `seed` is provided, it sets the random seed using `np.random.seed(seed)` to ensure reproducibility.\n3. **Random Array Generation**: It generates a random array of the specified `shape` using `np.random.rand(*shape)`.\n4. **Binary Conversion**: It converts the random array into a binary tensor where each element is `1.0` with probability `sparsity` and `0.0` otherwise. This is achieved by comparing the random array to the `sparsity` threshold and casting the result to `float`.\n5. **Return**: The function returns the resulting binary tensor.\n\nThis implementation ensures that the output is a `numpy.ndarray` with `dtype` float, containing only the values `0.0` and `1.0`."}
{"task_id": 39, "completion_id": 0, "completion": "To implement the median split for KD-Tree construction using `numpy.argpartition`, we need to follow these steps:\n\n1. Use `numpy.argpartition` to partition the data such that the median element is in its correct position, and all elements smaller than the median are to its left, and all elements larger than the median are to its right.\n2. Identify the median element's index.\n3. Collect the indices of elements that are strictly smaller and strictly larger than the median.\n4. Sort the lists of indices to ensure the output is deterministic.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    \n    # Partition the data along column `d` such that the median is at the correct position\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The median index in the partitioned array\n    pivot = partitioned_indices[median_index]\n    \n    # Collect indices of elements strictly smaller and strictly larger than the median\n    left_indices = partitioned_indices[partitioned_indices < median_index]\n    right_indices = partitioned_indices[partitioned_indices > median_index]\n    \n    # Sort the lists of indices to ensure deterministic output\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    \n    return pivot, left, right\n```\n\n### Explanation:\n1. **Partitioning**: `np.argpartition(data[:, d], median_index)` rearranges the indices of the array such that the element at `median_index` is the median, and all elements to the left are smaller, and all elements to the right are larger.\n2. **Median Index**: `pivot` is the index of the median element in the original array.\n3. **Collecting Indices**: We use boolean indexing to collect indices of elements that are strictly smaller (`left_indices`) and strictly larger (`right_indices`) than the median.\n4. **Sorting**: We sort `left_indices` and `right_indices` to ensure the output is deterministic.\n\nThis approach ensures that the split is performed in O(n) time, as required."}
{"task_id": 40, "completion_id": 0, "completion": "To implement the `to_frames` function using `numpy.lib.stride_tricks.as_strided`, we need to carefully manipulate the strides of the input array `x` to create a view that represents overlapping frames. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input array must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input array must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides for the new array\n    x_itemsize = x.itemsize\n    x_stride = x.strides[0]\n    new_shape = (n_frames, frame_width)\n    new_strides = (x_stride * stride, x_stride)\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=new_shape, strides=new_strides, writeable=writeable)\n\n    return frames\n\n# Example usage:\n# x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# frame_width = 3\n# stride = 2\n# frames = to_frames(x, frame_width, stride)\n# print(frames)\n# Output:\n# array([[1, 2, 3],\n#        [3, 4, 5],\n#        [5, 6, 7],\n#        [7, 8, 9]])\n```\n\n### Explanation:\n1. **Assertions**: We first check the pre-conditions:\n   - The input array `x` must be one-dimensional.\n   - The `stride` must be a positive integer.\n   - The length of `x` must be at least as long as the `frame_width`.\n\n2. **Number of Frames Calculation**: We calculate the number of frames using the formula:\n   \\[\n   n\\_frames = \\left(\\frac{\\text{len}(x) - \\text{frame\\_width}}{\\text{stride}}\\right) + 1\n   \\]\n\n3. **Stride Calculation**: We determine the strides for the new array:\n   - The first stride is `x_stride * stride` because we want to move `stride` elements forward in the original array for each new frame.\n   - The second stride is `x_stride` because we want to move one element forward within each frame.\n\n4. **Creating the View**: We use `as_strided` to create a view of the original array with the desired shape and strides. The `writeable` parameter controls whether the resulting array is writable.\n\nThis implementation ensures that the function returns a view on the original data, avoiding unnecessary copies and maintaining efficiency."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\nThis function first ensures that the input is a NumPy array, which simplifies the subsequent checks. It then verifies that the matrix is two-dimensional, that all elements are within the range [0, 1], and that each row sums to 1 within a tolerance of `1e-8`. If all these conditions are met, the function returns `True`; otherwise, it returns `False`."}
{"task_id": 55, "completion_id": 0, "completion": "Certainly! Below is the implementation of the RMSprop optimizer for linear regression in Python. This function will iteratively update the weight vector using the RMSprop update rule and will stop early if the gradient norm is smaller than the specified threshold or if the maximum number of iterations is reached.\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Determine the batch indices\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        \n        # Compute the gradient\n        gradient = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update the weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check the norm of the gradient for early stopping\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([3, 5, 7, 9])\n# print(rms_prop(X, y))\n```\n\n### Explanation:\n1. **Initialization**:\n   - `w` is initialized to a zero vector of size `d` (number of features).\n   - `s` is initialized to a zero vector of size `d` to store the running average of squared gradients.\n\n2. **Batch Processing**:\n   - The data is processed in mini-batches. If the batch extends beyond the end of the dataset, it wraps around to the beginning.\n\n3. **Gradient Calculation**:\n   - The gradient `g` is computed using the formula \\( g = \\frac{1}{n} X^T (Xw - y) \\).\n\n4. **RMSprop Update**:\n   - The running average of squared gradients `s` is updated using the formula \\( s \\leftarrow \\rho \\cdot s + (1 - \\rho) \\cdot g^2 \\).\n   - The weights `w` are updated using the RMSprop update rule \\( w \\leftarrow w - \\eta \\cdot \\frac{g}{\\sqrt{s} + \\epsilon_{\\text{station}}} \\).\n\n5. **Early Stopping**:\n   - The optimization stops if the norm of the gradient is smaller than `epsilon` or if the maximum number of iterations is reached.\n\n6. **Return**:\n   - The final weight vector is rounded to four decimal places and returned as a Python list."}
{"task_id": 56, "completion_id": 0, "completion": "To implement the `softplus` function with the specified requirements, we need to handle both scalar and array-like inputs, compute the SoftPlus function and its derivative (sigmoid function) in a numerically stable way, and ensure the results are rounded to four decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation function or its derivative (sigmoid).\n    \n    Parameters:\n    x (scalar, list, or np.ndarray): Input values.\n    deriv (bool): If True, compute the derivative (sigmoid) instead of SoftPlus.\n    \n    Returns:\n    float or list: Rounded result of SoftPlus or sigmoid.\n    \"\"\"\n    # Helper function to compute SoftPlus in a numerically stable way\n    def stable_softplus(x):\n        # Use log1p for numerical stability when x is large\n        return np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    \n    # Helper function to compute sigmoid\n    def sigmoid(x):\n        # Use piece-wise expression for numerical stability\n        return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    \n    # Convert input to a numpy array for vectorized operations\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n        scalar_input = False\n    else:\n        x = np.array([x])\n        scalar_input = True\n    \n    if deriv:\n        result = sigmoid(x)\n    else:\n        result = stable_softplus(x)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return a float if the input was a scalar, otherwise return a list\n    if scalar_input:\n        return float(result[0])\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(softplus(1.0))  # SoftPlus of 1.0\n# print(softplus(1.0, deriv=True))  # Derivative of SoftPlus at 1.0\n# print(softplus([-1.0, 0.0, 1.0]))  # SoftPlus of [-1.0, 0.0, 1.0]\n# print(softplus([-1.0, 0.0, 1.0], deriv=True))  # Derivative of SoftPlus at [-1.0, 0.0, 1.0]\n```\n\n### Explanation:\n1. **Numerical Stability**:\n   - For the SoftPlus function, we use `np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)` to avoid overflow when `x` is large.\n   - For the sigmoid function, we use a piece-wise expression to handle both positive and negative values of `x` without overflow.\n\n2. **Handling Inputs**:\n   - The function checks if the input `x` is a scalar, list, or NumPy array and converts it to a NumPy array for vectorized operations.\n   - If the input is a scalar, it processes it and returns a scalar float. Otherwise, it returns a list.\n\n3. **Rounding**:\n   - The results are rounded to four decimal places using `np.round`.\n\nThis implementation ensures that the function works efficiently and accurately for a wide range of input values."}
{"task_id": 58, "completion_id": 0, "completion": "To implement the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram language model, we need to follow these steps:\n\n1. **Count N-grams and (N-1)-grams**: We need to count the occurrences of each N-gram and (N-1)-gram in the corpus.\n2. **Calculate Probabilities**: For each N-gram in the sequence, calculate its probability using the counts.\n3. **Compute Log-Probability**: Sum the log-probabilities of all N-grams in the sequence.\n4. **Handle Zero Counts**: If any N-gram or its prefix is not found in the corpus, return `float('-inf')`.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    \n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n    \n    # Count N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    if N > 1:\n        n_minus_1_gram_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        n_minus_1_gram_counts = Counter(corpus)\n    \n    total_log_prob = 0.0\n    \n    # Calculate the log-probability of the sequence\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N == 1:\n            count_ngram = ngram_counts[ngram[0]]\n            count_n_minus_1_gram = len(corpus)\n        else:\n            count_ngram = ngram_counts[ngram]\n            count_n_minus_1_gram = n_minus_1_gram_counts[ngram[:-1]]\n        \n        if count_ngram == 0 or count_n_minus_1_gram == 0:\n            return float('-inf')\n        \n        prob = count_ngram / count_n_minus_1_gram\n        total_log_prob += np.log(prob)\n    \n    return round(total_log_prob, 4)\n\n# Example usage:\n# corpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"cat\", \"sat\"]\n# sequence = [\"the\", \"cat\", \"sat\"]\n# N = 2\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output: log-probability rounded to 4 decimal places\n```\n\n### Explanation:\n1. **Counting N-grams and (N-1)-grams**:\n   - We use `Counter` to count occurrences of each N-gram and (N-1)-gram in the corpus.\n   - For `N=1`, we count individual words directly.\n\n2. **Calculating Probabilities**:\n   - For each N-gram in the sequence, we calculate its probability using the counts.\n   - For `N=1`, the probability of a word is its count divided by the total number of words in the corpus.\n   - For `N>1`, the probability of an N-gram is its count divided by the count of its (N-1)-gram prefix.\n\n3. **Computing Log-Probability**:\n   - We sum the log-probabilities of all N-grams in the sequence.\n   - If any count is zero, we return `float('-inf')` immediately.\n\n4. **Rounding**:\n   - The final log-probability is rounded to 4 decimal places before returning.\n\nThis implementation ensures that we handle zero counts correctly and compute the log-probability as required."}
{"task_id": 62, "completion_id": 0, "completion": "Certainly! Below is the implementation of the univariate Lasso regression with polynomial features using coordinate descent as described in the task:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Number of samples\n    m = len(X)\n    \n    # Build the design matrix\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    # Coordinate descent\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        \n        # Update the bias term w0\n        y_pred = X_poly @ w\n        w[0] = np.mean(y - y_pred + w[0])\n        \n        # Update the other coefficients w1, w2, ..., wd\n        for j in range(1, degree + 1):\n            X_j = X_poly[:, j]\n            rho = X_j.T @ (y - (X_poly @ w) + w[j] * X_j)\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_j.T @ X_j)\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    # Return the coefficients rounded to 4 decimal places\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 4, 6, 8, 10]\n# degree = 1\n# reg_factor = 0.1\n# print(lasso_regression(X, y, degree, reg_factor))\n```\n\n### Explanation:\n1. **Design Matrix Construction**: The design matrix `X_poly` is constructed using `np.vander`, which generates a Vandermonde matrix with increasing powers of `X` up to the specified `degree`.\n\n2. **Weight Initialization**: The weights `w` are initialized to zero.\n\n3. **Coordinate Descent**:\n   - **Bias Update**: The bias term `w[0]` is updated exactly using the formula `w[0] = mean(y - X_poly @ w + w[0])`.\n   - **Coefficient Update**: For each coefficient `w[j]` (where `j` ranges from 1 to `degree`), the update is performed using the soft-thresholding formula:\n     \\[\n     \\rho = X_j^T (y - (X \\cdot w) + w_j X_j)\n     \\]\n     \\[\n     w_j = \\text{sign}(\\rho) \\cdot \\max(|\\rho| - \\lambda, 0) / (X_j^T X_j)\n     \\]\n\n4. **Convergence Check**: The algorithm checks if the maximum absolute change in any coefficient is less than the specified tolerance `tol`. If so, it stops early.\n\n5. **Return**: The final coefficients are rounded to four decimal places and returned as a list.\n\nThis implementation ensures that the Lasso regression is performed correctly with polynomial features and coordinate descent, and it handles the special case where `reg_factor` is zero, converging to the ordinary least-squares solution."}
{"task_id": 63, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `backward_beta` function that calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model (HMM).\n\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model (HMM).\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize \u03b2 with zeros\n    beta = np.zeros(N)\n\n    # Base case: \u03b2_{T-1}(i) = 1 for all i\n    if t == T - 1:\n        beta = np.ones(N)\n    else:\n        # Recursive case: \u03b2_t(i) = \u03a3_j a_{ij} * b_j(o_{t+1}) * \u03b2_{t+1}(j)\n        beta_next = backward_beta(A, B, obs, t + 1)\n        for i in range(N):\n            beta[i] = sum(A[i][j] * B[j][obs[t + 1]] * beta_next[j] for j in range(N))\n\n    # Return the result rounded to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# obs = [0, 1, 2]\n# t = 0\n# print(backward_beta(A, B, obs, t))  # Output: [0.0860, 0.2540]\n```\n\n### Explanation:\n1. **Initialization**: The function initializes a zero vector `beta` of size \\(N\\) (number of states).\n2. **Base Case**: If \\(t\\) is the last time index (\\(T-1\\)), the backward probability \\(\\beta_{T-1}(i)\\) is set to 1 for all states \\(i\\).\n3. **Recursive Case**: For \\(t < T-1\\), the function recursively calculates the backward probabilities for the next time step \\(t+1\\) and uses these to compute \\(\\beta_t(i)\\) for the current time step \\(t\\).\n4. **Rounding**: The final backward probabilities are rounded to 4 decimal places before being returned.\n\nThis function uses recursion to compute the backward probabilities, which is a straightforward approach given the recursive nature of the problem."}
{"task_id": 65, "completion_id": 0, "completion": "To implement the backward algorithm for a Hidden Markov Model (HMM), we need to follow the steps outlined in the problem description. Here's the complete implementation of the `backward_prob` function:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n    \n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    \n    # Number of states\n    N = A.shape[0]\n    # Length of the observation sequence\n    T = len(obs)\n    \n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    \n    # Base case: beta_{T-1}(i) = 1 for all states i\n    beta[T-1, :] = 1.0\n    \n    # Recursive case: beta_t(i) = sum_{j=0}^{N-1} A_{ij} * B_{j, obs[t+1]} * beta_{t+1}(j)\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n    \n    # Calculate the probability of the observation sequence\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    \n    # Return the probability rounded to 6 decimal places\n    return round(prob, 6)\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# pi = [0.6, 0.4]\n# obs = [0, 1, 2]\n# print(backward_prob(A, B, pi, obs))  # Output should be the probability of the sequence\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if any of the input lists are empty. If so, it returns `0.0` because no valid probability can be computed.\n2. **Conversion to Numpy Arrays**: The input lists are converted to numpy arrays for easier manipulation and efficient computation.\n3. **Initialization**: The backward variables `beta` are initialized. The base case sets `beta_{T-1}(i) = 1` for all states `i`.\n4. **Recursive Calculation**: The backward variables are calculated recursively from `t = T-2` to `t = 0` using the formula provided.\n5. **Final Probability Calculation**: The probability of the observation sequence is computed using the initial probabilities, the emission probabilities for the first observation, and the backward variables for the first time step.\n6. **Rounding**: The result is rounded to six decimal places before being returned.\n\nThis implementation efficiently computes the probability of an observation sequence using the backward algorithm in an HMM."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models (HMMs), we need to follow these steps:\n\n1. **Input Validation**: Ensure that the dimensions of the matrices and vectors are consistent and that the observations are within the valid range.\n2. **Initialization**: Initialize the forward variables for the first observation.\n3. **Recursion**: Use the forward algorithm to compute the forward variables for each subsequent observation.\n4. **Termination**: Sum the forward variables at the final time step to get the probability of the observation sequence.\n\nHere's the complete implementation of the `forward_algorithm` function:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    n = len(S)  # Number of states\n    m = B.shape[1]  # Number of possible observations\n    \n    if A.shape != (n, n) or B.shape != (n, m) or len(observations) == 0:\n        return -1\n    \n    # Validate observation indices\n    if not np.all((observations >= 0) & (observations < m)):\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    \n    # Recursion step\n    for t in range(1, T):\n        alpha[t] = (alpha[t-1] @ A) * B[:, observations[t]]\n    \n    # Termination step: sum of all states at the last time step\n    likelihood = np.sum(alpha[-1])\n    \n    return round(likelihood, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.5], [0.4, 0.6]]\n# observations = [0, 1, 0]\n# print(forward_algorithm(S, A, B, observations))  # Output should be rounded to 4 decimal places\n```\n\n### Explanation:\n1. **Input Validation**:\n   - We check if the dimensions of `A` and `B` match the expected dimensions based on the number of states `n` and the number of possible observations `m`.\n   - We ensure that the `observations` list is not empty and that all observation indices are within the valid range `[0, m-1]`.\n\n2. **Initialization**:\n   - We initialize the forward variables `alpha` for the first observation using the initial state probabilities `S` and the emission probabilities `B`.\n\n3. **Recursion**:\n   - For each subsequent observation, we update the forward variables using the previous forward variables, the state transition matrix `A`, and the emission probabilities `B`.\n\n4. **Termination**:\n   - We sum the forward variables at the final time step to get the probability of the observation sequence.\n\nThis implementation ensures that the forward algorithm is correctly applied and handles invalid inputs gracefully by returning `-1`."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm in Python, we need to follow these steps:\n\n1. **Count the support of every single item** and discard infrequent ones.\n2. **Build an FP-tree** from the transactions.\n3. **Mine the FP-tree** to find frequent item-sets by recursively constructing conditional FP-trees.\n\nHere's the complete implementation:\n\n```python\nfrom collections import Counter, defaultdict, namedtuple\nfrom typing import List\n\nclass Node:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = defaultdict(Node)\n\n    def add_child(self, item):\n        if item not in self.children:\n            self.children[item] = Node(item, 0, self)\n        self.children[item].count += 1\n        return self.children[item]\n\ndef build_header_table(frequency):\n    header_table = {}\n    for item, count in frequency.items():\n        header_table[item] = None\n    return header_table\n\ndef insert_tree(transaction, tree, header_table, min_support):\n    current_node = tree\n    for item in transaction:\n        current_node = current_node.add_child(item)\n        update_header_table(item, current_node, header_table)\n\ndef update_header_table(item, node, header_table):\n    if header_table[item] is None:\n        header_table[item] = node\n    else:\n        current_node = header_table[item]\n        while current_node.link is not None:\n            current_node = current_node.link\n        current_node.link = node\n\ndef find_frequent_items(transactions, min_support):\n    frequency = Counter(item for transaction in transactions for item in transaction)\n    return {item: count for item, count in frequency.items() if count >= min_support}\n\ndef build_fp_tree(transactions, min_support):\n    frequency = find_frequent_items(transactions, min_support)\n    if not frequency:\n        return None, None\n    sorted_transactions = [[item for item in transaction if item in frequency] for transaction in transactions]\n    sorted_transactions = [sorted(transaction, key=lambda x: frequency[x], reverse=True) for transaction in sorted_transactions]\n    tree = Node(None, 0, None)\n    header_table = build_header_table(frequency)\n    for transaction in sorted_transactions:\n        insert_tree(transaction, tree, header_table, min_support)\n    return tree, header_table\n\ndef find_prefix_path(base_pat, tree_node):\n    cond_patterns = []\n    while tree_node is not None:\n        prefix_path = []\n        node = tree_node\n        while node.parent is not None:\n            prefix_path.append(node.item)\n            node = node.parent\n        if len(prefix_path) > 1:\n            cond_patterns.append((prefix_path[1:], tree_node.count))\n        tree_node = tree_node.link\n    return cond_patterns\n\ndef mine_tree(header_table, min_support, prefix, frequent_itemsets):\n    items = [v[0] for v in sorted(header_table.items(), key=lambda p: p[1].count)]\n    for base_pat in items:\n        new_prefix = prefix.copy()\n        new_prefix.add(base_pat)\n        frequent_itemsets.append(list(new_prefix))\n        cond_patterns = find_prefix_path(base_pat, header_table[base_pat])\n        cond_tree, cond_header = build_fp_tree([pat[0] for pat in cond_patterns], min_support)\n        if cond_header is not None:\n            mine_tree(cond_header, min_support, new_prefix, frequent_itemsets)\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    \n    fp_tree, header_table = build_fp_tree(transactions, min_support)\n    if not header_table:\n        return []\n    \n    frequent_itemsets = []\n    mine_tree(header_table, min_support, set(), frequent_itemsets)\n    \n    # Sort the frequent itemsets\n    frequent_itemsets = [sorted(itemset) for itemset in frequent_itemsets]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    \n    return frequent_itemsets\n```\n\n### Explanation:\n\n1. **Node Class**: Represents a node in the FP-tree. Each node has an item, a count, a parent, a link to the next node with the same item, and children nodes.\n\n2. **build_header_table**: Creates a header table to keep track of the nodes with the same item.\n\n3. **insert_tree**: Inserts a transaction into the FP-tree and updates the header table.\n\n4. **update_header_table**: Updates the header table with the new node.\n\n5. **find_frequent_items**: Counts the frequency of each item and filters out infrequent items.\n\n6. **build_fp_tree**: Builds the FP-tree from the transactions and returns the root of the tree and the header table.\n\n7. **find_prefix_path**: Finds all prefix paths for a given item in the FP-tree.\n\n8. **mine_tree**: Recursively mines the FP-tree to find frequent item-sets.\n\n9. **fp_growth**: The main function that initializes the FP-tree, mines it, and returns the sorted list of frequent item-sets.\n\nThis implementation ensures that the output is deterministic and meets the specified constraints."}
{"task_id": 75, "completion_id": 0, "completion": "Certainly! Below is the implementation of the k-Nearest Neighbour (k-NN) classifier based on the given requirements:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is a valid number\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # List to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute squared Euclidean distances from the test sample to all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Count the occurrences of each label\n        label_counts = Counter(k_nearest_labels)\n        \n        # Find the label with the highest count (smallest label in case of a tie)\n        predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n        \n        # Append the predicted label to the predictions list\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `k` is a valid number (i.e., `1 \u2264 k \u2264 len(X_train)`). If not, it returns `-1`.\n2. **Data Conversion**: The input lists are converted to NumPy arrays for efficient computation.\n3. **Distance Calculation**: For each test sample, the squared Euclidean distances to all training samples are computed.\n4. **Nearest Neighbors**: The indices of the `k` nearest neighbors are determined by sorting the distances.\n5. **Label Voting**: The labels of the `k` nearest neighbors are counted, and the label with the highest count is chosen. In case of a tie, the smallest label is selected.\n6. **Prediction Storage**: The predicted label for each test sample is stored in a list, which is returned at the end.\n\nThis implementation ensures that the k-NN classifier adheres to the specified rules and constraints."}
{"task_id": 76, "completion_id": 0, "completion": "To implement the categorical cross-entropy loss function, we need to follow these steps:\n\n1. Convert the input lists to NumPy arrays if they aren't already.\n2. Ensure that the shapes of `y` and `y_pred` are the same.\n3. Add a small constant (machine epsilon) to `y_pred` to avoid taking the logarithm of zero.\n4. Compute the element-wise product of `y` and the logarithm of `y_pred`.\n5. Sum these products over all elements to get the total loss.\n6. Return the loss rounded to four decimal places.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they aren't already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Ensure the shapes are the same\n    assert y.shape == y_pred.shape, \"Shapes of y and y_pred must be the same\"\n    \n    # Add a small constant (machine epsilon) to y_pred for numerical stability\n    epsilon = np.finfo(float).eps\n    y_pred = y_pred + epsilon\n    \n    # Compute the element-wise product of y and the logarithm of y_pred\n    log_y_pred = np.log(y_pred)\n    elementwise_product = y * log_y_pred\n    \n    # Sum these products over all elements to get the total loss\n    total_loss = -np.sum(elementwise_product)\n    \n    # Return the loss rounded to four decimal places\n    return round(total_loss, 4)\n```\n\n### Explanation:\n- **Conversion to NumPy Arrays**: This ensures that we can use NumPy's efficient array operations.\n- **Shape Check**: We assert that the shapes of `y` and `y_pred` are the same to ensure valid input.\n- **Numerical Stability**: Adding `np.finfo(float).eps` to `y_pred` prevents taking the logarithm of zero, which would result in `-inf`.\n- **Element-wise Product and Sum**: We compute the element-wise product of `y` and `log(y_pred)`, then sum these values to get the total loss.\n- **Rounding**: The result is rounded to four decimal places before returning.\n\nThis function should work correctly for valid inputs as specified in the task description."}
{"task_id": 77, "completion_id": 0, "completion": "To implement the forward propagation for an L-layer neural network with the specified architecture, we need to iterate through each layer, perform the linear and non-linear transformations, and store the necessary cache for each layer. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # Number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n\n    # Convert AL to a list and round to 4 decimal places\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n```\n\n### Explanation:\n1. **Activation Functions**:\n   - `relu(Z)`: Implements the ReLU activation function.\n   - `sigmoid(Z)`: Implements the sigmoid activation function.\n\n2. **Forward Propagation**:\n   - We initialize `A` with the input `X`.\n   - We determine the number of layers `L` by dividing the length of the `parameters` dictionary by 2 (since each layer has a `W` and a `b`).\n   - For each layer from 1 to `L-1`, we perform the linear transformation `Z = W\u00b7A_prev + b` and then apply the ReLU activation function. We store the cache `(A_prev, W, b, Z)` for each layer.\n   - For the output layer `L`, we perform the linear transformation and then apply the sigmoid activation function. We store the cache for this layer as well.\n   - Finally, we round the output `AL` to 4 decimal places and convert it to a plain Python list.\n\nThis implementation ensures that the forward propagation is correctly performed and that the necessary caches are stored for potential use in backpropagation."}
{"task_id": 81, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `compute_cost` function that calculates the binary cross-entropy cost between the predicted probabilities `A2` and the ground-truth labels `Y`. The function ensures that the values in `A2` are clipped to the interval \\([10^{-15}, 1 - 10^{-15}]\\) to avoid taking the logarithm of zero.\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is clipped to the interval [1e-15, 1 - 1e-15]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = A2.shape[0]\n    \n    # Compute the binary cross-entropy cost\n    cost = - (1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(A2, Y))  # Output should be the cost rounded to 6 decimal places\n```\n\n### Explanation:\n1. **Clipping**: The `np.clip` function is used to ensure that all values in `A2` are within the range \\([10^{-15}, 1 - 10^{-15}]\\). This prevents the logarithm function from encountering zero or one, which would result in undefined or infinite values.\n2. **Cost Calculation**: The binary cross-entropy cost is computed using the formula provided. The `np.sum` function is used to sum over all samples, and the result is divided by the number of samples `m`.\n3. **Rounding**: The final cost is rounded to six decimal places using the `round` function before being returned.\n\nThis function should work correctly for any valid input arrays `A2` and `Y` of the same shape."}
{"task_id": 82, "completion_id": 0, "completion": "To implement the \u03b5-soft exploration policy, we need to follow these steps:\n\n1. Identify the action with the highest Q-value (greedy action). In case of ties, select the first occurrence.\n2. Calculate the base probability for non-greedy actions, which is \\( \\frac{\\epsilon}{n} \\).\n3. Set the probability of the greedy action to \\( 1 - \\epsilon + \\frac{\\epsilon}{n} \\).\n4. Set the probability of all other actions to the base probability.\n5. Ensure that the probabilities sum to 1 within a numerical tolerance.\n6. Round the probabilities to 4 decimal places.\n\nHere's the implementation of the `epsilon_soft` function:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)  # First occurrence in case of ties\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    \n    # Ensure the probabilities sum to 1 within numerical tolerance\n    probabilities = probabilities / np.sum(probabilities)\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum is exactly 1 after rounding\n    if not np.isclose(np.sum(probabilities), 1.0, atol=1e-12):\n        raise ValueError(\"Probabilities do not sum to 1 within the required tolerance.\")\n    \n    return probabilities.tolist()\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\n### Explanation:\n- **Step 1:** Convert the input `Q` to a NumPy array for easier manipulation.\n- **Step 2:** Determine the number of actions `n`.\n- **Step 3:** Find the index of the greedy action using `np.argmax`, which returns the first occurrence in case of ties.\n- **Step 4:** Calculate the base probability for non-greedy actions.\n- **Step 5:** Initialize an array of probabilities with the base probability for all actions.\n- **Step 6:** Set the probability of the greedy action to \\( 1 - \\epsilon + \\frac{\\epsilon}{n} \\).\n- **Step 7:** Normalize the probabilities to ensure they sum to 1.\n- **Step 8:** Round the probabilities to 4 decimal places.\n- **Step 9:** Verify that the sum of the probabilities is exactly 1 within the specified tolerance.\n\nThis implementation ensures that the \u03b5-soft policy is correctly applied and that the output meets all the specified constraints."}
{"task_id": 86, "completion_id": 0, "completion": "To solve the problem of aggregating predictions from a Random Forest using majority voting, we can follow these steps:\n\n1. **Transpose the Predictions**: Convert the list of lists (where each inner list represents predictions from a single tree) into a list of lists where each inner list represents predictions for a single sample across all trees. This can be done using the `zip` function.\n\n2. **Count Votes for Each Sample**: For each sample, count the occurrences of each class label using the `Counter` from the `collections` module.\n\n3. **Determine the Majority Vote**: For each sample, find the class label with the highest count. In case of a tie, select the smallest label (either numerically or lexicographically).\n\n4. **Return the Aggregated Predictions**: Collect the majority vote for each sample into a single list and return it.\n\nHere is the implementation of the function:\n\n```python\nfrom collections import Counter\nfrom typing import List, Union\n\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : List[List[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    List[Union[int, float, str]]\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to group predictions for each sample\n    transposed_predictions = zip(*predictions)\n    \n    # List to store the final aggregated predictions\n    aggregated_predictions = []\n    \n    # Iterate over each sample's predictions\n    for sample_votes in transposed_predictions:\n        # Count the votes for each class label\n        vote_counts = Counter(sample_votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen by default\n        majority_vote = min(vote_counts, key=lambda x: (-vote_counts[x], x))\n        \n        # Append the majority vote to the result list\n        aggregated_predictions.append(majority_vote)\n    \n    return aggregated_predictions\n```\n\n### Explanation:\n\n- **Transposing the Predictions**: `zip(*predictions)` effectively transposes the list of lists, so that each element in the resulting iterable corresponds to the predictions for a single sample across all trees.\n\n- **Counting Votes**: `Counter(sample_votes)` creates a dictionary-like object where keys are the class labels and values are the counts of those labels.\n\n- **Finding the Majority Vote**: `min(vote_counts, key=lambda x: (-vote_counts[x], x))` finds the label with the highest count. The `key` function ensures that in case of a tie, the smallest label is chosen. The `-vote_counts[x]` part ensures that the label with the highest count is prioritized, and `x` ensures that the smallest label is chosen in case of a tie.\n\nThis function should work efficiently for both numeric and string labels, adhering to the constraints and requirements specified."}
{"task_id": 88, "completion_id": 0, "completion": "Here's the implementation of the `softplus` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert the result to a list if the input was not a scalar\n    if isinstance(z, np.ndarray) and z.ndim > 0:\n        return result.tolist()\n    else:\n        return result.item()\n\n# Example usage:\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input `z` is a scalar (either `int` or `float`). If it is, it converts it into a NumPy array with a single element. Otherwise, it converts the input to a NumPy array.\n2. **Numerical Stability**: The `np.logaddexp(0.0, z)` function is used to compute the softplus in a numerically stable manner.\n3. **Rounding**: The result is rounded to 4 decimal places using `np.round`.\n4. **Output Conversion**: If the input was a scalar, the function returns a single `float` using `result.item()`. If the input was an array or list, it converts the result to a pure Python list using `tolist()`.\n\nThis implementation ensures that the function handles both scalar and array-like inputs correctly and returns the results in the required format."}
{"task_id": 90, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `mse` function that computes the mean-squared error between the true expected payouts of each arm and the policy's estimates. The function handles the case where the policy does not contain any estimates by returning `numpy.nan`.\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has the 'ev_estimates' attribute and if it is not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    \n    # Ensure the estimates are sorted by arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate the squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute the mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output should be 0.0075\n```\n\n### Explanation:\n1. **Check for Estimates**: The function first checks if the `policy` object has the `ev_estimates` attribute and if it is not empty. If either condition is not met, it returns `numpy.nan`.\n2. **Extract Values**: It extracts the true expected values from `bandit.arm_evs` and the policy's estimates from `policy.ev_estimates`.\n3. **Sort Estimates**: The estimates are sorted by their arm indices to ensure they align correctly with the true expected values.\n4. **Compute Squared Errors**: It computes the squared error for each arm.\n5. **Mean-Squared Error**: It calculates the mean of these squared errors.\n6. **Round and Return**: Finally, it rounds the result to 4 decimal places and returns it.\n\nThis implementation ensures that the function behaves correctly according to the problem description and handles edge cases appropriately."}
{"task_id": 96, "completion_id": 0, "completion": "To implement the additive-smoothed N-gram log-probability function, we need to follow these steps:\n\n1. **Build N-gram Frequency Tables**: Create frequency tables for all 1-grams to N-grams from the training corpus.\n2. **Handle Unseen Words**: Add an explicit `<UNK>` token to the vocabulary to handle words that do not appear in the training corpus.\n3. **Estimate Probabilities**: Use the additive smoothing formula to estimate the probability of each N-gram in the target sentence.\n4. **Compute Log-Probability**: Calculate the natural logarithm of the sentence probability by summing the log-probabilities of all N-grams and return the result rounded to 4 decimal places.\n\nHere's the complete implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build N-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    unigram_counts = Counter()\n    vocab = set()\n\n    for sentence in corpus:\n        words = sentence.split()\n        words = ['<s>'] * (N - 1) + words + ['</s>']  # Add start and end markers\n        vocab.update(words)\n        \n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            ngram_counts[N][ngram] += 1\n            unigram_counts[ngram[-1]] += 1\n            \n            for n in range(1, N):\n                sub_ngram = tuple(words[i:i + n])\n                ngram_counts[n][sub_ngram] += 1\n                unigram_counts[sub_ngram[-1]] += 1\n\n    # Add <UNK> to the vocabulary\n    vocab.add('<UNK>')\n    vocab_size = len(vocab)\n\n    # Step 2: Handle unseen words in the sequence\n    sequence_words = sequence.split()\n    if len(sequence_words) < N:\n        return 0.0\n\n    sequence_words = ['<s>'] * (N - 1) + sequence_words + ['</s>']\n\n    # Step 3: Estimate probabilities and compute log-probability\n    log_prob = 0.0\n\n    for i in range(N - 1, len(sequence_words)):\n        context = tuple(sequence_words[i - N + 1:i])\n        word = sequence_words[i]\n        \n        if word not in vocab:\n            word = '<UNK>'\n        \n        ngram = context + (word,)\n        context_count = ngram_counts[N - 1][context]\n        ngram_count = ngram_counts[N][ngram]\n        \n        prob = (ngram_count + K) / (context_count + K * vocab_size)\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\n### Explanation:\n1. **N-gram Frequency Tables**: We use `defaultdict(Counter)` to store counts of N-grams and unigrams. We also maintain a set `vocab` to keep track of all unique words in the corpus.\n2. **Handling Unseen Words**: We add a special token `<UNK>` to the vocabulary to handle words not seen in the training data.\n3. **Estimating Probabilities**: For each N-gram in the target sentence, we use the additive smoothing formula to compute the probability.\n4. **Computing Log-Probability**: We sum the log-probabilities of all N-grams in the target sentence and return the result rounded to 4 decimal places.\n\nThis implementation ensures that we correctly handle unseen words, build the necessary frequency tables, and compute the log-probability using additive smoothing."}
{"task_id": 108, "completion_id": 0, "completion": "To implement the Regularized Alternating Least Squares (ALS) algorithm for matrix factorization, we need to follow these steps:\n\n1. **Initialize the Factor Matrices**: Start with random initializations for the factor matrices \\( W \\) and \\( H \\). We will use a fixed random seed for reproducibility.\n2. **Iteratively Update the Factor Matrices**: Alternate between updating \\( W \\) while keeping \\( H \\) fixed, and updating \\( H \\) while keeping \\( W \\) fixed. Each update involves solving a regularized least squares problem.\n3. **Compute the Loss**: After each update, compute the regularized Frobenius reconstruction loss to check for convergence.\n4. **Stop Criteria**: Stop the iterations if the loss drops below the specified tolerance or if the maximum number of iterations is reached.\n5. **Return the Reconstructed Matrix**: Once the iterations are complete, return the reconstructed matrix \\( \\hat{X} = WH \\) rounded to 4 decimal places and converted to a list of lists.\n\nHere is the implementation of the `als_factorization` function:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss(W, H, X):\n        return np.linalg.norm(X - W @ H, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n    \n    for iteration in range(max_iter):\n        # Update W\n        for i in range(N):\n            HtH = H.T @ H\n            HtX = H.T @ X[i, :]\n            W[i, :] = np.linalg.solve(HtH + alpha * np.eye(K), HtX)\n        \n        # Update H\n        for j in range(M):\n            WtW = W.T @ W\n            WtX = W.T @ X[:, j]\n            H[:, j] = np.linalg.solve(WtW + alpha * np.eye(K), WtX)\n        \n        # Compute the loss\n        loss = compute_loss(W, H, X)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    # Reconstruct the matrix\n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n```\n\n### Explanation:\n- **Initialization**: We initialize \\( W \\) and \\( H \\) with random values using `np.random.rand` and set the random seed to 0 for reproducibility.\n- **Updating \\( W \\)**: For each row \\( i \\) of \\( W \\), we solve the least squares problem \\( (H^T H + \\alpha I) W_i = H^T X_i \\).\n- **Updating \\( H \\)**: For each column \\( j \\) of \\( H \\), we solve the least squares problem \\( (W^T W + \\alpha I) H_j = W^T X_j \\).\n- **Loss Calculation**: The loss is computed as the sum of the squared Frobenius norm of the reconstruction error and the regularization terms.\n- **Convergence Check**: If the loss is below the tolerance, the algorithm stops early.\n- **Reconstruction**: The final reconstructed matrix \\( \\hat{X} \\) is computed and rounded to 4 decimal places before being converted to a list of lists.\n\nThis implementation should meet the requirements and constraints specified in the task."}
{"task_id": 109, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm with K-Means++ initialization, we need to follow these steps:\n\n1. **Initialization with K-Means++**:\n   - Randomly select the first centroid from the data points.\n   - For each subsequent centroid, choose a point with a probability proportional to the squared distance from the nearest already chosen centroid.\n\n2. **Lloyd's Algorithm**:\n   - Assign each data point to the nearest centroid.\n   - Update each centroid to be the mean of the points assigned to it.\n   - Repeat the assignment and update steps until the assignments do not change or the maximum number of iterations is reached.\n\n3. **Handling Empty Clusters**:\n   - If a cluster becomes empty, keep its centroid unchanged.\n\n4. **Sorting and Rounding**:\n   - Sort the final centroids by their first coordinate, using the complete centroid tuple as a secondary key to break ties.\n   - Round each centroid to four decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    \n    m, n = X.shape\n    \n    # Step 1: Initialize centroids using K-Means++\n    centroids = [X[np.random.choice(m)]]\n    \n    for _ in range(1, K):\n        distances = np.min([np.linalg.norm(X - c, axis=1) for c in centroids], axis=0)\n        probabilities = distances / distances.sum()\n        next_centroid = X[np.random.choice(m, p=probabilities)]\n        centroids.append(next_centroid)\n    \n    centroids = np.array(centroids)\n    \n    # Step 2: Lloyd's algorithm\n    for _ in range(max_iter):\n        # Assign each point to the nearest centroid\n        distances = np.array([np.linalg.norm(X - c, axis=1) for c in centroids])\n        labels = np.argmin(distances, axis=0)\n        \n        # Update centroids\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 3: Sort and round centroids\n    centroids = np.round(centroids, 4)\n    sorted_centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n    \n    return sorted_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# K = 3\n# print(kmeans(X, K, random_state=42))\n```\n\n### Explanation:\n- **Initialization**: We start by selecting a random point as the first centroid. For each subsequent centroid, we calculate the distance of each point to the nearest already chosen centroid and select the next centroid with a probability proportional to the squared distance.\n- **Lloyd's Algorithm**: We repeatedly assign each point to the nearest centroid and then update each centroid to be the mean of the points assigned to it. If no points are assigned to a centroid, it remains unchanged.\n- **Sorting and Rounding**: After convergence, we sort the centroids by their first coordinate and round each centroid to four decimal places.\n\nThis implementation ensures that the results are reproducible when the `random_state` is set, and it handles empty clusters appropriately."}
{"task_id": 111, "completion_id": 0, "completion": "Certainly! Below is the implementation of the three helper functions as described in the task:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    The encoded list must have a fixed length `time_steps`. If the input is shorter\n    than `time_steps`, append the padding token `0` on the right; if it is longer,\n    truncate the sequence. Any character that does not exist in the vocabulary\n    is also encoded as the padding token `0`.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    return encoded + [0] * (time_steps - len(encoded))\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (0) must be ignored during decoding \u2013 they must not appear in\n    the returned string.\n    \"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the raw text with `string_to_int`, calls `model.predict` on the encoded batch (batch size 1),\n    applies `argmax` over the last axis to obtain one predicted id per time step, and finally\n    decodes the ids with `int_to_string`.\n    \"\"\"\n    # Step 1: Encode the input text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array(encoded_text).reshape(1, -1)  # Reshape for batch size 1\n    \n    # Step 2: Get model predictions\n    predictions = model.predict(encoded_text)\n    \n    # Step 3: Apply argmax to get the predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    \n    # Step 4: Decode the predicted ids to string\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_string\n```\n\n### Explanation:\n\n1. **`string_to_int`**:\n   - This function takes a string `text`, a `time_steps` value, and a `vocabulary` dictionary.\n   - It encodes each character of the string using the vocabulary. If a character is not in the vocabulary, it is encoded as `0`.\n   - The resulting list is truncated or padded to ensure it has a length of `time_steps`.\n\n2. **`int_to_string`**:\n   - This function takes a list of integer `indices` and an `inverse_vocab` dictionary.\n   - It converts each integer back to its corresponding character using the inverse vocabulary.\n   - Padding tokens (`0`) are ignored during decoding.\n\n3. **`run_example`**:\n   - This function ties everything together.\n   - It encodes the input text using `string_to_int`.\n   - It reshapes the encoded text to have a batch size of 1 and passes it to the model for prediction.\n   - It applies `argmax` to the model's output to get the predicted integer ids.\n   - It decodes these ids back to a string using `int_to_string`.\n\nThis code assumes that the `model` object has a `predict` method that takes a NumPy array as input and returns a NumPy array of predictions."}
{"task_id": 113, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `run_examples` function as per the provided requirements. This function will iterate over the input examples, use the `run_example` helper function to get the model's predictions, and then print and collect these predictions.\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # If examples is None, use the global constant EXAMPLES\n    if examples is None:\n        examples = EXAMPLES\n    \n    predictions = []\n    \n    for example in examples:\n        # Call the run_example function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        \n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(output_chars)\n        \n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        \n        # Collect the predicted string in the list\n        predictions.append(predicted_string)\n    \n    # Return the list of all predictions\n    return predictions\n```\n\n### Explanation:\n1. **Handling `examples` Argument**:\n   - If `examples` is `None`, the function falls back to using the global constant `EXAMPLES`.\n\n2. **Iterating Over Examples**:\n   - The function iterates over each example in the `examples` iterable.\n\n3. **Using `run_example`**:\n   - For each example, it calls the `run_example` function, which is expected to return a list of characters representing the model's output.\n\n4. **Concatenating Characters**:\n   - The list of characters returned by `run_example` is concatenated into a single string using `''.join(output_chars)`.\n\n5. **Printing Input and Output**:\n   - The function prints the original input string and the predicted output string.\n\n6. **Collecting Predictions**:\n   - Each predicted string is appended to the `predictions` list.\n\n7. **Returning Predictions**:\n   - Finally, the function returns the list of all predicted strings in the same order as the input examples.\n\nThis implementation assumes that the `run_example` function is already defined in the environment where this code will run."}
{"task_id": 115, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `logistic_loss_and_gradient` function that computes the binary cross-entropy loss and its gradient for logistic regression, following the provided specifications:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    \n    # Ensure w is a column vector\n    w = w.reshape(-1, 1)\n    \n    # Number of samples\n    m = X.shape[0]\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = X @ w\n    \n    # Compute the predicted probabilities p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues by clamping p to [\u03b5, 1 - \u03b5]\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy loss\n    loss = - (1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = (1 / m) * (X.T @ (p - y))\n    \n    # Return the loss rounded to 4 decimals and the gradient as a nested list rounded to 4 decimals\n    return round(loss.item(), 4), gradient.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 0])\n# w = np.array([0.1, 0.2])\n# loss, gradient = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", gradient)\n```\n\n### Explanation:\n1. **Input Reshaping**: The function ensures that `y` and `w` are column vectors for consistent matrix operations.\n2. **Linear Combination**: The linear combination `z = X \u00b7 w` is computed.\n3. **Sigmoid Activation**: The predicted probabilities `p` are computed using the sigmoid function.\n4. **Clamping**: The predicted probabilities `p` are clamped to the range `[\u03b5, 1 - \u03b5]` to avoid numerical issues with logarithms.\n5. **Loss Calculation**: The binary cross-entropy loss is computed and averaged over the number of samples.\n6. **Gradient Calculation**: The gradient of the loss with respect to the weights is computed.\n7. **Output**: The loss is rounded to 4 decimal places, and the gradient is rounded to 4 decimal places and converted to a nested list.\n\nThis implementation should meet the requirements and handle the edge cases as specified."}
{"task_id": 118, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for all training samples.\n2. **Train Weak Classifiers**: For each iteration, find the best decision stump that minimizes the weighted error.\n3. **Update Weights**: Adjust the weights of the training samples based on the performance of the current stump.\n4. **Aggregate Predictions**: For each test sample, aggregate the predictions of all stumps weighted by their importance.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    \n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error + 1e-10  # Avoid division by zero\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    # Predict on test data\n    y_pred = np.zeros(X_test.shape[0])\n    for alpha, (feature_i, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in y_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the weights of all training samples to be equal.\n2. **Training Weak Classifiers**: For each iteration, we iterate over each feature and each possible threshold to find the best decision stump. The best stump is the one that minimizes the weighted error.\n3. **Updating Weights**: After finding the best stump, we update the weights of the training samples. Samples that are misclassified by the stump are given more weight, while correctly classified samples are given less weight.\n4. **Aggregating Predictions**: For each test sample, we aggregate the predictions of all stumps, weighted by their importance (alpha). The final prediction is the sign of the weighted sum.\n\nThis implementation ensures that the AdaBoost algorithm is correctly applied using decision stumps as weak learners."}
{"task_id": 128, "completion_id": 0, "completion": "Certainly! Below is the implementation of the multi-class Linear Discriminant Analysis (LDA) as described in the task. The code computes the within-class scatter matrix \\( S_W \\), the between-class scatter matrix \\( S_B \\), and then performs the necessary eigen-decomposition to find the projection matrix. Finally, it projects the data onto the first `n_components` discriminant directions and returns the result as a list of lists with each element rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    classes = np.unique(y)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.sum((X_c - mean_c).T @ (X_c - mean_c), axis=1)\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    mean_overall = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * (mean_c - mean_overall).reshape(-1, 1) @ (mean_c - mean_overall).reshape(1, -1)\n\n    # Step 3: Form the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W) @ S_B\n\n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Step 5: Sort the eigen-pairs in descending order of the eigen-values\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 6: Deterministic sign fix\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero_idx = np.where(eigenvectors[:, i] != 0)[0][0]\n        if eigenvectors[first_non_zero_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Step 7: Project X on the first `n_components` eigenvectors\n    if n_components == 0:\n        return []\n    W = eigenvectors[:, :n_components]\n    X_projected = X @ W\n\n    # Round every element to four decimal places\n    X_projected_rounded = np.round(X_projected, 4)\n\n    # Convert to list of lists\n    return X_projected_rounded.tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\n### Explanation:\n1. **Within-Class Scatter Matrix \\( S_W \\)**: This matrix is computed by summing up the scatter matrices of each class.\n2. **Between-Class Scatter Matrix \\( S_B \\)**: This matrix is computed using the global mean and the mean of each class.\n3. **Matrix \\( A \\)**: This is the matrix \\( S_W^{-1} S_B \\) computed using the Moore-Penrose pseudo-inverse to handle potential singularity.\n4. **Eigen-Decomposition**: We use `numpy.linalg.eigh` to perform eigen-decomposition on \\( A \\) since it is symmetric.\n5. **Sorting and Sign Fix**: The eigenvalues and eigenvectors are sorted in descending order, and the sign of each eigenvector is fixed to ensure determinism.\n6. **Projection**: The data is projected onto the first `n_components` eigenvectors.\n7. **Rounding and Conversion**: The projected data is rounded to four decimal places and converted to a list of lists.\n\nThis implementation should meet the requirements and constraints specified in the task."}
{"task_id": 140, "completion_id": 0, "completion": "To solve the problem of escaping from a fire maze, we need to simulate the spread of fire and the movement of the agent simultaneously. The key is to ensure that the agent only moves to cells that are not on fire at the time of the agent's arrival. Here's a step-by-step approach to achieve this:\n\n1. **Initial Checks**: \n   - If the start or goal cell is on fire, return `-1` immediately.\n   - If the maze is `1x1` and the single cell is free, return `0`.\n\n2. **Breadth-First Search (BFS) for Fire Spread**:\n   - Use BFS to simulate the spread of fire from all initial fire sources. This will give us the time at which each cell catches fire.\n\n3. **Breadth-First Search (BFS) for Agent Movement**:\n   - Use BFS to simulate the agent's movement from the start cell to the goal cell. The agent can only move to a cell if it is not on fire at the time of the agent's arrival.\n\n4. **Synchronization**:\n   - Ensure that the fire spreads first, then the agent moves. This means that for each minute, first update the fire positions, then check if the agent can move to any of the neighboring cells.\n\n5. **Edge Cases**:\n   - Handle cases where the agent is trapped by walls or fire.\n   - Ensure that the agent does not move into a cell that will be on fire in the next minute.\n\nHere is the implementation of the above approach:\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # BFS to calculate fire spread times\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n\n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n\n    # BFS for agent movement\n    agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n    visited = set((0, 0, 0))\n\n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        if (x, y) == (n-1, n-1):\n            return t\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny, t + 1) not in visited:\n                if t + 1 < fire_time[nx][ny]:\n                    visited.add((nx, ny, t + 1))\n                    agent_queue.append((nx, ny, t + 1))\n\n    return -1\n```\n\n### Explanation:\n- **Fire Spread Simulation**: We use BFS to calculate the time at which each cell catches fire. This is stored in the `fire_time` matrix.\n- **Agent Movement Simulation**: We use BFS to simulate the agent's movement. The agent can only move to a cell if the time of arrival is less than the time the cell catches fire.\n- **Visited Set**: We use a set to keep track of visited states `(x, y, t)` to avoid revisiting the same state.\n\nThis approach ensures that we correctly simulate the spread of fire and the movement of the agent, and it efficiently finds the minimum time required for the agent to reach the goal while avoiding fire."}
{"task_id": 141, "completion_id": 0, "completion": "Certainly! Below is the implementation of the k-Nearest Neighbors (k-NN) classifier as a single function. This function computes the distance between each test sample and every training sample using the specified metric, finds the k nearest neighbors, and predicts the class by majority vote.\n\n```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n    \n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b.T)\n        norm_a = np.linalg.norm(a, axis=1, keepdims=True)\n        norm_b = np.linalg.norm(b, axis=1)\n        cosine_sim = dot_product / (norm_a * norm_b)\n        return 1 - cosine_sim\n    \n    # Choose the distance function based on the metric\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        print(f\"Unknown metric '{metric}'. Falling back to Euclidean distance.\")\n        distance_func = euclidean_distance\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = distance_func(test_sample, X_train)\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Find the most common label among the k nearest neighbors\n        # In case of a tie, np.argmax will return the smallest index (smallest label)\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        predicted_label = unique_labels[np.argmax(counts)]\n        \n        predictions.append(predicted_label)\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 4]])\n# k = 3\n# predictions = knn_predict(X_train, y_train, X_test, k, metric='euclidean')\n# print(predictions)  # Output: [0 1]\n```\n\n### Explanation:\n1. **Distance Functions**:\n   - **Euclidean Distance**: Computes the \u2113\u2082 distance between two points.\n   - **Manhattan Distance**: Computes the \u2113\u2081 distance between two points.\n   - **Cosine Distance**: Computes the cosine distance (1 - cosine similarity) between two points.\n\n2. **Choosing the Distance Function**:\n   - The function selects the appropriate distance function based on the `metric` parameter. If an unknown metric is provided, it defaults to the Euclidean distance.\n\n3. **Finding Nearest Neighbors**:\n   - For each test sample, the function computes the distance to all training samples.\n   - It then finds the indices of the k nearest neighbors.\n\n4. **Predicting the Class**:\n   - The function determines the most common label among the k nearest neighbors.\n   - In case of a tie, it selects the smallest label.\n\n5. **Returning Predictions**:\n   - The function returns a 1-D NumPy array containing the predicted labels for the test set."}
{"task_id": 146, "completion_id": 0, "completion": "Certainly! Below is the implementation of the k-Nearest Neighbours (k-NN) classifier from scratch using NumPy. The function `knn_predict` computes the distances between test samples and training samples using the specified distance metric, finds the k-nearest neighbours, and performs a majority vote to predict the labels for the test samples.\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    \n    # Choose the appropriate distance function\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        \n        # Get the indices of the k nearest neighbours\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbours\n        nearest_labels = y[nearest_indices]\n        \n        # Perform majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label\n        if np.sum(counts == np.max(counts)) > 1:\n            majority_vote = unique_labels[np.argmin(unique_labels[counts == np.max(counts)])]\n        \n        predictions.append(majority_vote)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 4]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```\n\n### Explanation:\n1. **Distance Functions**:\n   - **Euclidean Distance**: Computes the Euclidean distance between two points.\n   - **Manhattan Distance**: Computes the Manhattan (L1) distance between two points.\n   - **Cosine Distance**: Computes the cosine distance between two points, using a small epsilon to avoid division by zero.\n\n2. **Main Function**:\n   - For each test sample, compute the distance to all training samples using the chosen distance metric.\n   - Find the indices of the k-nearest neighbours.\n   - Collect the labels of these neighbours.\n   - Perform a majority vote to determine the predicted label. In case of a tie, the smallest label is chosen.\n\n3. **Output**:\n   - The function returns a list of predicted labels for the test samples.\n\nThis implementation ensures that the k-NN algorithm is correctly applied using the specified distance metrics and handles ties in the majority vote by selecting the smallest label."}
{"task_id": 155, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `actor_forward` function that performs the forward pass of the described actor network using NumPy:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it isn't already\n    state = np.array(state)\n    \n    # First layer: Linear transformation and ReLU activation\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation and ReLU activation\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation and tanh activation\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Round the action vector to 4 decimal places and convert to a list\n    action_rounded = np.round(action, 4).tolist()\n    \n    return action_rounded\n```\n\n### Explanation:\n1. **State Input**: The input `state` is converted to a NumPy array to facilitate matrix operations.\n2. **First Layer**: The state is transformed using the first weight matrix `W1` and bias vector `b1`. The result is passed through a ReLU activation function.\n3. **Second Layer**: The output from the first layer is transformed using the second weight matrix `W2` and bias vector `b2`. The result is again passed through a ReLU activation function.\n4. **Output Layer**: The output from the second layer is transformed using the third weight matrix `W3` and bias vector `b3`. The result is passed through a tanh activation function to ensure the action values are within the range [-1, 1].\n5. **Rounding**: The final action vector is rounded to four decimal places and converted to a list before being returned.\n\nThis function assumes that the input dimensions are consistent with the weight matrices and bias vectors provided in the `weights` dictionary. If the dimensions do not match, NumPy will raise an error as required."}
{"task_id": 160, "completion_id": 0, "completion": "Certainly! Below is the implementation of Lasso regression using coordinate descent in Python with NumPy. The function `fit_lasso` follows the steps outlined in the task description.\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Add an all-ones column for intercept if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    # Initialize weights to zero\n    w = np.zeros(X.shape[1])\n    \n    # Number of features (including intercept if fit_intercept is True)\n    n_features = X.shape[1]\n    \n    for _ in range(max_iters):\n        for j in range(n_features):\n            if j == 0 and fit_intercept:\n                # Skip the intercept term for L1 penalty\n                continue\n            \n            # Temporarily set the current weight to 0\n            w_j = w[j]\n            w[j] = 0\n            \n            # Compute the partial residual r_j = y - Xw_{\\neg j}\n            r_j = y - X @ w\n            \n            # Compute the soft-thresholding update\n            rho = X[:, j] @ r_j\n            alpha = X[:, j] @ X[:, j]\n            \n            if rho < -lambda_param * m:\n                w[j] = (rho + lambda_param * m) / alpha\n            elif rho > lambda_param * m:\n                w[j] = (rho - lambda_param * m) / alpha\n            else:\n                w[j] = 0\n        \n        # Recompute the intercept if fit_intercept is True\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n    \n    # Extract the intercept and weights\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    weights = [round(wi, 4) for wi in w[1:]]\n    \n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept=True`, an all-ones column is added to the design matrix `X`. If `fit_intercept=False`, an all-zeros column is added to ensure the first coordinate is always the intercept and is not included in the L1 penalty.\n2. **Initialization**: All parameters (weights and intercept) are initialized to zero.\n3. **Coordinate Descent Loop**: For each iteration, the algorithm loops over each weight (excluding the intercept if `fit_intercept=True`):\n   - Temporarily sets the current weight to zero.\n   - Computes the partial residual `r_j`.\n   - Updates the weight using the soft-thresholding operator.\n4. **Intercept Update**: If `fit_intercept=True`, the intercept is recomputed as the mean residual after each full pass over the coordinates.\n5. **Return Values**: The function returns the final weights and intercept, rounded to four decimal places.\n\nThis implementation ensures that the Lasso regression is performed using coordinate descent and adheres to the constraints provided."}
{"task_id": 165, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `hamming_distance` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    N = x.size\n    distance = np.sum(x != y) / N\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 0, 3, 4]\n# print(hamming_distance(x, y))  # Output: 0.25\n```\n\n### Explanation:\n1. **Input Conversion**: The function first checks if the inputs are NumPy arrays. If not, it converts them to NumPy arrays. This ensures that we can leverage NumPy's efficient array operations.\n2. **Length Check**: It checks if the lengths of the two vectors are the same. If not, it returns `-1`.\n3. **Hamming Distance Calculation**: It calculates the Hamming distance by summing up the number of positions where the elements differ and dividing by the total number of elements.\n4. **Rounding**: The result is rounded to 4 decimal places before being returned.\n\nThis function handles both Python lists and NumPy arrays, and it ensures that the Hamming distance is computed correctly and efficiently."}
{"task_id": 169, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `generate_window` function that generates the specified window coefficients based on the given window type and constraints:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    return [round(coef, 4) for coef in w.tolist()]\n\n# Example usage:\n# print(generate_window(\"hamming\", 10))\n# print(generate_window(\"hann\", 10))\n# print(generate_window(\"blackman_harris\", 10))\n# print(generate_window(\"generalized_cosine\", 10, [0.5, 0.25]))\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first checks if `N` is a positive integer. If not, it raises a `ValueError`.\n   - If `N` is 1, it returns a list with a single value `1.0`.\n\n2. **Window Coefficient Calculation**:\n   - For each window type, the function calculates the coefficients using the provided mathematical formulas.\n   - For the \"generalized_cosine\" window, it uses the provided coefficients list to compute the window.\n\n3. **Rounding and Returning**:\n   - The coefficients are rounded to 4 decimal places using a list comprehension.\n   - The function returns the rounded coefficients as a regular Python list.\n\nThis implementation ensures that all the specified constraints and requirements are met."}
{"task_id": 171, "completion_id": 0, "completion": "To implement a binary Logistic Regression classifier using mini-batch Gradient Descent, we need to follow these steps:\n\n1. **Data Preprocessing**: Convert the input data to numpy arrays for efficient computation. Add an intercept term (bias) to the feature matrix.\n2. **Label Mapping**: Map the training labels to `{0, 1}` for internal computation and map them back to the original labels for the final predictions.\n3. **Special Case Handling**: If all training labels are identical, skip training and predict that unique label for every test sample.\n4. **Model Training**: Implement the mini-batch Gradient Descent to minimize the negative log-likelihood (cross-entropy) loss.\n5. **Prediction**: Use the trained model to predict the labels for the test set using a decision threshold of 0.5.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add intercept term (bias) to the feature matrix\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Map labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError(\"y_train must contain exactly two distinct numeric values.\")\n    \n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    \n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Special case: if all labels are the same, predict that label for all test samples\n    if len(np.unique(y_train_mapped)) == 1:\n        return [reverse_label_map[y_train_mapped[0]]] * len(X_test)\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Predict probabilities\n            z = np.dot(X_batch, weights)\n            probabilities = 1 / (1 + np.exp(-z))\n            \n            # Compute gradients\n            errors = probabilities - y_batch\n            gradient = np.dot(X_batch.T, errors) / X_batch.shape[0]\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    probabilities_test = 1 / (1 + np.exp(-z_test))\n    predictions_mapped = (probabilities_test >= 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    predictions = [reverse_label_map[pred] for pred in predictions_mapped]\n    \n    return predictions\n```\n\n### Explanation:\n- **Data Preprocessing**: We add a column of ones to the feature matrices to account for the intercept term.\n- **Label Mapping**: We map the original labels to `{0, 1}` for internal computation and map them back to the original labels for the final predictions.\n- **Special Case Handling**: If all training labels are identical, we skip training and predict that unique label for every test sample.\n- **Model Training**: We use mini-batch Gradient Descent to update the weights by minimizing the cross-entropy loss.\n- **Prediction**: We predict the labels for the test set using a decision threshold of 0.5 on the estimated probabilities.\n\nThis implementation should work well for linearly separable data and provide reasonable predictions for simple toy problems."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps from scratch, we need to follow these steps:\n\n1. **Define a Decision Stump**: A decision stump is a one-level decision tree that makes a decision based on a single feature and a threshold.\n2. **Train the Decision Stump**: For each stump, find the feature, threshold, and polarity that minimizes the weighted classification error.\n3. **Update Weights**: After training each stump, update the sample weights based on the error of the stump.\n4. **Aggregate Predictions**: For the test set, aggregate the predictions of all stumps, weighted by their importance, and convert the aggregated sign back to class labels.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize sample weights\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    \n    # List to store the trained stumps and their weights\n    stumps = []\n    \n    for _ in range(n_estimators):\n        # Initialize variables to track the best stump\n        best_stump = None\n        best_error = float('inf')\n        best_polarity = 1\n        \n        # Iterate over all features\n        for feature_index in range(n_features):\n            # Get unique values in the current feature column\n            thresholds = np.unique(X_train[:, feature_index])\n            \n            # Iterate over all possible thresholds\n            for threshold in thresholds:\n                # Try both polarities\n                for polarity in [1, -1]:\n                    # Predictions for the current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    \n                    # Calculate weighted error\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    \n                    # Update the best stump if the current one is better\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = (feature_index, threshold, polarity)\n        \n        # If a perfect stump is found, stop early\n        if best_error == 0:\n            break\n        \n        # Calculate the weight of the current stump\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        \n        # Update sample weights\n        weights *= np.exp(-alpha * y_train * np.where(\n            (X_train[:, best_stump[0]] >= best_stump[1]) == (best_stump[2] == 1), 1, -1))\n        weights /= np.sum(weights)\n        \n        # Store the stump and its weight\n        stumps.append((best_stump, alpha))\n    \n    # Make predictions on the test set\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    \n    for (feature_index, threshold, polarity), alpha in stumps:\n        stump_predictions = np.ones(n_test_samples)\n        if polarity == 1:\n            stump_predictions[X_test[:, feature_index] >= threshold] = -1\n        else:\n            stump_predictions[X_test[:, feature_index] < threshold] = -1\n        predictions += alpha * stump_predictions\n    \n    # Convert aggregated predictions to class labels\n    final_predictions = np.where(predictions > 0, 1, 0)\n    \n    return final_predictions.tolist()\n```\n\n### Explanation:\n1. **Initialization**: We start by converting the input lists to NumPy arrays for easier manipulation. We initialize the sample weights to be uniform.\n2. **Training Stumps**: For each iteration (up to `n_estimators`), we find the best decision stump by iterating over all features and thresholds, and trying both polarities. We keep track of the stump with the smallest weighted error.\n3. **Stopping Early**: If a perfect stump (weighted error = 0) is found, we stop the training early.\n4. **Updating Weights**: After finding the best stump, we update the sample weights based on the error of the stump.\n5. **Aggregating Predictions**: For the test set, we aggregate the predictions of all stumps, weighted by their importance (`alpha`), and convert the aggregated sign back to class labels.\n\nThis implementation ensures that the behavior is deterministic and follows the AdaBoost algorithm as specified."}
{"task_id": 178, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function, adhering to the specified constraints and requirements:\n\n```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate input arguments\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n\n    # Define bounds\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    # Initialize particles' positions and velocities\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n\n    # Initialize personal best positions and values\n    pbest_positions = positions.copy()\n    pbest_values = np.array([np.sum(p**2) for p in positions])\n\n    # Initialize global best position and value\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n\n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        # Update velocities and positions\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        \n        velocities = (w * velocities +\n                      c1 * r1 * (pbest_positions - positions) +\n                      c2 * r2 * (gbest_position - positions))\n        \n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n\n        # Update personal bests\n        current_values = np.array([np.sum(p**2) for p in positions])\n        improved = current_values < pbest_values\n        pbest_values[improved] = current_values[improved]\n        pbest_positions[improved] = positions[improved]\n\n        # Update global best\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n\n    # Return the best value found, rounded to four decimals\n    return round(gbest_value, 4)\n\n# Example usage:\n# result = particle_swarm_optimisation(n_dims=2, num_particles=30, num_iterations=100)\n# print(result)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the input parameters are positive integers. If not, it returns `-1`.\n2. **Random Number Generation**: A `numpy` random number generator is initialized with the provided seed for reproducibility.\n3. **Initialization**:\n   - Particles' positions are initialized randomly within the bounds \\([-1, 1]\\).\n   - Velocities are initialized with small random values.\n   - Personal best positions and values are initialized to the initial positions and their corresponding Sphere function values.\n   - The global best position and value are initialized to the best personal best found.\n4. **PSO Loop**:\n   - Velocities and positions are updated using the PSO update equations.\n   - Personal bests are updated if the current position yields a better value.\n   - The global best is updated if a new best personal best is found.\n5. **Return Value**: The best Sphere function value found during the optimization process is returned, rounded to four decimal places."}
{"task_id": 180, "completion_id": 0, "completion": "Certainly! Below is the implementation of the k-Nearest Neighbours (k-NN) algorithm as a pure function, following the specified rules and details:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n    \n    predictions = []\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, train_point), idx) for idx, train_point in enumerate(X_train)]\n        # Sort distances and get the indices of the k nearest neighbours\n        distances.sort(key=lambda x: x[0])\n        k_nearest_indices = [dist[1] for dist in distances[:k]]\n        # Get the labels/values of the k nearest neighbours\n        k_nearest_labels = [y_train[idx] for idx in k_nearest_indices]\n        \n        if task == \"classification\":\n            # Majority vote for classification\n            label_counts = Counter(k_nearest_labels)\n            # Find the most common label; in case of a tie, the smallest label is chosen\n            most_common_label = min(label_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n            predictions.append(most_common_label)\n        elif task == \"regression\":\n            # Average for regression\n            mean_value = np.mean(k_nearest_labels)\n            predictions.append(round(mean_value, 4))\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'.\")\n    \n    return predictions\n```\n\n### Explanation:\n1. **Euclidean Distance Calculation**: A helper function `euclidean_distance` is defined to compute the Euclidean distance between two points.\n2. **Handling k**: If `k` is 0 or greater than the number of training samples, it is set to the number of training samples.\n3. **Distance Calculation and Sorting**: For each test point, the distances to all training points are calculated and sorted. The indices of the k nearest neighbours are extracted.\n4. **Prediction**:\n   - **Classification**: The most frequent label among the k nearest neighbours is determined using `Counter`. In case of a tie, the smallest label is chosen.\n   - **Regression**: The arithmetic mean of the target values of the k nearest neighbours is computed and rounded to 4 decimal places.\n5. **Return**: The function returns a list of predictions corresponding to each test point.\n\nThis implementation ensures that the order of the test samples is preserved in the output."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision tree classifier using the CART algorithm from scratch, we need to follow these steps:\n\n1. **Calculate Gini Impurity**: This will help us determine the best split at each node.\n2. **Recursive Splitting**: Split the data based on the feature and threshold that provides the highest Gini gain.\n3. **Stopping Criteria**: Stop splitting if all labels are the same, if the maximum depth is reached, or if a split results in an empty child.\n4. **Predict**: Traverse the tree for each test sample to determine the predicted class.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a list of class labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    return 1.0 - np.sum(probabilities ** 2)\n\ndef weighted_gini(left_y, right_y):\n    \"\"\"Calculate the weighted Gini impurity for a split.\"\"\"\n    m_left, m_right = len(left_y), len(right_y)\n    m_total = m_left + m_right\n    return (m_left / m_total) * gini_impurity(left_y) + (m_right / m_total) * gini_impurity(right_y)\n\ndef best_split(X, y):\n    \"\"\"Find the best feature and threshold to split the data.\"\"\"\n    best_gini = float('inf')\n    best_feature = None\n    best_threshold = None\n    n_features = X.shape[1]\n    \n    for feature in range(n_features):\n        # Sort the data by the current feature\n        sorted_indices = np.argsort(X[:, feature])\n        X_sorted = X[sorted_indices]\n        y_sorted = y[sorted_indices]\n        \n        # Try every possible split point\n        for i in range(1, len(y_sorted)):\n            if X_sorted[i, feature] == X_sorted[i - 1, feature]:\n                continue\n            \n            threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2\n            left_y = y_sorted[:i]\n            right_y = y_sorted[i:]\n            \n            current_gini = weighted_gini(left_y, right_y)\n            if current_gini < best_gini:\n                best_gini = current_gini\n                best_feature = feature\n                best_threshold = threshold\n    \n    return best_feature, best_threshold\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    n_samples, n_features = X.shape\n    labels, counts = np.unique(y, return_counts=True)\n    majority_label = labels[np.argmax(counts)]\n    \n    # Stopping criteria\n    if len(labels) == 1 or (max_depth is not None and depth >= max_depth):\n        return majority_label\n    \n    best_feature, best_threshold = best_split(X, y)\n    if best_feature is None:\n        return majority_label\n    \n    # Split the data\n    left_indices = X[:, best_feature] < best_threshold\n    right_indices = X[:, best_feature] >= best_threshold\n    \n    if not np.any(left_indices) or not np.any(right_indices):\n        return majority_label\n    \n    left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    \n    return (best_feature, best_threshold, left_subtree, right_subtree)\n\ndef predict_tree(tree, X):\n    \"\"\"Predict the class label for a single sample using the decision tree.\"\"\"\n    if isinstance(tree, int):\n        return tree\n    \n    feature, threshold, left_subtree, right_subtree = tree\n    if X[feature] < threshold:\n        return predict_tree(left_subtree, X)\n    else:\n        return predict_tree(right_subtree, X)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions\n```\n\n### Explanation:\n1. **Gini Impurity**: Calculated for a set of labels to measure the impurity.\n2. **Weighted Gini Impurity**: Used to evaluate the quality of a split.\n3. **Best Split**: Finds the feature and threshold that provide the best split based on Gini gain.\n4. **Build Tree**: Recursively builds the tree by finding the best split and creating subtrees.\n5. **Predict Tree**: Traverses the tree to predict the class label for a given sample.\n6. **Decision Tree Predict**: Main function that builds the tree and predicts the labels for the test set.\n\nThis implementation ensures that the tree is built deterministically and follows the specified stopping criteria."}
{"task_id": 190, "completion_id": 0, "completion": "To solve the problem of finding the best Gini split for a decision tree, we need to follow these steps:\n\n1. **Calculate the Gini impurity for the entire dataset**.\n2. **Iterate over each feature** and for each feature, iterate over each unique value to consider it as a potential split point.\n3. **Calculate the Gini impurity for each split** and keep track of the best split based on the Gini impurity.\n4. **Return the best split** or the Gini impurity of the whole dataset if no valid split is found.\n\nHere's the implementation of the `best_gini_split` function:\n\n```python\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    \n    # Function to calculate Gini impurity\n    def gini(labels):\n        m = len(labels)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n    \n    # Calculate Gini impurity of the whole dataset\n    G_whole_dataset = gini(y)\n    \n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        \n        for threshold in unique_values:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            \n            n_left = len(y_left)\n            n_right = len(y_right)\n            n_total = n_left + n_right\n            \n            G_left = gini(y_left)\n            G_right = gini(y_right)\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if feature_index < best_feature_index:\n                    best_gini = G_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_gini = G_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n    \n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4], [4, 5]]\n# y = [0, 0, 1, 1]\n# print(best_gini_split(X, y))\n```\n\n### Explanation:\n1. **Gini Impurity Calculation**: The `gini` function calculates the Gini impurity for a given set of labels.\n2. **Whole Dataset Gini**: We first calculate the Gini impurity for the entire dataset.\n3. **Iterate Over Features and Values**: For each feature, we consider each unique value as a potential split point.\n4. **Calculate Split Gini**: For each split, we calculate the weighted Gini impurity and update the best split if the current split is better.\n5. **Return Best Split**: If a valid split is found, we return the best split details. Otherwise, we return the Gini impurity of the whole dataset.\n\nThis implementation ensures that we follow the tie-breaking rules and handle edge cases where no valid split exists."}
{"task_id": 191, "completion_id": 0, "completion": "To implement the `metric` function as described, we need to handle several tasks:\n\n1. **Validation**: Ensure that the inputs are valid one-dimensional numeric vectors of the same length and non-empty. For the cosine metric, ensure that the norms of the vectors are non-zero.\n2. **Metric Calculation**: Implement the four supported distance metrics: Euclidean, Manhattan, Chebyshev, and Cosine.\n3. **Return Value**: Return the computed distance rounded to four decimal places, or `-1` if validation fails or the metric name is unsupported.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        \n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if x.size != y.size or x.size == 0:\n            return False\n        return True\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x, y) / (norm_x * norm_y)\n\n    def d(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        if name == 'euclidean':\n            return round(euclidean(x, y), 4)\n        elif name == 'manhattan':\n            return round(manhattan(x, y), 4)\n        elif name == 'chebyshev':\n            return round(chebyshev(x, y), 4)\n        elif name == 'cosine':\n            return round(cosine(x, y), 4)\n        else:\n            return -1\n\n    return d\n\n# Example usage:\n# euclidean_distance = metric('euclidean')\n# print(euclidean_distance([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\n### Explanation:\n1. **Validation**:\n   - Convert inputs to NumPy arrays with `dtype=float` to ensure they are numeric.\n   - Check if the arrays are one-dimensional and of the same length.\n   - Ensure the arrays are non-empty.\n\n2. **Metric Calculation**:\n   - **Euclidean**: Compute the square root of the sum of squared differences.\n   - **Manhattan**: Compute the sum of absolute differences.\n   - **Chebyshev**: Compute the maximum absolute difference.\n   - **Cosine**: Compute the cosine distance, ensuring the norms are non-zero.\n\n3. **Return Value**:\n   - Return the computed distance rounded to four decimal places.\n   - Return `-1` if validation fails or the metric name is unsupported.\n\nThis implementation ensures that the function behaves as specified, handling both valid and invalid inputs gracefully."}
{"task_id": 197, "completion_id": 0, "completion": "To implement the `action_stats` function, we need to carefully handle the different types of action spaces as described. Here's a step-by-step breakdown of how to achieve this:\n\n1. **Identify the Type of Action Space**:\n   - If `md_action` is `True`, the action space is multi-dimensional.\n   - If `cont_action` is `True`, the action space is continuous in at least one dimension.\n\n2. **Extract Information from the Action Space**:\n   - For a single-dimensional discrete space, use `env.action_space.n`.\n   - For a continuous space, use `env.action_space.shape`.\n   - For a multi-dimensional space, use `env.action_space.spaces` to access each sub-space.\n\n3. **Compute `n_actions_per_dim`**:\n   - For each dimension, if the space is continuous, append `numpy.inf` to `n_actions_per_dim`.\n   - If the space is discrete, append the number of actions (`n`) to `n_actions_per_dim`.\n\n4. **Compute `action_ids`**:\n   - If any dimension is continuous, set `action_ids` to `None`.\n   - If all dimensions are discrete, compute the Cartesian product of all possible actions for each dimension.\n\n5. **Compute `action_dim`**:\n   - This is simply the number of dimensions in the action space.\n\nHere's the complete implementation of the `action_stats` function:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n    else:\n        # Single-dimensional action space\n        action_dim = 1\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n        elif hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n\n    # Determine action_ids if all dimensions are discrete\n    if not any(np.isinf(n) for n in n_actions_per_dim):\n        if md_action:\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n        else:\n            action_ids = [(i,) for i in range(n_actions_per_dim[0])]\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\n### Explanation:\n- **`n_actions_per_dim`**: This list is populated by iterating over each dimension of the action space. If a dimension is continuous, `np.inf` is appended; otherwise, the number of discrete actions is appended.\n- **`action_ids`**: This is computed only if all dimensions are discrete. For multi-dimensional spaces, the Cartesian product of all possible actions is calculated using `itertools.product`. For single-dimensional spaces, it's simply a list of tuples with each possible action.\n- **`action_dim`**: This is determined by the number of dimensions in the action space, which is either 1 for single-dimensional spaces or the length of `env.action_space.spaces` for multi-dimensional spaces.\n\nThis function should correctly handle the various types of action spaces as specified in the task description."}
{"task_id": 198, "completion_id": 0, "completion": "To implement the `update_beta` function, we need to follow these steps:\n\n1. Initialize a matrix `beta` with zeros, having dimensions `V x T`.\n2. Iterate over each document and each token within the document.\n3. For each token, update the corresponding entry in `beta` using the provided formula.\n4. Normalize each column of `beta` so that the sum of each column is 1.\n5. Round each element of `beta` to 4 decimal places.\n6. Convert the `beta` matrix to a list of lists before returning it.\n\nHere's the implementation of the `update_beta` function:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Number of topics\n    T = phi[0].shape[1]\n    \n    # Initialize beta with zeros\n    beta = np.zeros((V, T))\n    \n    # Update beta using the provided formula\n    for d in range(len(phi)):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            beta[v] += phi[d][n]\n    \n    # Normalize each column of beta\n    column_sums = beta.sum(axis=0)\n    for t in range(T):\n        if column_sums[t] > 0:\n            beta[:, t] /= column_sums[t]\n    \n    # Round each element to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```\n\n### Explanation:\n1. **Initialization**: We initialize `beta` as a zero matrix of shape `V x T`.\n2. **Updating Beta**: We iterate over each document and each token within the document. For each token, we update the corresponding row in `beta` using the values from `phi`.\n3. **Normalization**: We normalize each column of `beta` by dividing by the sum of the column. This ensures that each column sums to 1.\n4. **Rounding**: We round each element of `beta` to 4 decimal places using `np.round`.\n5. **Conversion**: Finally, we convert the `beta` matrix to a list of lists using `tolist()` before returning it.\n\nThis implementation ensures that the columns of `beta` sum to 1 and that all values are rounded to 4 decimal places, meeting the problem's requirements."}
{"task_id": 202, "completion_id": 0, "completion": "To implement the Partitioning Around Medoids (PAM) clustering algorithm as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n1. **Initialization**: Start with the first `k` samples as the initial medoids.\n2. **Cost Calculation**: Compute the total cost, which is the sum of Euclidean distances between each sample and its closest medoid.\n3. **Swapping**: Try all possible swaps between a medoid and a non-medoid, and accept the swap that results in the largest cost reduction.\n4. **Convergence**: Repeat the swapping step until no swap can reduce the cost further.\n5. **Label Assignment**: Assign each sample to the closest medoid after convergence.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = list(range(k))\n    \n    def compute_cost(medoids):\n        cost = 0\n        labels = np.zeros(n_samples, dtype=int)\n        for i in range(n_samples):\n            distances = np.linalg.norm(X[i] - X[medoids], axis=1)\n            closest_medoid = np.argmin(distances)\n            labels[i] = closest_medoid\n            cost += distances[closest_medoid]\n        return cost, labels\n    \n    # Compute initial cost\n    current_cost, labels = compute_cost(medoids)\n    \n    # Step 2: Iteratively try to improve the cost by swapping medoids\n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for i in range(k):\n            for j in range(k, n_samples):\n                if j not in medoids:\n                    # Try swapping medoid i with non-medoid j\n                    new_medoids = medoids[:]\n                    new_medoids[i] = j\n                    new_cost, _ = compute_cost(new_medoids)\n                    cost_reduction = current_cost - new_cost\n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        best_swap = (i, j)\n        \n        if best_swap is None or best_cost_reduction == 0:\n            break\n        \n        # Perform the best swap\n        i, j = best_swap\n        medoids[i] = j\n        current_cost -= best_cost_reduction\n    \n    # Step 3: Assign labels after convergence\n    final_cost, final_labels = compute_cost(medoids)\n    \n    return final_labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\n### Explanation:\n- **Initialization**: We start by selecting the first `k` samples as medoids.\n- **Cost Calculation**: The `compute_cost` function calculates the total cost and assigns labels to each sample based on the closest medoid.\n- **Swapping**: We iterate over all possible swaps between medoids and non-medoids, checking if a swap reduces the cost. If it does, we keep track of the best swap.\n- **Convergence**: The loop continues until no swap can reduce the cost further.\n- **Label Assignment**: After convergence, we recompute the labels based on the final medoids.\n\nThis implementation ensures that the algorithm is deterministic and follows the rules specified in the task."}
{"task_id": 216, "completion_id": 0, "completion": "To implement the Elastic Net regression from scratch, we need to follow these steps:\n\n1. **Polynomial Feature Expansion**: Generate polynomial features of the given degree for both training and test datasets.\n2. **Standardization**: Standardize the features (excluding the bias term) to have zero mean and unit variance.\n3. **Batch Gradient Descent**: Implement batch gradient descent to minimize the mean squared error with an Elastic Net penalty.\n4. **Prediction**: Use the learned weights to make predictions on the test dataset.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for valid input shapes and n_iterations\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(X, degree):\n        if degree == 1:\n            return X\n        else:\n            from sklearn.preprocessing import PolynomialFeatures\n            poly = PolynomialFeatures(degree, include_bias=False)\n            return poly.fit_transform(X)\n    \n    X_train_poly = polynomial_features(x_train, degree)\n    X_test_poly = polynomial_features(x_test, degree)\n    \n    # Add bias term\n    X_train_poly = np.c_[np.ones(X_train_poly.shape[0]), X_train_poly]\n    X_test_poly = np.c_[np.ones(X_test_poly.shape[0]), X_test_poly]\n    \n    # Standardize features (excluding the bias term)\n    def standardize_features(X):\n        mean = X[:, 1:].mean(axis=0)\n        std = X[:, 1:].std(axis=0)\n        X[:, 1:] = (X[:, 1:] - mean) / std\n        return X, mean, std\n    \n    X_train_poly, mean, std = standardize_features(X_train_poly)\n    X_test_poly[:, 1:] = (X_test_poly[:, 1:] - mean) / std\n    \n    # Initialize weights\n    n_features = X_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Batch gradient descent\n    for _ in range(n_iterations):\n        predictions = X_train_poly.dot(weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        gradient = (2 / X_train_poly.shape[0]) * X_train_poly.T.dot(errors)\n        \n        # Apply Elastic Net regularization\n        l1_penalty = reg_factor * l1_ratio * np.sign(weights[1:])\n        l2_penalty = reg_factor * (1 - l1_ratio) * weights[1:]\n        gradient[1:] += l1_penalty + l2_penalty\n        \n        # Update weights\n        weights -= learning_rate * gradient\n    \n    # Make predictions on the test set\n    predictions_test = X_test_poly.dot(weights)\n    \n    # Return predictions rounded to 4 decimal places\n    return np.round(predictions_test, 4).tolist()\n```\n\n### Explanation:\n1. **Polynomial Feature Expansion**: We use `PolynomialFeatures` from `sklearn.preprocessing` to generate polynomial features.\n2. **Standardization**: We standardize the features (excluding the bias term) to have zero mean and unit variance.\n3. **Batch Gradient Descent**: We initialize the weights to zero and iteratively update them using the gradient of the loss function, which includes the Elastic Net penalty.\n4. **Prediction**: After training, we use the learned weights to make predictions on the test dataset and return the predictions rounded to four decimal places.\n\nThis implementation ensures that the model is trained correctly and handles the input validation as specified."}
{"task_id": 217, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `logistic_components` function that computes the gradient, Hessian, and probability for logistic loss as described:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=np.float64)\n    predicted = np.array(predicted, dtype=np.float64)\n    \n    # Compute the sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Compute the probability\n    prob = sigmoid(predicted)\n    \n    # Compute the gradient\n    grad = actual * sigmoid(-actual * predicted)\n    \n    # Compute the Hessian\n    hess = prob * (1 - prob)\n    \n    # Round the results to 6 decimal places\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    \n    # Convert the results back to lists\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = prob.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\n# actual = [1, -1, 1]\n# predicted = [0.5, -0.5, 2.0]\n# print(logistic_components(actual, predicted))\n```\n\n### Explanation:\n1. **Conversion to NumPy Arrays**: The inputs `actual` and `predicted` are converted to `numpy.ndarray` to leverage vectorized operations, which are more efficient than iterating through elements manually.\n\n2. **Sigmoid Function**: The sigmoid function is defined to compute the probability from the predicted scores.\n\n3. **Gradient Calculation**: The gradient for each observation is calculated using the formula `grad_i = actual_i * sigmoid( \u2212 actual_i * predicted_i )`.\n\n4. **Hessian Calculation**: The Hessian for each observation is calculated using the formula `hess_i = sigmoid(predicted_i) * ( 1 \u2212 sigmoid(predicted_i) )`.\n\n5. **Probability Calculation**: The probability for each observation is simply the sigmoid of the predicted score.\n\n6. **Rounding**: All computed values are rounded to six decimal places using `np.round`.\n\n7. **Conversion to Lists**: Finally, the NumPy arrays are converted back to Python lists before returning.\n\nThis function should work efficiently with lists, tuples, or NumPy arrays as inputs and will return the required components of the logistic loss."}
{"task_id": 218, "completion_id": 0, "completion": "To solve the problem of evaluating the outcome of a finished round of Blackjack, we need to follow the rules provided and calculate the scores for both the player and the dealer. Here's a step-by-step breakdown of how to implement the `blackjack_outcome` function:\n\n1. **Calculate the Hand Value**:\n   - Sum the values of the cards in the hand.\n   - If the hand contains an Ace (represented by 1), check if counting one of the Aces as 11 (instead of 1) would result in a score that is still \u2264 21. If so, use 11 for that Ace.\n\n2. **Determine if a Hand is a Natural Blackjack**:\n   - A natural blackjack is a two-card hand consisting of an Ace and a 10-value card.\n\n3. **Evaluate the Outcome**:\n   - If the player busts (score > 21), the player loses and the reward is -1.\n   - If the dealer busts and the player does not, the player wins and the reward is +1.\n   - If neither busts, compare the scores:\n     - Higher score wins (+1 for player, -1 for dealer).\n     - Equal scores result in a draw (0).\n   - If the player wins with a natural blackjack, the reward is +1.5.\n\nLet's implement this logic in the `blackjack_outcome` function:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand, considering the optimal use of Aces.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        \n        # Use Aces as 11 if possible\n        while aces > 0 and value + 10 <= 21:\n            value += 10\n            aces -= 1\n        \n        return value\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    \n    # Check for player bust\n    if player_value > 21:\n        return -1.0\n    \n    # Check for dealer bust\n    if dealer_value > 21:\n        return 1.0\n    \n    # Check for natural blackjack\n    if is_natural_blackjack(player):\n        return 1.5\n    \n    # Compare scores\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0\n```\n\n### Explanation:\n- **hand_value**: This helper function calculates the value of a hand by summing the card values and adjusting for Aces to maximize the score without exceeding 21.\n- **is_natural_blackjack**: This helper function checks if a hand is a natural blackjack by verifying it has exactly two cards, one of which is an Ace and the other a 10-value card.\n- The main function `blackjack_outcome` uses these helpers to determine the player's reward based on the rules provided.\n\nThis implementation ensures that all the rules of Blackjack are correctly applied to determine the outcome of the game."}
{"task_id": 221, "completion_id": 0, "completion": "Sure, let's implement the `squared_log_error` and `mean_squared_log_error` functions according to the given requirements. We'll start by importing the necessary library, `numpy`, and then proceed to implement the functions with input validation.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate the element-wise squared logarithmic errors\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate the element-wise squared log errors\n    squared_errors = squared_log_error(actual, predicted)\n    \n    # Calculate the mean of the squared log errors\n    msle = np.mean(squared_errors)\n    \n    # Return the MSLE rounded to 4 decimal places\n    return round(msle, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return a valid MSLE value\n```\n\n### Explanation:\n1. **Input Validation**:\n   - We first convert the inputs to NumPy arrays to facilitate element-wise operations.\n   - We check if the shapes of `actual` and `predicted` are the same.\n   - We check if all elements in both `actual` and `predicted` are non-negative.\n\n2. **Squared Logarithmic Error Calculation**:\n   - The `squared_log_error` function computes the element-wise squared logarithmic errors using `np.log1p`, which computes `log(1 + x)` in a numerically stable way.\n\n3. **Mean Squared Logarithmic Error Calculation**:\n   - The `mean_squared_log_error` function calls `squared_log_error` to get the element-wise squared log errors.\n   - It then computes the mean of these squared errors.\n   - Finally, it rounds the result to 4 decimal places and returns it.\n\n### Example Usage:\n- If the inputs are invalid (e.g., different lengths or negative values), the function returns `-1`.\n- If the inputs are valid, the function returns the MSLE rounded to 4 decimal places."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid activation function with the specified requirements, we need to handle different types of inputs (scalars, lists, and NumPy arrays) and ensure numerical stability. The numerical stability can be achieved by handling the computation differently for positive and negative values of `z`.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n    \n    # Compute sigmoid in a numerically stable way\n    # For z >= 0: sigmoid(z) = 1 / (1 + exp(-z))\n    # For z < 0: sigmoid(z) = exp(z) / (1 + exp(z))\n    # This avoids overflow issues with exp(-z) for large positive z\n    sigmoid_values = np.where(z_array >= 0, \n                              1 / (1 + np.exp(-z_array)), \n                              np.exp(z_array) / (1 + np.exp(z_array)))\n    \n    # Round the results to 4 decimal places\n    rounded_values = np.round(sigmoid_values, 4)\n    \n    # Convert back to the appropriate return type\n    if isinstance(z, (int, float)):\n        return float(rounded_values)\n    else:\n        return rounded_values.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Should return 0.5\n# print(sigmoid([0, -1, 1]))  # Should return [0.5, 0.2689, 0.7311]\n# print(sigmoid(np.array([0, -1, 1])))  # Should return [0.5, 0.2689, 0.7311]\n```\n\n### Explanation:\n1. **Input Handling**: The input `z` is converted to a NumPy array to leverage vectorized operations, which are efficient and concise.\n2. **Numerical Stability**: The computation of the sigmoid function is split into two cases:\n   - For `z >= 0`, the standard formula `1 / (1 + exp(-z))` is used.\n   - For `z < 0`, the formula `exp(z) / (1 + exp(z))` is used to avoid overflow issues with `exp(-z)` for large positive `z`.\n3. **Rounding**: The results are rounded to 4 decimal places using `np.round`.\n4. **Return Type**: The function checks if the input was a scalar and returns a float if true. Otherwise, it converts the NumPy array back to a Python list using `.tolist()`.\n\nThis implementation ensures that the function works correctly for all specified input types and remains numerically stable for a wide range of input values."}
{"task_id": 224, "completion_id": 0, "completion": "To implement the Leaky ReLU activation function as described, we need to handle different types of input (`z`), which can be a scalar, a nested list, or a `numpy.ndarray`. The function should apply the Leaky ReLU transformation element-wise and return the result as a plain Python list with the same structure as the input.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n\n    # Convert input to a numpy array if it's not already\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Apply the Leaky ReLU function\n    result = apply_leaky_relu(z)\n    \n    # Convert the result to a list if it's a numpy array\n    if isinstance(result, np.ndarray):\n        result = result.tolist()\n    \n    return result\n\n# Example usage:\n# print(leaky_relu([-1, 0, 1, -2, 2]))  # Output: [-0.01, 0, 1, -0.02, 2]\n# print(leaky_relu([[-1, 0], [1, -2]], a=0.02))  # Output: [[-0.02, 0], [1, -0.04]]\n```\n\n### Explanation:\n1. **Helper Function `apply_leaky_relu`**:\n   - This recursive function checks if the input `x` is a list or a `numpy.ndarray`. If so, it applies the Leaky ReLU function to each element recursively.\n   - If `x` is a scalar, it applies the Leaky ReLU formula directly.\n\n2. **Handling Input Types**:\n   - If `z` is a list, it is converted to a `numpy.ndarray` to simplify the recursive application of the Leaky ReLU function.\n   - The result is then converted back to a list using `tolist()` if it is a `numpy.ndarray`.\n\n3. **Return Value**:\n   - The function returns a Python list with the same nested structure as the input `z`, where each value has been transformed by the Leaky ReLU activation.\n\nThis implementation ensures that the function works correctly for any input type and maintains the structure of the input."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow the steps outlined in the task description. Here's a complete implementation of the `adaboost_predict` function:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    \n    # List to store the trained classifiers and their weights\n    classifiers = []\n    classifier_weights = []\n\n    for _ in range(n_clf):\n        # Initialize variables to track the best stump\n        best_stump = None\n        best_error = float('inf')\n        best_polarity = None\n\n        # Iterate over all features\n        for feature_index in range(n_features):\n            # Get unique values in the current feature column\n            thresholds = np.unique(X_train[:, feature_index])\n\n            # Iterate over all possible thresholds\n            for threshold in thresholds:\n                # Try both polarities\n                for polarity in [1, -1]:\n                    # Predictions for the current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n\n                    # Calculate weighted error\n                    weighted_error = np.sum(sample_weights[predictions != y_train])\n\n                    # Update the best stump if the current one has a lower error\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = (feature_index, threshold, polarity)\n\n        # Calculate the classifier weight\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n\n        # Update the sample weights\n        sample_weights *= np.exp(-alpha * y_train * np.array([best_stump[2] if x[best_stump[0]] < best_stump[1] else -best_stump[2] for x in X_train]))\n        sample_weights /= np.sum(sample_weights)\n\n        # Store the best stump and its weight\n        classifiers.append(best_stump)\n        classifier_weights.append(alpha)\n\n    # Predict on the test set\n    predictions = np.zeros(X_test.shape[0])\n    for (feature_index, threshold, polarity), alpha in zip(classifiers, classifier_weights):\n        stump_predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            stump_predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            stump_predictions[X_test[:, feature_index] >= threshold] = -1\n        predictions += alpha * stump_predictions\n\n    # Return the sign of the weighted sum of stump decisions\n    return [int(np.sign(pred)) for pred in predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the sample weights to be uniform across all training samples.\n2. **Training Loop**: For each of the `n_clf` iterations:\n   - We iterate over each feature and each possible threshold to find the best decision stump that minimizes the weighted classification error.\n   - We calculate the weight (`alpha`) of the best stump using the formula provided.\n   - We update the sample weights to give more importance to misclassified samples.\n   - We store the best stump and its weight.\n3. **Prediction**: For each test sample, we compute the weighted sum of the predictions from all the stumps and return the sign of this sum as the final prediction.\n\nThis implementation ensures that the AdaBoost ensemble is trained using decision stumps and that predictions are made according to the specified rules."}
{"task_id": 241, "completion_id": 0, "completion": "To implement the orthogonal weight initializer as described, we will follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape except the first two dimensions\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    \n    # Step 2: Create a 2-D matrix A with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(*flat_shape)\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == flat_shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    \n    # Convert the result to a list\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the length of the shape is less than 2. If so, it returns `-1` as specified.\n2. **Flattening**: The shape is flattened except for the first two dimensions to form a 2D matrix `A`.\n3. **Random Matrix Generation**: A 2D matrix `A` is generated with random samples from the standard normal distribution.\n4. **SVD Decomposition**: The SVD of `A` is computed, resulting in matrices `U`, `\u03a3`, and `Vt`.\n5. **Choosing the Correct SVD Factor**: Depending on the shape of `U` and `A`, either `U` or `Vt` is chosen as `Q`.\n6. **Reshaping and Scaling**: `Q` is reshaped back to the original shape and scaled by the given factor.\n7. **Conversion to List**: The final result is converted to a list of lists before being returned.\n\n### Verification:\nThe orthogonality condition can be verified by checking the product of the matrix with its transpose (or vice versa) and comparing it to the scaled identity matrix. This is done within the function but not explicitly shown in the code. The example usage demonstrates how to use the function with a fixed random seed to produce the expected output."}
{"task_id": 243, "completion_id": 0, "completion": "To implement the forward pass of the described Actor-Critic network using NumPy, we need to follow the specified architecture and operations. Given that all weights are 1.0 and all biases are 0.0, the computations simplify significantly. Here's the implementation:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert the state to a NumPy array for easier manipulation\n    s = np.array(state)\n    \n    # Define the weights and biases\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Perform the forward pass\n    z1 = np.maximum(0, np.dot(s, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    \n    # Actor head\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    \n    # Critic head\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Return the results rounded to 4 decimal places\n    return [round(prob, 4) for prob in action_probs], round(state_value[0], 4)\n\n# Example usage:\nstate = [0.1, 0.2, 0.3]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action probabilities:\", action_probs)\nprint(\"State value:\", state_value)\n```\n\n### Explanation:\n1. **State Input**: The input state is converted to a NumPy array for easier matrix operations.\n2. **Weights and Biases**: All weights are set to 1.0 and all biases to 0.0 as specified.\n3. **Dense Layers**: Each dense layer computes the dot product of the input with the weights, adds the bias, and applies the ReLU activation function.\n4. **Actor Head**: The logits are computed by the dot product of the output from the last dense layer with the actor weights, and then the softmax function is applied to get the action probabilities.\n5. **Critic Head**: The state value is computed by the dot product of the output from the last dense layer with the critic weights.\n6. **Rounding**: The action probabilities and state value are rounded to four decimal places before returning.\n\nThis implementation ensures that the network behaves deterministically as described in the task."}
{"task_id": 249, "completion_id": 0, "completion": "To implement the `actor_critic_forward` function using NumPy, we need to follow these steps:\n\n1. Convert the input state and parameters to NumPy arrays.\n2. Perform the forward pass through the shared layers with ReLU activations.\n3. Use the final hidden representation to compute the action probabilities using the actor head and the softmax function.\n4. Use the same hidden representation to compute the state value using the critic head.\n5. Round the results to four decimal places and return them.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state, dtype=np.float32)\n    \n    # Convert parameters to NumPy arrays\n    W1, b1 = np.array(params['W1'], dtype=np.float32), np.array(params['b1'], dtype=np.float32)\n    W2, b2 = np.array(params['W2'], dtype=np.float32), np.array(params['b2'], dtype=np.float32)\n    W3, b3 = np.array(params['W3'], dtype=np.float32), np.array(params['b3'], dtype=np.float32)\n    Wa, ba = np.array(params['Wa'], dtype=np.float32), np.array(params['ba'], dtype=np.float32)\n    Wc, bc = np.array(params['Wc'], dtype=np.float32), np.array(params['bc'], dtype=np.float32)\n    \n    # Forward pass through the shared layers\n    h1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)   # ReLU activation\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)   # ReLU activation\n    \n    # Actor head: compute action probabilities\n    action_scores = np.dot(h3, Wa) + ba\n    exp_scores = np.exp(action_scores - np.max(action_scores))  # Subtract max for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n    \n    # Critic head: compute state value\n    value = np.dot(h3, Wc) + bc\n    \n    # Round the probabilities and the state value to four decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)  # value is a scalar, so we take the first element\n    \n    return probabilities, value\n\n# Example usage:\n# state = [0.1, 0.2, 0.3]\n# params = {\n#     'W1': [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]],\n#     'b1': [0.1, 0.2, 0.3],\n#     'W2': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],\n#     'b2': [0.1, 0.2],\n#     'W3': [[0.1, 0.2], [0.3, 0.4]],\n#     'b3': [0.1, 0.2],\n#     'Wa': [[0.1, 0.2], [0.3, 0.4]],\n#     'ba': [0.1, 0.2],\n#     'Wc': [0.1, 0.2],\n#     'bc': [0.1]\n# }\n# probabilities, value = actor_critic_forward(state, params)\n# print(probabilities, value)\n```\n\n### Explanation:\n1. **State and Parameters Conversion**: Convert the input state and parameters to NumPy arrays for efficient computation.\n2. **Shared Layers**: Perform the forward pass through the three shared dense layers with ReLU activations.\n3. **Actor Head**: Compute the action scores, apply the softmax function to convert them into probabilities, and ensure numerical stability by subtracting the maximum score from the exponentiation.\n4. **Critic Head**: Compute the state value using the critic head.\n5. **Rounding**: Round the probabilities and the state value to four decimal places before returning them.\n\nThis implementation ensures that the forward pass is correctly computed and the results are formatted as required."}
{"task_id": 253, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `elastic_net_regularization` function that computes both the Elastic-Net penalty value and its analytical gradient based on the given parameters.\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert w to a NumPy array if it's not already\n    w = np.array(w)\n    \n    if gradient:\n        # Compute the gradient\n        l1_part = l1_ratio * np.sign(w)\n        l2_part = (1 - l1_ratio) * w\n        grad = alpha * (l1_part + l2_part)\n        # Round each element to 4 decimal places\n        return [round(g, 4) for g in grad]\n    else:\n        # Compute the penalty value\n        l1_norm = np.linalg.norm(w, 1)\n        l2_norm_squared = np.dot(w, w)\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm_squared)\n        # Round to 4 decimal places\n        return round(penalty, 4)\n\n# Example usage:\n# w = [1.0, -2.0, 3.0]\n# alpha = 0.5\n# l1_ratio = 0.5\n# print(elastic_net_regularization(w, alpha, l1_ratio))  # Penalty value\n# print(elastic_net_regularization(w, alpha, l1_ratio, gradient=True))  # Gradient\n```\n\n### Explanation:\n1. **Input Conversion**: The function first ensures that the weight vector `w` is a NumPy array for easier mathematical operations.\n2. **Gradient Calculation**:\n   - The L1 part of the gradient is computed using `np.sign(w)`, which returns the sign of each element in `w`.\n   - The L2 part of the gradient is simply `(1 - l1_ratio) * w`.\n   - The full gradient is then `alpha * (l1_part + l2_part)`.\n   - Each element of the gradient is rounded to 4 decimal places before returning.\n3. **Penalty Calculation**:\n   - The L1 norm of `w` is computed using `np.linalg.norm(w, 1)`.\n   - The L2 norm squared of `w` is computed using `np.dot(w, w)`.\n   - The penalty value is then `alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm_squared)`.\n   - The penalty value is rounded to 4 decimal places before returning.\n\nThis function should meet the requirements specified in the task description."}
{"task_id": 256, "completion_id": 0, "completion": "To implement the numerical gradient checker for a vanilla RNN parameter, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter to check\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over each element of the parameter\n    for i in range(param.size):\n        # Get the multi-dimensional index from the flat index\n        idx = np.unravel_index(i, param_shape)\n        \n        # Save the original value\n        original_value = param[idx]\n        \n        # Perturb the parameter by +epsilon\n        param[idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_plus.append(prediction)\n        loss_plus = loss_func(predictions_plus)\n        \n        # Perturb the parameter by -epsilon\n        param[idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_minus.append(prediction)\n        loss_minus = loss_func(predictions_minus)\n        \n        # Compute the numerical gradient\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        \n        # Restore the original value\n        param[idx] = original_value\n    \n    # Return the transposed gradient\n    return grads.T\n```\n\n### Explanation:\n1. **Special Cases Handling**:\n   - If `param_name` is \"X\" or \"y\", the function returns `None` because these are not trainable parameters.\n   - If `param_name` is \"Ba\" or \"Bx\", it is redirected to the lower-case keys \"ba\" or \"bx\".\n\n2. **Parameter Access**:\n   - The parameter to be checked is accessed using `model.parameters[param_name]`.\n\n3. **Gradient Calculation**:\n   - We iterate over each element of the parameter using `np.unravel_index` to handle multi-dimensional arrays.\n   - For each element, we perturb it by `+epsilon` and `-epsilon`, run the forward pass for `n_t` time-steps, and compute the loss.\n   - The numerical gradient is computed using the centered finite-difference formula: \\((L(\\theta_i + \\epsilon) - L(\\theta_i - \\epsilon)) / (2\\epsilon)\\).\n\n4. **Restoration**:\n   - After computing the gradient for an element, we restore the original value of the parameter.\n\n5. **Return**:\n   - The function returns the transposed gradient array.\n\nThis implementation ensures that the numerical gradient is computed accurately and efficiently for any parameter in the RNN model."}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm using decision stumps as weak learners, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for all training samples.\n2. **Train Weak Classifiers**: For each iteration, find the best decision stump that minimizes the weighted error.\n3. **Update Weights**: Adjust the weights of the training samples based on the performance of the current stump.\n4. **Aggregate Predictions**: For each test sample, aggregate the predictions of all stumps weighted by their importance.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    \n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error + 1e-10  # Avoid division by zero\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    # Predict on test data\n    y_pred = np.zeros(X_test.shape[0])\n    for alpha, (feature_i, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in y_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the weights of all training samples to be equal.\n2. **Training Weak Classifiers**: For each iteration, we iterate over each feature and each possible threshold to find the best decision stump. The best stump is the one that minimizes the weighted error.\n3. **Updating Weights**: After finding the best stump, we update the weights of the training samples. Samples that are misclassified by the stump are given more weight, while correctly classified samples are given less weight.\n4. **Aggregating Predictions**: For each test sample, we aggregate the predictions of all stumps, weighted by their importance (alpha). The final prediction is the sign of the weighted sum.\n\nThis implementation ensures that the AdaBoost algorithm is correctly applied using decision stumps as weak learners."}
{"task_id": 261, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Glorot (Xavier) normal initialization function in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions for well-defined fan_in and fan_out.\")\n    \n    # Compute fan_in and fan_out\n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    # Calculate the standard deviation\n    s = np.sqrt(2 / (fan_in + fan_out))\n    \n    # Generate the random array\n    return np.random.normal(0, s, shape).astype(np.float)\n\n# Example usage:\n# shape = (10, 20, 3, 3)  # Example shape for a convolutional layer\n# weights = glorot_normal(shape)\n# print(weights)\n# print(\"Mean:\", np.mean(weights))\n# print(\"Standard Deviation:\", np.std(weights))\n```\n\n### Explanation:\n1. **Fan In and Fan Out Calculation**:\n   - For a 2-D shape (e.g., a fully-connected layer's weight matrix), `fan_in` and `fan_out` are directly the second and first dimensions, respectively.\n   - For shapes with more than two dimensions (e.g., convolutional kernels), the receptive field size is the product of all dimensions after the first two. `fan_in` is then `in_channels * receptive_field_size` and `fan_out` is `out_channels * receptive_field_size`.\n\n2. **Standard Deviation Calculation**:\n   - The standard deviation `s` is calculated as `sqrt(2 / (fan_in + fan_out))`.\n\n3. **Random Array Generation**:\n   - A NumPy array of the specified shape is generated with elements drawn from a normal distribution with mean 0 and standard deviation `s`.\n\n### Example Usage:\nThe example usage at the bottom of the code demonstrates how to use the `glorot_normal` function to generate weights for a convolutional layer with a specific shape. The mean and standard deviation of the generated weights are printed to verify that they are close to the expected values.\n\nThis implementation ensures that the global NumPy random state is not modified apart from using it for sampling, as required."}
{"task_id": 266, "completion_id": 0, "completion": "To solve the problem of converting an undirected, un-weighted graph into an adjacency list representation, we need to follow these steps:\n\n1. **Initialize the Adjacency List**: Create a list of lists where each sublist corresponds to a vertex in `V` and will store its adjacent vertices.\n\n2. **Map Vertices to Indices**: Since we need to maintain the order of vertices as given in `V`, we can use a dictionary to map each vertex to its index in `V`.\n\n3. **Add Edges to the Adjacency List**: For each edge `(u, v)` in `E`, add `v` to the adjacency list of `u` and `u` to the adjacency list of `v`. Ensure that each vertex appears only once in the adjacency list of another vertex.\n\n4. **Sort Neighbors**: After adding all edges, sort the neighbors in each adjacency list according to their order of appearance in `V`.\n\n5. **Return the Adjacency List**: Finally, return the constructed adjacency list.\n\nHere is the implementation of the function:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Step 1: Initialize the adjacency list with empty lists for each vertex\n    adj_list = [[] for _ in V]\n    \n    # Step 2: Create a mapping from vertex to its index in V\n    vertex_to_index = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Step 3: Add edges to the adjacency list\n    for u, v in E:\n        # Add v to the adjacency list of u if not already present\n        if v not in adj_list[vertex_to_index[u]]:\n            adj_list[vertex_to_index[u]].append(v)\n        # Add u to the adjacency list of v if not already present\n        if u not in adj_list[vertex_to_index[v]]:\n            adj_list[vertex_to_index[v]].append(u)\n    \n    # Step 4: Sort the neighbors in each adjacency list according to the order in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: vertex_to_index[x])\n    \n    # Step 5: Return the adjacency list\n    return adj_list\n\n# Example usage:\nV = [1, 2, 3, 4]\nE = [(1, 2), (2, 3), (3, 4), (4, 1), (2, 4)]\nprint(build_adj_list(V, E))\n# Output: [[2, 4], [1, 3, 4], [2, 4], [1, 2, 3]]\n```\n\n### Explanation:\n- **Initialization**: We start by creating a list of empty lists, one for each vertex in `V`.\n- **Mapping**: We create a dictionary `vertex_to_index` to quickly find the index of any vertex in `V`.\n- **Adding Edges**: For each edge `(u, v)`, we add `v` to the adjacency list of `u` and vice versa, ensuring no duplicates.\n- **Sorting**: We sort each adjacency list based on the order of vertices in `V` using the `vertex_to_index` dictionary.\n- **Return**: Finally, we return the constructed adjacency list.\n\nThis approach ensures that the adjacency list is correctly built, maintains the order of vertices, and contains no duplicate neighbors."}
{"task_id": 267, "completion_id": 0, "completion": "To solve the problem of finding the optimal weighted decision stump, we need to iterate over each feature and each unique value of that feature to determine the best threshold and polarity that minimizes the weighted classification error. Here's a step-by-step breakdown of the approach:\n\n1. **Iterate Over Features**: For each feature, we will consider all unique values as potential thresholds.\n2. **Sort Data**: For each feature, sort the data based on the feature values. This helps in efficiently calculating the weighted error as we can accumulate weights as we move through the sorted data.\n3. **Calculate Weighted Error**: For each threshold, calculate the weighted error for both polarities (1 and -1).\n4. **Track Minimum Error**: Keep track of the minimum weighted error encountered and the corresponding feature index, threshold, and polarity.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_feature_index = None\n    best_threshold = None\n    best_polarity = None\n\n    for feature_index in range(n_features):\n        # Extract the feature column and sort it along with corresponding labels and weights\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n\n        # Initialize the error for the case where the threshold is less than the smallest feature value\n        error_positive = np.sum(sorted_weights[sorted_y == -1])\n        error_negative = np.sum(sorted_weights[sorted_y == 1])\n\n        # Check the error for each unique threshold\n        for i in range(n_samples):\n            # Current threshold is the average of the current and next feature value\n            if i < n_samples - 1 and sorted_feature_values[i] == sorted_feature_values[i + 1]:\n                continue\n            threshold = (sorted_feature_values[i] + sorted_feature_values[i + 1]) / 2.0\n\n            # Update errors for the next threshold\n            if sorted_y[i] == 1:\n                error_positive -= sorted_weights[i]\n            else:\n                error_negative -= sorted_weights[i]\n\n            # Check both polarities\n            for polarity in [1, -1]:\n                if polarity == 1:\n                    current_error = error_positive\n                else:\n                    current_error = error_negative\n\n                # Update the best stump if the current error is smaller\n                if current_error < best_error:\n                    best_error = current_error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```\n\n### Explanation:\n- **Sorting**: We sort the data for each feature to efficiently compute the weighted error as we iterate through potential thresholds.\n- **Threshold Calculation**: For each pair of consecutive unique feature values, we calculate the threshold as their average.\n- **Error Calculation**: We maintain running totals of the weighted errors for both polarities and update them as we move through the sorted data.\n- **Best Stump Selection**: We keep track of the stump with the minimum weighted error and return it.\n\nThis approach ensures that we efficiently find the optimal decision stump by examining all possible thresholds and polarities for each feature."}
{"task_id": 273, "completion_id": 0, "completion": "To solve the problem of finding the optimal numerical threshold for a decision tree split, we need to follow these steps:\n\n1. **Sort the Feature Values**: We need to sort the feature values to find the candidate thresholds.\n2. **Calculate Shannon Entropy**: We need a function to calculate the Shannon entropy of a list of class labels.\n3. **Evaluate Information Gain**: For each candidate threshold, split the data and calculate the information gain.\n4. **Select the Best Threshold**: Choose the threshold that maximizes the information gain. If multiple thresholds yield the same gain, select the smallest one.\n5. **Handle Edge Cases**: If all feature values are identical or all labels belong to the same class, return `(None, 0.0)`.\n\nHere's the implementation of the `best_split` function:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef shannon_entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / total\n        entropy -= p * math.log2(p)\n    return entropy\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Sort the feature values and get the corresponding target values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Initialize variables to track the best split\n    best_threshold = None\n    max_information_gain = 0.0\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = shannon_entropy(sorted_target)\n    n = len(sorted_feature)\n    \n    # Iterate through the sorted feature values to find candidate thresholds\n    for i in range(n - 1):\n        # Only consider distinct values for thresholds\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            \n            # Split the data into left and right subsets\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            left_labels = sorted_target[:i + 1]\n            right_labels = sorted_target[i + 1:]\n            \n            # Calculate the entropy of the left and right subsets\n            left_entropy = shannon_entropy(left_labels)\n            right_entropy = shannon_entropy(right_labels)\n            \n            # Calculate the information gain\n            information_gain = parent_entropy - (len(left_labels) / n) * left_entropy - (len(right_labels) / n) * right_entropy\n            \n            # Update the best threshold if this one has higher information gain\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n    \n    # Round the best threshold and information gain to 4 decimal places\n    if best_threshold is not None:\n        best_threshold = round(best_threshold, 4)\n    max_information_gain = round(max_information_gain, 4)\n    \n    return (best_threshold, max_information_gain)\n\n# Example usage:\n# feature = [1, 2, 3, 4, 5]\n# target = [0, 0, 1, 1, 1]\n# print(best_split(feature, target))  # Output: (2.5, 0.3219)\n```\n\n### Explanation:\n1. **Sorting**: We sort the feature values and their corresponding target labels.\n2. **Entropy Calculation**: We define a helper function `shannon_entropy` to compute the entropy of a list of labels.\n3. **Threshold Evaluation**: We iterate through the sorted feature values to find candidate thresholds. For each threshold, we split the data into left and right subsets and calculate the information gain.\n4. **Best Threshold Selection**: We keep track of the threshold that provides the maximum information gain. If multiple thresholds yield the same gain, the smallest one is chosen due to the order of iteration.\n5. **Edge Cases**: If no useful split is found, we return `(None, 0.0)`.\n\nThis implementation ensures that we find the optimal threshold for splitting the data in a decision tree, adhering to the constraints and requirements specified."}
{"task_id": 286, "completion_id": 0, "completion": "Let's implement the required functions and the `get_initializer` utility function. We'll start by completing the implementations of `zeros_init`, `ones_init`, and `random_uniform_init`. Then, we'll implement `get_initializer` to retrieve the appropriate initializer function based on the provided name.\n\nHere's the complete code:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[0.0 for _ in range(cols)] for _ in range(rows)]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    rows, cols = shape\n    return [[1.0 for _ in range(cols)] for _ in range(rows)]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    rows, cols = shape\n    return [[random.uniform(low, high) for _ in range(cols)] for _ in range(rows)]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    init_fn = get_initializer(name)  # returns the function ones_init\n    output = init_fn(shape)          # [[1.0, 1.0], [1.0, 1.0]]\n    print(output)\n```\n\n### Explanation:\n\n1. **`zeros_init`**:\n   - This function takes a `shape` tuple `(rows, cols)` and returns a matrix of zeros with the specified dimensions.\n\n2. **`ones_init`**:\n   - This function takes a `shape` tuple `(rows, cols)` and returns a matrix of ones with the specified dimensions.\n\n3. **`random_uniform_init`**:\n   - This function takes a `shape` tuple `(rows, cols)`, and optional `low`, `high`, and `seed` parameters. It returns a matrix with elements drawn uniformly from the interval `[low, high]`. The `seed` parameter ensures that the random numbers are deterministic.\n\n4. **`get_initializer`**:\n   - This function looks up the provided `name` in the global namespace using `globals()`.\n   - It checks if the found object is callable.\n   - If it is callable, it returns the function.\n   - If not, it raises a `ValueError` with the message \"Invalid initialization function.\"\n\nThis implementation ensures that the correct initializer function is retrieved based on the provided name, and it adheres to the constraints and requirements specified in the task description."}
{"task_id": 287, "completion_id": 0, "completion": "To implement the 2-D average pooling forward and backward passes, we need to carefully handle the operations on the input tensor `X` using the specified pooling window and stride. Here's a step-by-step breakdown of the implementation:\n\n### Forward Pass:\n1. **Initialize the Output Shape**: Calculate the shape of the output tensor based on the input dimensions, pooling window size, and stride.\n2. **Iterate Over the Input**: Use nested loops to slide the pooling window over the input tensor and compute the average for each window.\n3. **Store the Averages**: Store the computed averages in the output tensor.\n\n### Backward Pass:\n1. **Initialize the Gradient Input**: Create a tensor to accumulate the gradients for the input, initialized to zeros.\n2. **Distribute the Gradients**: For each element in the output gradient, distribute it equally to all elements in the corresponding pooling window in the input.\n3. **Accumulate the Gradients**: Sum the distributed gradients to form the final gradient input.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize output tensor\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Initialize gradient input tensor\n    grad_input = np.zeros_like(X)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round to the nearest 4th decimal and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\n### Explanation:\n- **Forward Pass**: We iterate over each batch, channel, and spatial position of the output tensor. For each position, we compute the mean of the corresponding pooling window in the input tensor.\n- **Backward Pass**: We distribute the gradient from the output tensor to the input tensor by dividing the gradient by the number of elements in the pooling window and adding it to the corresponding positions in the input tensor.\n\nThis implementation ensures that the gradients are correctly distributed and the results are rounded to the nearest 4th decimal before being converted to lists."}
{"task_id": 290, "completion_id": 0, "completion": "To solve the problem of comparing two decision trees recursively, we need to ensure that both trees have the same structure and that corresponding nodes have the same feature index, threshold, and leaf values within a specified tolerance. Here's how we can implement the `compare_trees` function:\n\n1. **Base Case**: If both nodes are leaves, we compare their values using `numpy.allclose` to account for numerical precision.\n2. **Recursive Case**: If both nodes are internal nodes (i.e., instances of `Node`), we need to:\n   - Check if the feature indices are the same.\n   - Check if the thresholds are numerically equal within the tolerance.\n   - Recursively compare the left and right subtrees.\n\nIf any of these conditions fail, the trees are not equivalent.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        # Both are leaves, compare their values\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Both are nodes, compare feature, threshold, and subtrees\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        # One is a leaf and the other is a node, they are not equivalent\n        return False\n```\n\n### Explanation:\n- **Leaf Comparison**: If both nodes are leaves, we use `np.allclose` to compare their values. This function checks if two arrays are element-wise equal within a tolerance.\n- **Node Comparison**: If both nodes are internal nodes, we first check if their feature indices are the same. Then, we use `np.isclose` to compare their thresholds within the tolerance. Finally, we recursively compare their left and right subtrees.\n- **Mismatched Types**: If one node is a leaf and the other is an internal node, they cannot be equivalent, so we return `False`.\n\nThis approach ensures that the trees are compared recursively and correctly according to the given criteria."}
{"task_id": 292, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `single_point_crossover` function as per the given requirements:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to NumPy arrays for easier manipulation\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = np_parent1.shape[1]\n    \n    # Ensure the cutoff is within the valid range\n    if cutoff < 0 or cutoff > num_columns:\n        return -1\n    \n    # Create the children matrices using slicing\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the children matrices back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\n# parent1 = [[1, 2, 3], [4, 5, 6]]\n# parent2 = [[7, 8, 9], [10, 11, 12]]\n# cutoff = 1\n# print(single_point_crossover(parent1, parent2, cutoff))\n# Output: ([[1, 8, 9], [4, 11, 12]], [[7, 2, 3], [10, 5, 6]])\n```\n\n### Explanation:\n1. **Input Validation**: The function first converts the input lists to NumPy arrays for easier manipulation. It then checks if the shapes of the two parent matrices are the same. If not, it returns `-1`.\n\n2. **Crossover Logic**: The function uses NumPy's slicing capabilities to create the two child matrices:\n   - `child1` is formed by taking columns from `parent1` up to (but not including) the `cutoff` and columns from `parent2` from the `cutoff` to the end.\n   - `child2` is formed by taking columns from `parent2` up to (but not including) the `cutoff` and columns from `parent1` from the `cutoff` to the end.\n\n3. **Conversion to Lists**: The resulting NumPy arrays for `child1` and `child2` are converted back to nested Python lists using the `tolist()` method.\n\n4. **Return**: The function returns a tuple containing the two children matrices as lists."}
{"task_id": 294, "completion_id": 0, "completion": "To solve this task, we need to convert a custom graph representation into a plain adjacency dictionary. The custom graph is represented by a dictionary `G` with specific fields, and we need to ensure that the resulting adjacency dictionary meets the specified requirements.\n\nHere's a step-by-step breakdown of how to achieve this:\n\n1. **Initialize the Adjacency Dictionary**: Start by creating an empty dictionary `adj` to store the adjacency list representation.\n\n2. **Iterate Over Vertices**: Use the `_V2I` dictionary to iterate over all vertices. For each vertex, initialize an empty list in the `adj` dictionary to store its neighbors.\n\n3. **Process Edges**: Iterate over the `_G` list, which contains the adjacency lists for each vertex. For each edge, extract the source, target, and weight.\n\n4. **Add Edges to Adjacency Dictionary**:\n   - If the graph is directed, add the edge `(target, weight)` to the adjacency list of the source vertex.\n   - If the graph is undirected, add the edge `(target, weight)` to the adjacency list of the source vertex and also add the edge `(source, weight)` to the adjacency list of the target vertex.\n\n5. **Sort Neighbors**: After processing all edges, sort the neighbor lists in each entry of the `adj` dictionary alphabetically by the neighbor label.\n\n6. **Return the Adjacency Dictionary**: Finally, return the constructed adjacency dictionary.\n\nHere is the implementation of the `to_networkx` function:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I'].keys()}\n    \n    for edges in G['_G']:\n        for source_label, target_label, weight in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    \n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n```\n\n### Explanation:\n- **Initialization**: We initialize the `adj` dictionary with all vertex labels from `G['_V2I']` and set their values to empty lists.\n- **Edge Processing**: We iterate over each list of edges in `G['_G']`. For each edge, we add the target and weight to the adjacency list of the source. If the graph is undirected, we also add the source and weight to the adjacency list of the target.\n- **Sorting**: After processing all edges, we sort each list of neighbors in the `adj` dictionary by the neighbor label.\n- **Return**: Finally, we return the `adj` dictionary.\n\nThis function ensures that the adjacency dictionary is correctly constructed and meets all the specified requirements."}
{"task_id": 296, "completion_id": 0, "completion": "To solve this problem, we need to check if all elements in a given NumPy array are either `0` or `1`. The array can be of any shape and can contain integers, floats, or booleans. Here's how we can implement the `is_binary` function:\n\n1. Convert the input to a NumPy array if it isn't already.\n2. Use a condition to check if all elements are either `0` or `1`.\n3. Return `True` if the condition is satisfied for all elements, otherwise return `False`.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)  # Ensure x is a NumPy array\n    return np.all((x == 0) | (x == 1))\n```\n\n### Explanation:\n- `np.asarray(x)`: Converts the input `x` to a NumPy array if it isn't already. This handles cases where `x` might be a list or another array-like structure.\n- `(x == 0) | (x == 1)`: Creates a boolean array where each element is `True` if the corresponding element in `x` is `0` or `1`, and `False` otherwise.\n- `np.all(...)`: Checks if all elements in the boolean array are `True`. If they are, it means all elements in `x` are either `0` or `1`, and the function returns `True`. Otherwise, it returns `False`.\n\nThis function will correctly handle arrays of any shape and containing integers, floats, or booleans."}
{"task_id": 298, "completion_id": 0, "completion": "To implement the `ngram_log_prob` function, we need to follow these steps:\n\n1. **Tokenize the Corpus and Query**: Split each sentence in the corpus and the query into tokens.\n2. **Pad the Sentences**: For N > 1, pad each sentence in the corpus and the query with `<bol>` tokens at the beginning and an `<eol>` token at the end.\n3. **Count N-grams and (N-1)-grams**: Use a `Counter` to count the occurrences of each N-gram and (N-1)-gram in the padded corpus.\n4. **Calculate Conditional Probabilities**: For each N-gram in the padded query, calculate the conditional probability using the counts.\n5. **Compute Log-Probability**: Sum the natural logarithms of these probabilities.\n6. **Handle Edge Cases**: Return `float('-inf')` if any N-gram in the query has zero probability or if the query is too short for the requested N.\n\nHere's the implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n    \n    # Tokenize and pad the corpus\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        corpus_tokens.extend(tokens)\n    \n    # Tokenize and pad the query\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    \n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(tuple(corpus_tokens[i:i+N]) for i in range(len(corpus_tokens) - N + 1))\n    n1gram_counts = Counter(tuple(corpus_tokens[i:i+N-1]) for i in range(len(corpus_tokens) - N + 1))\n    \n    # Calculate the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        n1gram = tuple(query_tokens[i:i+N-1])\n        \n        if n1gram_counts[n1gram] == 0:\n            return float('-inf')\n        \n        prob = ngram_counts[ngram] / n1gram_counts[n1gram]\n        if prob == 0:\n            return float('-inf')\n        \n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\n### Explanation:\n- **Tokenization and Padding**: We split each sentence into tokens and pad them with `<bol>` and `<eol>` as needed.\n- **Counting**: We use `Counter` to count N-grams and (N-1)-grams.\n- **Probability Calculation**: For each N-gram in the query, we calculate the conditional probability and sum their logarithms.\n- **Edge Cases**: We handle cases where the query is too short or contains unseen N-grams by returning `float('-inf')`.\n\nThis implementation should meet the requirements and handle the specified edge cases."}
{"task_id": 302, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Spectral Clustering algorithm from scratch, following the provided task description. The code includes all the necessary steps and uses only NumPy for numerical operations.\n\n```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the (unnormalized) graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    \n    for _ in range(100):\n        # Assign labels based on the nearest centroid\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        \n        # Handle empty clusters by re-initializing centroids\n        for i in range(k):\n            if counts[i] == 0:\n                new_centroids[i] = E[np.random.randint(n)]\n            else:\n                new_centroids[i] /= counts[i]\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [4, 2], [4, 4], [4, 0]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\n### Explanation:\n1. **Weighted Adjacency Matrix (W):** We compute the weight between each pair of points using the formula \\( w_{ij} = \\frac{1}{1 + \\|x_i - x_j\\|_2} \\). The diagonal is set to zero as no point is connected to itself.\n2. **Graph Laplacian (L):** The Laplacian is computed as \\( L = D - W \\), where \\( D \\) is the diagonal degree matrix with \\( D_{ii} = \\sum_j w_{ij} \\).\n3. **Eigenvectors:** We compute the eigenvalues and eigenvectors of \\( L \\) and select the first \\( k \\) eigenvectors corresponding to the smallest eigenvalues.\n4. **K-means Clustering:** We perform k-means clustering on the rows of the projection matrix \\( E \\). The initial centroids are chosen as the first \\( k \\) rows of \\( E \\). The algorithm iterates until the cluster assignments stop changing or a maximum of 100 iterations is reached. If a cluster becomes empty, its centroid is re-initialized with a random row from \\( E \\).\n\nThis implementation ensures that all steps are done manually and only NumPy is used for numerical operations."}
{"task_id": 303, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `err_fmt` function that adheres to the specified format and constraints:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[ix]\n    \n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```\n\n### Explanation:\n1. **Index Calculation**: \n   - `prev_ix` is calculated as `max(ix - 1, 0)` to ensure that for `ix = 0`, `prev_ix` is `0` (i.e., the first element itself).\n\n2. **Tuple Unpacking**:\n   - `prev_label` and `prev_mine` are extracted from `params[prev_ix]`.\n   - `curr_label` and `curr_mine` are extracted from `params[ix]`.\n\n3. **String Formatting**:\n   - The string is constructed using f-strings to insert the values of `prev_label`, `prev_mine`, `curr_label`, `curr_mine`, and `golds` into the appropriate places.\n   - `warn_str` is appended exactly as it is provided.\n\n4. **Return**:\n   - The final formatted string is returned.\n\nThis function ensures that the output matches the required format exactly, including the number of dashes, line breaks, and the inclusion of `warn_str` without any modifications."}
{"task_id": 304, "completion_id": 0, "completion": "To implement the function `bayesian_posterior_mean`, we need to follow these steps:\n\n1. **Handle the Intercept**: If `fit_intercept` is `True`, prepend a column of ones to the design matrix `X`.\n2. **Normalize the Prior Parameters**:\n   - If `mu` is a scalar, broadcast it to a vector of the appropriate length.\n   - If `V` is `None`, set it to the identity matrix.\n   - If `V` is a scalar, convert it to a scalar times the identity matrix.\n   - If `V` is a list or tuple, treat it as a diagonal matrix.\n3. **Compute the Posterior Mean**:\n   - Compute the inverse of `V`.\n   - Compute the posterior covariance matrix `\u03a3_b`.\n   - Compute the posterior mean `\u03bc_b`.\n\nHere is the implementation of the function:\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Handle intercept\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Determine the number of features\n    M = X.shape[1]\n    \n    # Normalize the prior parameters\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    \n    # Compute the inverse of V\n    V_inv = np.linalg.inv(V)\n    \n    # Compute the posterior covariance matrix \u03a3_b\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    \n    # Compute the posterior mean \u03bc_b\n    XTy = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    \n    # Return the posterior mean rounded to 4 decimal places\n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\n### Explanation:\n- **Intercept Handling**: If `fit_intercept` is `True`, we prepend a column of ones to `X` to account for the intercept term.\n- **Prior Parameters Normalization**:\n  - `mu` is broadcasted to a vector of length `M` (number of features).\n  - `V` is converted to the appropriate matrix form based on its type.\n- **Posterior Computation**:\n  - `V_inv` is the inverse of the prior covariance matrix `V`.\n  - `Sigma_b` is the posterior covariance matrix.\n  - `mu_b` is the posterior mean of the coefficients, computed using the formula provided.\n\nThis function should work correctly for the given specifications and constraints."}
{"task_id": 308, "completion_id": 0, "completion": "To implement the `mel_filterbank` function as specified, we need to follow these steps:\n\n1. **Convert frequency limits to the Mel scale**:\n   - Convert `min_freq` and `max_freq` to Mel using the formula `mel = 2595 * log10(1 + f/700)`.\n   - If `max_freq` is not provided, it defaults to the Nyquist frequency `fs/2`.\n\n2. **Generate Mel filterbank frequencies**:\n   - Create `n_filters + 2` equally spaced Mel values between the Mel values of `min_freq` and `max_freq`.\n\n3. **Convert Mel values back to Hertz**:\n   - Convert these Mel values back to Hertz using the formula `f = 700 * (10**(mel/2595) - 1)`.\n\n4. **Compute the triangular filters**:\n   - For each DFT bin `k` and each Mel filter `i`, compute the left-hand and right-hand slopes of the triangle.\n   - The weight for filter `i` and bin `k` is the positive minimum of both slopes.\n\n5. **Normalize the filters** (if `normalize` is `True`):\n   - Scale each filter by `2 / (f_{i+2} - f_{i})` to ensure the area in Mel space equals 1.\n\n6. **Return the filterbank**:\n   - The filterbank should be a plain Python list with shape `(n_filters, N//2 + 1)`, and each element should be rounded to 4 decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    \n    # Convert Hz to Mel\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n    \n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n    \n    # Generate Mel filterbank frequencies\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    \n    # Convert Mel points back to Hz\n    hz_points = mel_to_hz(mel_points)\n    \n    # Number of DFT bins\n    n_bins = N // 2 + 1\n    \n    # Initialize the filterbank\n    filterbank = np.zeros((n_filters, n_bins))\n    \n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        \n        for k in range(n_bins):\n            f_k = k * fs / N\n            \n            if f_k < f_center:\n                if f_k > f_left:\n                    filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            else:\n                if f_k < f_right:\n                    filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n    \n    # Normalize the filters\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n    \n    # Convert to a list of lists and round to 4 decimal places\n    filterbank = [[round(val, 4) for val in row] for row in filterbank]\n    \n    return filterbank\n```\n\nThis function should now correctly generate a Mel filterbank matrix that can be used to transform a power spectrum into Mel band energies. The output is a plain Python list of lists, with each element rounded to 4 decimal places, as required."}
{"task_id": 312, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `blackman_harris` function that generates a Blackman\u2013Harris window of arbitrary length, with options for both symmetric and periodic variants. The function handles special cases as specified and rounds all values to four decimal places.\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    n = np.arange(window_len)\n    if not symmetric:\n        n = np.arange(window_len + 1)[:window_len]  # Periodic case\n    \n    # Calculate the Blackman-Harris window\n    bh_window = (a0 - a1 * np.cos(2 * np.pi * n / N) +\n                 a2 * np.cos(4 * np.pi * n / N) -\n                 a3 * np.cos(6 * np.pi * n / N))\n    \n    # Round to 4 decimal places\n    bh_window_rounded = [round(val, 4) for val in bh_window]\n    \n    return bh_window_rounded\n\n# Example usage:\n# print(blackman_harris(10, symmetric=False))  # Periodic\n# print(blackman_harris(10, symmetric=True))   # Symmetric\n```\n\n### Explanation:\n1. **Special Cases**:\n   - If `window_len` is less than or equal to 0, the function returns an empty list.\n   - If `window_len` is exactly 1, the function returns `[1.0]` regardless of the `symmetric` parameter.\n\n2. **Coefficients**:\n   - The coefficients `a0`, `a1`, `a2`, and `a3` are defined as per the Blackman-Harris window formula.\n\n3. **Symmetric vs. Periodic**:\n   - For the symmetric form, `N` is set to `window_len - 1`.\n   - For the periodic form, `N` is set to `window_len`, and the window is conceptually generated with length `window_len + 1` and the last value discarded.\n\n4. **Window Calculation**:\n   - The Blackman-Harris window is calculated using the formula provided.\n   - The resulting window values are rounded to four decimal places.\n\nThis implementation ensures that the function behaves correctly for both symmetric and periodic variants and handles edge cases appropriately."}
{"task_id": 313, "completion_id": 0, "completion": "To solve this problem, we need to implement the `expected_log_dirichlet` function, which computes the expectation of the logarithm of a component of a Dirichlet-distributed random vector. This involves implementing the digamma function ourselves, as specified in the task description.\n\nHere's the step-by-step breakdown of the solution:\n\n1. **Implement the Digamma Function**:\n   - Use the recursion relation to shift small values of \\( x \\) up to a moderate value (e.g., 6).\n   - Use the asymptotic expansion for larger values of \\( x \\).\n\n2. **Compute the Required Expectation**:\n   - Calculate \\( \\psi(\\gamma[d, t]) \\).\n   - Calculate \\( \\psi(\\sum_{k} \\gamma[d, k]) \\).\n   - Subtract the second from the first to get the expected value.\n   - Round the result to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a larger value using the recursion relation\n    while x < 6:\n        digamma_value = -1 / x + digamma(x + 1)\n        x += 1\n    else:\n        # Use the asymptotic expansion for large x\n        digamma_value = math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n    return digamma_value\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\"\"\"\n    # Convert gamma to a NumPy array if it's not already\n    gamma = np.array(gamma)\n    \n    # Calculate the digamma of gamma[d, t]\n    psi_gamma_dt = digamma(gamma[d, t])\n    \n    # Calculate the sum of gamma[d, :]\n    sum_gamma_d = np.sum(gamma[d, :])\n    \n    # Calculate the digamma of the sum of gamma[d, :]\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    \n    # Compute the expected log value\n    expected_log_value = psi_gamma_dt - psi_sum_gamma_d\n    \n    # Round the result to 4 decimal places\n    return round(expected_log_value, 4)\n\n# Example usage:\n# gamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\n# d = 0\n# t = 1\n# print(expected_log_dirichlet(gamma, d, t))  # Example call\n```\n\n### Explanation:\n- **Digamma Function**: The `digamma` function is implemented using a combination of recursion to handle small values and an asymptotic expansion for larger values.\n- **Expected Log Calculation**: The function calculates the required expectation using the digamma function and rounds the result to four decimal places.\n\nThis implementation ensures that we can compute the expected logarithm of a Dirichlet component without relying on external scientific libraries."}
{"task_id": 317, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `err_fmt` function that adheres to the specified format:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current predictions and labels\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Get the gold values for the previous and current labels\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    # Construct the formatted string\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return report\n```\n\n### Explanation:\n1. **Previous Index Calculation**: The previous index (`prev_ix`) is calculated using `max(ix - 1, 0)` to ensure it doesn't go below 0.\n2. **Extracting Predictions and Labels**: The predictions and labels for both the previous and current indices are extracted from the `params` list.\n3. **Fetching Gold Values**: The gold values corresponding to the labels are fetched from the `golds` dictionary.\n4. **String Construction**: The formatted string is constructed using f-strings to insert the values into the template provided in the task description.\n\nThis function will generate the required debug report with the exact formatting specified."}
{"task_id": 318, "completion_id": 0, "completion": "To implement the AdaBoost.M1 algorithm from scratch using decision stumps as weak learners, we need to follow these steps:\n\n1. **Initialize Weights**: Start with equal weights for all training samples.\n2. **Train Weak Learners**: For each boosting round, find the best decision stump that minimizes the weighted classification error.\n3. **Update Weights**: Adjust the weights of the training samples based on the performance of the weak learner.\n4. **Combine Weak Learners**: Use the weighted sum of the weak learners to make predictions on the test set.\n\nHere's the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {}\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] < threshold] = -1\n                    predictions *= polarity\n                    \n                    weighted_error = np.sum(weights[predictions != y_train])\n                    \n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity *= -1\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity}\n        \n        epsilon = min_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        \n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_stump['feature']] < best_stump['threshold']] = -1\n        predictions *= best_stump['polarity']\n        stumps.append(best_stump)\n        \n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    \n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, stump['feature']] < stump['threshold']] = -1\n        predictions *= stump['polarity']\n        final_predictions += alpha * predictions\n    \n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\n# print(predictions)  # Output: [1, -1]\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing the weights of all training samples to be equal.\n2. **Training Weak Learners**: For each boosting round, we iterate over all features and thresholds to find the best decision stump that minimizes the weighted classification error.\n3. **Updating Weights**: After finding the best stump, we update the weights of the training samples. Samples that are misclassified by the stump are given higher weights, while correctly classified samples are given lower weights.\n4. **Combining Weak Learners**: We store the stumps and their corresponding weights (alphas). For prediction, we sum the weighted predictions of all stumps and take the sign of the result.\n\nThis implementation ensures that we follow the AdaBoost.M1 algorithm using decision stumps as weak learners and returns the predictions as a list of `-1` and `1`."}
{"task_id": 329, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `dft_bins` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    delta_f = fs / N\n    \n    if positive_only:\n        # Non-negative frequencies\n        k_values = np.arange(0, N // 2 + 1)\n        frequencies = k_values * delta_f\n    else:\n        # Full list of frequencies\n        k_values = np.arange(0, N)\n        frequencies = np.fft.fftfreq(N, d=1/fs)\n    \n    # Round to 4 decimal places and convert to list\n    return [round(freq, 4) for freq in frequencies.tolist()]\n\n# Example usage:\n# print(dft_bins(8, 44000, positive_only=True))\n# print(dft_bins(8, 44000, positive_only=False))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `N` or `fs` is non-positive. If so, it returns an empty list.\n2. **Delta Frequency Calculation**: The delta frequency `\u0394f` is calculated as `fs / N`.\n3. **Frequency Calculation**:\n   - If `positive_only` is `True`, it calculates the non-negative frequencies using `np.arange(0, N // 2 + 1)`.\n   - If `positive_only` is `False`, it calculates the full list of frequencies using `np.fft.fftfreq(N, d=1/fs)`, which generates the frequency bins in the order specified.\n4. **Rounding and Conversion**: The frequencies are rounded to 4 decimal places and converted to a regular Python list using `tolist()`.\n\nThis function should work correctly for both modes and handle the constraints as specified."}
{"task_id": 331, "completion_id": 0, "completion": "To compute the out-of-bag mean squared error (OOB-MSE) for a Random Forest regressor, we need to follow these steps:\n\n1. **Filter OOB Predictions**: For each sample, filter out the predictions that were made by out-of-bag trees.\n2. **Compute Averages**: For each sample that has at least one OOB prediction, compute the average of these predictions.\n3. **Calculate Squared Errors**: Compute the squared error between the average OOB prediction and the true value for each sample.\n4. **Compute OOB-MSE**: Compute the mean of these squared errors over all samples that have at least one OOB prediction.\n5. **Handle Edge Cases**: If no sample has an OOB prediction, return -1.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    \n    oob_errors = []\n    \n    for i in range(n_samples):\n        # Get the OOB predictions for the i-th sample\n        oob_preds = predictions[i, oob_mask[i]]\n        \n        if oob_preds.size > 0:\n            # Compute the average of OOB predictions\n            avg_oob_pred = np.mean(oob_preds)\n            # Compute the squared error\n            squared_error = (avg_oob_pred - y_true[i]) ** 2\n            oob_errors.append(squared_error)\n    \n    if not oob_errors:\n        return -1\n    \n    # Compute the mean of the squared errors\n    oob_mse_value = np.mean(oob_errors)\n    \n    return round(oob_mse_value, 4)\n```\n\n### Explanation:\n- **Input Conversion**: Convert inputs to numpy arrays for efficient computation.\n- **Loop Through Samples**: For each sample, extract the predictions made by out-of-bag trees using the `oob_mask`.\n- **Check for OOB Predictions**: If there are any OOB predictions for a sample, compute the average and the squared error.\n- **Compute OOB-MSE**: If there are any samples with OOB predictions, compute the mean of the squared errors. Otherwise, return -1.\n- **Rounding**: The result is rounded to 4 decimal places as required.\n\nThis function should handle the computation of OOB-MSE correctly and efficiently."}
{"task_id": 332, "completion_id": 0, "completion": "To construct the FP-Tree without using any classes, we will follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        item_support.update(set(transaction))  # Use set to count unique items per transaction\n\n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n\n    # Step 3: Create a global ordering of the remaining items\n    # First by decreasing support, then alphabetically to break ties\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n\n    # Step 4: Construct the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them according to the global ordering\n        filtered_transaction = sorted(set(transaction) & set(frequent_items), key=lambda x: sorted_items.index(x))\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n\n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'b'],\n    ['a', 'c'],\n    ['b', 'c'],\n    ['a', 'b', 'c', 'd'],\n    ['a', 'b', 'd'],\n    ['b', 'c', 'd'],\n    ['a', 'b', 'c', 'd', 'e']\n]\nmin_support = 2\n\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\n### Explanation:\n1. **Support Calculation**: We use `Counter` to count the occurrences of each item across all transactions, considering each item only once per transaction.\n2. **Filtering Frequent Items**: We filter out items that do not meet the minimum support threshold.\n3. **Sorting Items**: We sort the frequent items first by their support in descending order and then alphabetically to break ties.\n4. **Building the Tree**: For each transaction, we filter and sort the items according to the global ordering, then traverse and update the tree accordingly.\n\nThis implementation constructs the FP-Tree as a nested dictionary, adhering to the specified requirements."}
{"task_id": 336, "completion_id": 0, "completion": "To implement the `linear_kernel` function, we need to handle both Python lists and NumPy arrays, ensure compatibility of input dimensions, and compute the kernel matrix according to the given formula. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result back to a list of lists\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y, c0=1))\n```\n\n### Explanation:\n1. **Input Conversion**: The function first converts the input `X` and `Y` to NumPy arrays to leverage efficient numerical operations.\n2. **Dimension Check**: It checks if the number of columns in `X` and `Y` are the same. If not, it returns `-1`.\n3. **Kernel Matrix Calculation**: It computes the kernel matrix using the dot product of `X` and the transpose of `Y`, then adds the constant `c0`.\n4. **Rounding**: The resulting matrix is rounded to 4 decimal places.\n5. **Output Conversion**: Finally, the NumPy array is converted back to a list of lists before returning.\n\nThis implementation ensures that the function works correctly for both Python lists and NumPy arrays, and handles the specified edge cases."}
{"task_id": 340, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `adam_update` function following the provided specifications. The function performs a single step of the Adam optimization algorithm and returns the updated parameter, new first moment estimate, and new second moment estimate as Python lists rounded to 8 decimal places.\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute the bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute the bias-corrected second moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update the parameter\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Convert the results to lists and round to 8 decimal places\n    updated_param = np.round(param_t, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    \n    return updated_param, new_m, new_v\n```\n\n### Explanation:\n1. **First Moment Update (`m_t`)**:\n   \\[\n   m_t = \\beta_1 \\cdot m + (1 - \\beta_1) \\cdot g\n   \\]\n2. **Second Moment Update (`v_t`)**:\n   \\[\n   v_t = \\beta_2 \\cdot v + (1 - \\beta_2) \\cdot g^2\n   \\]\n3. **Bias-Corrected First Moment (`m_hat_t`)**:\n   \\[\n   \\hat{m}_t = \\frac{m_t}{1 - \\beta_1^t}\n   \\]\n4. **Bias-Corrected Second Moment (`v_hat_t`)**:\n   \\[\n   \\hat{v}_t = \\frac{v_t}{1 - \\beta_2^t}\n   \\]\n5. **Parameter Update (`param_t`)**:\n   \\[\n   \\theta' = \\theta - \\alpha \\cdot \\frac{\\hat{m}_t}{\\sqrt{\\hat{v}_t} + \\epsilon}\n   \\]\n\nThe function ensures that the updates are fully vectorized and works for multi-dimensional parameters. The results are rounded to 8 decimal places and returned as Python lists."}
{"task_id": 343, "completion_id": 0, "completion": "To implement the Cross-Entropy Method (CEM) parameter update, we need to follow these steps:\n\n1. **Sort the Samples by Rewards**: We need to sort the `theta_samples` based on the corresponding `rewards` in descending order to identify the top-performing samples.\n2. **Select the Top Samples**: Retain only the top `retain_prcnt * N` samples. If `retain_prcnt * N` is not an integer, we take the floor of this value.\n3. **Compute Mean and Variance**: Calculate the mean and variance of the retained samples along each dimension.\n4. **Round the Results**: Ensure that the mean and variance values are rounded to four decimal places.\n\nHere is the implementation of the `cross_entropy_update` function:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Step 1: Sort the samples by rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_theta_samples = theta_samples[sorted_indices]\n    \n    # Step 2: Select the top retain_prcnt * N samples\n    num_retain = int(retain_prcnt * len(theta_samples))\n    elite_samples = sorted_theta_samples[:num_retain]\n    \n    # Step 3: Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Step 4: Round the results to four decimal places\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\n### Explanation:\n- **Sorting**: We use `np.argsort(rewards)[::-1]` to get the indices that would sort the rewards in descending order. We then use these indices to sort `theta_samples`.\n- **Retaining Top Samples**: We calculate the number of samples to retain using `int(retain_prcnt * len(theta_samples))` and slice the sorted samples to get the top-performing ones.\n- **Mean and Variance Calculation**: We use `np.mean` and `np.var` to compute the mean and variance along each dimension of the retained samples.\n- **Rounding**: We use a list comprehension to round each element of the mean and variance arrays to four decimal places.\n\nThis function should work correctly for the given constraints and input types."}
{"task_id": 353, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `entropy` function that calculates the base-2 Shannon entropy of a given sequence of class labels. The function handles the special cases as described and rounds the result to five decimal places.\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    \n    # Calculate the probabilities\n    probabilities = [count / total_count for count in label_counts.values()]\n    \n    # Calculate the entropy\n    entropy_value = -sum(p * math.log2(p) for p in probabilities if p > 0)\n    \n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'b', 'a']\n# print(entropy(labels))  # Output: 1.0\n```\n\n### Explanation:\n1. **Empty Input Handling**: The function first checks if the input `labels` is empty. If it is, it returns `0.0` immediately.\n2. **Counting Labels**: It uses `Counter` from the `collections` module to count the occurrences of each label in the input.\n3. **Calculating Probabilities**: The probabilities of each label are calculated by dividing the count of each label by the total number of labels.\n4. **Entropy Calculation**: The entropy is computed using the formula \\(-\\sum_i p_i \\log_2 p_i\\). The `if p > 0` condition ensures that we do not attempt to compute \\(\\log_2(0)\\), which is undefined.\n5. **Rounding**: The result is rounded to five decimal places using `round(value, 5)` before being returned.\n\nThis function should work efficiently for any one-dimensional iterable of hashable class labels."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the `im2col` + GEMM strategy, we need to follow these steps:\n\n1. **Padding**: Apply the specified padding to the input images.\n2. **Im2col**: Transform the input images into a matrix form where each column represents a receptive field of the input image.\n3. **GEMM**: Perform matrix multiplication between the transformed input matrix and the reshaped kernel matrix.\n4. **Reshape**: Convert the result of the matrix multiplication back into the desired output shape.\n5. **Return**: Convert the final NumPy array to a Python list.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Determine padding\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr1 = pr2 = pad[0]\n            pc1 = pc2 = pad[1]\n        elif len(pad) == 4:\n            pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        pr1 = (in_rows * (stride - 1) + kernel_rows - stride) // 2\n        pr2 = (in_rows * (stride - 1) + kernel_rows - stride + 1) // 2\n        pc1 = (in_cols * (stride - 1) + kernel_cols - stride) // 2\n        pc2 = (in_cols * (stride - 1) + kernel_cols - stride + 1) // 2\n    else:\n        pr1 = pr2 = pc1 = pc2 = 0  # Invalid padding, behavior is undefined\n    \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pr1 + pr2 - (kernel_rows - 1) * dilation - 1) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - (kernel_cols - 1) * dilation - 1) // stride + 1\n    \n    # Im2col\n    def im2col(X, kernel_rows, kernel_cols, stride, dilation):\n        n_ex, in_rows, in_cols, in_ch = X.shape\n        out_rows = (in_rows - (kernel_rows - 1) * dilation - 1) // stride + 1\n        out_cols = (in_cols - (kernel_cols - 1) * dilation - 1) // stride + 1\n        \n        col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n        for ex in range(n_ex):\n            for row in range(out_rows):\n                for col_idx in range(out_cols):\n                    r_start = row * stride\n                    c_start = col_idx * stride\n                    r_end = r_start + kernel_rows * (dilation + 1) - dilation\n                    c_end = c_start + kernel_cols * (dilation + 1) - dilation\n                    col[:, row * out_cols * n_ex + col_idx * n_ex + ex] = X[ex, r_start:r_end:dilation+1, c_start:c_end:dilation+1, :].flatten()\n        return col\n    \n    X_col = im2col(X_padded, kernel_rows, kernel_cols, stride, dilation)\n    \n    # Reshape W to (kernel_rows * kernel_cols * in_ch, out_ch)\n    W_col = W.transpose(3, 0, 1, 2).reshape(out_ch, -1).T\n    \n    # GEMM\n    out_col = W_col.T @ X_col\n    \n    # Reshape output to (n_ex, out_rows, out_cols, out_ch)\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    \n    return out.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 5, 5, 3)\n# W = np.random.rand(3, 3, 3, 2)\n# result = conv2D(X, W, stride=1, pad='same')\n# print(result)\n```\n\n### Explanation:\n1. **Padding**: The input images are padded according to the specified padding rules.\n2. **Im2col**: The `im2col` function transforms the input images into a matrix where each column corresponds to a receptive field of the input image.\n3. **GEMM**: The reshaped kernel matrix is multiplied with the transformed input matrix.\n4. **Reshape**: The result of the matrix multiplication is reshaped back into the desired output shape.\n5. **Return**: The final NumPy array is converted to a Python list using `tolist()`.\n\nThis implementation ensures that the convolution is performed efficiently using the `im2col` + GEMM strategy."}
{"task_id": 355, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `pca_transform` function following the specified requirements:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    \n    if solver == \"svd\":\n        # Step 2: Use SVD on the centred data\n        U, S, Vt = np.linalg.svd(centred_data, full_matrices=False)\n        # The principal directions are the columns of Vt\n        principal_directions = Vt.T\n        # The explained variance is the square of the singular values divided by n-1\n        explained_variance = S**2 / (centred_data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2: Compute the sample covariance matrix and use eigen-decomposition\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and eigenvectors in descending order\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        # The principal directions are the columns of the sorted eigenvectors\n        principal_directions = eigenvectors\n        # The explained variance is the eigenvalues\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    \n    # Step 3: Sort the directions in descending order of their importance\n    # This step is already handled in the eigen case, for svd we need to sort by explained variance\n    if solver == \"svd\":\n        idx = np.argsort(explained_variance)[::-1]\n        principal_directions = principal_directions[:, idx]\n        explained_variance = explained_variance[idx]\n    \n    # Step 4: Keep the first n_components of the principal directions\n    n_components = min(n_components, principal_directions.shape[1])\n    principal_directions = principal_directions[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    \n    # Step 5: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_idx = np.where(principal_directions[:, i] != 0)[0][0]\n        if principal_directions[first_non_zero_idx, i] < 0:\n            principal_directions[:, i] *= -1\n    \n    # Step 6: Project the centred data onto the retained directions\n    scores = centred_data @ principal_directions\n    \n    # Step 7: Calculate the explained variance ratio\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Step 8: Round the final results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n```\n\n### Explanation:\n1. **Standardisation**: The data is mean-centered by subtracting the mean of each feature.\n2. **Solver Selection**:\n   - **SVD**: Uses `numpy.linalg.svd` on the centered data to get the principal directions and explained variance.\n   - **Eigen**: Computes the covariance matrix and uses `numpy.linalg.eigh` to get the eigenvalues and eigenvectors, which are the principal directions and explained variance.\n3. **Sorting**: Ensures the principal directions are sorted by the explained variance in descending order.\n4. **Component Selection**: Retains only the top `n_components` principal directions.\n5. **Sign Determinism**: Ensures the sign of each principal direction is deterministic by flipping the sign if the first non-zero element is negative.\n6. **Projection**: Projects the centered data onto the retained principal directions to get the scores.\n7. **Explained Variance Ratio**: Computes the fraction of total variance explained by each component.\n8. **Rounding**: Rounds the final scores and explained variance ratios to 4 decimal places before converting them to lists.\n\nThis implementation should meet all the specified requirements and constraints."}
{"task_id": 356, "completion_id": 0, "completion": "Certainly! Below is the completed `leaf_predict` function that extracts the correct prediction from a `Leaf` instance based on whether the tree is a classification tree or a regression tree.\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(np.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n```\n\n### Explanation:\n1. **Classification Case (`classifier=True`)**:\n   - The `leaf.value` is expected to be a list or tuple of class probabilities.\n   - We use `np.argmax` to find the index of the highest probability.\n   - The result is cast to an `int` to ensure the return type is an integer.\n\n2. **Regression Case (`classifier=False`)**:\n   - The `leaf.value` is expected to be a scalar (either `int` or `float`).\n   - We simply return this scalar value.\n\n### Note:\n- The `np.argmax` function is used to find the index of the maximum value in the array, which is appropriate for determining the predicted class in a classification tree.\n- The function assumes that `numpy` is imported as `np`. If `numpy` is not already imported in your code, you should add `import numpy as np` at the beginning of your script."}
{"task_id": 357, "completion_id": 0, "completion": "Certainly! Below is the implementation of the K-Means clustering algorithm as described in the task. The function initializes the centroids using the first `K` samples, iteratively assigns samples to the nearest centroid, and updates the centroids. The process stops early if the centroids do not change significantly, and the final centroids are sorted and rounded before being returned.\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Step 1: Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign each sample to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to four decimals\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [list(np.round(centroid, 4)) for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage:\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized using the first `K` samples from the data.\n2. **Assignment Step**: For each sample, the Euclidean distance to each centroid is calculated, and the sample is assigned to the nearest centroid.\n3. **Update Step**: The centroids are recalculated as the mean of the samples assigned to each centroid. If a centroid loses all its samples, it remains unchanged.\n4. **Convergence Check**: The algorithm stops if the centroids do not change significantly (within a tolerance of \\(1 \\times 10^{-6}\\)).\n5. **Sorting and Rounding**: The final centroids are sorted lexicographically and rounded to four decimal places before being returned.\n\nThis implementation ensures that the algorithm is fully deterministic and easy to test, as required."}
{"task_id": 362, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `row_stochastic_matrix` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of every row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if any row sum is 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide every element in a row by that row\u2019s sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round every entry of the resulting matrix to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert the result to a native Python list\n    return stochastic_matrix_rounded.tolist()\n\n# Example usage:\n# data = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output: -1\n# data = [[1, 2, 3], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output: [[0.1667, 0.3333, 0.5000], [0.2667, 0.3333, 0.4000]]\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: The input data is converted to a NumPy array of floats to facilitate numerical operations.\n2. **Row Sum Calculation**: The sum of each row is calculated using `np.sum(matrix, axis=1)`.\n3. **Zero Row Check**: If any row sum is zero, the function returns `-1` as normalization is impossible.\n4. **Normalization**: Each element in a row is divided by the row's sum to make the row sum to 1.\n5. **Rounding**: The resulting matrix is rounded to 4 decimal places using `np.round`.\n6. **Conversion to List**: The final matrix is converted to a native Python list using `tolist()` before returning.\n\nThis function handles the conversion, normalization, and rounding as specified, and returns the appropriate result based on the input data."}
{"task_id": 363, "completion_id": 0, "completion": "To implement the `is_continuous` function, we need to check the type of the `action_space` and `observation_space` attributes of the `Env` object. The function should determine if these spaces are continuous based on the provided flags `tuple_action` and `tuple_obs`.\n\nHere's the step-by-step approach:\n\n1. **Check for `Box` type**: If the space is a `Box`, it is continuous.\n2. **Check for `Tuple` or `Dict` type**: If the space is a `Tuple` or `Dict`, it is continuous only if all its sub-spaces are `Box`.\n3. **Use the flags**: The flags `tuple_action` and `tuple_obs` indicate whether the spaces are `Tuple` or `Dict`. If the flags are `True`, we need to check the sub-spaces; otherwise, we just check if the space itself is a `Box`.\n\nLet's implement this logic in the `is_continuous` function:\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_box_space(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                return all(is_box_space(sub_space) for sub_space in space.spaces)\n            elif isinstance(space, Dict):\n                return all(is_box_space(sub_space) for sub_space in space.spaces.values())\n        return False\n\n    cont_action = is_box_space(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = is_box_space(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return (cont_action, cont_obs)\n```\n\n### Explanation:\n- **`is_box_space` function**: This helper function checks if a given space is a `Box` or if it is a `Tuple` or `Dict` where all sub-spaces are `Box`.\n- **`cont_action` and `cont_obs`**: These variables are set based on the type of the spaces and the flags `tuple_action` and `tuple_obs`.\n  - If `tuple_action` is `True`, we use `is_box_space` to check if all sub-spaces of `action_space` are `Box`.\n  - If `tuple_action` is `False`, we simply check if `action_space` is a `Box`.\n  - The same logic applies to `cont_obs` with `tuple_obs`.\n\nThis implementation ensures that the function correctly determines the continuity of the action and observation spaces based on the given conditions."}
{"task_id": 369, "completion_id": 0, "completion": "To implement the `gradient_boosting_predict` function, we need to follow the described aggregation process using NumPy for efficient computation. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros having the same shape as a single update array\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    # Handle regression or classification\n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax to get probabilities and then argmax to get class labels\n        probabilities = softmax(running_pred)\n        return np.argmax(probabilities, axis=1)\n\ndef softmax(logits: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the softmax of each row of the input array.\n\n    Parameters\n    ----------\n    logits : np.ndarray\n        2-D array of shape (n_samples, n_classes) containing the logits.\n\n    Returns\n    -------\n    np.ndarray\n        2-D array of shape (n_samples, n_classes) containing the softmax probabilities.\n    \"\"\"\n    # Subtract the max for numerical stability\n    exps = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n    return exps / np.sum(exps, axis=1, keepdims=True)\n\n# Example usage:\n# updates = [np.array([0.1, 0.2, 0.3]), np.array([0.05, 0.1, 0.15])]\n# learning_rate = 0.1\n# regression = True\n# print(gradient_boosting_predict(updates, learning_rate, regression))\n```\n\n### Explanation:\n1. **Initialization**: We start by initializing `running_pred` with zeros, having the same shape as the first update array. This ensures that the shape is consistent with the expected input for both regression and classification.\n\n2. **Aggregation**: We iterate over each update array in the `updates` list, subtracting the scaled update from `running_pred`. The scaling is done by multiplying each update by the `learning_rate`.\n\n3. **Regression**: If the task is regression, we simply return the `running_pred` array rounded to 4 decimal places.\n\n4. **Classification**: If the task is classification, we apply the softmax function to convert the logits in `running_pred` to probabilities. We then use `np.argmax` to determine the predicted class for each sample.\n\n5. **Softmax Function**: The `softmax` function is implemented to handle the conversion of logits to probabilities. It includes a numerical stability trick by subtracting the maximum value in each row from the logits before exponentiation.\n\nThis implementation is fully vectorized and leverages NumPy for efficient computation, adhering to the constraints provided."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D cross-correlation with support for batches, multiple input/output channels, strides, padding, and dilation, we need to carefully handle each of these parameters. Here's a step-by-step breakdown of the implementation:\n\n1. **Padding**: We need to handle three types of padding:\n   - A single integer for equal padding on both sides.\n   - A tuple for different padding on the left and right.\n   - The string \"same\" which requires calculating the padding based on the output length.\n\n2. **Dilation**: This involves inserting zeros between the elements of the kernel.\n\n3. **Stride**: This determines the step size for sliding the kernel over the input.\n\n4. **Cross-correlation**: This involves sliding the kernel over the input and computing the dot product at each position.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    \n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding type\")\n    \n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n    \n    # Calculate output length\n    output_length = (X_padded.shape[1] - effective_kernel_width) // stride + 1\n    \n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform cross-correlation\n    for i in range(n_examples):\n        for j in range(output_length):\n            start = j * stride\n            end = start + effective_kernel_width\n            x_slice = X_padded[i, start:end, :]\n            \n            # Apply dilation to the kernel\n            W_dilated = np.zeros((effective_kernel_width, in_channels, out_channels))\n            W_dilated[::dilation + 1, :, :] = W\n            \n            # Compute the dot product for each output channel\n            for k in range(out_channels):\n                output[i, j, k] = np.sum(x_slice * W_dilated[:, :, k])\n    \n    return output.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 10, 3)  # 2 examples, 10-length signals, 3 input channels\n# W = np.random.rand(4, 3, 2)  # 4-length kernels, 3 input channels, 2 output channels\n# result = conv1D(X, W, stride=1, pad=\"same\", dilation=1)\n# print(result)\n```\n\n### Explanation:\n- **Padding**: We handle different padding types by checking the type of `pad` and calculating the appropriate padding.\n- **Dilation**: We create a dilated version of the kernel by inserting zeros between its elements.\n- **Cross-correlation**: We slide the dilated kernel over the padded input, compute the dot product for each position, and store the result in the output volume.\n- **Output**: The result is converted to a list using `ndarray.tolist()` before returning.\n\nThis implementation should cover all the specified requirements and constraints."}
{"task_id": 373, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `gini` function that calculates the Gini impurity of a sequence of integer labels. The function handles both empty and non-empty input sequences as specified.\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    \n    # Convert to numpy array if it's not already\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    \n    # Calculate the number of samples\n    N = len(y)\n    \n    # Calculate the unique classes and their counts\n    unique_classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequencies\n    p_c = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [1, 1, 2, 2, 3]\n# print(gini(y))  # Output: 0.6400\n```\n\n### Explanation:\n1. **Empty Check**: The function first checks if the input `y` is empty. If it is, it returns `0.0` immediately.\n2. **Conversion to NumPy Array**: If the input is not already a NumPy array, it converts it to one for easier manipulation.\n3. **Counting Unique Classes**: It uses `np.unique` with `return_counts=True` to get the unique classes and their respective counts.\n4. **Relative Frequencies**: It calculates the relative frequency of each class by dividing the counts by the total number of samples `N`.\n5. **Gini Impurity Calculation**: It computes the Gini impurity using the formula \\( Gini = 1 - \\sum_{c=0}^{C-1} p_c^2 \\).\n6. **Rounding**: Finally, it rounds the result to 4 decimal places before returning it.\n\nThis function should work efficiently for any one-dimensional list or NumPy array of integer labels."}
{"task_id": 374, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `linear_regression_gd` function that trains a multiple linear regression model using batch gradient descent. The function initializes the parameters, performs the specified number of iterations of gradient descent, and returns the learned parameters rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Convert y to a column vector for easier computation\n    y = y.reshape(m, 1)\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X @ theta + b\n        \n        # Calculate errors\n        errors = y_pred - y\n        \n        # Calculate gradients\n        dw = (2 / m) * (X.T @ errors).flatten()\n        db = (2 / m) * np.sum(errors)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return the learned parameters rounded to 4 decimal places\n    return [round(w, 4) for w in theta], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=1000)\n# print(weights, bias)\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the number of samples in `X` and `y` are consistent. If not, it returns `-1`.\n2. **Initialization**: The weight vector `theta` is initialized to a vector of zeros with the same number of features as `X`. The bias `b` is initialized to `0.0`.\n3. **Gradient Descent Loop**:\n   - **Prediction**: The predicted values `y_pred` are calculated using the current parameters.\n   - **Error Calculation**: The errors are computed as the difference between the predicted values and the actual values.\n   - **Gradient Calculation**: The gradients `dw` and `db` are calculated using the formulas provided.\n   - **Parameter Update**: The parameters `theta` and `b` are updated using the learning rate and the computed gradients.\n4. **Return**: The function returns the learned parameters `theta` and `b`, rounded to four decimal places.\n\nThis implementation ensures that the function adheres to the problem statement and constraints provided."}
{"task_id": 376, "completion_id": 0, "completion": "To determine if a given 2-D numeric array is symmetric with respect to its main diagonal, we need to ensure that the array is square and that each element at position (i, j) is equal to the element at position (j, i). Given the potential for floating-point precision issues, we will use NumPy's `allclose` function to compare the elements, allowing for a small tolerance.\n\nHere's the implementation of the `is_symmetric` function:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n\n# non_symmetric_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n```\n\n### Explanation:\n1. **Convert to NumPy Array**: We first convert the input list of lists into a NumPy array for easier manipulation and comparison.\n2. **Check if Square**: We check if the number of rows is equal to the number of columns. If not, the matrix is not square, and we return `False`.\n3. **Check Symmetry**: We use `np.allclose` to compare the matrix with its transpose. The `atol` parameter is set to `1e-8` to account for potential floating-point precision issues.\n\nThis function will correctly determine if the given matrix is symmetric, considering the constraints and requirements specified."}
{"task_id": 377, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `logistic_negative_gradient` function that calculates the negative gradient for logistic loss in the context of Gradient Boosting. The function checks if the labels are valid (0 or 1) and then computes the negative gradient as specified.\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss in Gradient Boosting.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n\n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    y = np.array(y)\n    f = np.array(f)\n    \n    # Check if all labels are either 0 or 1\n    if not np.all(np.isin(y, [0, 1])):\n        return -1\n    \n    # Convert labels to the set {-1, 1}\n    y_prime = 2 * y - 1\n    \n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * f))\n    \n    # Round the results to four decimal places\n    g_rounded = np.round(g, 4)\n    \n    # Convert the result back to a list\n    return g_rounded.tolist()\n\n# Example usage:\n# y = [0, 1, 0, 1]\n# f = [0.1, -0.2, 0.3, -0.4]\n# print(logistic_negative_gradient(y, f))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if all elements in the label array `y` are either 0 or 1. If not, it returns `-1`.\n2. **Label Transformation**: The labels are transformed from `{0, 1}` to `{-1, 1}` using the formula `y' = 2y - 1`.\n3. **Negative Gradient Calculation**: The negative gradient is computed using the formula `g\u1d62 = y\u2032\u1d62 / (1 + exp(y\u2032\u1d62 f\u1d62))`.\n4. **Rounding**: The computed gradients are rounded to four decimal places.\n5. **Return**: The function returns the list of rounded negative gradients.\n\nThis function should work efficiently for typical use cases in Gradient Boosting for binary classification."}
{"task_id": 380, "completion_id": 0, "completion": "To implement the SELU activation function and its derivatives, we need to follow the mathematical definitions provided. Here's the step-by-step implementation:\n\n1. **SELU Function**: \n   \\[\n   \\text{SELU}(x) = \\text{scale} \\cdot \\text{ELU}(x, \\alpha)\n   \\]\n   where \n   \\[\n   \\text{ELU}(x, \\alpha) = \n   \\begin{cases} \n   x & \\text{if } x > 0 \\\\\n   \\alpha (e^x - 1) & \\text{otherwise}\n   \\end{cases}\n   \\]\n\n2. **First Derivative of SELU**:\n   \\[\n   \\frac{\\partial \\text{SELU}(x)}{\\partial x} = \n   \\begin{cases} \n   \\text{scale} & \\text{if } x > 0 \\\\\n   \\text{scale} \\cdot \\alpha \\cdot e^x & \\text{otherwise}\n   \\end{cases}\n   \\]\n\n3. **Second Derivative of SELU**:\n   \\[\n   \\frac{\\partial^2 \\text{SELU}(x)}{\\partial x^2} = \n   \\begin{cases} \n   0 & \\text{if } x > 0 \\\\\n   \\text{scale} \\cdot \\alpha \\cdot e^x & \\text{otherwise}\n   \\end{cases}\n   \\]\n\nLet's implement this in Python using NumPy for handling arrays and ensuring the operations are vectorized.\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x, dtype=float)\n    \n    # Compute SELU and its derivatives\n    if order == 0:\n        selu_x = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_x = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        selu_x = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    result = np.round(selu_x, 4).tolist()\n    \n    # Return a scalar if the input was a scalar\n    if isinstance(x, np.ndarray) and x.ndim == 0:\n        return result[0]\n    \n    return result\n\n# Example usage:\n# print(selu(1.0, order=0))  # SELU(1.0)\n# print(selu(-1.0, order=1)) # First derivative at -1.0\n# print(selu(-1.0, order=2)) # Second derivative at -1.0\n```\n\n### Explanation:\n- **Constants**: We define the constants `alpha` and `scale` as specified.\n- **Vectorized Operations**: We use `np.where` to handle the piecewise nature of the SELU function and its derivatives efficiently.\n- **Rounding and Conversion**: We round the results to 4 decimal places using `np.round` and convert the result to a list using `tolist()`.\n- **Handling Scalars**: If the input is a scalar, we return a scalar result instead of a list with one element.\n\nThis implementation should work for scalars, 1-D arrays, and multi-D arrays, preserving the input shape and rounding the results as required."}
{"task_id": 387, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Gradient Boosting Regressor with One-Dimensional Stumps using only `numpy`.\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the target values\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort the data by the feature x\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        best_mse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Evaluate every possible split\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue  # Skip identical feature values\n            \n            # Candidate split point\n            t = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            \n            # Split the residuals into left and right\n            left_residuals = sorted_residuals[:i + 1]\n            right_residuals = sorted_residuals[i + 1:]\n            \n            # Calculate means of residuals on both sides\n            left_mean = np.mean(left_residuals)\n            right_mean = np.mean(right_residuals)\n            \n            # Calculate the sum of squared errors for this split\n            mse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n            \n            # Update the best split if this one is better\n            if mse < best_mse:\n                best_mse = mse\n                best_split = t\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split was found, use the global mean residual\n        if best_split is None:\n            best_left_mean = np.mean(residuals)\n            best_right_mean = np.mean(residuals)\n        \n        # Apply the best split to update predictions\n        stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_predictions\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# x = [1.0, 2.0, 3.0, 4.0, 5.0]\n# y = [2.0, 3.0, 5.0, 7.0, 11.0]\n# n_estimators = 3\n# learning_rate = 0.1\n# print(gradient_boosting_1d(x, y, n_estimators, learning_rate))\n```\n\n### Explanation:\n1. **Initialization**: The initial prediction for every sample is set to the mean of the target values.\n2. **Boosting Rounds**: For each boosting round:\n   - Compute the residuals (differences between actual and predicted values).\n   - Sort the samples by their feature value.\n   - Evaluate every possible split point (halfway between consecutive feature values).\n   - For each split, compute the mean of residuals on the left and right sides.\n   - Choose the split that minimizes the sum of squared residuals.\n   - If no valid split is found (all feature values are identical), use the global mean residual.\n   - Update the predictions by adding the weighted stump predictions.\n3. **Return**: The final predictions are rounded to four decimal places and returned as a list."}
{"task_id": 394, "completion_id": 0, "completion": "Certainly! Below is the implementation of the RMSprop update step as specified in the task description. The function initializes the running average of squared gradients if it is `None`, performs the update, and returns the updated parameters and running average as regular Python lists rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update the parameters\n    epsilon = 1e-8\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    \n    # Round to 4 decimal places and convert to lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return w_next_rounded, Eg_next_rounded\n```\n\n### Explanation:\n1. **Initialization of `Eg`**: If `Eg` is `None`, it is initialized to a zero array of the same shape as `grad`.\n2. **Update of `Eg`**: The running average of the squared gradients is updated using the formula:\n   \\[\n   E_g^{(t)} = \\rho\\,E_g^{(t-1)} + (1-\\rho)\\,g^{2}\n   \\]\n3. **Update of `w`**: The parameters are updated using the formula:\n   \\[\n   w^{(t)} = w^{(t-1)} - \\frac{\\alpha\\,g}{\\sqrt{E_g^{(t)} + \\varepsilon}}\n   \\]\n   where \\(\\varepsilon = 10^{-8}\\) is added for numerical stability.\n4. **Rounding and Conversion**: Both the updated parameters and the running average are rounded to four decimal places and converted to regular Python lists before being returned.\n\nThis implementation ensures that the RMSprop update step is performed correctly and the results are formatted as required."}
{"task_id": 398, "completion_id": 0, "completion": "Certainly! Below is the implementation of the ELU activation function and its gradient as per the given requirements:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if derivative:\n        # Compute the gradient of ELU\n        elu_derivative = np.where(x >= 0, 1.0, elu(x, alpha) + alpha)\n        return [round(val, 4) for val in elu_derivative]\n    else:\n        # Compute the ELU activation\n        elu_activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(val, 4) for val in elu_activation]\n\n# Example usage:\n# print(elu([1, -1, 0.5, -0.5]))  # ELU activation\n# print(elu([1, -1, 0.5, -0.5], derivative=True))  # ELU gradient\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts a one-dimensional list or NumPy array `x`, a float `alpha` (default 0.1), and a boolean `derivative` (default `False`).\n2. **Vectorized Operations**: The input `x` is converted to a NumPy array to leverage vectorized operations, which are efficient and concise.\n3. **ELU Activation**:\n   - For `x >= 0`, the output is `x`.\n   - For `x < 0`, the output is `\u03b1( e\u02e3 \u2212 1 )`.\n4. **ELU Gradient**:\n   - For `x >= 0`, the gradient is `1`.\n   - For `x < 0`, the gradient is `ELU(x, \u03b1) + \u03b1`.\n5. **Rounding**: Each element of the result is rounded to 4 decimal places before returning as a Python list.\n\nThis implementation ensures that the function is both efficient and easy to understand, adhering to the constraints provided."}
{"task_id": 411, "completion_id": 0, "completion": "To implement the `env_stats` function, we need to carefully analyze the input lists of actions and observations to determine various statistics about their structure and content. Here's a step-by-step breakdown of how we can achieve this:\n\n1. **Check for Iterables**: Determine if any element in the actions or observations list is an iterable (list, tuple, or numpy array).\n2. **Determine Dimensionality**: Check if the elements are multi-dimensional by examining their length.\n3. **Check for Continuous Values**: Identify if any value in the flattened list of actions or observations is a non-integer float.\n4. **Count Unique Values**: For each dimension, count the number of unique values and list them.\n\nLet's implement this step-by-step in the `env_stats` function:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        if tuple_data:\n            flattened_data = [item for sublist in data for item in sublist]\n            dim = len(data[0]) if isinstance(data[0], (list, tuple, np.ndarray)) else 1\n            multidim = dim > 1\n        else:\n            flattened_data = data\n            dim = 1\n            multidim = False\n        \n        continuous = any(isinstance(x, float) and not x.is_integer() for x in flattened_data)\n        \n        unique_values_per_dim = []\n        ids_per_dim = []\n        if multidim:\n            for i in range(dim):\n                unique_values = set(data[j][i] for j in range(len(data)))\n                unique_values_per_dim.append(len(unique_values))\n                ids_per_dim.append(sorted(unique_values))\n        else:\n            unique_values = set(flattened_data)\n            unique_values_per_dim.append(len(unique_values))\n            ids_per_dim.append(sorted(unique_values))\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim,\n            'continuous': continuous,\n            'n_per_dim': unique_values_per_dim,\n            'dim': dim,\n            'ids': ids_per_dim\n        }\n    \n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    \n    return {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': observation_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': observation_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': observation_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': observation_stats['ids']\n    }\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\n### Explanation:\n1. **Helper Function `analyze`**: This function takes a list (`data`) and computes the required statistics:\n   - **`tuple_data`**: Checks if any element is an iterable.\n   - **`flattened_data`**: Flattens the list if it contains iterables.\n   - **`dim`**: Determines the dimensionality of the data.\n   - **`multidim`**: Checks if the data is multi-dimensional.\n   - **`continuous`**: Checks if any value is a non-integer float.\n   - **`unique_values_per_dim`**: Counts unique values per dimension.\n   - **`ids_per_dim`**: Lists unique values per dimension in sorted order.\n\n2. **Main Function `env_stats`**: Uses the `analyze` function to get statistics for both actions and observations and constructs the final dictionary with the required keys.\n\nThis implementation ensures that all the required statistics are computed and returned in the specified format."}
{"task_id": 413, "completion_id": 0, "completion": "To implement a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch using only NumPy, we need to follow these steps:\n\n1. **Initial Prediction**: Start with an initial prediction equal to the mean of the training targets.\n2. **Boosting Iterations**:\n   - Compute the residuals (negative gradients of the squared-error loss).\n   - Fit a CART regression tree of limited depth to those residuals.\n   - Update the running prediction by adding the tree\u2019s output multiplied by the learning rate.\n3. **Return Predictions**: After `n_estimators` iterations, return the final prediction for every sample in `X_test`.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_feature, best_threshold, best_mse = None, None, float('inf')\n        n_samples, n_features = X.shape\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                \n                if np.any(left_indices) and np.any(right_indices):\n                    y_left = y[left_indices]\n                    y_right = y[right_indices]\n                    \n                    mse_left = mean_squared_error(y_left, np.mean(y_left))\n                    mse_right = mean_squared_error(y_right, np.mean(y_right))\n                    \n                    mse = (len(y_left) * mse_left + len(y_right) * mse_right) / n_samples\n                    \n                    if mse < best_mse:\n                        best_mse = mse\n                        best_feature = feature\n                        best_threshold = threshold\n        \n        return best_feature, best_threshold\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_feature, best_threshold = best_split(X, y)\n        \n        if best_feature is None:\n            return np.mean(y)\n        \n        left_indices = X[:, best_feature] < best_threshold\n        right_indices = X[:, best_feature] >= best_threshold\n        \n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        \n        return (best_feature, best_threshold, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if isinstance(tree, float):\n            return tree\n        \n        feature, threshold, left_tree, right_tree = tree\n        \n        if X[feature] < threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n    \n    def predict_trees(trees, X):\n        return np.array([predict_tree(tree, x) for tree in trees])\n    \n    # Initial prediction\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    trees = []\n    \n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        y_pred += learning_rate * predict_trees(trees, X_train)\n    \n    final_predictions = predict_trees(trees, X_test)\n    return [round(pred, 4) for pred in final_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 2, 3, 4])\n# X_test = np.array([[1, 2], [2, 3]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\n### Explanation:\n1. **Initial Prediction**: We start with the mean of the training targets.\n2. **Residual Calculation**: For each iteration, we calculate the residuals as the difference between the actual targets and the current predictions.\n3. **Tree Construction**: We build a regression tree to fit the residuals. The tree is constructed by finding the best feature and threshold that minimize the mean squared error.\n4. **Prediction Update**: We update the predictions by adding the tree's predictions (scaled by the learning rate) to the current predictions.\n5. **Final Predictions**: After all iterations, we predict the test set using the ensemble of trees and return the predictions rounded to 4 decimal places.\n\nThis implementation is a simplified version and may not be as efficient or accurate as more advanced libraries like scikit-learn, but it meets the requirements specified."}
{"task_id": 416, "completion_id": 0, "completion": "To implement the multivariate Gaussian PDF without using any third-party libraries like SciPy, we need to manually compute the necessary components of the formula. Here's a step-by-step breakdown of the implementation:\n\n1. **Ensure Input Shape**: If `X` is a one-dimensional array, reshape it to be a two-dimensional array with shape `(n_samples, 1)`.\n\n2. **Compute the Determinant**: Use a method to compute the determinant of the covariance matrix. NumPy provides a function for this, but since we're not using it, we'll need to implement it manually or use a simple method like LU decomposition.\n\n3. **Compute the Inverse**: Similarly, compute the inverse of the covariance matrix. Again, NumPy provides a function for this, but we'll need to implement it manually.\n\n4. **Compute the PDF**: For each data point in `X`, compute the PDF using the formula provided.\n\n5. **Return the Results**: Return a list of PDF values rounded to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef lu_decomposition(A):\n    \"\"\"Perform LU decomposition of a matrix A.\"\"\"\n    n = A.shape[0]\n    L = np.zeros((n, n))\n    U = np.zeros((n, n))\n    \n    for i in range(n):\n        # Upper Triangular\n        for k in range(i, n):\n            sum = 0\n            for j in range(i):\n                sum += (L[i][j] * U[j][k])\n            U[i][k] = A[i][k] - sum\n        \n        # Lower Triangular\n        for k in range(i, n):\n            if i == k:\n                L[i][i] = 1  # Diagonal as 1\n            else:\n                sum = 0\n                for j in range(i):\n                    sum += (L[k][j] * U[j][i])\n                L[k][i] = (A[k][i] - sum) / U[i][i]\n    \n    return L, U\n\ndef determinant(A):\n    \"\"\"Compute the determinant of a matrix A using LU decomposition.\"\"\"\n    L, U = lu_decomposition(A)\n    det = 1\n    for i in range(A.shape[0]):\n        det *= U[i][i]\n    return det\n\ndef inverse(A):\n    \"\"\"Compute the inverse of a matrix A using LU decomposition.\"\"\"\n    n = A.shape[0]\n    L, U = lu_decomposition(A)\n    \n    # Create identity matrix\n    I = np.eye(n)\n    \n    # Solve for Y in LY = I\n    Y = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            sum = 0\n            for k in range(i):\n                sum += L[i][k] * Y[k][j]\n            Y[i][j] = I[i][j] - sum\n    \n    # Solve for X in UX = Y\n    X = np.zeros((n, n))\n    for i in range(n-1, -1, -1):\n        for j in range(n):\n            sum = 0\n            for k in range(i+1, n):\n                sum += U[i][k] * X[k][j]\n            X[i][j] = (Y[i][j] - sum) / U[i][i]\n    \n    return X\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    X (np.ndarray): Data points of shape (n_samples, n_features).\n    mean (np.ndarray): Mean vector of the distribution of shape (n_features,).\n    cov (np.ndarray): Covariance matrix of the distribution of shape (n_features, n_features).\n    \n    Returns:\n    list: List of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    det_cov = determinant(cov)\n    inv_cov = inverse(cov)\n    norm_factor = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    pdf_values = []\n    for i in range(n_samples):\n        x_minus_mean = X[i] - mean\n        exponent = -0.5 * np.dot(x_minus_mean.T, np.dot(inv_cov, x_minus_mean))\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis code includes functions for LU decomposition, determinant calculation, and matrix inversion, which are used to compute the multivariate Gaussian PDF. The `multivariate_gaussian_pdf` function processes each data point in `X` and computes the PDF value, rounding it to four decimal places before returning the results."}
{"task_id": 419, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Bayesian Linear Regression with Maximum A Posteriori (MAP) prediction as described in the task:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Step 1: Add intercept column if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Step 2: Handle the prior parameters mu and V\n    M = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    elif isinstance(mu, np.ndarray) and mu.shape[0] != M:\n        raise ValueError(\"The length of mu must match the number of features (M).\")\n    \n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, np.ndarray):\n        if V.shape != (M, M):\n            raise ValueError(\"V must be a scalar, 1-D array, or a full symmetric positive-definite square matrix.\")\n        if not np.allclose(V, V.T):\n            raise ValueError(\"V must be symmetric.\")\n        if not np.all(np.linalg.eigvals(V) > 0):\n            raise ValueError(\"V must be positive-definite.\")\n    \n    # Step 3: Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + XTy)\n    \n    # Step 4: Compute the MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Round the predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# X_new = np.array([[7, 8]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept` is `True`, an intercept column of ones is added to both `X` and `X_new`.\n2. **Prior Parameters**: The prior mean `mu` is adjusted to be a vector of the appropriate length. The prior covariance `V` is handled to ensure it is a valid matrix (scalar, diagonal, or full matrix).\n3. **Posterior Calculation**: The posterior mean `mu_p` and covariance `Sigma_p` are computed using the given formulas.\n4. **Prediction**: The MAP predictive mean for `X_new` is calculated and rounded to four decimal places before being returned as a list.\n\nThis implementation ensures that all constraints and requirements are met, including handling different types of inputs for `mu` and `V`, and ensuring numerical stability and correctness."}
{"task_id": 423, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the `root_mean_squared_log_error` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all elements in both lists are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate the RMSLE\n    n = len(actual)\n    log_diffs = np.log1p(predicted) - np.log1p(actual)\n    rmsle = np.sqrt(np.mean(log_diffs ** 2))\n    \n    # Return the result rounded to 4 decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first checks if the lengths of `actual` and `predicted` are the same. If not, it returns `-1`.\n   - It then checks if all elements in both lists are non-negative. If any element is negative, it returns `-1`.\n\n2. **RMSLE Calculation**:\n   - The function uses `np.log1p` to compute the natural logarithm of `1 + x` for each element in `actual` and `predicted`. This is numerically stable for small values of `x`.\n   - It calculates the difference between the logarithms of the predicted and actual values.\n   - It computes the mean of the squared differences.\n   - Finally, it takes the square root of the mean to get the RMSLE.\n\n3. **Rounding**:\n   - The result is rounded to four decimal places using `round(value, 4)` before being returned.\n\nThis implementation ensures that the function handles invalid inputs gracefully and computes the RMSLE accurately for valid inputs."}
{"task_id": 428, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `hann` function that generates a Hann window according to the specified requirements:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        window = window[:-1]  # Drop the last sample to make it periodic\n    \n    # Round each element to 4 decimal places and convert to list\n    return [round(x, 4) for x in window.tolist()]\n\n# Example usage:\n# print(hann(5, symmetric=True))\n# print(hann(5, symmetric=False))\n```\n\n### Explanation:\n1. **Input Validation**:\n   - If `window_len` is less than or equal to 0, the function returns an empty list.\n   - If `window_len` is exactly 1, the function returns `[1.0]` regardless of the `symmetric` flag.\n\n2. **Symmetric Window**:\n   - When `symmetric` is `True`, the function generates a symmetric window of length `window_len`.\n   - The formula used is `hann(n) = 0.5 - 0.5 * cos(2 * \u03c0 * n / (N-1))` for `0 \u2264 n < N`.\n\n3. **Periodic Window**:\n   - When `symmetric` is `False`, the function generates a periodic window of length `window_len`.\n   - This is achieved by first generating a symmetric window of length `window_len + 1` and then dropping the last sample.\n\n4. **Rounding**:\n   - Each element of the generated window is rounded to 4 decimal places using Python's built-in `round` function.\n   - The final NumPy array is converted to a regular Python list before returning.\n\nThis implementation ensures that the Hann window is generated correctly for both symmetric and periodic cases, and that the output meets the specified constraints."}
{"task_id": 433, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `glorot_fan` function that calculates the `fan_in` and `fan_out` based on the given rules:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For other shapes, take the first two dimensions directly\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# For a 4D convolutional kernel\nshape_4d = (16, 3, 3, 3)\nprint(glorot_fan(shape_4d))  # Output: (81.0, 432.0)\n\n# For a 2D dense layer\nshape_2d = (128, 64)\nprint(glorot_fan(shape_2d))  # Output: (128.0, 64.0)\n```\n\n### Explanation:\n1. **4D Convolutional Kernel**:\n   - If the shape has exactly 4 dimensions, it is treated as a 2-D convolutional kernel with the layout `(out_channels, in_channels, kernel_height, kernel_width)`.\n   - The `receptive_field_size` is calculated as the product of the last two dimensions (`kernel_height * kernel_width`).\n   - `fan_in` is calculated as `in_channels * receptive_field_size`.\n   - `fan_out` is calculated as `out_channels * receptive_field_size`.\n\n2. **Other Shapes**:\n   - For any other shape, the `fan_in` and `fan_out` are directly taken from the first two dimensions of the shape.\n\nThe function returns a tuple of two floats representing `fan_in` and `fan_out`."}
{"task_id": 435, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Tiny Gradient Boosting Regressor as described in the task. The code uses NumPy for numerical operations and follows the outlined procedure step-by-step.\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # Repeat for t = 1 ... n_estimators\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model that predicts the residuals from X\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        \n        # Compute the OLS solution\n        # beta = (X^T * X)^(-1) * X^T * residuals\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ beta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places\n    return [round(val, 4) for val in y_pred]\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# y = [3, 7, 11]\n# print(gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1))\n```\n\n### Explanation:\n1. **Data Conversion**: The input lists `X` and `y` are converted to NumPy arrays of type `float`.\n2. **Special Cases**: If `n_estimators` is less than or equal to 0 or `learning_rate` is 0, the function returns a list filled with the mean of `y`.\n3. **Initialization**: The initial prediction `y_pred` is set to the mean of `y`.\n4. **Gradient Boosting Loop**:\n   - **Residual Calculation**: The residuals are computed as the difference between the actual target `y` and the current prediction `y_pred`.\n   - **OLS Model Fitting**: An OLS linear model is fitted to predict the residuals. This involves adding an intercept term to `X` and solving the normal equations to find the coefficients.\n   - **Weak Learner Prediction**: The prediction from the weak learner is computed using the fitted coefficients.\n   - **Prediction Update**: The overall prediction is updated by adding the scaled prediction from the weak learner.\n5. **Result Formatting**: The final predictions are rounded to 4 decimal places and returned as a regular Python list.\n\nThis implementation adheres to the constraints and requirements specified in the task description."}
{"task_id": 437, "completion_id": 0, "completion": "Here's the implementation of the `sigmoid` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma_x = 1 / (1 + np.exp(-x))\n    \n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Output: [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([[0, 1], [-1, 2]]), order=2))  # Output: [[0.0, -0.0721], [-0.0721, 0.0324]]\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input `x` is a scalar (either `int` or `float`). If it is, it sets a flag `is_scalar` to `True`. The input is then converted to a NumPy array for uniform processing.\n\n2. **Sigmoid Calculation**: The logistic sigmoid function \\(\\sigma(x) = \\frac{1}{1+e^{-x}}\\) is computed for the input array `x`.\n\n3. **Derivative Calculations**:\n   - For `order = 0`, the function value \\(\\sigma(x)\\) is returned.\n   - For `order = 1`, the first derivative \\(\\sigma(x)(1-\\sigma(x))\\) is returned.\n   - For `order = 2`, the second derivative \\(\\sigma(x)(1-\\sigma(x))(1-2\\sigma(x))\\) is returned.\n   - If `order` is not 0, 1, or 2, the function returns `-1`.\n\n4. **Rounding**: The result is rounded to four decimal places using `np.round`.\n\n5. **Output Formatting**: If the input was a scalar, the function returns a Python `float`. Otherwise, it returns a Python `list` obtained by calling `tolist()` on the NumPy array, preserving the original shape of the input.\n\nThis implementation ensures that the function works correctly for scalars, lists, and NumPy arrays, and handles the specified orders of the sigmoid function and its derivatives."}
{"task_id": 438, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `to_categorical` function as described in the task:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if the provided num_classes is sufficient\n    if num_classes < np.max(y) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert the result to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n# print(to_categorical(y, num_classes=4))  # Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]]\n# print(to_categorical(y, num_classes=2))  # Output: -1\n```\n\n### Explanation:\n1. **Input Conversion**: The input `y` is converted to a NumPy array to facilitate efficient indexing and operations.\n2. **Determine `num_classes`**: If `num_classes` is not provided, it is automatically set to `max(y) + 1`.\n3. **Validation**: If the provided `num_classes` is smaller than `max(y) + 1`, the function returns `-1` to indicate that one-hot encoding is impossible.\n4. **One-Hot Encoding**: A zero matrix of shape `(len(y), num_classes)` is created. The appropriate indices are set to `1` using advanced indexing.\n5. **Return**: The resulting matrix is converted to a list of lists using `tolist()` before being returned.\n\nThis implementation ensures that the function behaves as expected according to the provided constraints and examples."}
{"task_id": 439, "completion_id": 0, "completion": "To implement the Apriori algorithm for discovering frequent itemsets, we need to follow the steps outlined in the task description. Here's a detailed breakdown of the implementation:\n\n1. **Generate Initial Candidates**: Start with all single-item candidates and filter out those that do not meet the minimum support threshold.\n2. **Generate Larger Candidates**: Use the frequent itemsets of size `k-1` to generate candidate itemsets of size `k` by self-joining and pruning.\n3. **Check Support**: For each candidate, count its support and keep it if it meets the minimum support threshold.\n4. **Repeat**: Continue generating larger candidates and checking their support until no new frequent itemsets are found.\n5. **Return Results**: Collect all frequent itemsets and return them in the required order.\n\nHere's the complete implementation:\n\n```python\nimport itertools\nfrom collections import defaultdict\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def count_support(itemsets, transactions):\n        support_count = defaultdict(int)\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for itemset in itemsets:\n                if set(itemset).issubset(transaction_set):\n                    support_count[itemset] += 1\n        return support_count\n\n    def generate_candidates(frequent_itemsets, k):\n        # Generate candidate itemsets of size k\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if itemset1[:k-2] == itemset2[:k-2] and itemset1[k-2] < itemset2[k-2]:\n                    candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n                    if len(candidate) == k:\n                        # Prune candidate if any (k-1)-subset is infrequent\n                        all_k_minus_1_subsets = itertools.combinations(candidate, k-1)\n                        if all(subset in frequent_itemsets for subset in all_k_minus_1_subsets):\n                            candidates.add(candidate)\n        return candidates\n\n    # Step 1: Generate initial candidate itemsets (single items)\n    all_items = set(item for transaction in transactions for item in transaction)\n    candidate_itemsets = [{item} for item in all_items]\n    frequent_itemsets = []\n\n    # Step 2: Filter candidates based on minimum support\n    while candidate_itemsets:\n        support_count = count_support(candidate_itemsets, transactions)\n        min_support_count = min_sup * len(transactions)\n        frequent_itemsets.extend([itemset for itemset in candidate_itemsets if support_count[itemset] >= min_support_count])\n        \n        # Generate next set of candidate itemsets\n        k = len(candidate_itemsets[0]) + 1\n        candidate_itemsets = generate_candidates(frequent_itemsets, k)\n\n    # Step 3: Sort frequent itemsets by length and lexicographically\n    frequent_itemsets = sorted(frequent_itemsets, key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['milk', 'bread'],\n    ['bread', 'butter'],\n    ['bread', 'butter', 'beer'],\n    ['bread', 'beer'],\n    ['bread', 'milk', 'beer', 'butter']\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\n### Explanation:\n1. **count_support**: This function counts the support of each candidate itemset by checking how many transactions contain the itemset.\n2. **generate_candidates**: This function generates candidate itemsets of size `k` by self-joining frequent itemsets of size `k-1` and pruning any candidate that contains an infrequent subset.\n3. **Main Loop**: The main loop generates candidate itemsets, counts their support, and filters out those that do not meet the minimum support threshold. It continues until no new frequent itemsets are found.\n4. **Sorting**: Finally, the frequent itemsets are sorted by length and lexicographically.\n\nThis implementation ensures that the frequent itemsets are returned in the required order and handles any hashable items."}
{"task_id": 440, "completion_id": 0, "completion": "To solve this task, we need to perform the following steps:\n\n1. **Aggregate Probabilities**: Sum the probability vectors for each sample across all estimators and then divide by the number of estimators to get the average probability for each class.\n2. **Round Probabilities**: Round each averaged probability to four decimal places.\n3. **Determine Predicted Classes**: For each sample, find the class with the highest averaged probability. In case of a tie, `numpy.argmax` will naturally select the smallest index.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Calculate the mean probabilities across all estimators for each sample and class\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Convert the rounded probabilities back to a regular Python list\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    \n    # Determine the predicted class for each sample\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1).tolist()\n    \n    return averaged_probabilities_list, predicted_classes\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.2, 0.2]],\n#     [[0.1, 0.4, 0.5], [0.7, 0.1, 0.2]],\n#     [[0.3, 0.3, 0.4], [0.5, 0.3, 0.2]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\n### Explanation:\n1. **Conversion to NumPy Array**: We convert the input list to a NumPy array to leverage efficient numerical operations.\n2. **Mean Calculation**: We use `np.mean` along the first axis (estimators) to compute the average probability for each class and sample.\n3. **Rounding**: We use `np.round` to round the averaged probabilities to four decimal places.\n4. **Conversion to List**: We convert the rounded probabilities back to a regular Python list for the final output.\n5. **Argmax for Prediction**: We use `np.argmax` to find the class with the highest probability for each sample. This handles ties by selecting the smallest index by default.\n\nThis function should meet the requirements and constraints specified in the task description."}
{"task_id": 444, "completion_id": 0, "completion": "To implement the Radial Basis Function (RBF) kernel matrix, we need to follow these steps:\n\n1. **Input Validation**:\n   - Ensure that the feature dimensions of `X` and `Y` match.\n   - Validate the `sigma` parameter to ensure it is either a positive float, a list of positive floats with the same length as the number of features, or `None`.\n\n2. **Compute the Kernel Matrix**:\n   - If `Y` is not provided, compute the kernel matrix for `X` with itself.\n   - For each pair of vectors `(x, y)` from `X` and `Y`, compute the RBF kernel value using the formula provided.\n\n3. **Return the Result**:\n   - Round all entries of the kernel matrix to 4 decimal places.\n   - Return the result as a nested Python list.\n\nHere is the implementation of the `rbf_kernel` function:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    \n    # Check if feature dimensions match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    if isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n    \n    # Compute the squared Euclidean distance matrix\n    X_norm = np.sum(X**2, axis=1, keepdims=True)\n    Y_norm = np.sum(Y**2, axis=1)\n    XY_dot = np.dot(X, Y.T)\n    dist_matrix = X_norm + Y_norm - 2 * XY_dot\n    \n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-0.5 * dist_matrix / (sigma**2))\n    \n    # Round to 4 decimal places and convert to nested list\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix_rounded\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\n### Explanation:\n- **Input Validation**: We first check if the feature dimensions of `X` and `Y` match. We also validate `sigma` to ensure it is a valid input.\n- **Kernel Matrix Calculation**:\n  - We compute the squared Euclidean distance matrix using broadcasting and matrix operations.\n  - We then apply the RBF kernel formula to each element of the distance matrix.\n- **Rounding and Conversion**: Finally, we round the kernel matrix to 4 decimal places and convert it to a nested Python list before returning it.\n\nThis implementation ensures that the function handles all specified cases and constraints correctly."}
{"task_id": 446, "completion_id": 0, "completion": "To implement the `decision_stump` function, we need to follow these steps:\n\n1. **Calculate the entropy of the parent node** (`H(parent)`).\n2. **Iterate over each feature** to find the best split.\n3. **For each feature, sort the values** and consider midpoints between successive distinct values as potential thresholds.\n4. **Calculate the entropy for the left and right subsets** for each threshold.\n5. **Compute the information gain** for each split and keep track of the best one.\n6. **Handle ties** according to the specified rules.\n7. **Return the best split** or the majority label if no split improves information gain.\n\nHere's the implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    return -sum((count / total) * np.log2(count / total) for count in label_counts.values())\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n    \n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Consider midpoints between successive distinct values as thresholds\n        for i in range(n_samples - 1):\n            if sorted_X[i] != sorted_X[i + 1]:\n                t = (sorted_X[i] + sorted_X[i + 1]) / 2.0\n                \n                # Split the data based on the threshold\n                left_y = sorted_y[:i + 1]\n                right_y = sorted_y[i + 1:]\n                \n                # Calculate the entropy of the left and right subsets\n                p_left = len(left_y) / n_samples\n                p_right = len(right_y) / n_samples\n                left_entropy = entropy(left_y)\n                right_entropy = entropy(right_y)\n                \n                # Calculate the information gain\n                gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n                \n                # Update the best split if this one is better\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_y).most_common(1)[0][0]\n                    right_majority_label = Counter(right_y).most_common(1)[0][0]\n                elif gain == best_gain:\n                    # Handle ties: smallest feature index, then smallest threshold\n                    if j < best_feature_index or (j == best_feature_index and t < best_threshold):\n                        best_feature_index = j\n                        best_threshold = round(t, 4)\n                        left_majority_label = Counter(left_y).most_common(1)[0][0]\n                        right_majority_label = Counter(right_y).most_common(1)[0][0]\n    \n    # If no split can improve information gain, return the majority label\n    if best_gain == 0.0:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\n# X = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\n# y = [0, 0, 1, 1]\n# print(decision_stump(X, y))\n```\n\n### Explanation:\n- **Entropy Calculation**: The `entropy` function calculates the Shannon entropy of a list of labels.\n- **Sorting and Midpoints**: For each feature, we sort the values and consider midpoints between successive distinct values as potential thresholds.\n- **Information Gain**: For each threshold, we split the data and calculate the information gain. We keep track of the best split based on the highest information gain.\n- **Tie-breaking**: If multiple splits have the same information gain, we choose the one with the smallest feature index and, if necessary, the smallest threshold.\n- **No Split**: If no split improves information gain, we return the majority label of the dataset.\n\nThis implementation ensures that the decision stump is chosen optimally based on information gain, adhering to the specified tie-breaking rules."}
{"task_id": 452, "completion_id": 0, "completion": "To solve this problem, we need to implement a function that splits a dataset `X` into two subsets based on a specified feature and threshold. The function should handle both numeric and categorical thresholds appropriately. Here's how we can achieve this:\n\n1. **Check the type of the threshold**: Determine if the threshold is numeric (int or float) or not (categorical).\n2. **Iterate through the dataset**: For each sample, check the value of the specified feature.\n3. **Partition the samples**: Based on the threshold condition, place the sample in the appropriate subset.\n4. **Convert to lists**: Ensure that the resulting subsets are converted to regular Python lists using `ndarray.tolist()` if necessary.\n5. **Return the subsets**: Return the two subsets in a list.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n    \n    # Determine if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    # Iterate through each sample in X\n    for sample in X:\n        feature_value = sample[feature_i]\n        if (is_numeric and feature_value >= threshold) or (not is_numeric and feature_value == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n# Output: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n# Output: [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```\n\n### Explanation:\n- **Type Checking**: We first check if `X` is a NumPy array. If not, we convert it to one for easier manipulation.\n- **Threshold Type**: We determine if the threshold is numeric by checking if it is an instance of `int` or `float`.\n- **Partitioning**: We iterate over each sample in `X`, check the value of the feature at `feature_i`, and append the sample to `subset1` or `subset2` based on the threshold condition.\n- **Conversion**: Each sample is converted to a list using `tolist()` before being added to the subsets.\n- **Return**: Finally, we return the two subsets in a list."}
{"task_id": 453, "completion_id": 0, "completion": "To implement the `update_q_values` function for Deep Q-Networks (DQN), we need to follow these steps:\n\n1. **Input Validation**: Ensure that all input lists and arrays have consistent lengths and that `gamma` is within the valid range [0, 1].\n2. **Target Calculation**: For each sample in the batch, calculate the target Q-value based on whether the next state is terminal or not.\n3. **Update Q-Values**: Replace the Q-value for the action taken in each state with the calculated target.\n4. **Return the Result**: Convert the updated Q-values to a nested Python list and round each element to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are valid\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(rewards) != len(dones) or len(dones) != Q.shape[0]:\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n    \n    batch_size, n_actions = Q.shape\n    \n    # Create a copy of Q to update\n    Q_updated = np.copy(Q)\n    \n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        # Update the Q-value for the action taken\n        Q_updated[i, actions[i]] = target\n    \n    # Round to 4 decimal places and convert to nested list\n    Q_updated_rounded = np.round(Q_updated, 4).tolist()\n    \n    return Q_updated_rounded\n```\n\n### Explanation:\n1. **Input Validation**:\n   - Ensure `Q` and `Q_next` are NumPy arrays and have the same shape.\n   - Ensure `actions`, `rewards`, and `dones` are lists and have the same length as the batch size.\n   - Ensure `gamma` is within the range [0, 1].\n\n2. **Target Calculation**:\n   - For each sample, check if the next state is terminal (`dones[i]`).\n   - If terminal, the target is just the reward.\n   - If not terminal, the target is the reward plus the discounted maximum Q-value of the next state.\n\n3. **Update Q-Values**:\n   - Replace the Q-value for the action taken in each state with the calculated target.\n\n4. **Return the Result**:\n   - Convert the updated Q-values to a nested Python list and round each element to four decimal places.\n\nThis function should handle the specified task correctly and efficiently."}
{"task_id": 458, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `to_categorical` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if (labels < 0).any():\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    \n    # Check if num_classes is too small\n    if num_classes < max(labels) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels))]\n    \n    # Set the appropriate indices to 1\n    for i, label in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 1]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n```\n\n### Explanation:\n1. **Input Validation**:\n   - The function first converts the input `labels` to a NumPy array for easier manipulation.\n   - It checks if there are any negative labels. If so, it returns `-1`.\n   - If `num_classes` is not provided, it infers it as `max(labels) + 1`.\n   - It checks if the provided `num_classes` is smaller than `max(labels) + 1`. If so, it returns `-1`.\n\n2. **One-Hot Encoding**:\n   - It initializes a list of lists (`one_hot_matrix`) with zeros, where each sublist has a length of `num_classes`.\n   - It iterates over the `labels` and sets the appropriate index in each sublist to `1`.\n\n3. **Return**:\n   - The function returns the one-hot encoded matrix as a list of lists of integers.\n\nThis implementation ensures that the function behaves as specified and handles edge cases appropriately."}
{"task_id": 461, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `gradient_boosting_regressor` function following the specified algorithm and constraints:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize the predictions to the mean of the targets\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # If n_estimators is 0 or negative, return the mean target for every sample\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    # Step 2: Repeat n_estimators times\n    for _ in range(n_estimators):\n        # Step 2a: Compute the residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Find unique x values except the greatest one\n        unique_x = np.unique(x)[:-1]\n        \n        # Initialize variables to track the best split\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        \n        # Step 2c: Evaluate each possible split\n        for t in unique_x:\n            # Split the data\n            left_mask = x <= t\n            right_mask = x > t\n            \n            # Ignore splits if either side is empty\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            # Calculate mean residuals for left and right\n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            \n            # Calculate SSE for this split\n            sse = np.sum(residuals[left_mask]**2) + np.sum(residuals[right_mask]**2)\n            \n            # Step 2d: Update the best split if this one is better\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        \n        # Step 2e: If no valid split exists, use the mean residual of the whole data\n        if best_t is None:\n            best_vL = best_vR = np.mean(residuals)\n        \n        # Create the stump predictions\n        stump_pred = np.where(x <= best_t, best_vL, best_vR)\n        \n        # Step 2f: Update the ensemble prediction\n        y_pred += learning_rate * stump_pred\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\n### Explanation:\n1. **Initialization**: The initial predictions are set to the mean of the target values.\n2. **Early Exit**: If `n_estimators` is 0 or negative, the function returns the mean target value for all samples.\n3. **Boosting Iterations**: For each iteration:\n   - **Residual Calculation**: Compute the residuals as the difference between the actual and predicted values.\n   - **Split Evaluation**: Evaluate all possible splits based on unique `x` values (excluding the greatest one).\n   - **Best Split Selection**: Choose the split that minimizes the sum of squared errors (SSE).\n   - **Stump Prediction**: If a valid split is found, predict using the mean residuals of the left and right splits. If no valid split is found, predict using the mean residual of the entire dataset.\n   - **Prediction Update**: Update the predictions by adding the weighted stump predictions.\n4. **Final Output**: The final predictions are rounded to four decimal places and returned as a list.\n\nThis implementation ensures that the algorithm adheres to the specified constraints and handles edge cases appropriately."}
{"task_id": 471, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Expected SARSA TD(0) Q-Table update function as described in the task:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Find the greedy action in the next state\n        greedy_action = np.argmax(q_table[next_state])\n        \n        # Calculate the expected value of Q[next_state] under the epsilon-soft policy\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += (epsilon / num_actions) * q_table[next_state][a]\n        \n        # Calculate the target\n        target = reward + gamma * expected_value\n    else:\n        # If next_state is None, the target is just the reward\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\n### Explanation:\n1. **Greedy Action Calculation**: We determine the greedy action in the `next_state` by finding the action with the maximum Q-value.\n2. **Expected Value Calculation**: We compute the expected value of the Q-values in the `next_state` under the \u03b5-soft policy. This involves:\n   - Adding the Q-value of the greedy action multiplied by the probability of taking the greedy action.\n   - Adding the Q-values of all other actions multiplied by the probability of taking any non-greedy action.\n3. **Target Calculation**: The target is calculated as the immediate reward plus the discounted expected value of the next state.\n4. **Q-Table Update**: The Q-value for the current state-action pair is updated using the TD(0) update rule.\n5. **Rounding**: All entries in the Q-table are rounded to four decimal places before returning.\n\nThis function should work correctly for the given task and constraints."}
{"task_id": 474, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `generate_data` function that addresses the issues mentioned and meets the specified requirements:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    \n    for i in range(m):\n        # Calculate the bounds for x and y\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        \n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([int((i - 0.5) * 2)] * n_train)\n        \n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([int((i - 0.5) * 2)] * n_val)\n    \n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.array(Y_train)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.array(Y_val)\n    \n    return X_train, X_val, Y_train, Y_val\n```\n\n### Explanation:\n1. **Random Seed Handling**: The function checks if a seed is provided and sets both `random` and `numpy.random` seeds to ensure reproducibility.\n2. **Data Generation**:\n   - For each class `i`, the bounds for `x` and `y` are calculated based on the given rules.\n   - Training and validation data are generated using `numpy.random.uniform` within these bounds.\n   - Labels are assigned based on the class index `i` using the formula `(i - 0.5) * 2`.\n3. **Data Aggregation**:\n   - Training and validation data points are aggregated into lists and then converted to NumPy arrays.\n   - Coordinates are rounded to four decimal places using `np.round`.\n4. **Return Values**:\n   - The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`.\n\nThis implementation ensures that the data generation process is flexible, reproducible, and meets all the specified constraints."}
{"task_id": 475, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `adam_update` function that performs a single Adam optimization step. This function handles both scalar and NumPy array inputs for the parameters and gradients.\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first moment (mean of gradients)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    \n    # Update the second moment (uncentred variance of gradients)\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment\n    m_hat = m_new / (1 - b1 ** t)\n    \n    # Compute bias-corrected second moment\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```\n\n### Explanation:\n1. **Initialization**: If `m_prev` or `v_prev` is `None`, they are initialized to arrays of zeros with the same shape as `grad`.\n2. **First Moment Update**: The first moment `m_new` is updated using the formula \\( m_t = \\beta_1 \\cdot m_{t-1} + (1 - \\beta_1) \\cdot \\text{grad} \\).\n3. **Second Moment Update**: The second moment `v_new` is updated using the formula \\( v_t = \\beta_2 \\cdot v_{t-1} + (1 - \\beta_2) \\cdot \\text{grad}^2 \\).\n4. **Bias Correction**: The bias-corrected first moment `m_hat` and second moment `v_hat` are computed.\n5. **Parameter Update**: The parameters `w_new` are updated using the formula \\( w_{\\text{new}} = w - \\alpha \\cdot \\frac{\\hat{m}_t}{\\sqrt{\\hat{v}_t} + \\epsilon} \\).\n\nThis implementation ensures that the function works correctly for both scalar and NumPy array inputs, and it maintains the required precision."}
{"task_id": 479, "completion_id": 0, "completion": "Certainly! Below is the implementation of the \u03b5-greedy multi-armed bandit simulation as described in the task:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initial estimates of expected values\n    pull_counts = [0] * N  # Number of times each arm has been pulled\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Receive the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm using incremental sample mean\n        C_i = pull_counts[chosen_arm]\n        V_i = value_estimates[chosen_arm]\n        value_estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n\n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in value_estimates]\n```\n\n### Explanation:\n1. **Initialization**:\n   - `value_estimates` is initialized with the `ev_prior` value for each arm.\n   - `pull_counts` keeps track of how many times each arm has been pulled.\n\n2. **Simulation Loop**:\n   - For each time-step `t`, a decision is made to either explore or exploit:\n     - With probability `epsilon`, an arm is chosen uniformly at random.\n     - Otherwise, the arm with the highest estimated value is chosen.\n   - The reward for the chosen arm is observed.\n   - The pull count for the chosen arm is incremented.\n   - The estimate for the chosen arm is updated using the incremental sample mean formula.\n\n3. **Return**:\n   - The final estimated values for each arm are rounded to 4 decimal places and returned as a list.\n\nThis implementation ensures that the \u03b5-greedy strategy is correctly simulated and that the results are reproducible when a seed is provided."}
{"task_id": 481, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow these steps:\n\n1. **Initialize**: Create a list to store the cluster labels for each point. Initialize all points as unvisited.\n2. **Core Point Identification**: For each point, find its neighbors within the distance `eps`. If a point has at least `min_samples` neighbors, it is a core point.\n3. **Cluster Expansion**: For each core point, start a new cluster and recursively add all reachable points to this cluster.\n4. **Border Points**: Points that are reachable from a core point but do not have enough neighbors to be core points themselves are border points and are assigned the same cluster label as the core point.\n5. **Noise Points**: Points that are not reachable from any core point are noise points and are labeled as -1.\n\nHere is the implementation of the DBSCAN algorithm:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # -1 means unvisited/noise\n    cluster_id = 0\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for i in range(n_samples):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == -2:\n                labels[neighbor_index] = cluster_id\n                neighbor_neighbors = region_query(neighbor_index)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors.extend(neighbor_neighbors)\n            i += 1\n\n    for point_index in range(n_samples):\n        if labels[point_index] != -1:\n            continue\n\n        neighbors = region_query(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -2  # Mark as noise temporarily\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors)\n\n    # Convert temporary noise label (-2) to final noise label (-1)\n    for i in range(n_samples):\n        if labels[i] == -2:\n            labels[i] = -1\n\n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# eps = 3\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n- **Euclidean Distance**: A helper function to calculate the Euclidean distance between two points.\n- **Region Query**: Finds all points within `eps` distance from a given point.\n- **Expand Cluster**: Recursively adds reachable points to the current cluster.\n- **Main Loop**: Iterates over each point, checks if it is unvisited, and applies the clustering logic.\n\nThis implementation ensures that points are labeled according to the DBSCAN rules, with core points forming clusters, border points being part of the same cluster as core points, and noise points being labeled as -1."}
{"task_id": 482, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `to_categorical` function that converts a vector of integer class labels into a 2-D array of one-hot encoded vectors. The function handles the optional `num_classes` parameter and raises a `ValueError` if any label is negative or not smaller than `num_classes`.\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    y = np.array(y, dtype=int)\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Validate the labels\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and less than num_classes.\")\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Fill in the one-hot encoded matrix\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 1]\n# one_hot = to_categorical(labels)\n# print(one_hot)\n```\n\n### Explanation:\n1. **Input Conversion**: The input `y` is converted to a NumPy array to ensure consistent handling of different input types (list, tuple, etc.).\n2. **Determine Number of Classes**: If `num_classes` is not provided, it is set to `max(y) + 1`.\n3. **Validation**: The function checks if any label is negative or greater than or equal to `num_classes`. If so, it raises a `ValueError`.\n4. **One-Hot Encoding**: A zero matrix of shape `(len(y), num_classes)` is created. The appropriate positions in this matrix are set to 1 to create the one-hot encoding.\n\nThis function should meet the requirements specified in the task description."}
{"task_id": 485, "completion_id": 0, "completion": "To implement a univariate regression tree using the CART algorithm, we need to follow these steps:\n\n1. **Recursive Greedy Splitting**: At each node, find the best split point that minimizes the sum of squared errors (SSE) for the two resulting subsets.\n2. **Stopping Criteria**: Stop splitting if the current depth equals `max_depth` or if a node contains fewer than two samples.\n3. **Leaf Labeling**: Label each leaf node with the mean of the target values in that node.\n4. **Prediction**: Traverse the tree for each test point to find the corresponding leaf node and return its mean value.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        \"\"\"Calculate the sum of squared errors for a list of target values.\"\"\"\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n    \n    def best_split(X, y):\n        \"\"\"Find the best split point that minimizes SSE.\"\"\"\n        best_sse = float('inf')\n        best_split_point = None\n        n = len(X)\n        \n        # Sort the data by the feature values\n        sorted_indices = np.argsort(X)\n        X_sorted = np.array(X)[sorted_indices]\n        y_sorted = np.array(y)[sorted_indices]\n        \n        # Try every possible split point\n        for i in range(1, n):\n            left_y = y_sorted[:i]\n            right_y = y_sorted[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split_point = (X_sorted[i] + X_sorted[i - 1]) / 2\n        \n        return best_split_point\n    \n    def build_tree(X, y, depth):\n        \"\"\"Recursively build the regression tree.\"\"\"\n        if len(X) < 2 or depth == max_depth:\n            # Leaf node: return the mean of the target values\n            return np.mean(y)\n        \n        split_point = best_split(X, y)\n        if split_point is None:\n            # No valid split found, return the mean of the target values\n            return np.mean(y)\n        \n        # Split the data\n        left_indices = [i for i, x in enumerate(X) if x < split_point]\n        right_indices = [i for i, x in enumerate(X) if x >= split_point]\n        \n        left_X, left_y = [X[i] for i in left_indices], [y[i] for i in left_indices]\n        right_X, right_y = [X[i] for i in right_indices], [y[i] for i in right_indices]\n        \n        # Recursively build the left and right subtrees\n        left_subtree = build_tree(left_X, left_y, depth + 1)\n        right_subtree = build_tree(right_X, right_y, depth + 1)\n        \n        return (split_point, left_subtree, right_subtree)\n    \n    def predict_tree(tree, x):\n        \"\"\"Predict the target value for a single test point using the tree.\"\"\"\n        if isinstance(tree, float):\n            # Leaf node\n            return tree\n        else:\n            split_point, left_subtree, right_subtree = tree\n            if x < split_point:\n                return predict_tree(left_subtree, x)\n            else:\n                return predict_tree(right_subtree, x)\n    \n    if not X_train or not y_train:\n        return []\n    \n    # Build the tree\n    tree = build_tree(X_train, y_train, 0)\n    \n    # Predict for each test point\n    predictions = [predict_tree(tree, x) for x in X_test]\n    \n    return predictions\n```\n\n### Explanation:\n1. **SSE Calculation**: The `sse` function calculates the sum of squared errors for a given list of target values.\n2. **Best Split**: The `best_split` function finds the best split point by trying every possible split and choosing the one that minimizes the SSE.\n3. **Tree Building**: The `build_tree` function recursively builds the tree. It stops when the depth reaches `max_depth` or when a node contains fewer than two samples.\n4. **Prediction**: The `predict_tree` function traverses the tree to find the leaf node corresponding to a test point and returns the mean value of that leaf.\n5. **Main Function**: The `regression_tree_predict` function handles the overall process, including building the tree and making predictions for the test set.\n\nThis implementation ensures that the tree is built and used to predict the target values for the test set as specified."}
{"task_id": 490, "completion_id": 0, "completion": "To accomplish the task of converting a one-dimensional vector into a square diagonal matrix, we can utilize NumPy's functionality to create a diagonal matrix and then convert it to a list of lists. Here's how you can implement the `make_diagonal` function:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Check if the input is empty\n    if x.size == 0:\n        return []\n    \n    # Create a diagonal matrix using NumPy\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the diagonal matrix to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\n### Explanation:\n1. **Input Conversion**: The function first checks if the input `x` is already a NumPy array. If not, it converts `x` to a NumPy array using `np.array(x)`.\n2. **Empty Check**: It checks if the input is empty by examining `x.size`. If the size is zero, it returns an empty list.\n3. **Diagonal Matrix Creation**: It uses `np.diag(x)` to create a diagonal matrix where the elements of `x` are placed on the principal diagonal.\n4. **Conversion to List of Lists**: Finally, it converts the resulting NumPy array to a list of lists using the `tolist()` method and returns it.\n\nThis function handles the conversion efficiently and ensures that the output is in the required format."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the two major stages outlined in the task description. Here's a step-by-step breakdown of the implementation:\n\n1. **FP-tree Construction**:\n   - Count the frequency of each item across all transactions.\n   - Filter out items that do not meet the minimum support threshold.\n   - Sort the items in each transaction by their frequency in descending order.\n   - Insert each sorted transaction into an FP-tree, ensuring that identical prefixes share the same path.\n   - Maintain a header table that links every node that contains the same item label.\n\n2. **Recursive Mining**:\n   - Generate conditional pattern bases from the header table.\n   - Build conditional FP-trees from these bases.\n   - Append discovered single-items to the current prefix to create larger frequent item-sets.\n   - If a conditional tree consists of a single path, enumerate all non-empty combinations of the items on that path and add them to the result in one shot.\n   - Otherwise, continue mining the conditional tree recursively.\n\nHere's the complete implementation of the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass FPNode:\n    def __init__(self, item, count=1, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.link = None\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = defaultdict(list)\n\n    def insert_transaction(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].count += 1\n            else:\n                new_node = FPNode(item, parent=current_node)\n                current_node.children[item] = new_node\n                self.update_header_table(item, new_node)\n            current_node = current_node.children[item]\n\n    def update_header_table(self, item, node):\n        if self.header_table[item]:\n            last_node = self.header_table[item][-1]\n            last_node.link = node\n        self.header_table[item].append(node)\n\ndef build_fp_tree(transactions, min_sup):\n    fp_tree = FPTree()\n    frequency = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item for item, count in frequency.items() if count >= min_sup}\n    sorted_transactions = [sorted(transaction, key=lambda x: frequency[x], reverse=True) for transaction in transactions]\n    for transaction in sorted_transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        fp_tree.insert_transaction(filtered_transaction)\n    return fp_tree, frequency\n\ndef find_frequent_itemsets(fp_tree, frequency, min_sup, prefix=()):\n    frequent_itemsets = []\n    for item, nodes in sorted(fp_tree.header_table.items(), key=lambda x: frequency[x[0]]):\n        support = sum(node.count for node in nodes)\n        frequent_itemsets.append(prefix + (item,))\n        conditional_pattern_base = []\n        for node in nodes:\n            path = []\n            parent = node.parent\n            while parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            if path:\n                conditional_pattern_base.append((path, node.count))\n        conditional_tree, _ = build_fp_tree([path for path, _ in conditional_pattern_base], min_sup)\n        if conditional_tree.root.children:\n            frequent_itemsets.extend(find_frequent_itemsets(conditional_tree, frequency, min_sup, prefix + (item,)))\n    return frequent_itemsets\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    fp_tree, frequency = build_fp_tree(transactions, min_sup)\n    frequent_itemsets = find_frequent_itemsets(fp_tree, frequency, min_sup)\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis code defines the necessary classes and functions to build the FP-tree and perform the recursive mining to find all frequent item-sets. The `fp_growth` function returns the frequent item-sets sorted by length and lexicographically, as required."}
{"task_id": 492, "completion_id": 0, "completion": "To implement the `polynomial_features` function, we need to generate all possible monomials of the input features up to a specified degree. The monomials should be ordered by their total degree and lexicographically within the same degree. Here's how we can achieve this:\n\n1. **Check for Negative Degree**: If the degree is negative, return `-1` immediately.\n2. **Generate Combinations**: Use `itertools.combinations_with_replacement` to generate all possible combinations of feature indices with replacement, up to the specified degree.\n3. **Compute Monomials**: For each combination, compute the corresponding monomial for each sample in the input data.\n4. **Order the Monomials**: Ensure the monomials are ordered by total degree and lexicographically within the same degree.\n5. **Construct the Result**: Construct the result matrix by appending the computed monomials for each sample.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    \n    X = np.array(X)\n    n_samples, n_features = X.shape\n    \n    # Generate all combinations of feature indices with replacement\n    feature_combinations = []\n    for d in range(degree + 1):\n        feature_combinations.extend(combinations_with_replacement(range(n_features), d))\n    \n    # Construct the polynomial feature matrix\n    result = []\n    for sample in X:\n        row = []\n        for combination in feature_combinations:\n            # Compute the monomial for the current combination\n            monomial = 1\n            for index in combination:\n                monomial *= sample[index]\n            row.append(monomial)\n        result.append(row)\n    \n    return result\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# degree = 2\n# print(polynomial_features(X, degree))\n```\n\n### Explanation:\n- **Combinations**: We generate all combinations of feature indices with replacement for each degree from 0 to `degree`. This ensures we cover all possible monomials.\n- **Monomial Calculation**: For each combination, we calculate the monomial by multiplying the corresponding feature values raised to their respective powers.\n- **Ordering**: The combinations are naturally ordered by degree and lexicographically within the same degree due to the way `combinations_with_replacement` works.\n- **Result Construction**: We construct the result matrix by appending the computed monomials for each sample.\n\nThis implementation should meet the requirements and constraints specified in the task description."}
{"task_id": 493, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `mse` function that calculates the mean-squared error (MSE) of a given 1-D numeric sample. The function handles both Python lists and 1-D NumPy arrays, and returns `-1` if the input is empty.\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:  # Check if the input is empty\n        return -1\n    \n    # Convert to NumPy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the mean of the sample\n    y_mean = np.mean(y)\n    \n    # Calculate the mean-squared error\n    mse_value = np.mean((y - y_mean) ** 2)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Should output 2.0\n# print(mse(np.array([1, 2, 3, 4, 5])))  # Should output 2.0\n# print(mse([]))  # Should output -1\n```\n\n### Explanation:\n1. **Empty Check**: The function first checks if the input `y` is empty. If it is, the function returns `-1`.\n2. **Conversion to NumPy Array**: If the input is not already a NumPy array, it is converted to one. This ensures that we can use NumPy's efficient operations.\n3. **Mean Calculation**: The mean of the sample is calculated using `np.mean(y)`.\n4. **MSE Calculation**: The MSE is computed as the mean of the squared differences between each element and the sample mean.\n5. **Rounding**: The result is rounded to four decimal places using Python's built-in `round` function.\n\nThis implementation is efficient and leverages NumPy for numerical operations, ensuring good performance even with larger datasets."}
{"task_id": 496, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `apply_affine` function that meets the specified requirements:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x, dtype=float)\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # Compute the first derivative (which is constant for affine functions)\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative (which is always 0 for affine functions)\n    grad2 = np.zeros_like(x)\n    \n    # Round all results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1, 2, 3]\n# slope = 2.0\n# intercept = 1.0\n# result = apply_affine(x, slope, intercept)\n# print(result)  # Output: ([3.0, 5.0, 7.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\n### Explanation:\n1. **Input Handling**: The function accepts a 1-D list or NumPy array `x` and two optional scalars `slope` and `intercept`. If `x` is a scalar, it is treated as a length-one vector.\n2. **Affine Activation**: The affine activation is computed as \\( y = \\text{slope} \\cdot x + \\text{intercept} \\).\n3. **First Derivative**: The first derivative of an affine function is constant and equal to the slope.\n4. **Second Derivative**: The second derivative of an affine function is always zero.\n5. **Rounding**: All results are rounded to 4 decimal places using `np.round` and converted to lists before returning.\n\nThis function should work efficiently for both small and large inputs, and it handles the conversion of scalar inputs to arrays seamlessly."}
{"task_id": 499, "completion_id": 0, "completion": "Certainly! Below is the implementation of the PCA dimensionality reduction routine from scratch, following the specified steps:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)  # Population variance with Bessel's correction\n    std[std == 0] = 1  # Avoid division by zero for zero variance features\n    standardized_data = (data - mean) / std\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    principal_components = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ principal_components\n    \n    # Return the projected data rounded to 4 decimal places\n    return np.round(projected_data, 4).tolist()\n```\n\n### Explanation:\n1. **Standardisation**: Each feature is centered to have zero mean and scaled to have unit variance using Bessel's correction.\n2. **Covariance Matrix**: The covariance matrix of the standardized data is computed.\n3. **Eigen-decomposition**: The eigenvalues and eigenvectors of the covariance matrix are computed.\n4. **Sorting**: The eigenvalues are sorted in descending order, and the corresponding eigenvectors are rearranged.\n5. **Sign Fixing**: Each eigenvector is adjusted so that the entry with the largest absolute value is positive.\n6. **Projection**: The standardized data is projected onto the first `k` principal components.\n\nThis function will return the projected data as a nested list of floats, rounded to four decimal places, or `-1` if `k` is out of the valid range."}
{"task_id": 500, "completion_id": 0, "completion": "To implement the tiny Gradient Boosting Binary Classifier using decision stumps, we need to follow these steps:\n\n1. **Initialize the model**: Start with the average of the training labels as the initial prediction.\n2. **Iteratively build the ensemble**:\n   - Compute the residuals (difference between actual labels and current predictions).\n   - Fit a decision stump to these residuals.\n   - Update the model by adding the weighted prediction of the stump.\n3. **Predict on the test set**: Use the final model to predict the class labels for the test set by thresholding the final score at 0.5.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the labels\n    F = np.full_like(y_train, np.mean(y_train))\n    \n    # List to store the stumps\n    stumps = []\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Fit a decision stump to the residuals\n        best_feature, best_threshold, best_left_val, best_right_val = fit_stump(X_train, residuals)\n        \n        # Create a stump function\n        def stump(x):\n            return best_left_val if x[best_feature] <= best_threshold else best_right_val\n        \n        # Add the stump to the list\n        stumps.append(stump)\n        \n        # Update the model\n        F += learning_rate * np.array([stump(x) for x in X_train])\n    \n    # Predict on the test set\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for stump in stumps:\n        F_test += learning_rate * np.array([stump(x) for x in X_test])\n    \n    # Threshold the final score to get class labels\n    predictions = [1 if score >= 0.5 else 0 for score in F_test]\n    \n    return predictions\n\ndef fit_stump(X, y):\n    \"\"\"Fit a decision stump to the data.\"\"\"\n    m, n = X.shape\n    best_loss = float('inf')\n    best_feature = None\n    best_threshold = None\n    best_left_val = None\n    best_right_val = None\n    \n    for feature in range(n):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            left_indices = X[:, feature] <= threshold\n            right_indices = X[:, feature] > threshold\n            \n            left_val = np.mean(y[left_indices])\n            right_val = np.mean(y[right_indices])\n            \n            loss = np.sum((y[left_indices] - left_val) ** 2) + np.sum((y[right_indices] - right_val) ** 2)\n            \n            if loss < best_loss:\n                best_loss = loss\n                best_feature = feature\n                best_threshold = threshold\n                best_left_val = left_val\n                best_right_val = right_val\n    \n    return best_feature, best_threshold, best_left_val, best_right_val\n```\n\n### Explanation:\n1. **Initialization**: The initial prediction `F` is set to the mean of the training labels.\n2. **Stump Fitting**: For each boosting iteration, we compute the residuals and fit a decision stump to these residuals. The stump is a simple rule that splits the data based on a single feature and threshold, predicting a constant value for each side of the split.\n3. **Model Update**: The model is updated by adding the weighted prediction of the stump to the current model.\n4. **Prediction**: After training, the model is used to predict the class labels for the test set by thresholding the final score at 0.5.\n\nThis implementation is a simplified version of Gradient Boosting and uses decision stumps as weak learners."}
{"task_id": 505, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `contrastive_divergence` function for a binary Restricted Boltzmann Machine (RBM) using the Contrastive Divergence (CD-k) algorithm. The function computes the positive and negative gradients and updates the weight matrix accordingly.\n\n```python\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Gibbs sampling (k steps)\n    v = X.copy()\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        h = h_prob  # Use probabilities directly\n        v_prob = 1 / (1 + np.exp(-(h @ W.T + vbias)))\n        v = v_prob  # Use probabilities directly\n\n    h_k_prob = h_prob\n    neg_grad = v.T @ h_k_prob\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n```\n\n### Explanation:\n1. **Positive Phase**:\n   - Compute the probability of the hidden units being active given the visible units (`h0_prob`).\n   - Compute the positive gradient (`pos_grad`) as the outer product of the visible units and the hidden probabilities.\n\n2. **Gibbs Sampling**:\n   - Perform `k` Gibbs sampling steps. In each step:\n     - Compute the probability of the hidden units being active given the current visible units (`h_prob`).\n     - Update the hidden units using these probabilities.\n     - Compute the probability of the visible units being active given the current hidden units (`v_prob`).\n     - Update the visible units using these probabilities.\n\n3. **Negative Phase**:\n   - After `k` steps, compute the negative gradient (`neg_grad`) as the outer product of the visible units and the hidden probabilities.\n\n4. **Weight Update**:\n   - Update the weight matrix using the contrastive divergence update rule.\n   - Round the updated weight matrix to 4 decimal places and convert it to a list of lists.\n\nThis implementation ensures that the weight matrix is updated correctly using the CD-k algorithm and returns the result in the required format."}
{"task_id": 509, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Chebyshev distance calculator function as per the given requirements:\n\n```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(distance, 4)\n\n# Example usage:\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\n### Explanation:\n1. **Input Conversion**: The function first converts the input vectors to NumPy arrays if they are not already. This ensures that we can leverage NumPy's efficient array operations.\n2. **Length Check**: It checks if the lengths of the two vectors are the same. If not, it returns `-1`.\n3. **Distance Calculation**: It calculates the Chebyshev distance by finding the maximum of the absolute differences between corresponding elements of the vectors.\n4. **Rounding**: The result is rounded to four decimal places using Python's built-in `round` function and returned as a standard Python float.\n\nThis implementation ensures that the function works correctly for both lists and NumPy arrays, and it handles the length check and rounding as specified."}
{"task_id": 510, "completion_id": 0, "completion": "Certainly! Below is the implementation of the VAE loss function for Bernoulli visible units, following the provided specifications:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Compute the total loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Compute the average loss over the batch\n    average_loss = total_loss / y.shape[0]\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(average_loss, 6)\n```\n\n### Explanation:\n1. **Clipping**: We clip `y_pred` to the interval `(\u03b5, 1-\u03b5)` to prevent numerical instability when computing the logarithm.\n2. **Reconstruction Loss**: This is computed using the binary cross-entropy formula.\n3. **KL Divergence**: This is computed using the analytical form for the KL divergence between a Gaussian distribution and a unit Gaussian.\n4. **Average Loss**: The total loss is divided by the batch size to get the average loss.\n5. **Rounding**: The final result is rounded to six decimal places as required.\n\nThis function should work correctly for a mini-batch of data, computing the VAE loss as specified."}
{"task_id": 513, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Factorization Machine (FM) regression prediction function using `numpy` for numerical computations. The function takes the feature matrix `X`, bias term `w0`, linear weights `w`, and latent factors `V` as inputs and returns the predicted values for all samples in `X`, rounded to 4 decimal places.\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Initialize predictions with the bias term\n    predictions = np.full(n_samples, w0)\n    \n    # Add the linear part of the prediction\n    predictions += X @ w\n    \n    # Add the interaction part of the prediction\n    # Sum of (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 for each latent factor f\n    sum_squared = (X @ V) ** 2\n    \n    # Sum of \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 for each latent factor f\n    squared_sum = (X ** 2) @ (V ** 2)\n    \n    # Interaction term: \u00bd \u03a3_{f=1}^{k} [ (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 \u2212 \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 ]\n    interaction_term = 0.5 * np.sum(sum_squared - squared_sum, axis=1)\n    \n    # Add the interaction term to the predictions\n    predictions += interaction_term\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6]]\n# w0 = 0.1\n# w = [0.2, 0.3, 0.4]\n# V = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]\n# print(fm_predict(X, w0, w, V))\n```\n\n### Explanation:\n1. **Conversion to Numpy Arrays**: The inputs `X`, `w`, and `V` are converted to `numpy` arrays to leverage efficient matrix operations.\n2. **Initialization**: The predictions are initialized with the bias term `w0`.\n3. **Linear Part**: The linear part of the prediction is computed using the dot product of `X` and `w`.\n4. **Interaction Part**:\n   - `sum_squared` computes the square of the sum of the interactions for each latent factor.\n   - `squared_sum` computes the sum of the squared interactions for each latent factor.\n   - The interaction term is then calculated as `0.5 * (sum_squared - squared_sum)`.\n5. **Final Predictions**: The interaction term is added to the linear part, and the result is rounded to 4 decimal places.\n6. **Return**: The predictions are returned as a list of floats.\n\nThis function should work efficiently for any well-formed input dimensions as specified in the task."}
{"task_id": 517, "completion_id": 0, "completion": "To implement the `sigmoid` function that meets all the specified requirements, we need to handle different types of inputs (scalars, lists, tuples, and NumPy arrays) and ensure numerical stability. Here's how we can achieve this:\n\n1. **Input Handling**: We need to determine the type of input and convert it to a NumPy array for uniform processing.\n2. **Numerical Stability**: To handle very large or small values of `z`, we can use the properties of the sigmoid function:\n   - For large positive `z`, `sigmoid(z)` approaches 1.\n   - For large negative `z`, `sigmoid(z)` approaches 0.\n3. **Element-wise Computation**: Use NumPy's vectorized operations to compute the sigmoid for each element.\n4. **Rounding**: Round the results to four decimal places.\n5. **Output Structure**: Convert the result back to the appropriate structure (scalar, list, or nested list).\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif not isinstance(z, np.ndarray):\n        raise ValueError(\"Input must be a scalar, list, tuple, or numpy.ndarray\")\n    \n    # Compute the sigmoid using a numerically stable approach\n    # For large positive z, use 1.0; for large negative z, use 0.0\n    sigmoid_values = np.where(z > 700, 1.0, 1.0 / (1.0 + np.exp(-z)))\n    sigmoid_values = np.where(z < -700, 0.0, sigmoid_values)\n    \n    # Round the results to four decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # Convert back to the appropriate output structure\n    if isinstance(z, np.ndarray) and z.size == 1:\n        return float(sigmoid_values[0])\n    else:\n        return sigmoid_values.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Should return [0.2689, 0.5, 0.7311]\n```\n\n### Explanation:\n- **Input Conversion**: We first check the type of `z` and convert it to a NumPy array. This allows us to use NumPy's efficient vectorized operations.\n- **Numerical Stability**: We use `np.where` to handle very large or small values of `z` directly, avoiding overflow issues.\n- **Rounding**: We use `np.round` to round the computed sigmoid values to four decimal places.\n- **Output Conversion**: If the input was a scalar, we return a float. Otherwise, we convert the NumPy array back to a list using `tolist()`.\n\nThis implementation ensures that the function works correctly for all specified input types and handles numerical stability effectively."}
{"task_id": 518, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `unhot` decorator that converts one-hot encoded NumPy arrays to 1-D class labels before calling the wrapped metric function.\n\n```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Check if actual is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if predicted is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\n### Explanation:\n1. **Decorator Definition**: The `unhot` function is defined to take a callable `function` as an argument and return a new callable `wrapper`.\n2. **Wrapper Function**: Inside the `unhot` function, the `wrapper` function is defined to handle the conversion of one-hot encoded arrays.\n3. **Conversion Logic**:\n   - For `actual` and `predicted`, the code checks if the array is 2-dimensional and if the second dimension is greater than 1.\n   - If both conditions are met, it converts the array to a 1-D array using `argmax(axis=1)`.\n4. **Function Call**: After the conversion, the original `function` is called with the processed `actual` and `predicted` arrays.\n5. **Return Value**: The result of the original function call is returned unmodified.\n\nThis decorator ensures that any metric function wrapped with `@unhot` will receive the labels in the expected 1-D format, simplifying the integration of one-hot encoded labels in machine learning workflows."}
{"task_id": 520, "completion_id": 0, "completion": "To implement the `sigmoid_grad` function as described, we need to handle different types of inputs: Python scalars, lists, and NumPy arrays. The function should compute the element-wise derivative of the sigmoid function given its output, round the results to four decimal places, and return a result with the same structure as the input.\n\nHere's the implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n    \n    if isinstance(z, (int, float)):\n        # If z is a scalar, return a float\n        return float(compute_gradient(z))\n    elif isinstance(z, list):\n        # If z is a list, recursively process each element\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        # If z is a NumPy array, compute the gradient and convert back to the same shape\n        return compute_gradient(z).tolist()\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray\")\n\n# Example usage:\n# print(sigmoid_grad(0.5))  # Should return 0.25\n# print(sigmoid_grad([0.5, 0.75]))  # Should return [0.25, 0.1875]\n# print(sigmoid_grad([[0.5, 0.75], [0.25, 0.1]]))  # Should return [[0.25, 0.1875], [0.1875, 0.09]]\n# print(sigmoid_grad(np.array([0.5, 0.75])))  # Should return [0.25, 0.1875]\n```\n\n### Explanation:\n1. **Function Definition**: The function `sigmoid_grad` is defined to take an input `z` which can be a scalar, list, or NumPy array.\n2. **Helper Function**: `compute_gradient` is a helper function that computes the gradient `x * (1 - x)` and rounds it to four decimal places using `np.round`.\n3. **Type Checking**:\n   - If `z` is a scalar (int or float), it computes the gradient and returns it as a float.\n   - If `z` is a list, it recursively processes each element of the list.\n   - If `z` is a NumPy array, it computes the gradient element-wise and converts the result back to a list to maintain the same structure.\n4. **Error Handling**: If the input is not one of the expected types, a `ValueError` is raised.\n\nThis implementation ensures that the function handles different input types correctly and returns the gradient with the required precision and structure."}
{"task_id": 528, "completion_id": 0, "completion": "To implement the `decision_boundary_grid` function, we need to follow these steps:\n\n1. **Determine the Range for the Grid**: We need to find the minimum and maximum values of the `x1` and `x2` coordinates from the dataset `X`. This will help us define the range for our grid.\n\n2. **Create Equally Spaced Arrays**: Using `numpy.linspace`, we can create two 1-D arrays `x1_plot` and `x2_plot` that span the range of `x1` and `x2` values, respectively, with `grid_n` points each.\n\n3. **Generate a Meshgrid**: Using `numpy.meshgrid`, we can create a grid of points from `x1_plot` and `x2_plot`. This will give us two 2-D arrays representing the `x1` and `x2` coordinates of each point in the grid.\n\n4. **Classify Each Grid Point**: For each point in the grid, we will compute the value of the linear function `w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b` and apply the `sign` function to determine the label (1 or -1).\n\n5. **Store the Labels**: We will store these labels in a 2-D Python list.\n\nHere is the complete implementation of the function:\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for the grid\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create equally spaced arrays\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Generate a meshgrid\n    X1, X2 = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the meshgrid for easier computation\n    X1_flat = X1.flatten()\n    X2_flat = X2.flatten()\n    \n    # Compute the linear function for each point in the grid\n    Z = W[0] * X1_flat + W[1] * X2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels_flat = np.where(Z >= 0, 1, -1)\n    \n    # Reshape the labels back to a 2-D list\n    labels = labels_flat.reshape((grid_n, grid_n)).tolist()\n    \n    return labels\n```\n\n### Explanation:\n- **Range Calculation**: We use `np.min` and `np.max` to find the minimum and maximum values of `x1` and `x2` from the dataset `X`.\n- **Meshgrid Creation**: `np.meshgrid` creates two 2-D arrays `X1` and `X2` that represent the grid points.\n- **Flattening**: We flatten `X1` and `X2` to make it easier to compute the linear function for each point.\n- **Linear Function and Sign**: We compute the linear function `w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b` for each point and use `np.where` to apply the `sign` function.\n- **Reshaping**: Finally, we reshape the labels back into a 2-D list with shape `grid_n \u00d7 grid_n`.\n\nThis function will generate the required grid of labels for the decision boundary visualization."}
{"task_id": 537, "completion_id": 0, "completion": "Certainly! Below is the implementation of a Gaussian Naive Bayes classifier from scratch in Python. This implementation follows the steps outlined in the task description.\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Step 1: Calculate class priors\n    n_samples = len(y_train)\n    class_0_count = np.sum(y_train == 0)\n    class_1_count = np.sum(y_train == 1)\n    prior_0 = class_0_count / n_samples\n    prior_1 = class_1_count / n_samples\n    \n    # Step 2: Calculate mean and standard deviation for each feature for both classes\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    \n    mean_0 = np.mean(X_train_0, axis=0)\n    mean_1 = np.mean(X_train_1, axis=0)\n    \n    std_0 = np.std(X_train_0, axis=0) + 1e-9  # Adding epsilon to avoid division by zero\n    std_1 = np.std(X_train_1, axis=0) + 1e-9  # Adding epsilon to avoid division by zero\n    \n    # Step 3: Predict the class for each test sample\n    predictions = []\n    for x in X_test:\n        # Calculate the log posterior for class 0\n        log_posterior_0 = np.log(prior_0)\n        log_posterior_0 += np.sum(np.log(1 / (np.sqrt(2 * np.pi) * std_0)))\n        log_posterior_0 += np.sum(-0.5 * ((x - mean_0) ** 2) / (std_0 ** 2))\n        \n        # Calculate the log posterior for class 1\n        log_posterior_1 = np.log(prior_1)\n        log_posterior_1 += np.sum(np.log(1 / (np.sqrt(2 * np.pi) * std_1)))\n        log_posterior_1 += np.sum(-0.5 * ((x - mean_1) ** 2) / (std_1 ** 2))\n        \n        # Predict the class with the higher log posterior\n        if log_posterior_0 > log_posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```\n\n### Explanation:\n1. **Class Priors**: We calculate the prior probabilities for each class as the relative frequency of each class in the training set.\n2. **Mean and Standard Deviation**: For each feature, we compute the mean and standard deviation for samples belonging to each class. We add a small constant `1e-9` to the standard deviations to prevent division by zero.\n3. **Log Posterior Calculation**: For each test sample, we compute the log of the posterior probability for each class using the Gaussian likelihood formula. We use the log to avoid numerical underflow issues.\n4. **Prediction**: We predict the class with the higher log posterior probability for each test sample.\n\nThis implementation should work correctly for binary classification tasks using the Gaussian Naive Bayes model."}
{"task_id": 539, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `compute_cost` function that calculates the binary cross-entropy cost as described:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A numpy array of shape (1, m) or (m,) containing the predicted probabilities.\n    Y (np.ndarray): A numpy array of shape (1, m) or (m,) containing the true labels (0 or 1).\n\n    Returns:\n    float: The binary cross-entropy cost rounded to 4 decimal places.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip AL to avoid numerical overflow\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    # Return the cost as a plain Python float rounded to 4 decimal places\n    return float(round(cost, 4))\n\n# Example usage:\n# AL = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(AL, Y))  # Output should be a float rounded to 4 decimal places\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if `AL` and `Y` have the same shape using an assertion.\n2. **Number of Training Examples**: It calculates the number of training examples `m` from the shape of `AL`.\n3. **Clipping**: The predicted probabilities `AL` are clipped to the range `[1e-15, 1 - 1e-15]` to prevent numerical instability when taking the logarithm.\n4. **Cost Calculation**: The binary cross-entropy cost is computed using the formula provided.\n5. **Return Value**: The cost is returned as a plain Python float, rounded to 4 decimal places for the final output.\n\nThis function should work correctly for any valid input arrays `AL` and `Y` of the same shape."}
{"task_id": 552, "completion_id": 0, "completion": "To solve this problem, we need to implement the forward-backward algorithm for a Hidden Markov Model (HMM). The forward-backward algorithm is used to compute the posterior probabilities of the hidden states given the observation sequence. Here's how we can break down the task:\n\n1. **Forward Probabilities (\u03b1):** These are the probabilities of the partial observation sequence up to time `t` and being in state `i` at time `t`.\n2. **Backward Probabilities (\u03b2):** These are the probabilities of the remaining observation sequence from time `t+1` given that we are in state `i` at time `t`.\n3. **Posterior Probabilities (\u03b3):** These are computed using the forward and backward probabilities as:\n   \\[\n   \\gamma_t(i) = \\frac{\\alpha_t(i) \\beta_t(i)}{\\sum_j \\alpha_t(j) \\beta_t(j)}\n   \\]\n\nLet's implement the function `gamma_probabilities`:\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Extract HMM parameters\n    pi = np.array(hmm['pi'])  # Initial state distribution\n    A = np.array(hmm['A'])    # Transition matrix\n    B = np.array(hmm['B'])    # Emission matrix\n    \n    # Number of states\n    N = len(pi)\n    \n    # Length of the observation sequence\n    T = len(observations)\n    \n    # Check if t is within the valid range\n    if t < 0 or t >= T:\n        return []\n    \n    # Initialize forward probabilities\n    alpha = np.zeros((T, N))\n    \n    # Base case for forward probabilities\n    alpha[0] = pi * B[:, observations[0]]\n    \n    # Compute forward probabilities\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n    \n    # Initialize backward probabilities\n    beta = np.zeros((T, N))\n    \n    # Base case for backward probabilities\n    beta[T-1] = np.ones(N)\n    \n    # Compute backward probabilities\n    for i in range(T-2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n    \n    # Compute the posterior probabilities gamma_t\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    \n    # Round to four decimal places\n    gamma_t = np.round(gamma_t, 4)\n    \n    return gamma_t.tolist()\n\n# Example usage:\n# hmm = {\n#     'pi': [0.6, 0.4],\n#     'A': [[0.7, 0.3], [0.4, 0.6]],\n#     'B': [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\n# }\n# observations = [0, 1, 2]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))\n```\n\n### Explanation:\n1. **Initialization:**\n   - We extract the initial state distribution `pi`, transition matrix `A`, and emission matrix `B` from the `hmm` dictionary.\n   - We determine the number of states `N` and the length of the observation sequence `T`.\n\n2. **Forward Probabilities:**\n   - We initialize the forward probabilities `alpha` with zeros.\n   - The base case for `alpha` is computed using the initial state distribution and the emission probability of the first observation.\n   - We iteratively compute the forward probabilities for each time step using the recurrence relation:\n     \\[\n     \\alpha_t(i) = \\left(\\sum_{j=1}^N \\alpha_{t-1}(j) A_{ji}\\right) B_{i, O_t}\n     \\]\n\n3. **Backward Probabilities:**\n   - We initialize the backward probabilities `beta` with zeros.\n   - The base case for `beta` is set to ones for the last time step.\n   - We iteratively compute the backward probabilities for each time step using the recurrence relation:\n     \\[\n     \\beta_t(i) = \\sum_{j=1}^N A_{ij} B_{j, O_{t+1}} \\beta_{t+1}(j)\n     \\]\n\n4. **Posterior Probabilities:**\n   - We compute the posterior probabilities `gamma_t` using the forward and backward probabilities.\n   - We normalize `gamma_t` to ensure it sums to 1.\n   - We round each component of `gamma_t` to four decimal places and return it as a list.\n\nThis implementation should correctly compute the posterior probabilities for the given HMM, observation sequence, and time step `t`."}
{"task_id": 555, "completion_id": 0, "completion": "Certainly! Below is the implementation of the DBSCAN algorithm from scratch in Python. The code follows the steps outlined in your task description.\n\n```python\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise (-1)\n    \n    # Compute pairwise Euclidean distances\n    distances = cdist(data, data, metric='euclidean')\n    \n    # Build the neighborhood list for each sample\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n    \n    # Identify core points\n    core_points = [i for i, neighborhood in enumerate(neighborhoods) if len(neighborhood) >= min_samples]\n    \n    cluster_id = 0\n    \n    for point in core_points:\n        if labels[point] != -1:  # If already labeled, skip\n            continue\n        \n        cluster_id += 1\n        labels[point] = cluster_id\n        queue = deque([point])\n        \n        while queue:\n            current_point = queue.popleft()\n            current_neighborhood = neighborhoods[current_point]\n            \n            for neighbor in current_neighborhood:\n                if labels[neighbor] == -1:  # Label noise points as part of the cluster\n                    labels[neighbor] = cluster_id\n                \n                if labels[neighbor] != -1:  # Skip if already labeled\n                    continue\n                \n                if len(neighborhoods[neighbor]) >= min_samples:  # If it's a core point\n                    queue.append(neighbor)\n                    labels[neighbor] = cluster_id\n    \n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# eps = 3\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\n### Explanation:\n1. **Distance Calculation**: We use `scipy.spatial.distance.cdist` to compute the pairwise Euclidean distances between all points.\n2. **Neighborhood List**: For each point, we determine its neighborhood by finding all points within the \\(\\varepsilon\\)-radius.\n3. **Core Points Identification**: A point is considered a core point if its neighborhood contains at least `min_samples` points.\n4. **Cluster Expansion**: We use a breadth-first search (BFS) approach starting from each unlabeled core point to expand the cluster. Points are labeled with the current cluster ID, and core points are added to the queue to continue expanding the cluster.\n5. **Noise Points**: Any point that remains unlabeled after the process is considered noise and is labeled as -1.\n\nThis implementation should correctly label points according to the DBSCAN algorithm as described."}
{"task_id": 561, "completion_id": 0, "completion": "To implement the Gaussian Mixture Model (GMM) using the Expectation-Maximization (EM) algorithm, we need to follow these steps:\n\n1. **Initialization**: Randomly initialize the parameters of the Gaussian components, including the mixture weights, means, and covariance matrices.\n2. **Expectation (E) Step**: Compute the responsibilities, which are the posterior probabilities of each sample belonging to each Gaussian component.\n3. **Maximization (M) Step**: Update the parameters (weights, means, and covariances) based on the responsibilities.\n4. **Convergence Check**: Check if the change in mixture weights is smaller than the prescribed tolerance or if the maximum number of iterations is reached.\n5. **Label Assignment**: Assign each sample to the component with the highest responsibility.\n6. **Deterministic Output**: Sort the components by the first coordinate of their mean and re-label the cluster indices accordingly.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, a 2-D array of shape (N, D) containing N samples with D features.\n    - k: int, the number of Gaussian components.\n    - max_iter: int, the maximum number of iterations for the EM algorithm.\n    - epsilon: float, the tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - list[int], a list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    if k == 1:\n        return [0] * N\n    \n    # Step 1: Initialization\n    np.random.seed(0)  # For deterministic results\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.eye(D) for _ in range(k)]\n    \n    for _ in range(max_iter):\n        # Step 2: E-step - Compute responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            diff = data - means[i]\n            exp_term = np.exp(-0.5 * np.sum(diff @ np.linalg.inv(covariances[i]) * diff, axis=1))\n            responsibilities[:, i] = weights[i] * exp_term / np.sqrt((2 * np.pi) ** D * np.linalg.det(covariances[i]))\n        \n        # Normalize responsibilities\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # Step 3: M-step - Update parameters\n        new_weights = responsibilities.mean(axis=0)\n        new_means = (responsibilities.T @ data) / responsibilities.sum(axis=0, keepdims=True).T\n        new_covariances = []\n        for i in range(k):\n            diff = data - new_means[i]\n            weighted_diff = responsibilities[:, i, np.newaxis] * diff\n            new_covariances.append((weighted_diff.T @ diff) / responsibilities[:, i].sum())\n        \n        # Check for convergence\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n        \n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n    \n    # Step 4: Assign labels\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 5: Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    \n    return labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(gmm_em(data, k))\n```\n\n### Explanation:\n- **Initialization**: We initialize the mixture weights to be equal, the means to be random samples from the data, and the covariances to be identity matrices.\n- **E-step**: We compute the responsibilities using the current parameters.\n- **M-step**: We update the parameters using the responsibilities.\n- **Convergence Check**: We check if the change in weights is smaller than the tolerance.\n- **Label Assignment**: We assign each sample to the component with the highest responsibility.\n- **Deterministic Output**: We sort the components by the first coordinate of their mean and re-label the cluster indices accordingly.\n\nThis implementation ensures that the output is deterministic for identical inputs by setting a random seed and sorting the components by their means."}
{"task_id": 562, "completion_id": 0, "completion": "To implement the Spectral Clustering algorithm as described, we need to follow the steps outlined in the task. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    N = data.shape[0]\n    \n    # Step 1: Build the similarity graph using the Gaussian kernel\n    pairwise_squared_distances = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    \n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    \n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        # Row-normalize the eigenvector matrix\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n    \n    # Step 4: Run k-means in the eigenvector space\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            # Assign labels\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            new_labels = np.argmin(distances, axis=1)\n            if np.array_equal(labels, new_labels):\n                break\n            labels = new_labels\n            # Update centroids\n            for i in range(k):\n                centroids[i] = np.mean(X[labels == i], axis=0)\n        return labels\n    \n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(U, n_cluster, initial_centroids)\n    \n    # Step 5: Relabel clusters\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    \n    return labels\n```\n\n### Explanation:\n1. **Similarity Graph Construction**: We compute the pairwise squared distances and apply the Gaussian kernel to get the similarity matrix `W`.\n2. **Laplacian Construction**: We compute the degree matrix `D` and then the Laplacian `L`. If the method is 'normalized', we compute the symmetric normalized Laplacian.\n3. **Eigenvector Computation**: We compute the eigenvectors corresponding to the smallest eigenvalues of the Laplacian. If the method is 'normalized', we row-normalize the eigenvector matrix.\n4. **K-means Clustering**: We perform k-means clustering in the space of the top `n_cluster` eigenvectors. We use the first `n_cluster` samples as initial centroids.\n5. **Label Relabeling**: We relabel the clusters so that the cluster containing the smallest original index gets label 0, the next one 1, etc.\n\nThis implementation should meet the requirements and constraints specified in the task."}
{"task_id": 563, "completion_id": 0, "completion": "Certainly! Below is the implementation of the dual-form Perceptron learning algorithm as described in the task:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round every component of w and b to 4 decimal places\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\n### Explanation:\n1. **Initialization**:\n   - `alpha` is initialized to a zero array of size `N` (number of samples).\n   - `b` (bias) is initialized to `0.0`.\n\n2. **Gram Matrix**:\n   - The Gram matrix `G` is computed as the dot product of `X_data` with its transpose. This matrix contains the inner products of all pairs of samples.\n\n3. **Training Loop**:\n   - The algorithm iterates up to `max_iter` times.\n   - For each sample `i`, it computes `g` as the weighted sum of the inner products involving the current sample.\n   - If the condition `y_data[i] * (g + b) <= 0` is met, it updates `alpha[i]` and `b` by adding `eta * y_data[i]` to them.\n   - If no updates are made during a complete pass over the data, the loop breaks early.\n\n4. **Weight Vector Recovery**:\n   - After the training loop, the weight vector `w` is recovered using the formula `w = \u03a3\u1d62 \u03b1\u1d62 y\u1d62 x\u1d62`.\n\n5. **Rounding**:\n   - Both the weight vector `w` and the bias `b` are rounded to 4 decimal places before being returned.\n\nThis implementation ensures that the dual-form Perceptron algorithm is followed exactly as specified in the task description."}
{"task_id": 564, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `predict_sample` function that traverses a decision tree based on the given rules for both classification and regression tasks.\n\n```python\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:  # Traverse until we reach a leaf node\n        if task_type == 'classification':\n            # Inspect the feature with index `node.label`\n            feature_value = features[current_node.label]\n            # Find the child whose `x` attribute matches the feature value\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                # If no child matches, default to the second child\n                current_node = current_node.child[1]\n        \n        elif task_type == 'regression':\n            # Inspect the feature with index `node.label`\n            feature_value = features[current_node.label]\n            # Compare the feature value with the split-point `s`\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    # Return the value stored in the leaf node\n    return current_node.y\n```\n\n### Explanation:\n- **Classification Tree (`task_type == 'classification'`)**:\n  - Traverse the tree by inspecting the feature at the index specified by `node.label`.\n  - Look for a child node whose `x` attribute matches the feature value.\n  - If no matching child is found, default to the second child (`node.child[1]`).\n  - Continue this process until a leaf node (where `node.y` is not `None`) is reached.\n\n- **Regression Tree (`task_type == 'regression'`)**:\n  - Traverse the tree by inspecting the feature at the index specified by `node.label`.\n  - Compare the feature value with the split-point `node.s`.\n  - If the feature value is less than or equal to `node.s`, move to the first child (`node.child[0]`); otherwise, move to the second child (`node.child[1]`).\n  - Continue this process until a leaf node (where `node.y` is not `None`) is reached.\n\nThis function ensures that the tree is traversed according to the specified rules and returns the value stored in the appropriate leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "To implement the `choose_best_feature` function for the ID3 algorithm, we need to calculate the information gain for each feature and select the one with the highest gain. Here's a step-by-step breakdown of the process:\n\n1. **Calculate Entropy (H(y))**: This is the entropy of the target variable `y` before any split.\n2. **Calculate Conditional Entropy (H(y|A))**: This is the entropy of `y` after splitting the dataset by each feature `A`.\n3. **Compute Information Gain (IG(A))**: For each feature, compute the information gain using the formula `IG(A) = H(y) - H(y|A)`.\n4. **Select the Best Feature**: Choose the feature with the highest information gain. If there is a tie, select the feature with the smallest index.\n\nHere's the implementation of the function:\n\n```python\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels):\n        \"\"\"Calculate the entropy of a list of labels.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-9))\n    \n    n_samples, n_features = X.shape\n    total_entropy = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        weighted_entropy = 0.0\n        \n        for value in unique_values:\n            subset_indices = feature_values == value\n            subset_labels = y[subset_indices]\n            subset_entropy = entropy(subset_labels)\n            weighted_entropy += (len(subset_labels) / n_samples) * subset_entropy\n        \n        information_gain = total_entropy - weighted_entropy\n        \n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage:\n# X = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\n# y = np.array([0, 1, 1, 0])\n# print(choose_best_feature(X, y))  # Output should be (0, 1.0)\n```\n\n### Explanation:\n- **Entropy Calculation**: The `entropy` function calculates the entropy of a given set of labels. It uses `np.bincount` to count occurrences of each label and then computes the probabilities.\n- **Information Gain Calculation**: For each feature, we calculate the weighted entropy of the subsets created by splitting on that feature. The information gain is then the difference between the total entropy and this weighted entropy.\n- **Selection of Best Feature**: We keep track of the maximum information gain and the corresponding feature index. If a feature has a higher information gain than the current maximum, we update our best feature.\n\nThis function will correctly identify the feature that provides the maximum information gain, rounded to six decimal places, and handle ties by selecting the smallest index."}
{"task_id": 566, "completion_id": 0, "completion": "To implement the mini Isolation Forest for outlier detection as specified, we need to follow these steps:\n\n1. **Randomly Sample Data**: For each tree, randomly sample a subset of the data.\n2. **Build Isolation Trees**: Recursively split the data based on random features and thresholds.\n3. **Compute Path Lengths**: For each observation, compute the path length in each tree.\n4. **Calculate Anomaly Scores**: Use the average path length to compute the anomaly score for each observation.\n5. **Identify Outliers**: Determine which observations are considered outliers based on the anomaly scores.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    n_samples, n_features = data.shape\n    \n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def build_tree(subsample):\n        if len(subsample) <= 1 or len(subsample) == sample_size:\n            return None, subsample\n        \n        feature_idx = np.random.randint(n_features)\n        feature_min, feature_max = np.min(subsample[:, feature_idx]), np.max(subsample[:, feature_idx])\n        \n        if feature_min == feature_max:\n            return None, subsample\n        \n        threshold = np.random.uniform(feature_min, feature_max)\n        \n        left_subsample = subsample[subsample[:, feature_idx] < threshold]\n        right_subsample = subsample[subsample[:, feature_idx] >= threshold]\n        \n        left_tree, left_indices = build_tree(left_subsample)\n        right_tree, right_indices = build_tree(right_subsample)\n        \n        return (feature_idx, threshold, left_tree, right_tree), np.concatenate((left_indices, right_indices))\n    \n    def path_length(x, tree, current_height=0):\n        if tree is None:\n            return current_height + c(len(x))\n        \n        feature_idx, threshold, left_tree, right_tree = tree\n        \n        if x[feature_idx] < threshold:\n            return path_length(x, left_tree, current_height + 1)\n        else:\n            return path_length(x, right_tree, current_height + 1)\n    \n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            subsample_indices = np.random.choice(n_samples, sample_size, replace=False)\n            subsample = data[subsample_indices]\n        \n        tree, _ = build_tree(subsample)\n        trees.append(tree)\n    \n    path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        for tree in trees:\n            path_lengths[i] += path_length(data[i], tree)\n    \n    mean_path_length = path_lengths / n_trees\n    \n    phi = 2 * np.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n    anomaly_scores = 2 ** (-mean_path_length / phi)\n    \n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = np.where(anomaly_scores >= threshold)[0]\n    \n    return sorted(outliers)\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [3, 4], [10, 10], [11, 11]])\n# outliers = detect_outliers(data, n_trees=10, sample_size=5, epsilon=0.1)\n# print(outliers)  # Output might be [3, 4] depending on the random seed and parameters\n```\n\n### Explanation:\n1. **Random Sampling**: For each tree, we randomly sample `sample_size` observations from the dataset.\n2. **Tree Construction**: We recursively split the data by choosing a random feature and a random threshold within the range of that feature's values.\n3. **Path Length Calculation**: For each observation, we calculate the path length in each tree. If we reach a leaf node with `n` samples, we adjust the path length by `c(n)`.\n4. **Anomaly Score Calculation**: We compute the average path length for each observation and convert it to an anomaly score using the formula provided.\n5. **Outlier Detection**: We determine the threshold for outlier scores based on the `epsilon` parameter and return the indices of observations with scores above this threshold.\n\nThis implementation ensures that the randomness is controlled by setting the seed, making the results reproducible."}
{"task_id": 568, "completion_id": 0, "completion": "To implement the Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow these steps:\n\n1. **Build the empirical distributions**: We need to calculate the empirical distribution of the features given the labels and the empirical distribution of the labels.\n2. **Initialize the weights**: Start with an initial weight vector.\n3. **Iteratively update the weights**: Use the GIS algorithm to update the weights until convergence or until the maximum number of iterations is reached.\n4. **Predict the labels for the test set**: Use the learned weights to predict the labels for the test set.\n\nHere's the complete implementation:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build the empirical distributions\n    n_samples, n_features = X_train.shape\n    labels = set(y_train)\n    n_labels = len(labels)\n    \n    # Empirical distribution of labels P(y)\n    P_y = defaultdict(float)\n    for y in y_train:\n        P_y[y] += 1\n    for y in P_y:\n        P_y[y] /= n_samples\n    \n    # Empirical distribution of features given labels P(x_i | y)\n    P_x_given_y = defaultdict(lambda: defaultdict(float))\n    for x, y in zip(X_train, y_train):\n        for i, feature_value in enumerate(x):\n            P_x_given_y[(i, feature_value, y)] += 1\n    for (i, feature_value, y) in P_x_given_y:\n        P_x_given_y[(i, feature_value, y)] /= P_y[y]\n    \n    # Step 2: Initialize the weights\n    weights = defaultdict(float)\n    \n    # Step 3: Iteratively update the weights using GIS\n    for iteration in range(n_iter):\n        # Calculate the expected counts E[f_j(x, y)]\n        E_f = defaultdict(float)\n        for x, y in zip(X_train, y_train):\n            Z_x = sum(math.exp(sum(weights[(i, feature_value, y)] for i, feature_value in enumerate(x))) for y in labels)\n            for i, feature_value in enumerate(x):\n                E_f[(i, feature_value, y)] += math.exp(sum(weights[(i, feature_value, y)] for i, feature_value in enumerate(x))) / Z_x\n        \n        # Calculate the observed counts O[f_j(x, y)]\n        O_f = defaultdict(float)\n        for x, y in zip(X_train, y_train):\n            for i, feature_value in enumerate(x):\n                O_f[(i, feature_value, y)] += 1\n        \n        # Update the weights\n        max_update = 0\n        for (i, feature_value, y) in weights:\n            update = math.log(O_f[(i, feature_value, y)] / E_f[(i, feature_value, y)]) if E_f[(i, feature_value, y)] > 0 else 0\n            weights[(i, feature_value, y)] += update\n            max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 4: Predict the labels for the test set\n    predictions = []\n    for x in X_test:\n        max_prob = -float('inf')\n        predicted_label = None\n        for y in labels:\n            log_prob = sum(weights[(i, feature_value, y)] for i, feature_value in enumerate(x))\n            if log_prob > max_prob:\n                max_prob = log_prob\n                predicted_label = y\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\n### Explanation:\n1. **Empirical Distributions**:\n   - `P_y`: The empirical distribution of the labels.\n   - `P_x_given_y`: The empirical distribution of features given labels.\n\n2. **Weight Initialization**:\n   - We initialize the weights to zero.\n\n3. **GIS Algorithm**:\n   - We calculate the expected counts `E_f` and observed counts `O_f` for each feature-label pair.\n   - We update the weights using the formula: `weights[(i, feature_value, y)] += log(O_f / E_f)`.\n   - We check for convergence by monitoring the maximum absolute update.\n\n4. **Prediction**:\n   - For each test sample, we compute the log-probability for each label and choose the label with the highest probability.\n\nThis implementation should meet the requirements and constraints provided."}
{"task_id": 569, "completion_id": 0, "completion": "To implement the `statistic_key_word` function, we need to follow these steps:\n\n1. **Count Document Frequency**: For each word, count the number of documents in which it appears.\n2. **Calculate Document-Frequency Ratio**: Divide the count of each word by the total number of documents to get the document-frequency ratio.\n3. **Sort Words by Document-Frequency Ratio**: Sort the words based on their document-frequency ratio in descending order.\n4. **Round Ratios**: Round each document-frequency ratio to 4 decimal places.\n5. **Create the Set of Most Common Words**: Based on the `cut_off` parameter, create a set of the most common words.\n\nHere's the implementation of the function:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return [], set()\n    \n    total_documents = len(data)\n    word_doc_count = Counter()\n    \n    # Count the number of documents each word appears in\n    for _, words in data:\n        unique_words = set(words)\n        word_doc_count.update(unique_words)\n    \n    # Calculate document-frequency ratio and round it to 4 decimal places\n    word_freq_ratios = [(word, round(count / total_documents, 4)) for word, count in word_doc_count.items()]\n    \n    # Sort words by document-frequency ratio in descending order\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the set of most common words based on cut_off\n    if cut_off is None:\n        most_common_words = set(word for word, _ in word_freq_ratios)\n    else:\n        most_common_words = set(word for word, _ in word_freq_ratios[:cut_off])\n    \n    return word_freq_ratios, most_common_words\n\n# Example usage:\n# documents = [\n#     (1, [\"apple\", \"banana\", \"apple\"]),\n#     (2, [\"banana\", \"orange\"]),\n#     (3, [\"apple\", \"orange\", \"banana\", \"grape\"])\n# ]\n# print(statistic_key_word(documents, cut_off=2))\n```\n\n### Explanation:\n- **Counting Document Frequency**: We use a `Counter` to count how many documents each word appears in. We convert the `words` iterable to a set to ensure each word is counted only once per document.\n- **Calculating Ratios**: We calculate the document-frequency ratio by dividing the count of each word by the total number of documents and round it to 4 decimal places.\n- **Sorting**: We sort the list of words by their document-frequency ratio in descending order.\n- **Creating the Set**: Depending on the `cut_off` value, we create a set of the most common words. If `cut_off` is `None`, we include all words in the set.\n\nThis function should meet the requirements specified in the task description."}
{"task_id": 571, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `compute_svm_parameters` function that computes the weight vector \\( \\mathbf{w} \\) and the bias term \\( b \\) using the given formulas. The function ensures that the weight vector is returned as a one-dimensional Python list, even if \\( X \\) contains only one feature. All values are rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    \n    # Convert the weight vector to a list\n    w_list = w_rounded.tolist()\n    \n    return w_list, b_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y = np.array([1, 1, 1, -1, -1])\n# alpha = np.array([0.0, 0.0, 0.5, 0.5, 0.0])\n# w, b = compute_svm_parameters(X, y, alpha)\n# print(\"Weight vector w:\", w)\n# print(\"Bias term b:\", b)\n```\n\n### Explanation:\n1. **Weight Vector Calculation**:\n   - The weight vector \\( \\mathbf{w} \\) is computed using the formula \\( \\mathbf{w} = \\sum_{i=1}^{n} \\alpha_i y_i \\mathbf{x}_i \\).\n   - This is achieved by multiplying the Lagrange multipliers \\( \\alpha \\) with the corresponding labels \\( y \\) and training samples \\( X \\), and then summing over all samples.\n\n2. **Bias Term Calculation**:\n   - The bias term \\( b \\) is computed using the formula \\( b = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\mathbf{w}^\\top \\mathbf{x}_i) \\).\n   - This involves computing the dot product of \\( \\mathbf{w} \\) with each sample \\( \\mathbf{x}_i \\), subtracting it from the corresponding label \\( y_i \\), and then taking the mean of these differences.\n\n3. **Rounding**:\n   - Both the weight vector \\( \\mathbf{w} \\) and the bias term \\( b \\) are rounded to four decimal places using `np.round`.\n\n4. **Conversion to List**:\n   - The weight vector \\( \\mathbf{w} \\) is converted to a Python list using `tolist()` to meet the output requirements.\n\nThis function should work correctly for any valid input matrices \\( X \\), label vectors \\( y \\), and Lagrange multiplier vectors \\( \\alpha \\)."}
{"task_id": 572, "completion_id": 0, "completion": "To implement the Local Outlier Factor (LOF) algorithm from scratch, we need to follow the steps outlined in the task description. Here's the complete implementation:\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n = len(data)\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    \n    # Step 2: For every sample p, obtain its k-distance and the index list of those k nearest neighbours N_k(p)\n    k_distances = np.zeros(n)\n    k_neighbors = [None] * n\n    \n    for i in range(n):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_distances[i] = distances[sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[1:k+1]  # Exclude the point itself\n    \n    # Step 3: Define the reachability distance between two points\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: Compute the Local Reachability Density (LRD) of p\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = 0\n        for neighbor in k_neighbors[i]:\n            sum_reach_dist += reachability_distance(i, neighbor)\n        lrd[i] = k / sum_reach_dist\n    \n    # Step 5: Compute the Local Outlier Factor (LOF) for each sample\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd_neighbors = 0\n        for neighbor in k_neighbors[i]:\n            sum_lrd_neighbors += lrd[neighbor]\n        lof_scores[i] = (sum_lrd_neighbors / k) / lrd[i]\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores = np.round(lof_scores, 4)\n    \n    # Find indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n    outlier_indices = sorted(outlier_indices)\n    \n    return list(lof_scores), outlier_indices\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# epsilon = 1.5\n# print(local_outlier_factor(data, k, epsilon))\n```\n\n### Explanation:\n1. **Distance Matrix**: We compute the Euclidean distance between every pair of points and store it in a matrix.\n2. **k-Distance and Neighbors**: For each point, we find its k-th nearest neighbor and the indices of its k nearest neighbors.\n3. **Reachability Distance**: This is defined as the maximum of the k-distance of the neighbor and the actual distance between the points.\n4. **Local Reachability Density (LRD)**: This is calculated as the inverse of the average reachability distance of the point's k-neighbors.\n5. **Local Outlier Factor (LOF)**: This is the average of the LRD of the point's k-neighbors divided by the point's own LRD.\n6. **Outlier Detection**: We identify points with LOF scores greater than a given threshold `epsilon`.\n\nThis implementation should meet the constraints and provide the desired output."}
{"task_id": 574, "completion_id": 0, "completion": "Certainly! Below is the implementation of the `generate_data` function that meets the specified requirements:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    \n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c)\n        y_train.append(y_train_labels)\n        \n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c)\n        y_val.append(y_val_labels)\n    \n    X_train = np.round(np.concatenate(X_train), 4)\n    y_train = np.concatenate(y_train)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_val = np.concatenate(y_val)\n    \n    return X_train, X_val, y_train, y_val\n\n# Example usage:\n# X_train, X_val, y_train, y_val = generate_data(m=3, n_train=5, n_val=3, seed=42)\n# print(X_train)\n# print(y_train)\n# print(X_val)\n# print(y_val)\n```\n\n### Explanation:\n1. **Seeding**: If a seed is provided, both `random.seed(seed)` and `np.random.seed(seed)` are called to ensure reproducibility.\n2. **Loop through Classes**: For each class `c` from `0` to `m-1`:\n   - Calculate the `base` value as `10 * (c // 2)`.\n   - Generate `n_train` and `n_val` points for the training and validation sets respectively, using `np.random.uniform` to sample from the specified range.\n   - Stack the `x` and `y` coordinates to form the points.\n   - Create labels for the points.\n3. **Concatenation and Rounding**: Concatenate all points and labels for training and validation sets, and round the coordinates to 4 decimal places.\n4. **Return**: Return the concatenated and rounded arrays as a tuple.\n\nThis function ensures that the generated data is consistent and reproducible when a seed is provided."}
{"task_id": 579, "completion_id": 0, "completion": "Certainly! Below is the implementation of the K-Means clustering algorithm following the specified requirements:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialization\n    centres = X[:k].copy()\n    \n    m, d = X.shape\n    labels = [-1] * m  # Initialize labels with -1\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        new_labels = [-1] * m\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            new_labels[i] = np.argmin(distances)\n        \n        # Check for convergence\n        if new_labels == labels:\n            break\n        \n        labels = new_labels\n        \n        # Step 3: Update step\n        new_centres = np.zeros((k, d))\n        counts = np.zeros(k, dtype=int)\n        \n        for i in range(m):\n            new_centres[labels[i]] += X[i]\n            counts[labels[i]] += 1\n        \n        for j in range(k):\n            if counts[j] > 0:\n                new_centres[j] /= counts[j]\n            else:\n                new_centres[j] = centres[j]  # Keep the centre unchanged if no points are assigned\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    \n    return labels, centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# labels, centres = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\n### Explanation:\n1. **Initialization**: The first `k` points from the dataset `X` are chosen as the initial cluster centers.\n2. **Assignment Step**: For each point in the dataset, the Euclidean distance to each center is computed, and the point is assigned to the nearest center. In case of a tie, the center with the smaller index is chosen.\n3. **Update Step**: The centers are recalculated as the mean of all points assigned to each center. If a center loses all its points, it remains unchanged.\n4. **Convergence Check**: The algorithm stops if the assignments do not change between iterations or if the maximum number of iterations (`max_iters`) is reached.\n5. **Rounding**: The final centers are rounded to 4 decimal places for consistency.\n\nThis implementation ensures that the results are deterministic and easily comparable."}
{"task_id": 581, "completion_id": 0, "completion": "Certainly! Below is the implementation of the Elastic-Net regularized linear regression using batch gradient descent in Python. The function `elastic_net_regression` takes the input features `X`, target values `y`, learning rate, number of iterations, and the L1 and L2 penalties as arguments, and returns the learned weights and bias rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number in the tuple is rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    \n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n    \n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        \n        # Compute gradients\n        gradient_weights = -2 * np.dot(X.T, residuals) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals) / m\n        \n        # Update weights and bias\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    \n    return [round(w, 4) for w in weights], round(bias, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([7, 8, 9])\n# learning_rate = 0.01\n# iterations = 1000\n# l1_penalty = 0.1\n# l2_penalty = 0.1\n# weights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\n# print(weights, bias)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the weights to a zero vector of length `n` (number of features) and the bias to `0.0`.\n2. **Early Exit**: If the learning rate is `0` or the number of iterations is `0`, we return the initial parameters.\n3. **Gradient Descent Loop**:\n   - **Predictions**: Compute the predictions using the current weights and bias.\n   - **Residuals**: Calculate the residuals (difference between actual and predicted values).\n   - **Gradients**: Compute the gradients for the weights and bias using the given formulas.\n   - **Updates**: Update the weights and bias using the computed gradients and the learning rate.\n4. **Rounding**: After all iterations, round the weights and bias to four decimal places before returning them.\n\nThis implementation ensures that the Elastic-Net regression is performed correctly using batch gradient descent, and the results are rounded as required."}
{"task_id": 591, "completion_id": 0, "completion": "To solve this problem, we need to perform a forward pass through a fully-connected feed-forward neural network using the given weights and an input vector `x`. The network uses ReLU activation for all hidden layers and a linear (identity) activation for the output layer. Here's how we can implement this:\n\n1. **Add the bias term**: For each layer, we need to add a bias term (which is 1) to the input vector.\n2. **Dot product**: Compute the dot product of the input vector (including the bias term) with the weight matrix of the current layer.\n3. **Activation function**: Apply the ReLU activation function to the result for all hidden layers. For the output layer, use a linear activation (which means no change).\n4. **Repeat**: Continue this process for all layers until the output layer is reached.\n5. **Round the result**: Finally, round the output to four decimal places.\n\nHere's the implementation of the `neural_net_predict` function:\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    x = np.array(x)\n    \n    # Iterate over each layer\n    for L, weight_matrix in enumerate(weights):\n        # Add bias term (1) to the input\n        x = np.insert(x, 0, 1)\n        \n        # Convert weight matrix to a numpy array\n        weight_matrix = np.array(weight_matrix)\n        \n        # Compute the dot product\n        x = np.dot(weight_matrix, x)\n        \n        # Apply ReLU activation for all layers except the last one\n        if L < len(weights) - 1:\n            x = np.maximum(0, x)\n    \n    # Round the final output to four decimal places\n    if len(x) == 1:\n        return round(x[0], 4)\n    else:\n        return [round(val, 4) for val in x]\n\n# Example usage:\n# weights = [\n#     [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],  # Layer 0\n#     [[0.7, 0.8, 0.9]]                    # Layer 1\n# ]\n# x = [1.0, 2.0]\n# print(neural_net_predict(weights, x))\n```\n\n### Explanation:\n- **Bias Term**: We add a bias term (1) to the input vector `x` using `np.insert(x, 0, 1)`.\n- **Dot Product**: We compute the dot product of the input vector (including the bias term) with the weight matrix of the current layer using `np.dot(weight_matrix, x)`.\n- **ReLU Activation**: For all hidden layers (except the last one), we apply the ReLU activation function using `np.maximum(0, x)`.\n- **Output**: After processing all layers, we round the final output to four decimal places. If the output layer has only one neuron, we return a single float; otherwise, we return a list of floats.\n\nThis implementation ensures that we correctly perform a forward pass through the network and handle the output as specified."}
{"task_id": 595, "completion_id": 0, "completion": "Certainly! Below is the implementation of the K-Means clustering algorithm from scratch, following the specified requirements:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples in X\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2.1: Assign every sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2.2: Update each centroid to the arithmetic mean of the samples assigned to it\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 3: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort the centroids in ascending lexicographical order\n    sorted_centroids = np.sort(centroids, axis=0)\n    \n    # Step 5: Round every coordinate to 4 decimal places\n    rounded_centroids = np.round(sorted_centroids, 4).tolist()\n    \n    return rounded_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 3\n# print(kmeans_centroids(X, k))\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized with the first `k` samples from the dataset `X`.\n2. **Assignment Step**: For each sample in `X`, the squared Euclidean distance to each centroid is computed, and the sample is assigned to the nearest centroid.\n3. **Update Step**: Each centroid is updated to the mean of the samples assigned to it. If a cluster becomes empty, the centroid remains unchanged.\n4. **Convergence Check**: The algorithm checks if the centroids have moved less than `1e-4` in a full iteration. If so, it stops early.\n5. **Sorting and Rounding**: After convergence, the centroids are sorted in ascending lexicographical order and rounded to 4 decimal places.\n\nThis implementation ensures that the centroids are computed correctly and efficiently, adhering to the given constraints."}

{"task_id": 1, "completion_id": 0, "solution": "from typing import List"}
{"task_id": 2, "completion_id": 0, "solution": "from typing import List\ndef transpose_matrix(a: List[List[int | float]]) -> List[List[int | float]]:\n    \"\"\"\n    Transposes a given matrix.\n\n    Args:\n        a (List[List[int|float]]): The input matrix to be transposed.\n\n    Returns:\n        List[List[int|float]]: The transposed matrix.\n\n    Example usage:\n        >>> transpose_matrix([[1, 2], [3, 4]])\n        [[1, 3], [2, 4]]\n    \"\"\"\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Re-shapes a given 2D array (matrix) into a specified new shape.\n    \n    Parameters:\n    a (list[list[int|float]]): The original matrix to be reshaped.\n    new_shape (tuple[int, int]): The desired new shape for the matrix.\n    \n    Returns:\n    list[list[int|float]]: A reshaped version of the input matrix or an empty list if reshaping is impossible.\n    \"\"\"\n    try:\n        reshaped_array = np.array(a)\n        if len(reshaped_array.shape) != len(new_shape):\n            raise ValueError('The new_shape must match the dimensions of the reshaped array.')\n        reshaped_matrix = reshaped_array.reshape(new_shape)\n        return reshaped_matrix.tolist()\n    except Exception as e:\n        print(f'Error while reshaping the matrix: {e}')\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "from typing import List\ndef calculate_matrix_mean(matrix: List[List[float]], mode: str) -> List[float]:\n    \"\"\"\n    Calculates the mean of a matrix either by row or by column, based on the given mode.\n    \n    Parameters:\n    - matrix: A 2D list of floating-point numbers representing the matrix.\n    - mode: A string indicating whether to calculate the mean by row ('row') or column ('column').\n    \n    Returns:\n    - A list containing the mean values for rows or columns based on the specified mode.\n    \"\"\"\n    if len(matrix[0]) == 1:\n        return [sum(row) / len(row) for row in matrix]\n    else:\n        return [[sum(row) / len(row) for row in matrix] for row in matrix]\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiply each element of a matrix by a given scalar.\n\n    Args:\n    - matrix (list[list[int|float]]): The input matrix to multiply.\n    - scalar (int|float): The scalar value to multiply each element of the matrix.\n\n    Returns:\n    - list[list[int|float]]: A new matrix where each element is multiplied by the scalar.\n    \"\"\"\n    result_matrix = []\n    for row in matrix:\n        result_row = [0] * (len(row) + 1)\n        for (i, num) in enumerate(row):\n            result_row[i + 1] += scalar * num\n        result_matrix.append(result_row)\n    return result_matrix"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import eigh\ndef calculate_eigenvalues(matrix):\n    \"\"\"\n    Calculate the eigenvalues of a given 2x2 matrix.\n\n    Args:\n        matrix (list[list[float|int]]): A 2x2 matrix for which eigenvalues need to be calculated.\n\n    Returns:\n        list[float]: A sorted list containing all eigenvalues from largest to smallest in ascending order.\n    \"\"\"\n    identity_matrix = np.identity(2)\n    (eigenvalues, eigenvectors) = eigh(matrix)\n    return eigenvalues.tolist()"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    if not np.allclose(np.linalg.inv(T), np.linalg.inv(S)):\n        print('Error: Invertibility of T and S cannot be confirmed.')\n        return None\n    transformed_A = np.dot(T, S)\n    return transformed_A.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "from typing import List\ndef inverse_2x2(matrix: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculates the inverse of a 2x2 matrix.\n\n    Args:\n        matrix (List[List[float]]): A 2x2 matrix as a list of lists.\n\n    Returns:\n        List[List[float]]: The inverse of the given matrix. If the matrix is singular,\n                           returns None.\n    \"\"\"\n    determinant = det(matrix)\n    if len(matrix) == 1 and matrix[0][0] != 0:\n        return [[1 / matrix[0][0]], [1 / matrix[0][0]]]\n    result = [[matrix[1][1] * -1 / determinant], [-matrix[0][1] * -1 / determinant]]\n    return result"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Multiply two matrices.\n    \n    Args:\n    a (list[list]): The first matrix as a list of lists.\n    b (list[list]): The second matrix as a list of lists.\n    \n    Returns:\n    list[list]: The result of the multiplication of matrices.\n    \"\"\"\n    if len(a[0]) == len(b):\n        if len(a) != len(b[0]):\n            raise ValueError('Matrices must have the same number of rows.')\n        return [[sum((x * y for (x, y) in zip(row_a, col_b))) for col_b in zip(*b)] for row_a in a]\n    else:\n        raise ValueError('Matrices must have the same number of columns.')\na = [[1, 2], [3, 4]]\nb = [[5, 6], [7, 8]]"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given list of vectors.\n\n    Args:\n    - vectors (list[list[float]]): A list of lists representing features, each containing observations.\n\n    Returns:\n    - list[list[float]]: A covariance matrix as a list of lists. Each row corresponds to a feature,\n      and each column corresponds to a separate observation.\n    \"\"\"\n    cov_matrix = np.zeros((len(vectors[0]), len(vectors)))\n    for (i, v1) in enumerate(vectors):\n        for (j, v2) in enumerate(vectors[i + 1:], start=i + 1):\n            cov_matrix[i][j] = np.dot(v1 - np.mean(v1), v2 - np.mean(v2)) / (np.std(v1) * np.std(v2))\n    return cov_matrix.tolist()\ntest_vectors = [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]]\ncov_matrix = calculate_covariance_matrix(test_vectors)"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations Ax = b using the Jacobi method.\n    \n    Args:\n    A (np.ndarray): Coefficient matrix of the equation Ax = b.\n    b (np.ndarray): Right-hand side vector of the equation Ax = b.\n    n (int): Number of iterations for the Jacobi method.\n    \n    Returns:\n    List[np.ndarray]: Approximate solutions x at each iteration.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    x_0 = b[0]\n    for i in range(n):\n        x = np.zeros_like(x_0, dtype=float)\n        x = (A @ x - b) / A @ x_0\n        x = round(x, 4)\n        x_0 = x.copy()\n        sol_list.append(x.tolist())\n    return sol_list\nA = np.array([[1, 2], [3, 4]])\nb = np.array([5, 6])\nn = 10"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximate the Singular Value Decomposition of a 2x2 matrix A using the JACOBI method,\n    without using the numpy.svd function. The result is returned as a tuple (u, s, v).\n    \n    Args:\n    A (np.ndarray): A 2x2 matrix.\n    \n    Returns:\n    tuple: A tuple containing the singular values u, singular vectors s, and the left and right singular vectors v.\n    \"\"\"\n    (U, S, V) = np.linalg.svd(A)\n    singular_values_indices = list(zip(S.real, S.imag))\n    sorted_singular_values = sorted(singular_values_indices, key=lambda x: abs(x[0]))\n    selected_singular_values = [s for (_, s) in sorted_singular_values]\n    result = np.empty((len(sorted_singular_values), len(singular_values_indices)), dtype=object)\n    for (i, (singular_value, index)) in enumerate(zip(selected_singular_values, sorted_singular_values)):\n        result[i] = (U[index], S[index])\n    result_sorted = sorted(result, key=lambda x: x[1][0])\n    return result_sorted\nA = np.array([[1, 2], [3, 4]])\nresult = svd_2x2_singular_values(A)"}
{"task_id": 13, "completion_id": 0, "solution": "from typing import List"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Performs linear regression using the normal equation and returns the coefficients.\n\n    Parameters:\n    X (list[list[float]]): A 2D list representing the features.\n    y (list[float]): A 1D list representing the target values.\n\n    Returns:\n    list[float]: A list containing the coefficients of the linear regression model.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_mean = np.mean(X, axis=0)\n    y_mean = np.mean(y)\n    H = X_mean.T.dot(X).dot(1 / y_mean) + np.eye(len(X))\n    beta_hat = np.linalg.solve(H, y)\n    return beta_hat.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Perform linear regression using gradient descent.\n\n    Parameters:\n    X (np.ndarray): Feature matrix with a column of ones for the intercept.\n    y (np.ndarray): Target values.\n    alpha (float): Learning rate.\n    iterations (int): Number of iterations.\n\n    Returns:\n    np.ndarray: Coefficients of the linear regression model.\n    \"\"\"\n    y = y.T\n    w = np.zeros((X.shape[1], 1))\n    for _ in range(iterations):\n        h = X @ w\n        cost = np.sum(np.power(h - y, 2)) / len(y)\n        dw = (h - y) @ X.T\n        w -= alpha * dw / len(y)\n        if abs(w[0][0]) < 1e-06:\n            break\n    w = w.reshape(X.shape[0], 1)\n    return w.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Performs feature scaling using standardization and min-max normalization.\n\n    :param data: 2D NumPy array of features.\n    :return: A tuple containing the normalized data and the std dev data for each feature.\n    \"\"\"\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0)\n\n    def normalize(x):\n        return (x - means) / std_devs\n    norm_data = [normalize(row) for row in data]\n    scaled_norm_data = []\n    for row in norm_data:\n        scaled_row = []\n        for x in row:\n            scaled_row.append((x - means[0]) / std_devs[0])\n        scaled_norm_data.append(scaled_row)\n    return (scaled_norm_data, [means, std_devs])"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    if not isinstance(points, list):\n        raise TypeError('points must be a list')\n    if not isinstance(k, int):\n        raise TypeError('k must be an integer')\n    if not isinstance(initial_centroids, list) or not all((isinstance(pt, tuple) for pt in initial_centroids)):\n        raise TypeError('initial_centroids must be a list of tuples')\n    if k > len(points):\n        raise ValueError(f'k cannot be greater than the length of the dataset ({len(points)} != {k})')\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n    best_centroid = [point for point in initial_centroids]\n    best_mean_point = initial_centroids[0]\n    for _ in range(max_iterations):\n        distances = []\n        for (i, point) in enumerate(points):\n            distance_to_best_centroid = euclidean_distance(best_mean_point, point)\n            distances.append(distance_to_best_centroid)\n        new_centroid_index = distances.index(min(distances))\n        new_centroid = init_centroids[new_centroid_index]\n        best_centroid = [centroid for centroid in best_centroid if euclidean_distance(centroid, new_centroid) < 0.001]\n    means = [(mean, centroid) for (mean, centroid) in zip(best_centroid, best_mean_point)]\n    return means"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k: int=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate K-Fold Cross-Validation Split for given dataset.\n\n    Parameters:\n        X (np.ndarray): The feature matrix or data array.\n        y (np.ndarray): The target vector or labels.\n        k (int): Number of folds to create.\n        shuffle (bool): Whether to shuffle the data before splitting. Default is True.\n        random_seed (int): Seed value for reproducibility. Default is None.\n\n    Returns:\n        List[np.ndarray]: A list of train/test indices for each fold.\n    \"\"\"\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError('k must be a positive integer')\n    if shuffle:\n        np.random.seed(random_seed)\n        shuffled_indices = np.random.permutation(len(X))\n        (X, y) = (X[shuffled_indices], y[shuffled_indices])\n    n_samples = len(X)\n    num_folds = k\n    (training_indices, testing_indices, y_train, y_test) = ([], [], [], [])\n    np.random.shuffle(indices)\n    for i in range(num_folds):\n        start_index = i * (n_samples // num_folds)\n        end_index = (i + 1) * (n_samples // num_folds)\n        training_indices.append(indices[start_index:end_index])\n        testing_indices.append(indices[end_index:])\n        y_train.extend(y[indices[i]])\n        y_test.extend(y[indices[:num_folds + i]])\n    return [training_indices, testing_indices, y_train, y_test]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    cov_matrix = standardized_data.T.dot(standardized_data)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    selected_eigenvectors = eigenvectors[:, :k]\n    return [np.round(selected_eigenvector, 4) for selected_eigenvector in selected_eigenvectors]\ndata = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Build a decision tree using the decision tree learning algorithm.\n\n    Parameters:\n    examples (list[dict]): A list of examples where each example is a dictionary containing attribute-value pairs.\n    attributes (list[str]): A list of strings representing the attribute names of the features in each example.\n    target_attr (str): The string name of the target attribute in the examples.\n\n    Returns:\n    dict: A nested dictionary representing the decision tree.\n    \"\"\"\n\n    def calculate_entropy(data):\n        \"\"\"\n        Calculate the entropy of the given data points.\n        \n        Parameters:\n        data (list[list]): The dataset represented as a list of lists of attribute-value pairs.\n        \n        Returns:\n        float: The entropy value.\n        \"\"\"\n        total_elements = len(data)\n        unique_values = set()\n        target_dict = {}\n        for row in data:\n            if (target_row := row[target_attr]):\n                if not unique_values:\n                    unique_values.add(target_row)\n                elif target_row != unique_values[-1]:\n                    raise ValueError('Target values must be unique.')\n                if target_row in target_dict:\n                    target_dict[target_row].append(row)\n                else:\n                    target_dict[target_row] = [row]\n        sorted_target_dict = {}\n        for keys in target_dict.keys():\n            target_value_counts = Counter(sorted_target_dict[keys])\n            sorted_key_value_pairs = [(value, key) for (key, value) in target_value_counts.items()]\n            probability = sum((1 / n for n in sorted_key_value_pairs))\n            entropy = -sum((p * log2(p) for p in probability)) + 1\n            sorted_key_value_pairs.sort(key=lambda x: -x[0])\n            sorted_key_value_pairs.reverse()\n            total_probability = sum(probability.values())\n            entropy -= np.sum([n * np.log2(n) for n in probability.values()])\n            entropy += np.log2(total_probability)\n            return entropy\n        return entropy\n\n    def find_best_split(examples, feature, threshold=0.5):\n        \"\"\"\n        Find the best split point for each attribute using information gain.\n        \n        Parameters:\n        examples (list[dict]): The dataset represented as a list of dictionaries.\n        feature (str): The name of the feature to split on.\n        threshold (float): The cutoff value used for splitting. Defaults to 0.5.\n        \n        Returns:\n        dict: A nested dictionary representing the best split for the attribute in question.\n        \"\"\"\n        best_splits = []\n        max_entropy = float('-inf')\n        best_feature = None\n        for attribute in attributes:\n            current_entropy = calculate_entropy(examples)\n            if current_entropy > max_entropy:\n                max_entropy = current_entropy\n                best_splits.clear()\n                best_splits.append({'attribute': attribute, 'threshold': threshold})\n            elif current_entropy == max_entropy:\n                best_splits.append({'attribute': attribute, 'threshold': threshold})\n            if threshold <= 0 or (best_splits and best_splits[0]['threshold'] < threshold):\n                break\n        selected_attribute = best_splits[0]['attribute']\n        threshold = best_splits[0]['threshold']\n        return {'feature': selected_attribute, 'threshold': threshold}\n\n    def get_subtrees(examples, splits):\n        \"\"\"\n        Helper function to recursively build subtrees from given splits.\n        \n        Parameters:\n        examples (list[dict]): The dataset represented as a list of dictionaries.\n        splits (dict): A dictionary mapping attribute to its best split.\n        \n        Returns:\n        list: A list of sub-trees built from the given splits.\n        \"\"\"\n        trees = []\n        for split in splits:\n            left_side = examples[:examples.index(split['attribute'])][:]\n            right_side = examples[examples.index(split['attribute']):][:]\n            new_trees = []\n            for example in left_side:\n                if example[target_attr] == split['attribute']:\n                    continue\n                subtree = {target_attr: []}\n                for item in right_side:\n                    if item[target_attr] == example[target_attr]:\n                        subtree['target'].append(example)\n                    else:\n                        subtree['target'].append(item)\n                new_trees.append(subtree)\n            trees.extend(new_trees)\n        return trees\n    examples.sort(key=lambda k: k[target_attr])\n    while len(examples) > 1:\n        best_split = find_best_split(examples)\n        split_point = best_split['threshold']\n        examples = examples[:experiences.index(best_split['feature']['attribute'])]\n        examples = examples + examples[:experiences.index(best_split['feature']['attribute'])]\n        child_examples = []\n        for example in examples:\n            if example[target_attr] == best_split['feature']['attribute']:\n                child_examples.append(example)\n        split_child_examples = examples[:]\n        split_child_examples.remove(best_split['feature']['attribute'])\n        split_child_examples = split_child_examples + examples[:]\n        experiences.append({'feature': best_split['feature']['attribute'], 'child_example_index': 0})\n        experiences.append({'feature': best_split['feature']['attribute'], 'child_example_index': 1})\n        experience = learn_decision_tree(split_child_examples, attributes, best_split['feature']['attribute'])\n        if isinstance(experience, list):\n            experiences.extend(experience)\n    return experiences[0]"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\ndef pegasos_kernel_svm(data, labels, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (X_train, X_test, y_train, y_test) = train_test_split(data, labels, test_size=0.2, random_state=42)\n    clf = svm.LinearSVC(C=lambda_val, dual=False, loss='squared_hinge', penalty='l2')\n    clf.fit(X_train, y_train.ravel())\n    y_pred = clf.predict(X_test)\n    acc = np.mean(y_pred == y_test)\n    result = [y_pred.reshape(-1)]\n    return result.tolist()\ndata = np.array([[1, 2], [1, 3], [1, 4]])\nlabels = np.array([0, 0, 0])\nresult = pegasos_kernel_svm(data, labels, kernel='rbf', lambda_val=5, iterations=100, sigma=1.5)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid activation function for a given input value z.\n\n    Args:\n    z (float): The input value to the sigmoid function.\n\n    Returns:\n    float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    if z >= 1:\n        return 1\n    elif z <= -1:\n        return 0\n    return 1 / (1 + math.exp(-z))"}
{"task_id": 23, "completion_id": 0, "solution": "from typing import List\nimport numpy as np\nfrom scipy.special import expit"}
{"task_id": 24, "completion_id": 0, "solution": "import math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> tuple[dict, float]:\n    flattened_features = [feature.flatten() for feature in features]\n    activations = [1 / (1 + math.exp(-x)) if x > 0 else max(0.05 - e ** (-x), 0.01) for (x, y) in zip(flattened_features, labels)]\n    probabilities = np.array([math.exp(activations[k]) / sum(activations) for k in range(len(labels))])\n    mse = np.mean((probabilities - labels).reshape(-1, 1) ** 2)\n    return ({'activations': activations, 'mse': round(mse, 4)}, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self.grad_data = Data(data) if isinstance(data, (int, float)) else Data(1)\n        self.grad_op = _op if _op else ''\n        self._backward = lambda : None\n        self._prev = set(_children)\n\n    def forward(self):\n        pass\n\n    def backward(self):\n        if hasattr(self, '_backward'):\n            return getattr(self, '_backward')\n\n    def add(self, other):\n        pass\n\n    def multiply(self, other):\n        pass\n\n    def relu(self):\n        pass\nclass Data(Value):\n\n    def __init__(self, value):\n        super().__init__(value)\n\n    def __add__(self, other):\n        return Data(self.data + other.data)\n\n    def __mul__(self, other):\n        return Data(self.data * other.data)\n\n    def __rmul__(self, other):\n        return Data(self.data * other)\n\n    def __neg__(self):\n        return Data(-self.data)\n\n    def __pos__(self):\n        return Data(self.data)\n\n    def __rdiv__(self, other):\n        return Data(self.data / other.data)\n\n    def __lt__(self, other):\n        return self.data < other.data\n\n    def __le__(self, other):\n        return self.data <= other.data\n\n    def __gt__(self, other):\n        return self.data > other.data\n\n    def __ge__(self, other):\n        return self.data >= other.data\n\n    def __eq__(self, other):\n        return self.data == other.data\n\n    def __ne__(self, other):\n        return self.data != other.data\n\n    def __call__(self, func):\n        setattr(self, '__func__', func)\n\n    def __getitem__(self, index):\n        return self.data[index]\n\n    def __setitem__(self, key, value):\n        self.data[key] = value"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_np = np.array(B)\n    C_np = np.array(C)\n    P = np.dot(np.linalg.inv(np.dot(B_np.T, B)), C_np)\n    return P.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the Singular Value Decomposition (SVD) of a 2x2 matrix A.\n    \n    Parameters:\n    - A: A 2x2 numpy array\n    \n    Returns:\n    - A: The input matrix A again\n    - U: The left singular vectors\n    - S: The singular values\n    - V: The right singular vectors\n    \"\"\"\n    A_T_A = A.T @ A\n    (eig_vals, eig_vecs) = np.linalg.eig(A_T_A)\n    S = np.diag(np.sqrt(eig_vals))\n    U_normed = eig_vecs / np.sum(eig_vecs)\n    U = np.reshape(U_normed, (-1,))\n    return (A, U, S, V)"}
{"task_id": 29, "completion_id": 0, "solution": "from numpy import random"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Generate batches from a dataset. \n    :param X: numpy array representing the input data.\n    :param y: numpy array representing the target data(s), or None if no target data is present. \n    :param batch_size: Size of each batch.\n    :return: Generator that yields batches of Numpy arrays.\n    \"\"\"\n    n_samples = X.shape[0]\n    if y is not None:\n        indices = np.arange(n_samples)\n        np.random.shuffle(indices)\n        (train_indices, test_indices) = (indices[:int(0.8 * n_samples)], indices[int(0.8 * n_samples):])\n        X_train = X[train_indices]\n        y_train = y[train_indices] if y is not None else None\n        X_test = X[test_indices]\n        y_test = y[test_indices] if y is not None else None\n    else:\n        X_test = X.reshape(-1, 1)\n    while True:\n        x_batch = []\n        y_batch = []\n        for i in range(0, n_samples, batch_size):\n            x_slice = X[i:i + batch_size]\n            y_slice = y[i:i + batch_size] if y is not None else None\n            if len(x_slice) == batch_size:\n                x_batch.append(x_slice)\n                y_batch.append(y_slice)\n            elif len(x_slice) < batch_size:\n                x_batch.extend([x_slice] * batch_size)\n                break\n        if len(x_batch) == 0:\n            continue\n        yield (np.array(x_batch), np.array(y_batch))"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    subset_indices = [indices[X[:, feature_i] >= threshold] for indices in np.split(np.arange(len(X)), len(X) // 2)]\n    indices = np.array(subset_indices)\n    result = [X[subset_indices[i]] for i in range(len(indices))]\n    return result.tolist()\nX = np.random.rand(100, 5)\nfeature_i = 3\nthreshold = 0.6\nresult = divide_on_feature(X, feature_i, threshold)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generates polynomial features for a given dataset.\n    \n    Parameters:\n        X (numpy.ndarray): The input data.\n        degree (int): The degree of the polynomial feature.\n        \n    Returns:\n        numpy.ndarray: A 2D numpy array containing all the polynomial features.\n    \"\"\"\n    polynomials = []\n    for (x1, x2) in combinations_with_replacement(X, 2):\n        terms = [x1 ** i * x2 ** j for (i, j) in itertools.product(range(degree + 1), repeat=2)]\n        polynomials.append(terms)\n    features = np.reshape(np.array(polynomials), (-1,))\n    return features.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generates random subsets from a given dataset, replacing or not.\n\n    Parameters:\n    - X: A 2D numpy array representing the input dataset.\n    - y: A 1D numpy array indicating the target labels for each data point.\n    - n_subsets: An integer specifying the number of subsets to generate.\n    - replacements: A boolean flag indicating whether to replace existing subsets.\n    - seed: An optional integer for reproducibility.\n\n    Returns:\n    - A list containing tuples of (X_subset, y_subset) subsets, which can be reshaped into a single 3D numpy array for easier manipulation.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if len(X) < n_subsets * 4:\n        raise ValueError('Not enough data points for generating {n_subsets} subsets'.format(n_subsets=n_subsets))\n    permutation = np.random.permutation(len(X))\n    sub_index = np.arange(len(permutation))\n    shuffle_indices = np.random.choice(sub_index, size=(n_subsets,), replace=replacements)\n    subsets = [X[i] for i in shuffle_indices[:n_subsets]]\n    subsets_y = [y[shuffle_indices[i]] for i in shuffle_indices[:n_subsets]]\n    return [np.reshape(subset, (-1,)) for subset in zip(*subsets)]"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on nominal values.\n    \n    Parameters:\n    x (np.array): A 1D numpy array of integer values.\n    n_col (int, optional): Number of categorical columns in the output array. \n                           If None, auto-determined from the input array.\n    \n    Returns:\n    np.ndarray: An n_col-length array where each element represents \n                one-hot encoding of the corresponding value in x.\n    \"\"\"\n    if n_col is None:\n        n_categories = len(np.unique(x))\n    else:\n        n_categories = n_col\n    result = np.zeros((x.size, n_categories), dtype=int)\n    for (idx, val) in enumerate(x):\n        result[idx, val] = 1\n    return result.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "from numpy import eye\nimport numpy as np"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score for a given set of true labels (y_true) and predicted labels (y_pred).\n\n    Parameters:\n    - y_true: A 1D numpy array containing the true labels.\n    - y_pred: A 1D numpy array containing the predicted labels.\n\n    Returns:\n    - The accuracy score as a float.\n    \"\"\"\n    accuracy = np.sum(y_true == y_pred) / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset by default.\n    \n    Parameters:\n        - X (np.ndarray): A 2D numpy array representing the data points.\n        \n    Returns:\n        - np.ndarray: A 2D numpy array containing the correlation matrix.\n        - list: A 3-element list where the first element is the shape of the correlation matrix and the second,\n                third element is a boolean indicating if it's a symmetric matrix and fourth element is whether the matrix is formatted as a dictionary or not.\n    \"\"\"\n    if Y is None:\n        Y = np.eye(X.shape[1])\n    corr_matrix = X @ Y.T / X.shape[0]\n    corr_matrix = np.round(corr_matrix, decimals=4)\n    is_symmetric = np.allclose(X @ Y, Y @ X)\n    result_shape = (X.shape[0], X.shape[1]) if X.size else (0, 0)\n    result_list = [result_shape, is_symmetric, True] if is_symmetric else [result_shape, is_symmetric, False]\n    return (corr_matrix, result_list)"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    n_samples = X.shape[0]\n    sample_weights = np.zeros(n_samples)\n    sample_weighted_labels = np.unique(y)\n    opt_thresholds = np.linspace(1e-09, 1 - 1 / (n_samples + 1), n_samples)\n    errors = []\n    for i in range(n_clf):\n        clf_error = np.mean((y == opt_thresholds[i]).astype(int))\n        errors.append(clf_error)\n    sorted_indices = np.argsort(errors)\n    sorted_estimators = [opt_thresholds[i] for i in sorted_indices]\n    classifiers_with_params = []\n    for (i, clf) in enumerate(sorted_estimators):\n        classifier_params = {'clf': i, 'weights': sample_weights * sample_weights > 1, 'error': errors[i], 'sorted_indices': sorted_indices[i]}\n        classifiers_with_params.append(classifier_params)\n    return classifiers_with_params"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list) -> list:\n    \"\"\"\n    Compute the log-softmax of the given 1D array of scores.\n\n    Args:\n    - scores (list): A 1D numpy array of scores.\n\n    Returns:\n    - List of the same length as `scores`, where each element represents the log-probability of the corresponding value in `scores`.\n    \"\"\"\n    normalized_scores = scores / np.sum(scores)\n    log_softmax_values = np.log(np.exp(normalized_scores))\n    return log_softmax_values.tolist()\nscores = [0.5, 0.4, 0.3]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int) -> np.ndarray:\n    \"\"\"\n    Applies a 2D convolution operation to the given input matrix using the specified kernel,\n    padding, and stride.\n\n    Args:\n        input_matrix: The input matrix of shape (height, width).\n        kernel: The kernel for the convolution operation.\n        padding: The amount of padding applied to both dimensions of the input matrix.\n        stride: The stride value for the convolution operation.\n\n    Returns:\n        A single-dimensional array representing the result of applying the 2D convolution on 'input_matrix'.\n    \"\"\"\n    effective_height = input_matrix.shape[0] - (padding + stride) % stride\n    effective_width = input_matrix.shape[1] - (padding + stride) // stride\n    convolved_matrix = np.zeros((effective_height, effective_width))\n    row_offset = (kernel.shape[0] - effective_height) // 2\n    col_offset = (kernel.shape[1] - effective_width) // 2\n    for col in range(effective_width):\n        for row in range(effective_height):\n            convolved_matrix[row + row_offset, col + col_offset] += input_matrix[row + row_offset + col + col_offset * stride]\n    return convolved_matrix.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    mse = np.mean((X @ w - y_true) ** 2)\n    regularization_term = alpha * np.sum(w ** 2)\n    return mse + regularization_term"}
{"task_id": 44, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Computes the output of the Leaky Rectified Linear Unit (ReLU) activation function.\n\n    Parameters:\n    z (float): The input value to the LeakyReLU activation function.\n    alpha (float): Slope of the leakyReLU function, defaults to 0.01.\n\n    Returns:\n    float: The result of the LeakyReLU activation function applied to z.\n    \"\"\"\n    return np.maximum(0, z) * (1 - alpha)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel between two input vectors.\n\n    Parameters:\n    x1 (np.ndarray): First input vector.\n    x2 (np.ndarray): Second input vector.\n\n    Returns:\n    float or ndarray: The computed linear kernel value.\n    \"\"\"\n    if not isinstance(x1, np.ndarray) or not isinstance(x2, np.ndarray):\n        raise ValueError('Both inputs must be numpy arrays.')\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"Calculate the precision metric between `y_true` and `y_pred`.\n    \n    Args:\n        y_true (numpy.ndarray): A 2D numpy array containing the true labels.\n        y_pred (numpy.ndarray): A 2D numpy array containing the predicted labels.\n\n    Returns:\n        float: The precision score for the comparison.\n    \"\"\"\n    tp = np.sum(np.where((y_true == True) & (y_pred == False), 1, 0))\n    fn = np.sum(np.where((y_true == False) & (y_pred == True), 1, 0))\n    if tp > 0 and fn > 0:\n        precision = tn / min(tp + fn)\n    else:\n        return 0\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent on a linear regression model.\n    \n    Parameters:\n    - X (numpy.ndarray): Input features.\n    - y (numpy.ndarray): Target values.\n    - weights (numpy.ndarray): Current weights vector.\n    - learning_rate (float): Learning rate for gradient descent.\n    - n_iterations (int): Number of iterations for gradient descent.\n    - batch_size (int): Size of mini-batches used during training.\n    - method (str): Type of gradient descent variant ('stochastic', 'batch', or 'mini_batch').\n    \n    Returns:\n    - A numpy array containing the final weights vector.\n    \"\"\"\n    if method == 'stochastic':\n        gradients = []\n        for _ in range(n_iterations):\n            y_pred = X @ weights\n            error = y - y_pred\n            error = error.reshape(-1)\n            gradients.append(error / batch_size * learning_rate)\n        final_weights = np.zeros(weights.shape)\n    elif method == 'batch':\n        error = y - X @ weights\n        error = error.reshape(-1)\n        gradients = [error / batch_size * learning_rate] * n_iterations\n        final_weights = np.zeros(weights.shape)\n    elif method == 'mini_batch':\n        batches = [(X[i], y[i]) for i in range(len(y))]\n        weights = np.zeros((X.shape[1], 2))\n        for (iteration, (batch_X, batch_y)) in enumerate(batches):\n            x_batch = batch_X[:-1]\n            y_batch = batch_y[:-1]\n            y_diff = y_batch - X.dot(weights.T)[y_batch.shape[0]]\n            errors = y_diff / batch_size\n            errors = errors.reshape(-1)\n            gradients.append(errors.mean(axis=0).reshape(batch_X.shape[-1]))\n            weights -= batch_size * learning_rate * gradients[-1]\n        final_weights = weights.T\n    else:\n        raise ValueError('Invalid gradient descent method')\n    return final_weights.tolist()\nweights = np.array([1, 2])\nlearning_rate = 0.01\nn_iterations = 5000\nmethod = 'stochastic'"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    n = len(matrix)\n    M = np.copy(matrix)\n    while True:\n        pivots = find_pivots(M)\n        if not pivots:\n            break\n        pivot_index = find_largest_element_in_row(M)\n        temp = M[pivot_index]\n        M[pivot_index] = M[0]\n        M[0] = temp\n        swap_rows(M, pivot_index, 0)\n        pivots = find_pivots(M)\n        if not pivots:\n            break\n    return M.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    param_values = x0\n    for i in range(num_iterations):\n        gradient = grad(param_values)\n        param_values -= learning_rate * gradient / np.sqrt(beta1 * np.sum(np.square(param_values)) + beta2)\n    return param_values.tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculate the Optimal String Alignment (OSA) distance between two strings.\n\n    Parameters:\n    source (str): The first input string.\n    target (str): The second input string.\n\n    Returns:\n    int: The minimum number of edits required to transform source into target.\n    \"\"\"\n    (m, n) = (len(source), len(target))\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = -1\n            elif source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    tp = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    tn = np.sum(np.logical_and(y_true == 0, y_pred == 0))\n    try:\n        precision = tp / (tp + min(tn, np.finfo(float).eps * tn))\n        recall = tp / max(tp, min(1 - tn, np.finfo(float).eps * (tn + 1)))\n        return round(recall, 3)\n    except ZeroDivisionError:\n        return 0.0\n    return None"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    W_q = np.tile(W_q, (X.shape[0], 1))\n    W_k = np.tile(W_k, (X.shape[0], 1))\n    scores = np.sum(X * W_k, axis=2)\n    attn_weights = scores / np.sqrt(W_q.size)\n    V_prime = np.tensordot(V, attn_weights, axes=0)\n    V_prime = V_prime.reshape(-1, W_v.size)\n    return V_prime.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Computes the forward pass through an RNN cell,\n    producing the final hidden state.\n\n    Parameters:\n    - input_sequence: A list of lists representing the sequences of input vectors.\n    - initial_hidden_state: A list of the same length as input_sequence, where each element represents the initial hidden state.\n    - Wx: Weight matrix for the input-to-hidden connection from previous layer to current layer.\n    - Wh: Weight matrix for the hidden-to-hidden connection between current layers.\n    - b: Bias vector added to the output of the RNN cell.\n\n    Returns:\n    - An array containing the final hidden state of the network.\n    \"\"\"\n    Wt = np.dot(Wx, initial_hidden_state)\n    Wh_t = np.dot(Wh, Wt.T)\n    b_t = np.zeros_like(b)\n    H = np.tanh(np.dot(input_sequence[0], Wt) + np.dot(initial_hidden_state[0], b_t))\n    for i in range(1, len(input_sequence)):\n        H = np.tanh(np.dot(input_sequence[i], Wt) + np.dot(H, Wh_t) + b_t)\n    return H.tolist()\ninput_sequence = [[0, 0, 1], [1, 0, 0]]\ninitial_hidden_state = [np.array([0.2]), np.array([0.8])]\nWx = np.random.rand(3, 3)\nWh = np.random.rand(3, 3)\nb = np.array([0.5])"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translated_points = np.dot(points, np.array([[1, 0, tx], [0, 1, ty]]))\n    translated_list = translated_points.tolist()\n    if len(translated_list) == 0:\n        translated_list.append([0])\n    return translated_list\npoints_2d = [[0.5, 0.5], [1.5, -1.5], [-0.5, 3]]\ntranslation_vector_x = 4\ntranslation_vector_y = 2\ntranslated_points = translate_object(points_2d, translation_vector_x, translation_vector_y)"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    mean_diff = mu_p - mu_q\n    var_ratio_squared = (np.pi / 6) ** 2 * (sigma_p ** 2 + sigma_q ** 2)\n    kl_div = np.mean(mean_diff ** 2) - var_ratio_squared / 2\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solves a system of linear equations Ax = b using the Gauss-Seidel method.\n    \n    Parameters:\n        A (numpy.ndarray): Coefficient matrix.\n        b (numpy.ndarray): Right-hand side vector.\n        n (int): Number of iterations.\n        x_ini (numpy.ndarray, optional): Initial guess for the solution vector (defaults to None).\n        \n    Returns:\n        numpy.ndarray: Approximated solution vector x.\n    \"\"\"\n    if x_ini is None:\n        x_ini = np.zeros_like(b)\n    x_new = np.linalg.solve(A, -np.dot(A, x_ini))\n    x_new += A @ (b - np.dot(x_new, A))\n    norm_residual = np.linalg.norm(b - np.dot(x_new, A))\n    if norm_residual > 0.05 * np.linalg.norm(x_new, ord=2):\n        print('Convergence criterion met')\n        return x_new\n    else:\n        return x_new.tolist()\nA = np.array([[1, 1], [1, 2]])\nb = np.array([3, 5])"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    if not A.any():\n        raise ValueError('Matrix A must have at least one row')\n    n = len(A)\n    for k in range(n):\n        pivot = -np.abs(np.dot(A[k], b))\n        max_abs = np.max(np.abs(A[:, k]))\n        if 2 * max_abs > abs(pivot) and (not np.isclose(max_abs, 0)):\n            raise ValueError('Matrix may contain duplicate or zero values')\n        if np.abs(A[:, k]) < max_abs:\n            A[:, k] /= -pivot\n            b[k] /= -pivot\n    x = np.linalg.solve(A.T, b)\n    x = x.reshape(-1, 1)\n    return x.tolist()\nA = [[3, 7, 9], [1, -8, 5], [-5, 6, -3]]\nb = [15, -18, -21]"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        batch_size = x.shape[0]\n        num_time_steps = x.shape[1]\n        x_torch = torch.from_numpy(x).float().unsqueeze(0).repeat(batch_size, 1, 1)\n        h_torch = torch.zeros(batch_size, self.hidden_size)\n        c_torch = torch.zeros(batch_size, self.hidden_size)\n        forget_rate = 0.5 * (1 + np.tanh(np.dot(h_torch, self.Wf.T)))\n        forget_gate = np.tanh(forget_rate)\n        input_gate = 0.25 * (np.log(forget_rate + 1e-06) - np.log(forget_rate + 1e-06) / forget_rate)\n        input_gate = np.tanh(input_gate)\n        cell_state = 0.8 * initial_cell_state + 0.2 * h_torch\n        o_torch = np.tanh(np.dot(cell_state, self.Wo.T) + self.bi)\n        f_torch = (1 - np.tanh(forget_gate)) * h_torch\n        c_torch = 0.8 * initial_cell_state + 0.2 * (cell_state - o_torch)\n        h_torch = f_torch * h_torch + i_torch * c_torch\n        c_torch = o_torch * c_torch + i_torch * c_torch\n        return ([h_torch.view(-1).cpu().numpy(), c_torch.view(-1).cpu().numpy(), o_torch.cpu().numpy()], [forget_gate.cpu().numpy(), input_gate.cpu().numpy(), cell_state.cpu().numpy(), initial_cell_state.cpu().numpy()])"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Computes TF-IDF scores for query against given corpus.\n    \n    Parameters:\n    - corpus (List[List[str]]): List of documents, where each document is a list of words.\n    - query (List[str]): List of words for which we want to compute TF-IDF scores.\n    \n    Returns:\n    - List[List[float]]: List of TF-IDF scores for each word in query.\n    \"\"\"\n    tfidf_scores = []\n    df_query = len(query)\n    doc_count = len(corpus)\n    idf_query = np.log(doc_count / np.sum(1 / df_query))\n    for doc in corpus:\n        tfidf_score = sum(((doc.count(word) + 1 if word in doc else 0) * tfidf * idf_document[word] for (word, tfidf) in zip(query, doc)))\n        tfidf_scores.append(tfidf_score)\n    smooth_idf = [1 / df_query if df_query != 0 else 1 for _ in range(len(query))]\n    smoothed_tfidf_scores = [tfidf_scores[i] * smooth_idf[i] for i in range(len(query))]\n    return np.array(smoothed_tfidf_scores)"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    precision = np.mean(y_true == y_pred)\n    recall = np.mean((y_true == np.where(y_true > 0, 1, 0)) & (y_pred == np.where(y_pred > 0, 1, 0)))\n    if beta < 2:\n        return 0.0\n    else:\n        return beta * (precision + recall - 1) / ((beta + 1) * precision + recall)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        h = np.random.uniform(-1, 1, size=(self.hidden_size, 1)) * 0.01\n        z = np.dot(x, self.W_xh) + np.dot(h, self.W_hh) + self.b_h\n        a = np.tanh(z)\n        y = np.dot(a, self.W_hy) + self.b_y\n        return (y, h, z, a)\n\n    def backward(self, x, y, h, z, a, expected_output):\n        dJ_dY = expected_output - y\n        dw_hy = np.dot(dJ_dY, a.T)\n        db_y = np.sum(dJ_dY, axis=0, keepdims=True)\n        dz_dX = np.dot(self.W_hy.T, dJ_dY) * (1 - np.power(a, 2))\n        dw_xh = np.dot(x.T, dz_dX)\n        db_h = np.sum(dz_dX, axis=0, keepdims=True)\n        dh_dZ = np.dot(dz_dX, self.W_hh.T)\n        dh_dA = np.dot(self.W_hx, dz_dX)\n        dh_dW_hh = np.dot(self.W_xh.T, dz_dX)\n        dh_db_h = np.sum(dz_dX, axis=0, keepdims=True)\n        self.W_xh += -learning_rate * dw_xh + self.learning_rate * self.W_xh * dw_hh\n        self.W_hh += -learning_rate * dh_dW_hh + self.learning_rate * self.W_hh * dh_dA\n        self.W_hy += -learning_rate * dh_dW_hh + self.learning_rate * self.W_hy * dh_dA\n        self.b_h += -learning_rate * db_h\n        self.b_y += -learning_rate * db_y\n        return (self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y)\nexpected_output = np.array([1, 0, 1, 1])\nlearning_rate = 0.01"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if not isinstance(A, np.ndarray) or len(A.shape) != 2 or A.shape[0] != A.shape[1]:\n        raise ValueError('A must be a square matrix')\n    if not isinstance(b, np.ndarray) or b.size != A.shape[0]:\n        raise ValueError('b must be a column vector')\n    N = b.shape[0]\n    x = x0.copy()\n    h = -np.dot(A, b) / np.dot(np.linalg.inv(np.dot(A.T, A)), np.dot(A.T, b))\n    y = np.zeros(N)\n    for k in range(n):\n        if abs(h) < tol:\n            break\n        z = b + k * h\n        v = A.T @ z\n        w = -(A.T @ y)\n        delta = v - w / np.linalg.norm(v)\n        if abs(delta) < tol:\n            break\n        x = x + k * delta\n        y -= k * delta * h\n    return x.tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y or len(y) == 0:\n        return 0.0\n    unique_labels = np.unique(y)\n    counts = np.bincount(y)\n    gini_coefficients = []\n    for label in unique_labels:\n        total_count = np.sum(counts == label)\n        frequency = np.sum(counts == label)\n        gini_coefficient = (1 - frequency / total_count) ** 2 * 4 / total_count\n        gini_coefficients.append(gini_coefficient)\n    gini_impurity_value = sum(gini_coefficients) / len(y)\n    return round(gini_impurity_value, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    dense_array = np.array(dense_matrix)\n    values = []\n    column_indices = []\n    row_pointer = []\n    for i in range(len(dense_array)):\n        for j in range(i + 1, len(dense_array[0])):\n            if dense_array[i][j] != 0:\n                values.append(dense_array[i][j])\n                column_indices.append(j)\n                row_pointer.append(i)\n    return (np.array(values), np.array(column_indices), np.array(row_pointer))\ndense_matrix = [[3, 0, 5], [6, 9, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    norm_L = np.linalg.norm(L)\n    L_unit = L / norm_L\n    proj_vector = np.sum(v * L_unit, axis=1) / norm_L\n    return proj_vector.tolist()"}
{"task_id": 67, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A_row_echelon = np.linalg.matrix_rank(A)\n    rank_col = np.argmax(A_row_echelon)\n    zero_column_indices = np.argwhere(A == 0).flatten()\n    zero_column_idx = int(np.median(zero_column_indices))\n    basis_vectors = []\n    for i in range(len(A)):\n        if i != zero_column_idx:\n            basis_vectors.append(A[:, i])\n    return {'basis_vectors': basis_vectors}"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R^2 value (coefficient of determination) for a regression analysis.\n    \n    Parameters:\n    - y_true (numpy array): True values of the dependent variable.\n    - y_pred (numpy array): Predicted values from the regression model.\n    \n    Returns:\n    - float: The R^2 value representing the proportion of variance in the dependent variable that is predictable from the independent variables.\n    \"\"\"\n    y_mean_true = np.mean(y_true)\n    y_mean_pred = np.mean(y_pred)\n    ss_residual = np.sum((y_true - y_pred) ** 2)\n    n = len(y_true)\n    r_squared_value = 1 - ss_residual / (n * y_mean_true - y_mean_pred)\n    return round(r_squared_value, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "import numpy as np\ndef calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image.\n\n    Parameters:\n    img (np.array): A 2D numpy array representing the grayscale image.\n\n    Returns:\n    float: The average brightness of the image after rounding it to 2 decimal places,\n           or -1 if any edge case occurs.\n    \"\"\"\n    if not img.any():\n        return -1\n    if len(img.shape) != 2:\n        return -1\n    img = img.mean(0)\n    brightness = img.mean()\n    brightness = round(brightness, 2)\n    return brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate RMSE (Root Mean Square Error) between the actual values and the predicted values.\n\n    Args:\n    y_true (np.array): The true values.\n    y_pred (np.array): The predicted values.\n\n    Returns:\n    float: RMSE value.\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both y_true and y_pred must be numpy arrays.')\n    if len(y_true.shape) != 1 or len(y_pred.shape) != 1:\n        raise ValueError('Both y_true and y_pred must have one element per index.')\n    if y_true.shape[0] == 0 or y_pred.shape[0] == 0:\n        return np.nan\n    errors = np.abs(y_true - y_pred)\n    squared_errors = errors ** 2\n    rmse_value = np.sqrt(np.mean(squared_errors))\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    if len(np.intersect1d(y_true, y_pred)) == 0:\n        return 0.0\n    intersection_size = np.count_nonzero(np.unique(y_true) & np.unique(y_pred))\n    union_size = len(np.unique(y_true)) + len(np.unique(y_pred))\n    jaccard_index = intersection_size / union_size\n    return round(jaccard_index, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    This function calculates the Dice Score between two binary arrays y_true and y_pred.\n    \n    Args:\n    - y_true: A list or array of True values.\n    - y_pred: A list or array of Predicted values.\n    \n    Returns:\n    - A float value indicating the Dice Coefficient.\n    \"\"\"\n    y_true_int = [int(x) for x in y_true]\n    y_pred_int = [int(x) for x in y_pred]\n    y_true_flattened = [x for sublist in y_true_int for x in sublist]\n    y_pred_flattened = [x for sublist in y_pred_int for x in sublist]\n    numerator = 2 * sum((abs(x) for x in y_true_flattened))\n    denominator = len(y_true_flattened) + len(y_pred_flattened)\n    dice_score = numerator / denominator\n    return round(dice_score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    features = {feature_name: value for (feature_name, value) in row.items()}\n    hv_vectors = {}\n    for (feature_name, feature_value) in features.items():\n        seed = random_seeds[feature_name]\n        hv_vector = np.array([seed] * dim)\n        hv_vectors[feature_name] = hv_vector\n    hv_tuple_or_array = tuple(hv_vectors.values())\n    return hv_tuple_or_array.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix for a binary classification problem.\n\n    Input:\n        - data (list of lists): Each inner list represents a pair [y_true, y_pred]\n            where 'y_true' is the actual label and 'y_pred' is the predicted label.\n\n    Output:\n        - A 2x2 confusion matrix represented as a list of lists.\n    \"\"\"\n    data = np.array(data)\n    tp = data[:, 1].sum()\n    fn = data.sum(axis=0).sum()\n    fp = data.sum(axis=1).sum()\n    tn = data.shape[0] - tp\n    cm = np.array([[tp, fp], [fn, tn]])\n    return cm.tolist()"}
{"task_id": 76, "completion_id": 0, "solution": "from typing import Tuple\nimport numpy as np\ndef cosine_similarity(v1: np.ndarray, v2: np.ndarray) -> float:\n    \"\"\"\n    Calculates the cosine similarity between two vectors.\n\n    Parameters:\n    v1 (numpy.ndarray): The first vector.\n    v2 (numpy.ndarray): The second vector.\n\n    Returns:\n    float: The cosine similarity value.\n    \"\"\"\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    if norm_v1 == 0 or norm_v2 == 0:\n        return 0\n    cosine_similarity_value = dot_product / (norm_v1 * norm_v2)\n    return round(cosine_similarity_value, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[float, float, float, float, float]:\n    actual_counts = Counter(actual)\n    predicted_counts = Counter(predicted)\n    cm = [[0 for _ in range(2)] for _ in range(2)]\n    for (i, a) in enumerate(actual):\n        cm[0][a] += 1\n    for (i, p) in enumerate(predicted):\n        cm[p][1] += 1\n    acc = sum((a * b for (a, b) in zip(cm[0], cm[1])))\n    fp = cm[0][1]\n    fn = cm[1][0]\n    precision = tp / (tp + fp) if fp + fn != 0 else 0\n    recall = tp / (tp + fn) if tp + fp != 0 else 0\n    f1 = 2 * (precision * recall / (precision + recall)) if precision + recall != 0 else 0\n    spec = max(fp, 0) + max(fn, 0)\n    specificity = spec if spec > 0 else 0\n    neg_val = sum((a * b for (a, b) in zip(cm[1], cm[0]))) if cm[1].get(1) != 0 else 0\n    npv = min(max(neg_val - cm[1], 0), 1)\n    return (round(acc, 3), round(f1, 3), round(spec, 3), round(npv, 3), round((fp + fn) / (tp + fp + fn + tn), 3))"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate various descriptive statistics for a given numeric dataset.\n\n    :param data: A list or NumPy array of numerical values.\n    :return: A dictionary containing the calculated summary statistics.\n    \"\"\"\n    if not isinstance(data, list) and (not isinstance(data, np.ndarray)):\n        raise ValueError('Input must be a list or NumPy array.')\n    if len(data) < 1:\n        raise ValueError('Data array must contain at least one element for calculation.')\n    stats = {'mean': round(np.mean(data), 4), 'median': round(np.median(data), 4), 'mode': round(np.mode(data)[0], 4), 'variance': round(np.var(data), 4), 'standard_deviation': round(np.std(data), 4), '25th_percentile': round(np.percentile(data, 25), 4), '50th_percentile': round(np.percentile(data, 50), 4), '75th_percentile': round(np.percentile(data, 75), 4), 'interquartile_range': round(np.ptp(data), 4)}\n    return stats"}
{"task_id": 79, "completion_id": 0, "solution": "from math import comb\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    result = comb(k + n - 1, k) * p ** k * (1 - p) ** (n - k)\n    return round(result, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    constant_term = 1 / (math.sqrt(2 * math.pi) * std_dev) * (x - mean) ** 2\n    pdf_value = constant_term + math.exp(-(x - mean) ** 2 / (2 * std_dev ** 2)) * (std_dev ** 2 / (2 * math.sqrt(math.pi)))\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    if k < 0:\n        raise ValueError('k must be non-negative')\n    prob = math.exp(-lam) * pow(lam, k) / factorial(k)\n    return round(prob, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n\n    Returns:\n        float: The calculated contrast value for the image.\n    \"\"\"\n    max_value = np.max(img)\n    min_value = np.min(img)\n    contrast = (max_value - min_value) / max_value * 100\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    vec1 = np.array(vec1)\n    vec2 = np.array(vec2)\n    result = np.dot(vec1, vec2)\n    return result"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    polynomials = [np.poly(degree + i) for i in range(-degree, degree + 1)]"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int) -> np.ndarray:\n    \"\"\"\n    Calculates positional encodings for a sequence length (position) and model dimensionality (d_model).\n    \n    Args:\n        position (int): The sequence length.\n        d_model (int): The dimensionality of the model.\n        \n    Returns:\n        np.ndarray: A positional encoding tensor. \n                     Shape of (position, d_model), where each element is between [-np.inf, 0].\n                     If position == 0, returns -1, otherwise it takes values between -d_model/2 and d_model/2.\n    \"\"\"\n    assert position > 0, f'Position must be positive but got {position}.'\n    assert d_model >= 0, f'd_model must be non-negative but got {d_model}.'\n    normalized_position = position / float(np.floor(position))\n    sine_pos = np.sin(normalized_position)\n    cosine_pos = np.cos(normalized_position)\n    pos_encodings = np.concatenate((sine_pos[:, None], cosine_pos[:, None]), axis=1)\n    pos_encodings = pos_encodings.astype(np.float16)\n    pos_encodings_list = pos_encodings.tolist()\n    return pos_encodings_list"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    if training_accuracy > 0.7 and test_accuracy < 0.8:\n        return 0\n    elif training_accuracy > test_accuracy:\n        return 1\n    else:\n        return -1"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    m_estimate = np.zeros_like(parameter)\n    v_estimate = np.zeros_like(parameter)\n    learning_rate = learning_rate\n    updated_parameters = []\n    m_list = []\n    v_list = []\n    while True:\n        g_estimated = grad - learning_rate * beta1 * m_list[-1] / (np.sqrt(v_list[-1]) + epsilon)\n        m_estimate -= g_estimated\n        v_estimate += g_estimated * beta1\n        m_list.append(m_estimate)\n        v_estimate *= beta2 * (1 - beta2 / (t + 1))\n        m_list.append(beta2 / (t + 1) * m_list[-1] + v_estimate)\n        v_list.append(v_estimate)\n        if t >= 10000:\n            break\n        updated_parameter = parameter - learning_rate * g_estimated\n        updated_parameters.append(updated_parameter)\n        if np.all(g_estimated == 0):\n            break\n    updated_parameters = [round(param, 5) for param in updated_parameters]\n    m_list = [round(m, 5) for m in m_list]\n    v_list = [round(v, 5) for v in v_list]\n    return (tuple(updated_parameters), m_list, v_list)"}
{"task_id": 88, "completion_id": 0, "solution": "import torch"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n\n    def self_attention(crystal_values):\n        num_crystals = len(crystal_values)\n        attention_scores = np.zeros(num_crystals)\n        for i in range(num_crystals):\n            for j in range(i + 1, num_crystals):\n                score = softmax((crystal_values[i] - i * dimension) / dimension) * softmax((crystal_values[j] - j * dimension) / dimension)\n                attention_scores[i] += score\n                attention_scores[j] += score\n        attention_scores = attention_scores.round(4)\n        return np.array(attention_scores)\n    final_patterns = [self_attention(value) for value in crystal_values]\n    return final_patterns"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for a given query over a corpus.\n\n    Parameters:\n    - corpus (list): A list of documents.\n    - query (list): The query string.\n    - k1 (float): The frequency weight parameter k1.\n    - b (float): The document length effect parameter b.\n\n    Returns:\n    - list: Scores for each document from highest to lowest, rounded to 3 decimal places.\n    \"\"\"\n    freq_weights = [query.count(token) * b / len(query) ** k1 for token in set(query)]\n    tfidf = [(freq, doc) for (freq, doc) in Counter(corpus).items()]\n    norm_term_freqs = [norm_term_freq * k1 for norm_term_freq in corpus]\n    doc_length_norm = np.array([len(doc) ** (-b) for doc in corpus])\n    bm25_scores = []\n    for (doc_id, (freq, doc)) in enumerate(tfidf):\n        term_frequency = freq * doc_length_norm[doc_id]\n        if term_frequency > 0:\n            doc_score = ((term_frequency + 1) * freq_weights[doc_id] + 1) / np.sqrt(freq_weights[doc_id] + doc_length_norm[doc_id])\n        else:\n            doc_score = 0\n        bm25_scores.append(round(doc_score, 3))\n    return bm25_scores"}
{"task_id": 91, "completion_id": 0, "solution": "import numpy as np\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of true and predicted labels must be equal.')\n    true_labels = np.array(y_true)\n    predictions = np.array(y_pred)\n    precision = np.mean(true_labels / predictions)\n    recall = np.mean(true_labels / y_true)\n    f1 = 2 * (precision * recall) / (precision + recall)\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.optimize import curve_fit"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    return np.mean(np.abs(y_true - y_pred))"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 95, "completion_id": 0, "solution": "import numpy as np\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    arr_x = np.array(x)\n    arr_y = np.array(y)\n    corr_coef = np.corrcoef(arr_x, arr_y)[0, 1]\n    return round(corr_coef, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import numpy as np\ndef hard_sigmoid(x):\n    \"\"\"Implements the Hard Sigmoid activation function.\"\"\"\n    s = np.where(x >= 0, x, 1 - x)\n    y = np.where(s < 0.5, s * 2, 0.5)\n    return y"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n    \n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x < -math.inf or x > math.inf:\n        return math.exp(-alpha * x)\n    else:\n        return math.exp(alpha * x)"}
{"task_id": 98, "completion_id": 0, "solution": "import numpy as np\ndef prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    result_array = np.zeros_like(x)\n    for i in range(len(x)):\n        if x[i] < 0:\n            result_array[i] = alpha * (1 - np.exp(-x[i]))\n        else:\n            continue\n    return result_array\nalpha = 0.5"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x >= 0:\n        return math.log(1 + math.exp(x))\n    else:\n        return math.log(1 + math.exp(-x))"}
{"task_id": 100, "completion_id": 0, "solution": "import math\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    if abs(x) < 0.5:\n        return 0\n    else:\n        return 2 * x / (math.sqrt(x * x + 1e-09) - x)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    error_sq = np.square(rhos)\n    kl_divergence = -np.sum((pi_theta_old - pi_theta_ref) * np.log(pi_theta_old / pi_theta_ref))\n    clipped_error_sq = np.clip(error_sq, epsilon, None)\n    obj = 0.5 * (clipped_error_sq + beta * kl_divergence)\n    return obj\nrhos = [0.98, 0.97, 0.96]\npi_theta_old = [0.8, 0.8, 0.8]\npi_theta_ref = [0.6, 0.6, 0.6]"}
{"task_id": 102, "completion_id": 0, "solution": "from typing import Union\ndef swish(x: Union[float, int]) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x (Union[float, int]): Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return max(0.05 * x, 1.0)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = x * max(0, x)\n    y = scale * (math.exp(alpha * x) / (1 + math.exp(alpha * x)))\n    return min(y, 3.0)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    exp_values = np.exp(z)\n    probs = exp_values / np.sum(exp_values, axis=1).reshape(-1, 1)\n    binary_predictions = []\n    for p in probs:\n        if p >= 0.5:\n            binary_predictions.append(1)\n        else:\n            binary_predictions.append(0)\n    return binary_predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.metrics import mean_squared_error\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (m, n) = X.shape\n    w = np.random.randn(n)\n    num_samples = m * (y > 0).sum()\n    loss = -np.log((y / (1 - y)).cpu().numpy())\n    for _ in range(iterations):\n        b = w.copy()\n        dW = 2 / m * X.dot(w) + 2 / m * ((y[:, None] - np.exp(-b[None, :])) / (1 + np.exp(-b[None, :])))\n        w -= learning_rate * dW\n    print('Loss at iteration {}:'.format(i))\n    print(loss)\n    print(np.array_equal(b, [w.min(), w.max()]))\n    return ([w], [loss.tolist()])"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import binary_accuracy"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    attn_map = np.zeros_like(V)\n    for i in range(len(mask)):\n        if mask[i] == 1:\n            attn_map[range(len(V)), i] = V[i]\n    return attn_map.reshape(-1)\nmask = np.random.permutation(range(len(W_q))).tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Normalize a 3D array (batch_size x seq_len x feat_dim) along the features dimension,\n    with given normalization parameters gamma and beta, plus epsilon as a small value.\n    \n    Args:\n    - X (np.ndarray): A 3D numpy array of shape (batch_size, seq_len, feat_dim).\n    - gamma (np.ndarray): A 1D numpy array of shape (feat_dim), representing the scale factor for normalization.\n    - beta (np.ndarray): A 1D numpy array of shape (feat_dim), representing the shift factor for normalization.\n    - epsilon (float): A small value added to the eps parameter of PyTorch's torch.nn.functional.normalize method.\n    \n    Returns:\n    - np.ndarray: The normalized 3D array with the same shape as X.\n    \"\"\"\n    X_normalized = X / np.linalg.norm(X, axis=2, keepdims=True)\n    X_scaled = X_normalized[:, :, gamma] + beta * (X_normalized[:, :, gamma].flatten() - X_normalized[:, :, gamma])\n    return X_scaled.tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport re\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_words = set(re.findall('\\\\b\\\\w+\\\\b', reference))\n    cand_words = set(re.findall('\\\\b\\\\w+\\\\b', candidate))\n    ums = len(Counter(ref_words) & Counter(cand_words))\n    p = len(Counter(ref_words)) / float(len(ReferenceWords + candidateWords))\n    r = ums / float(len(CandidateWords))\n    f_mean = 2 * (p * r) / (p + r)\n    penalty = sum((1 for x in ref_words if not any((y[0] == x[0] and y[1] == x[1] for y in cand_words))))\n    score = -(penalty * np.log(penalty))\n    return round(score, 3)\nreference = 'This is a sample reference sentence.'\ncandidate = 'This is also a sample candidate sentence.'"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes Pointwise Mutual Information (PMI) using the provided joint occurrence count,\n    individual counts of the two events, and the total number of samples.\n    \n    Parameters:\n    - joint_counts: A list or array containing the joint occurrences of the two events.\n    - total_counts_x: An integer representing the total count of one event.\n    - total_counts_y: An integer representing the total count of the other event.\n    - total_samples: An integer representing the total number of samples.\n    \n    Returns:\n    - pmi: The calculated Pointwise Mutual Information.\n    \"\"\"\n    if len(joint_counts) != 2 * [total_counts_x] + [total_counts_y]:\n        raise ValueError('Joint counts must be twice the sum of individual frequencies')\n    prob_x = joint_counts / total_counts_x\n    prob_y = joint_counts / total_counts_y\n    pmi = np.sum(np.log(prob_x[np.where(total_samples % prob_x)])) + np.sum(np.log(prob_y[np.where(total_samples % prob_y)]))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "import numpy as np\ndef min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers.\n    \n    Args:\n        x (list[int]): The input list of integers.\n        \n    Returns:\n        list[float]: A new list of floats normalized between 0 and 1.\n    \"\"\"\n    assert len(x) == len(np.unique(x)), 'Input list must have the same number of elements as there are unique feature labels.'\n    min_val = min(x)\n    max_val = max(x)\n    scaled_values = [(val - min_val) / (max_val - min_val)] * len(x)\n    return [round(val, 4) for val in scaled_values]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    \"\"\"\n    Residual Block Function:\n    This function takes a 1D input array x and processes it through two weight matrices w1 and w2,\n    applying ReLU activations followed by a shortcut connection, adding the original input x,\n    and finally returning a list of outputs after processing each layer.\n\n    Parameters:\n    x (np.ndarray): Input data to be processed.\n    w1 (np.ndarray): Weight matrix for the first layer.\n    w2 (np.ndarray): Weight matrix for the second layer.\n\n    Returns:\n    list: A list of output values from each layer of the residual block.\n    \"\"\"\n    z = np.maximum(0, x)\n    h2 = np.dot(z, w2.reshape(-1, 1)).squeeze()\n    sh = np.concatenate([x, h2], axis=1)\n    s = np.tanh(sh).reshape([-1])\n    z2 = np.maximum(0, s)\n    z3 = np.maximum(0, z2)\n    return [z, z3]"}
{"task_id": 114, "completion_id": 0, "solution": "import tensorflow as tf\nfrom tensorflow.keras import layers\ndef global_avg_pool(x):\n    \"\"\"\n    Perform Global Average Pooling on a 3D numpy array x.\n\n    Parameters:\n    x (np.ndarray): A 3D numpy array representing feature maps from a convolutional layer.\n\n    Returns:\n    np.ndarray: A 1D numpy array containing the average value of each channel across all feature maps.\n    \"\"\"\n    flat_x = tf.reshape(x, (-1, x.shape[1], x.shape[2]))\n    avg_pool = tf.keras.layers.GlobalAveragePooling1D()(flat_x)\n    return avg_pool.numpy()"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Batch normalization on a 4D NumPy array.\n\n    Parameters:\n    X (np.ndarray): 4D input data in BCHW format [batch, channels, height, width].\n    gamma (np.ndarray): Scale parameter to adjust the magnitude of activations.\n    beta (np.ndarray): Shift parameter used to shift the values in each channel.\n    epsilon (float): A small constant added to the variance to avoid division by zero during normalizing.\n\n    Returns:\n    np.ndarray: Pre-normalized input array.\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    std = np.std(X, axis=(0, 2, 3), keepdims=True)\n    X -= mean\n    X /= std + epsilon\n    X += beta\n    return X"}
{"task_id": 116, "completion_id": 0, "solution": "import math\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"Computes the derivative of a polynomial term c*x^n\"\"\"\n    derivative = c * (n - 1) * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a list of 2D vectors.\n    \n    Parameters:\n        vectors (List[List[float]]): A list of 2D vectors represented as lists.\n        tol (float): Tolerance to determine linear independence between vectors.\n        \n    Returns:\n        List[Vector]: An orthonormal basis consisting of unit vectors orthogonal to each vector in the input list.\n    \"\"\"\n    normalized_vectors = [v / np.linalg.norm(v, axis=1, keepdims=True) for v in vectors]\n    orthonormalized_vectors = []\n    current_vector = normalized_vectors[0]\n    for vec in normalized_vectors[1:]:\n        new_vec = vec - np.dot(current_vector, vec) * current_vector\n        normalized_current = new_vec / np.linalg.norm(new_vec)\n        current_vector -= current_vector @ normalized_current * normalized_current\n        orthonormalized_vectors.append(normalized_current)\n    return orthonormalized_vectors\nvectors = [[1, 2], [-1, 3]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3D vectors a and b.\n\n    Parameters:\n    a (numpy.ndarray): A 3D numpy array representing the first vector.\n    b (numpy.ndarray): A 3D numpy array representing the second vector.\n\n    Returns:\n    numpy.ndarray: A 2D numpy array representing the cross product of a and b.\n    \"\"\"\n    return np.cross(a, b)\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    n = A.shape[0]\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = np.dot(np.linalg.inv(A), b)\n    x_list = x.tolist()\n    return x_list\nA = np.array([[2, 3], [4, 5]])\nb = np.array([6, 7])"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two probability distributions p and q.\n    \n    Args:\n    p (list[float]): List of probabilities for each class in distribution p.\n    q (list[float]): List of probabilities for each class in distribution q.\n    \n    Returns:\n    float: The Bhattacharyya distance rounded to 4 decimal places. \n           If input lists are not valid or have different lengths, returns 0.0.\n    \"\"\"\n    if len(p) != len(q):\n        return 0.0\n    distance = np.sum((p - q) ** 2)\n    denominator = np.sum(np.sqrt(p * np.log(p / q)))\n    return distance / denominator"}
{"task_id": 121, "completion_id": 0, "solution": "from typing import List\ndef vector_sum(a: List[int | float], b: List[int | float]) -> List[int | float]:\n    \"\"\"\n    Calculate the element-wise sum of two vectors.\n\n    Args:\n        a (List[int | float]): The first input vector.\n        b (List[int | float]): The second input vector.\n\n    Returns:\n        List[int | float]: A new vector containing the element-wise sums.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    result = [a[i] + b[i] for i in range(len(a))]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]) -> np.ndarray:\n    \"\"\"\n    Compute the average gradient of the log-policy multiplied by the return at each time step using REINFORCE\n    :param theta: A 2D NumPy array representing the parameters of the policy\n    :param episodes: A list of episodes, where each episode is represented as [state, action, reward]\n    :return: A 1D NumPy array containing the average gradient values over all episodes\n    \"\"\"\n    flat_episodes = [episode for sublist in episodes for episode in sublist]\n    policy_vector = np.array([np.sum(np.exp(theta[i, :] / temperature) / np.sum(np.exp(theta[i, :]))) for i in range(len(theta))])\n    policy_grads = []\n    for episode in flat_episodes:\n        policy_grad = (policy_vector[0:temperature].T * (episode[1] - episode[2]).reshape(-1, 1)).sum(axis=1).reshape(1, -1)\n        policy_grads.append(policy_grad)\n    policy_grads = np.stack(policy_grads)\n    total_policy_grad = np.mean(policy_grads, axis=0)\n    return total_policy_grad.tolist()\ntheta = np.random.rand(5, 3)\nepisodes = [[(0, 0, 1), (1, 0, -1)], [(2, 2, 0), (4, 1, -1)]]"}
{"task_id": 123, "completion_id": 0, "solution": "import math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    num_flops_dense = n_experts * k_active * d_in * d_out\n    num_flops_moe = n_experts * k_active * d_in * d_out / 8 + num_flops_dense\n    savings_percentage = (num_flops_dense - num_flops_moe) / num_flops_dense * 100\n    return (num_flops_dense, num_flops_moe, round(savings_percentage, 2))"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X, W_g, W_noise, N, k):\n    \"\"\"\n    Compute the final gating probabilities for a MoE model.\n    \n    Parameters:\n    - X: A numpy array of shape (n_samples, n_features)\n    - W_g: A numpy array of shape (n_features, n_factors)\n          containing the factor for each feature across all experts\n    - W_noise: A numpy array of shape (n_features, n_factors)\n               representing the noise on each item from each expert\n             N: A numpy array of shape (n_features,)\n                 containing the number of samples at each position\n                in the output tensor\n    - k: An integer specifying the top-k items that should be selected\n    \n    Returns:\n    - gating_probabilities: A numpy array of shape (n_samples, n_factors, k) \n                            containing the gating probabilities for each\n                            expert at each time step\n    \"\"\"\n    gating_probabilities = np.zeros((N.shape[0], X.shape[1], k))\n    for i in range(N.shape[0]):\n        weights_normed = np.linalg.norm(W_g, axis=1, keepdims=True) * np.ones_like(weights_normed)\n        noisy_sample = W_noise + np.dot(np.mean(X[i:i + N.shape[0]], axis=0), weights_normed)\n        gating_probabilities[i] = np.sign(noisy_sample) / np.abs(noisy_sample)\n    return gating_probabilities.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int) -> np.ndarray:\n    \"\"\"\n    Compute the final MoE output for the given input tensor x, expert weight matrices We and Wg,\n    gating weight matrix Wg, and parameters n_experts and top_k.\n    \n    Parameters:\n        x (np.ndarray): The input tensor.\n        We (np.ndarray): Expert weight matrices.\n        Wg (np.ndarray): Gating weight matrix.\n        n_experts (int): Number of experts.\n        top_k (int): Top k experts per token.\n        \n    Returns:\n        np.ndarray: The final MoE output.\n    \"\"\"\n    x_batch = x.reshape((-1, x.shape[-2], x.shape[-1]))\n    z = np.dot(Wg, x_batch)\n    idxs = np.argsort(-z[:, -top_k:, :])[:n_experts]\n    selected_idxes = idxs // n_experts\n    selected_z = z[idxs]\n    transformed_x = np.einsum('ij,kl->ik', We, selected_z)\n    aggregated_tokens = np.einsum('ik,ik->i', transformed_x, x_batch)\n    return aggregated_tokens.tolist()\nWe = np.random.rand(6, 3, 200)\nWg = np.random.rand(2, 2, 100)\nn_experts = 4\ntop_k = 2"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization over smaller groups of channels.\n\n    Parameters:\n    - X: Input 4D numpy array with shape (B, C, H, W)\n    - gamma: Learning rate for normalization\n    - beta: Scale parameter\n    - num_groups: Number of groups per channel\n    - epsilon: Small constant added to epsilon in the formula\n\n    Returns:\n    - Normalized 2D array with shape (B, C / num_groups, H, W)\n    \"\"\"\n    mean_group = X.mean(axis=(0, 3), keepdims=True)\n    X_normalized = X - mean_group\n    X_weighted = gamma * X_normalized\n    norm_X = X_weighted + beta\n    return norm_X\nX = np.random.rand(4, 6, 8, 10)\ngamma = 0.1\nbeta = 0.2"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the x coordinate of the point where the function f(x) has a minimum,\n    using a specified learning rate, precision, number of iterations, and maximum\n    number of iterations.\n\n    Parameters:\n    start_x (float): The starting x-coordinate of the search.\n    learning_rate (float): The magnitude of the step size for each iteration.\n    tolerance (float): The epsilon value used in the stopping criterion.\n    max_iters (int): The maximum number of iterations allowed.\n\n    Returns:\n    float: The x-coordinate of the minimum point.\n    \"\"\"\n\n    def abs_diff(f, x):\n        return np.abs(f(x) - f(x + learning_rate))\n    x0 = start_x\n    result = None\n    while True:\n        if result is None or abs_diff(abs_diff(result, x), abs_diff(result, x + learning_rate)) < tolerance:\n            break\n        x = x0 - learning_rate * abs_diff(result, x)\n        if np.isnan(x).any() or np.isinf(x).any():\n            print('Convergence condition not met!')\n            break\n        result = x\n    return x\nstart_x = 5.0"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np"}

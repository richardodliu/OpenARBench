{"task_id": 1, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for +=: 'int' and 'list'", "solution": "\ndef matrix_dot_vector(a: list[list[int]], b: list[int]) -> list[float]:\n    \"\"\"\n    Computes the dot product of a matrix and a vector.\n\n    Args:\n        a (list[list[int]]): The matrix.\n        b (list[int]): The vector.\n\n    Returns:\n        list[float]: The dot product of the matrix and vector.\n                       Returns -1 if the dimensions are incompatible.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    else:\n        dot_product = 0\n        for i in range(len(a)):\n            dot_product += a[i] * b[i]\n        return dot_product\nassert matrix_dot_vector([[1, 2, 3], [2, 4, 5], [6, 8, 9]], [1, 2, 3]) == [14, 25, 49]\nassert matrix_dot_vector([[1, 2], [2, 4], [6, 8], [12, 4]], [1, 2, 3]) == -1\nassert matrix_dot_vector([[1.5, 2.5], [3.0, 4.0]], [2, 1]) == [5.5, 10.0]"}
{"task_id": 2, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Computes the transpose of a given matrix.\n\n    Args:\n        a: A list of lists representing the matrix.\n\n    Returns:\n        A new matrix that is the transpose of the input matrix.\n    \"\"\"\n    if not a:\n        return []\n    rows = len(a)\n    cols = len(a[0])\n    transposed_matrix = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed_matrix[j][i] = a[i][j]\n    return transposed_matrix\nassert transpose_matrix([[1,2],[3,4],[5,6]]) == [[1, 3, 5], [2, 4, 6]]\nassert transpose_matrix([[1,2,3],[4,5,6]]) == [[1, 4], [2, 5], [3, 6]]\nassert transpose_matrix([[1,2],[3,4]]) == [[1, 3], [2, 4]]"}
{"task_id": 3, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshape a given matrix into a specified shape using numpy's tolist() method.\n    If the matrix cannot be reshaped, return an empty list.\n    \"\"\"\n    try:\n        reshaped_matrix = np.reshape(a, new_shape)\n        return reshaped_matrix.tolist()\n    except ValueError:\n        return []\nassert reshape_matrix([[1,2,3,4],[5,6,7,8]], (4, 2)) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert reshape_matrix([[1, 2, 3, 4], [5, 6, 7, 8]], (1, 4)) == []\nassert reshape_matrix([[1,2,3],[4,5,6]], (3, 2)) == [[1, 2], [3, 4], [5, 6]]\nassert reshape_matrix([[1,2,3,4],[5,6,7,8]], (2, 4)) == [[1, 2, 3, 4], [5, 6, 7, 8]]"}
{"task_id": 4, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculates the mean of a matrix by row or column, based on a given mode.\n\n    Args:\n        matrix (list[list[float]]): The input matrix.\n        mode (str): The mode to calculate the mean for ('row' or 'column').\n\n    Returns:\n        list[float]: A list of means, one for each mode.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return []\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    if mode == 'row':\n        total_sum = 0\n        total_count = 0\n        for row in matrix:\n            total_sum += sum(row)\n            total_count += len(row)\n        if total_count == 0:\n            return []\n        mean = total_sum / total_count\n        return [mean] * num_rows\n    elif mode == 'column':\n        total_sum = 0\n        total_count = 0\n        for j in range(num_cols):\n            col_sum = 0\n            for i in range(num_rows):\n                col_sum += matrix[i][j]\n            total_sum += col_sum\n            total_count += len(matrix[i])\n        if total_count == 0:\n            return []\n        mean = total_sum / total_count\n        return [mean] * num_cols\n    else:\n        return []\nassert calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'column') == [4.0, 5.0, 6.0]\nassert calculate_matrix_mean([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'row') == [2.0, 5.0, 8.0]"}
{"task_id": 5, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the result.\n\n    Args:\n        matrix: A list of lists representing the matrix.\n        scalar: The scalar value to multiply the matrix by.\n\n    Returns:\n        A new matrix that is the result of multiplying the input matrix by the scalar.\n    \"\"\"\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result\nassert scalar_multiply([[1,2],[3,4]], 2) == [[2, 4], [6, 8]]\nassert scalar_multiply([[0,-1],[1,0]], -1) == [[0, 1], [-1, 0]]"}
{"task_id": 6, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculates the eigenvalues of a 2x2 matrix.\n\n    Args:\n        matrix: A 2x2 matrix represented as a list of lists.\n\n    Returns:\n        A list containing the eigenvalues, sorted from highest to lowest.\n    \"\"\"\n    eigenvalues = []\n    try:\n        a = matrix[0][0]\n        b = matrix[0][1]\n        c = matrix[1][0]\n        d = matrix[1][1]\n        trace = a + d\n        determinant = a * d - b * c\n        discriminant = trace ** 2 - 4 * determinant\n        if discriminant >= 0:\n            eigenvalue1 = (trace + discriminant ** 0.5) / 2\n            eigenvalue2 = (trace - discriminant ** 0.5) / 2\n            eigenvalues.append(eigenvalue1)\n            eigenvalues.append(eigenvalue2)\n        else:\n            print('Complex eigenvalues detected. Returning empty list.')\n            return []\n    except:\n        print('Invalid matrix format. Please provide a 2x2 matrix.')\n        return []\n    return eigenvalues\nassert calculate_eigenvalues([[2, 1], [1, 2]]) == [3.0, 1.0]\nassert calculate_eigenvalues([[4, -2], [1, 1]]) == [3.0, 2.0]"}
{"task_id": 7, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef transform_matrix(A, T, S):\n    \"\"\"\n    Transforms a matrix A using the inverse of matrix T and the inverse of matrix S.\n\n    Args:\n        A (list[list[int]]): The input matrix.\n        T (list[list[int]]): The matrix to be inverted.\n        S (list[list[int]]): The matrix to be inverted.\n\n    Returns:\n        list[list[int]]: The transformed matrix, or -1 if the matrices are not invertible.\n    \"\"\"\n    try:\n        A = np.array(A)\n        T = np.array(T)\n        S = np.array(S)\n        if np.linalg.det(T) == 0:\n            return -1\n        else:\n            T_inv = np.linalg.inv(T)\n            S_inv = np.linalg.inv(S)\n            transformed_A = np.dot(A, T_inv)\n            transformed_S = np.dot(S, S_inv)\n            return transformed_A.tolist()\n    except:\n        return -1\nassert transform_matrix([[1, 2], [3, 4]], [[2, 0], [0, 2]], [[1, 1], [0, 1]]) == [[0.5,1.5],[1.5,3.5]]\nassert transform_matrix([[1, 0], [0, 1]], [[1, 2], [3, 4]], [[2, 0], [0, 2]]) == [[-4.0, 2.0], [3.0, -1.0]]\nassert transform_matrix([[2, 3], [1, 4]], [[3, 0], [0, 3]], [[1, 1], [0, 1]]) == [[0.6667, 1.6667], [0.3333, 1.6667]]\nassert transform_matrix([[2, 3], [1, 4]], [[3, 0], [0, 3]], [[1, 1], [1, 1]]) == -1"}
{"task_id": 8, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n\n    Args:\n        matrix: A 2x2 matrix represented as a list of lists.\n\n    Returns:\n        The inverse of the matrix as a list of lists.\n        Returns None if the matrix is not invertible.\n    \"\"\"\n    a = matrix[0][0]\n    b = matrix[0][1]\n    c = matrix[1][0]\n    d = matrix[1][1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse\nassert inverse_2x2([[4, 7], [2, 6]]) == [[0.6, -0.7], [-0.2, 0.4]]\nassert inverse_2x2([[2, 1], [6, 2]]) == [[-1.0, 0.5], [3.0, -1.0]]"}
{"task_id": 9, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Multiply two matrices.\n    If the matrices cannot be multiplied, return -1.\n    \"\"\"\n    rows_a = len(a)\n    cols_a = len(a[0]) if rows_a > 0 else 0\n    rows_b = len(b)\n    cols_b = len(b[0]) if rows_b > 0 else 0\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\nassert matrixmul([[1,2,3],[2,3,4],[5,6,7]],[[3,2,1],[4,3,2],[5,4,3]]) == [[26, 20, 14], [38, 29, 20], [74, 56, 38]]\nassert matrixmul([[0,0],[2,4],[1,2]],[[0,0],[2,4]]) == [[0, 0], [8, 16], [4, 8]]\nassert matrixmul([[0,0],[2,4],[1,2]],[[0,0,1],[2,4,1],[1,2,3]]) == -1"}
{"task_id": 10, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculates the covariance matrix for a set of vectors.\n\n    Args:\n        vectors: A list of lists, where each inner list represents a vector.\n\n    Returns:\n        A list of lists representing the covariance matrix.\n    \"\"\"\n    import numpy as np\n    try:\n        vectors_np = np.array(vectors)\n        covariance_matrix = np.cov(vectors_np, rowvar=False)\n        covariance_matrix_list = covariance_matrix.tolist()\n        return covariance_matrix_list\n    except Exception as e:\n        print(f'Error calculating covariance matrix: {e}')\n        return None\nassert calculate_covariance_matrix([[1, 2, 3], [4, 5, 6]]) == [[1.0, 1.0], [1.0, 1.0]]\nassert calculate_covariance_matrix([[1, 5, 6], [2, 3, 4], [7, 8, 9]]) == [[7.0, 2.5, 2.5], [2.5, 1.0, 1.0], [2.5, 1.0, 1.0]]"}
{"task_id": 11, "completion_id": 0, "passed": false, "result": "failed: solve: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (m,m),(m,n)->(m,n) requires 2)", "solution": "import numpy as np\nimport numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solve a system of linear equations Ax = b using the Jacobi method.\n\n    Args:\n        A (np.ndarray): The coefficient matrix.\n        b (np.ndarray): The right-hand side vector.\n        n (int): The number of equations.\n\n    Returns:\n        list: A list of approximate solutions to Ax = b, rounded to four decimal places.\n    \"\"\"\n    x = np.zeros(n + 1, dtype=np.float64)\n    for i in range(n + 1):\n        x[i] = 1.0\n        for j in range(i):\n            d = np.linalg.solve(A, x[j])\n            x[i] += d[0]\n    return x.tolist()\nassert solve_jacobi(np.array([[5, -2, 3], [-3, 9, 1], [2, -1, -7]]), np.array([-1, 2, 3]),2) == [0.146, 0.2032, -0.5175]\nassert solve_jacobi(np.array([[4, 1, 2], [1, 5, 1], [2, 1, 3]]), np.array([4, 6, 7]),5) == [-0.0806, 0.9324, 2.4422]\nassert solve_jacobi(np.array([[4,2,-2],[1,-3,-1],[3,-1,4]]), np.array([0,7,5]),3) == [1.7083, -1.9583, -0.7812]"}
{"task_id": 12, "completion_id": 0, "passed": false, "result": "failed: name 'svd_2x2_singular_values' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert svd_2x2_singular_values(np.array([[2, 1], [1, 2]])) == ([[0.7071, -0.7071], [0.7071, 0.7071]], [3.0, 1.0], [[0.7071, 0.7071], [-0.7071, 0.7071]])\nassert svd_2x2_singular_values(np.array([[1, 2], [3, 4]])) == ([[0.4046, 0.9145], [0.9145, -0.4046]], [5.465, 0.366], [[0.576, 0.8174], [-0.8174, 0.576]])"}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculates the determinant of a 4x4 matrix using Laplace's expansion.\n\n    Args:\n        matrix: A 4x4 matrix represented as a list of lists of integers or floats.\n\n    Returns:\n        The determinant of the matrix.\n    \"\"\"\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Matrix must be 4x4')\n    if len(matrix) == 4:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    else:\n        determinant = 0\n        for i in range(4):\n            submatrix = [row[:i] + row[i + 1:] for row in matrix[1:]]\n            determinant += (-1) ** i * matrix[0][i] * determinant_4x4(submatrix)\n        return determinant\nassert determinant_4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 0\nassert determinant_4x4([[4, 3, 2, 1], [3, 2, 1, 4], [2, 1, 4, 3], [1, 4, 3, 2]]) == -160\nassert determinant_4x4([[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == 0"}
{"task_id": 14, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_normal_equation(X, y):\n    \"\"\"\n    Performs linear regression using the normal equation.\n\n    Args:\n        X (list[list[float]]): A matrix where each row represents a data point\n        y (list[float]): A vector of target values.\n\n    Returns:\n        list[float]: A list of coefficients (slope and intercept) for the linear regression model.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    coefficients = np.linalg.solve(X.T @ X, X.T @ y)\n    return [round(coefficients[0], 4), round(coefficients[1], 4)]\nassert linear_regression_normal_equation([[1, 1], [1, 2], [1, 3]], [1, 2, 3]) == [0.0, 1.0]\nassert linear_regression_normal_equation([[1, 3, 4], [1, 2, 5], [1, 3, 2]], [1, 2, 1]) == [4.0, -1.0, -0.0]"}
{"task_id": 15, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gradient_descent(X, y, alpha, iterations):\n    \"\"\"\n    Performs linear regression using gradient descent.\n\n    Args:\n        X (np.ndarray): Features (column of ones).\n        y (np.ndarray): Target values (column of 1s).\n        alpha (float): Learning rate.\n        iterations (int): Number of iterations.\n\n    Returns:\n        np.ndarray: Coefficients of the linear regression model.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n = len(X)\n    for i in range(iterations):\n        y_pred = X @ alpha\n        error = y - y_pred\n        alpha = alpha * (1 / n) * np.sum(error)\n    return alpha.tolist()\nassert linear_regression_gradient_descent(np.array([[1, 1], [1, 2], [1, 3]]), np.array([1, 2, 3]), 0.01, 1000) == [0.1107, 0.9513]"}
{"task_id": 16, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef feature_scaling(data: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Performs feature scaling using both standardization and min-max normalization.\n\n    Args:\n        data (np.ndarray): A 2D NumPy array where each row represents a data sample\n                         and each column represents a feature.\n\n    Returns:\n        tuple: A tuple containing two lists: one scaled by standardization and one by min-max normalization.\n    \"\"\"\n    std = np.std(data, axis=0)\n    min_val = np.min(data)\n    max_val = np.max(data)\n    standardized_data = (data - min_val) / std\n    normalized_data = (data - min_val) / (max_val - min_val)\n    return (standardized_data, normalized_data)\nassert feature_scaling(np.array([[1, 2], [3, 4], [5, 6]])) == ([[-1.2247, -1.2247], [0.0, 0.0], [1.2247, 1.2247]], [[0.0, 0.0], [0.5, 0.5], [1.0, 1.0]])"}
{"task_id": 17, "completion_id": 0, "passed": false, "result": "failed: k_means_clustering() takes 3 positional arguments but 4 were given", "solution": "import numpy as np\nimport numpy as np\ndef k_means_clustering(points, k, initial_centroids):\n    \"\"\"\n    Implements the k-means clustering algorithm.\n\n    Args:\n        points (list): A list of points, where each point is a tuple (x, y).\n        k (int): The number of clusters to form.\n        initial_centroids (list): A list of initial centroids.\n\n    Returns:\n        list: A list of final centroids, rounded to 4 decimal places.\n    \"\"\"\n    points = np.array(points)\n    centroids = initial_centroids.copy()\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points - centroids, axis=1)\n        next_centroid = np.argmin(distances)\n        centroids.append(next_centroid)\n    return centroids.tolist()\nassert k_means_clustering([(1, 2), (1, 4), (1, 0), (10, 2), (10, 4), (10, 0)], 2, [(1, 1), (10, 1)], 10) == [(1.0, 2.0), (10.0, 2.0)]\nassert k_means_clustering([(0, 0, 0), (2, 2, 2), (1, 1, 1), (9, 10, 9), (10, 11, 10), (12, 11, 12)], 2, [(1, 1, 1), (10, 10, 10)], 10) == [(1.0, 1.0, 1.0), (10.3333, 10.6667, 10.3333)]\nassert k_means_clustering([(1, 1), (2, 2), (3, 3), (4, 4)], 1, [(0,0)], 10) == [(2.5, 2.5)]\nassert k_means_clustering([(0, 0), (1, 0), (0, 1), (1, 1), (5, 5), (6, 5), (5, 6), (6, 6),(0, 5), (1, 5), (0, 6), (1, 6), (5, 0), (6, 0), (5, 1), (6, 1)], 4, [(0, 0), (0, 5), (5, 0), (5, 5)], 10) == [(0.5, 0.5), (0.5, 5.5), (5.5, 0.5), (5.5, 5.5)]"}
{"task_id": 18, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\nimport pandas as pd\ndef k_fold_cross_validation(X, y, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generates train and test splits for K-Fold Cross-Validation.\n\n    Args:\n        X (np.ndarray): The input features data.\n        y (np.ndarray): The target variable data.\n        k (int): The number of folds (default: 5).\n        shuffle (bool): Whether to shuffle the data (default: True).\n        random_seed (int): Random seed for reproducibility (default: None).\n\n    Returns:\n        tuple: A tuple containing the train and test indices.\n    \"\"\"\n    if shuffle:\n        np.random.seed(random_seed)\n        indices = np.arange(len(X))\n    else:\n        indices = np.arange(len(X))\n    train_indices = indices[:int(k * len(X))]\n    test_indices = indices[int(k * len(X)):]\n    return (train_indices, test_indices)\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=5, shuffle=False) == [([2, 3, 4, 5, 6, 7, 8, 9], [0, 1]), ([0, 1, 4, 5, 6, 7, 8, 9], [2, 3]), ([0, 1, 2, 3, 6, 7, 8, 9], [4, 5]), ([0, 1, 2, 3, 4, 5, 8, 9], [6, 7]), ([0, 1, 2, 3, 4, 5, 6, 7], [8, 9])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=2, shuffle=True, random_seed=42) == [([2, 9, 4, 3, 6], [8, 1, 5, 0, 7]), ([8, 1, 5, 0, 7], [2, 9, 4, 3, 6])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]), np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]), k=3, shuffle=False) == [([5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 1, 2, 3, 4]), ([0, 1, 2, 3, 4, 10, 11, 12, 13, 14], [5, 6, 7, 8, 9]), ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14])]\nassert k_fold_cross_validation(np.array([0,1,2,3,4,5,6,7,8,9]), np.array([0,1,2,3,4,5,6,7,8,9]), k=2, shuffle=False) == [([5, 6, 7, 8, 9], [0, 1, 2, 3, 4]), ([0, 1, 2, 3, 4], [5, 6, 7, 8, 9])]"}
{"task_id": 19, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef pca(data: np.ndarray, k: int) -> list[np.ndarray]:\n    \"\"\"\n    Performs Principal Component Analysis (PCA) on a 2D dataset.\n\n    Args:\n        data (np.ndarray): A 2D NumPy array where each row represents a sample and each column represents a feature.\n        k (int): The number of principal components to retain.\n\n    Returns:\n        list[np.ndarray]: A list of principal components, where each component is a NumPy array.\n    \"\"\"\n    data_standardized = data - np.mean(data, axis=0)\n    data_standardized = data_standardized / np.std(data_standardized, axis=0)\n    covariance_matrix = np.cov(data_standardized.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    eigenvalues = np.sort(eigenvalues)[::-1]\n    eigenvectors = eigenvectors[:, :k]\n    return eigenvectors.tolist()\nassert pca(np.array([[4,2,1],[5,6,7],[9,12,1],[4,6,7]]),2) == [[0.6855, 0.0776], [0.6202, 0.4586], [-0.3814, 0.8853]]\nassert pca(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[0.7071], [0.7071]]"}
{"task_id": 20, "completion_id": 0, "passed": false, "result": "failed: bad operand type for unary -: 'str'", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Implements the decision tree learning algorithm using recursive binary splitting.\n\n    Args:\n        examples: A list of dictionaries, where each dictionary represents an example\n                   and contains attribute-value pairs.\n        attributes: A list of attribute names.\n        target_attr: The name of the target attribute to predict.\n\n    Returns:\n        A nested dictionary representing the decision tree.\n    \"\"\"\n    if len(examples) == 0:\n        return {}\n    if target_attr not in examples[0]:\n        return {}\n    entropy = calculate_entropy(examples[0])\n    information_gain = calculate_information_gain(examples[0], attributes, target_attr)\n    best_split = find_best_split(examples[0], attributes, target_attr)\n    tree = {}\n    tree[target_attr] = {}\n    tree[target_attr][best_split] = examples[0][best_split]\n    tree[target_attr][best_split]['left'] = examples[0][best_split]\n    tree[target_attr][best_split]['right'] = examples[1]\n    return tree\ndef calculate_entropy(data: dict) -> float:\n    \"\"\"Calculates the entropy of a dataset.\"\"\"\n    counts = Counter(data.values())\n    total_count = len(data)\n    entropy = 0.0\n    for count in counts.values():\n        probability = count / total_count\n        entropy -= probability * math.log2(probability)\n    return entropy\ndef calculate_information_gain(data: dict, attributes: list[str], target_attr: str) -> float:\n    \"\"\"Calculates the information gain of a decision tree.\"\"\"\n    total_attributes = len(attributes)\n    entropy_sum = 0.0\n    for attribute in attributes:\n        if attribute in data:\n            count = data[attribute]\n            entropy_sum += -count / total_attributes\n    return entropy_sum\ndef find_best_split(data: dict, attributes: list[str], target_attr: str) -> str:\n    \"\"\"Finds the best split for a given node.\"\"\"\n    best_split = None\n    max_information_gain = -1.0\n    for attribute in attributes:\n        if attribute in data:\n            count = data[attribute]\n            information_gain = calculate_information_gain(data, attributes, target_attr)\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_split = attribute\n    return best_split\nassert learn_decision_tree([ {'Outlook': 'Sunny', 'Wind': 'Weak', 'PlayTennis': 'No'}, {'Outlook': 'Overcast', 'Wind': 'Strong', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Sunny', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Sunny', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Overcast', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Rain', 'Wind': 'Weak', 'PlayTennis': 'Yes'} ], ['Outlook', 'Wind'], 'PlayTennis') == {'Outlook': {'Sunny': {'Wind': {'Weak': 'No', 'Strong': 'No'}}, 'Rain': {'Wind': {'Weak': 'Yes', 'Strong': 'No'}}, 'Overcast': 'Yes'}}"}
{"task_id": 21, "completion_id": 0, "passed": false, "result": "failed: index 2 is out of bounds for axis 1 with size 2", "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data, labels, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic Pegasos kernel SVM implementation.\n\n    Args:\n        data (np.ndarray): 2D NumPy array representing the dataset.\n        labels (np.ndarray): 1D NumPy array representing the labels.\n        kernel (str): The kernel type ('linear' or 'rbf').\n        lambda_val (float): The regularization parameter (lambda).\n        iterations (int): The number of iterations to perform.\n        sigma (float): The standard deviation of the Gaussian kernel.\n\n    Returns:\n        tuple: A tuple containing the model coefficients (alpha) and bias.\n    \"\"\"\n    if kernel == 'linear':\n        alpha = np.zeros(iterations)\n        bias = 0.0\n    elif kernel == 'rbf':\n        alpha = np.zeros(iterations)\n        bias = 0.0\n    else:\n        raise ValueError(\"Invalid kernel type. Choose 'linear' or 'rbf'.\")\n    for i in range(iterations):\n        kernel_value = np.zeros(iterations)\n        for j in range(iterations):\n            kernel_value[j] = np.exp(-lambda_val * (data[i, j] - data[i, i]) ** 2 / (2 * sigma ** 2))\n        alpha[i] = lambda_val * kernel_value\n        bias = np.sum(alpha)\n    return (alpha.tolist(), bias)\nassert pegasos_kernel_svm(np.array([[1, 2], [2, 3], [3, 1], [4, 1]]), np.array([1, 1, -1, -1]), kernel='linear', lambda_val=0.01, iterations=100) == ([100.0, 0.0, -100.0, -100.0], -937.4755)\nassert pegasos_kernel_svm(np.array([[1, 2], [2, 3], [3, 1], [4, 1]]), np.array([1, 1, -1, -1]), kernel='rbf', lambda_val=0.01, iterations=100, sigma=0.5) == ([100.0, 99.0, -100.0, -100.0], -115.0)\nassert pegasos_kernel_svm(np.array([[2, 1], [3, 2], [1, 3], [1, 4]]), np.array([-1, -1, 1, 1]), kernel='rbf', lambda_val=0.01, iterations=100, sigma=0.5) == ([-100.0, 0.0, 100.0, 90.6128], -102.8081)\nassert pegasos_kernel_svm(np.array([[2, 1], [3, 2], [1, 3], [1, 4]]), np.array([-1, -1, 1, 1]), kernel='linear', lambda_val=0.01, iterations=100) == ([-100.0, -100.0, 0.0, 0.0], -1037.4755)"}
{"task_id": 22, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import math\nimport math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the output of the sigmoid function given an input value z.\n    The function returns the output rounded to four decimal places.\n    \"\"\"\n    return math.exp(z * (1 - z))\nassert sigmoid(0) == 0.5\nassert sigmoid(1) == 0.7311\nassert sigmoid(-1) == 0.2689"}
{"task_id": 23, "completion_id": 0, "passed": false, "result": "failed: module 'math' has no attribute 'round'", "solution": "import math\nimport math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Computes the softmax activation values for a list of scores.\n\n    Args:\n        scores (list[float]): A list of numerical scores.\n\n    Returns:\n        list[float]: A list of softmax values rounded to four decimal places.\n    \"\"\"\n    if not scores:\n        return []\n    sum_scores = sum(scores)\n    exp_scores = [math.exp(s) for s in scores]\n    sum_exp_scores = sum(exp_scores)\n    norm_scores = [s / sum_exp_scores for s in exp_scores]\n    return [math.round(s * norm_scores) for s in norm_scores]\nassert softmax([1, 2, 3]) == [0.09, 0.2447, 0.6652]\nassert softmax([1, 1, 1]) == [0.3333, 0.3333, 0.3333]\nassert softmax([-1, 0, 5]) == [0.0025, 0.0067, 0.9909]"}
{"task_id": 24, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (3,) (3,2) ", "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> tuple[list[float], float]:\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function and returns the predicted probabilities and the mean squared error.\n\n    Args:\n        features (list[list[float]]): A list of feature vectors for each example.\n        labels (list[int]): A list of true binary labels for each example.\n        weights (list[float]): A list of weights for each feature.\n        bias (float): The bias term for the neuron.\n\n    Returns:\n        tuple: A tuple containing the predicted probabilities and the mean squared error.\n    \"\"\"\n    features = np.array(features)\n    labels = np.array(labels)\n    weights = np.array(weights)\n    bias = bias\n    predicted_probabilities = 1 / (1 + np.exp(-weights * features))\n    mse = np.mean((labels - predicted_probabilities) ** 2)\n    return (predicted_probabilities.tolist(), mse)\nassert single_neuron_model([[0.5, 1.0], [-1.5, -2.0], [2.0, 1.5]], [0, 1, 0], [0.7, -0.4], -0.1) == ([0.4626, 0.4134, 0.6682], 0.3349)\nassert single_neuron_model([[1, 2], [2, 3], [3, 1]], [1, 0, 1], [0.5, -0.2], 0) == ([0.525, 0.5987, 0.7858], 0.21)\nassert single_neuron_model([[2, 3], [3, 1], [1, 2]], [1, 0, 1], [0.5, -0.2], 1) == ([0.8022, 0.9089, 0.7503], 0.3092)"}
{"task_id": 25, "completion_id": 0, "passed": false, "result": "failed: 'float' object has no attribute 'copy'", "solution": "import numpy as np\nimport numpy as np\ndef train_neuron(features, labels, initial_weights, initial_bias, learning_rate, epochs):\n    \"\"\"\n    Simulates a single neuron with sigmoid activation and backpropagation.\n\n    Args:\n        features (np.ndarray): A NumPy array of feature values.\n        labels (np.ndarray): A NumPy array of true labels.\n        initial_weights (np.ndarray): Initial weights for the neuron.\n        initial_bias (np.ndarray): Initial bias for the neuron.\n        learning_rate (float): The learning rate for gradient descent.\n        epochs (int): The number of epochs to train for.\n\n    Returns:\n        tuple: A tuple containing the updated weights, bias, and MSE values for each epoch.\n    \"\"\"\n    weights = initial_weights.copy()\n    bias = initial_bias.copy()\n    mse = 0.0\n    for epoch in range(epochs):\n        error = np.mean((labels - features) ** 2)\n        dw = 1 / epochs * np.sum(weights * (error - labels))\n        db = 1 / epochs * np.sum(bias * (error - labels))\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        mse += error ** 2\n    return (weights, bias, mse)\nassert train_neuron(np.array([[1.0, 2.0], [2.0, 1.0], [-1.0, -2.0]]), np.array([1, 0, 0]), np.array([0.1, -0.2]), 0.0, 0.1, 2) == ([0.1036, -0.1425], -0.0167, [0.3033, 0.2942])\nassert train_neuron(np.array([[1, 2], [2, 3], [3, 1]]), np.array([1, 0, 1]), np.array([0.5, -0.2]), 0, 0.1, 3) == ([0.4892, -0.2301], 0.0029, [0.21, 0.2087, 0.2076])\nassert train_neuron(np.array([[1, 3], [2, 1], [-1, -3]]), np.array([1, 0, 0]), np.array([-0.1, -0.2]), 0.0, 0.1, 2) == ([-0.087, -0.0951], -0.0131, [0.3513, 0.3227])"}
{"task_id": 26, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for *: 'Value' and 'Value'", "solution": "\nclass Value:\n\n    def __init__(self, data, _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set()\n        self._op = _op\n\n    def add(self, other):\n        \"\"\"Adds two values.\"\"\"\n        self.data += other.data\n        self.grad += self.data - other.data\n        self._backward()\n        return self.data\n\n    def multiply(self, other):\n        \"\"\"Multiplies two values.\"\"\"\n        self.data *= other.data\n        self.grad += self.data * other.data\n        self._backward()\n        return self.data\n\n    def relu(self, x):\n        \"\"\"Applies ReLU activation.\"\"\"\n        self.data = [max(0, x)]\n        self.grad = 0\n        self._backward()\n        return self.data\n\n    def sigmoid(self, x):\n        \"\"\"Applies sigmoid activation.\"\"\"\n        self.data = [1 / (1 + 2.0 * x)]\n        self.grad = 0\n        self._backward()\n        return self.data\n\n    def derivative(self, x):\n        \"\"\"Calculates the derivative of the value.\"\"\"\n        if self._op == 'add':\n            return self.data - x\n        elif self._op == 'multiply':\n            return self.data * x\n        elif self._op == 'relu':\n            return self.data - x\n        elif self._op == 'sigmoid':\n            return self.data * (1 - x)\n        else:\n            return None\n\n    def backward(self, grad=None):\n        \"\"\"Performs backward propagation to compute gradients.\"\"\"\n        if grad is None:\n            return\n        if self._op == 'add':\n            grad_val = self.grad\n            self.grad += self.data - other.data\n            self._backward()\n        elif self._op == 'multiply':\n            grad_val = self.grad\n            self.grad += self.data * other.data\n            self._backward()\n        elif self._op == 'relu':\n            grad_val = self.grad\n            self.grad += self.data - other.data\n            self._backward()\n        elif self._op == 'sigmoid':\n            grad_val = self.grad\n            self.grad += self.data * (1 - other.data)\n            self._backward()\n        else:\n            return\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'\na = Value(2)\nb = Value(3)\nc = Value(10)\nd = a + b * c \ne = Value(7) * Value(2)\nf = e + d\ng = f.relu() \ng.backward()\n\nassert a.data, a.grad == (2, 1)\nassert b.data, b.grad == (3, 10)\nassert c.data, c.grad == (10, 3)\nassert d.data, d.grad == (32, 1)\nassert e.data, e.grad == (14, 1)\nassert f.data, f.grad == (46, 1)\nassert g.data, g.grad == (46, 1)\na = Value(3)\nb = Value(4)\nc = Value(2)\nd = a * b + c \nd.backward()\n\nassert a.data, a.grad == (3, 1)\nassert b.data, b.grad == (4, 1)\nassert c.data, c.grad == (2, 1)\nassert d.data, d.grad == (14, 1)\na = Value(3)\nb = Value(4)\nc = Value(5)\nd = b * c \ne = a + d * b\ne.backward() \n\nassert a.data, a.grad == (3, 1)\nassert b.data, b.grad == (4, 1)\nassert c.data, c.grad == (5, 1)\nassert d.data, d.grad == (20, 1)\nassert e.data, e.grad == (83, 1)"}
{"task_id": 27, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef transform_basis(B: list[list[float]], C: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Transforms a basis vector from one basis to another using NumPy.\n\n    Args:\n        B: A list of lists representing the basis vectors in the first basis.\n        C: A list of lists representing the basis vectors in the second basis.\n\n    Returns:\n        A list of lists representing the transformation matrix from B to C.\n    \"\"\"\n    B = np.array(B)\n    C = np.array(C)\n    P = np.dot(B, C.T)\n    P = np.round(P, 4)\n    return P.tolist()\nassert transform_basis([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1, 2.3, 3], [4.4, 25, 6], [7.4, 8, 9]]) == [[-0.6772, -0.0126, 0.2342], [-0.0184, 0.0505, -0.0275], [0.5732, -0.0345, -0.0569]]\nassert transform_basis([[1,0],[0,1]],[[1,2],[9,2]]) == [[-0.125, 0.125 ],[ 0.5625, -0.0625]]\nassert transform_basis([[-1, 0], [3, 4]], [[2, -1], [0, 1]]) == [[1, 2], [3, 4]]\nassert transform_basis([[4, 8], [2, 4]], [[2, 1], [0, 1]]) == [[1, 2], [2, 4]]"}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef svd_2x2(A):\n    \"\"\"\n    Computes the Singular Value Decomposition (SVD) of a 2x2 matrix.\n\n    Args:\n        A (np.ndarray): A 2x2 NumPy array representing the matrix.\n\n    Returns:\n        tuple: A tuple containing the singular values (S), the matrix U, and the vector V.\n    \"\"\"\n    (U, s, V) = np.linalg.svd(A)\n    return (U, s, V)\nassert svd_2x2(np.array([[-10, 8], [10, -1]])) == ([[0.8, -0.6], [-0.6, -0.8]], [15.6525, 4.4721], [[-0.8944, 0.4472], [-0.4472, -0.8944]])\nassert svd_2x2(np.array([[1, 2], [3, 4]])) == ([[-0.4046, -0.9145], [-0.9145, 0.4046]], [5.465, 0.366], [[-0.576, -0.8174], [0.8174, -0.576]])\nassert svd_2x2(np.array([[3, 5], [7, 9]])) == ([[-0.4538, -0.8911], [-0.8911, 0.4538]], [12.791, 0.6254], [[-0.5941, -0.8044], [0.8044, -0.5941]])"}
{"task_id": 29, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Performs a random shuffle of the samples in two numpy arrays, X and y,\n    while maintaining the corresponding order.\n\n    Args:\n        X (numpy.ndarray): The first numpy array.\n        y (numpy.ndarray): The second numpy array.\n        seed (int, optional): The seed for the random number generator.\n                              Defaults to None.\n\n    Returns:\n        numpy.ndarray: A reshaped list of the shuffled samples.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    shuffled_X = X.tolist()\n    shuffled_y = y.tolist()\n    return shuffled_X + shuffled_y\nassert shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([1, 2, 3, 4]), seed=42) == ([[3, 4], [7, 8], [1, 2], [5, 6]], [2, 4, 1, 3])\nassert shuffle_data(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), seed=24) == ([[4, 4],[2, 2],[1, 1],[3, 3]], [40, 20, 10, 30])\nassert shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([4, 6, 7, 8]), seed=10) == ([[5, 6], [1, 2], [7, 8], [3, 4]], [7, 4, 8, 6])\nassert shuffle_data(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([4, 5, 6, 7]), seed=20) == ([[1, 3], [3, 6], [5, 8], [7, 11]], [4, 5, 6, 7])"}
{"task_id": 30, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef batch_iterator(X, y, batch_size=64):\n    \"\"\"\n    Yields batches of (X, y) pairs from a NumPy array.\n\n    Args:\n        X (np.ndarray): The input NumPy array.\n        y (np.ndarray, optional): The target array. Defaults to None.\n        batch_size (int, optional): The size of each batch. Defaults to 64.\n\n    Yields:\n        tuple: A tuple containing the input array X and the target array y.\n    \"\"\"\n    for i in range(0, len(X), batch_size):\n        yield (X[i:i + batch_size], y[i:i + batch_size])\nassert batch_iterator(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), batch_size=2) == [[[[1, 2], [3, 4]], [1, 2]], [[[5, 6], [7, 8]], [3, 4]], [[[9, 10]], [5]]]\nassert batch_iterator(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), batch_size=3) == [[[1, 1], [2, 2], [3, 3]], [[4, 4]]]\nassert batch_iterator(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), batch_size=2) == [[[1, 3], [3, 6]], [[5, 8], [7, 11]]]\nassert batch_iterator(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([4, 5, 6, 7]), batch_size=2) == [[[[1, 3], [3, 6]], [4, 5]], [[[5, 8], [7, 11]], [6, 7]]]"}
{"task_id": 31, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides a dataset based on whether the value of a specified feature is greater than or equal to a given threshold.\n\n    Args:\n        X (numpy.ndarray): The input dataset as a NumPy array.\n        feature_i (int): The index of the feature to check.\n        threshold (float): The threshold value.\n\n    Returns:\n        tuple: A tuple containing two NumPy arrays:\n               - subset1: Samples where feature_i is greater than or equal to the threshold.\n               - subset2: Samples where feature_i is less than the threshold.\n    \"\"\"\n    subset1 = X[X >= threshold]\n    subset2 = X[X < threshold]\n    return (subset1.tolist(), subset2.tolist())\nassert divide_on_feature(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), 0, 5) == [[[5, 6], [7, 8], [9, 10]], [[1, 2], [3, 4]]]\nassert divide_on_feature(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), 1, 3) == [[[3, 3], [4, 4]], [[1, 1], [2, 2]]]\nassert divide_on_feature(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), 0, 2) ==  [[[3, 6], [5, 8], [7, 11]], [[1, 3]]]\nassert divide_on_feature(np.array([[1, 3, 9], [6, 3, 6], [10, 5, 8], [9, 7, 11]]), 1, 5) ==  [[[10, 5, 8], [9, 7, 11]], [[1, 3, 9], [6, 3, 6]]]"}
{"task_id": 32, "completion_id": 0, "passed": false, "result": "failed: shape mismatch: value array of shape (2,) could not be broadcast to indexing result of shape (3,)", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generates polynomial features for a given dataset using a specified degree.\n\n    Args:\n        X (numpy.ndarray): A 2D numpy array representing the input data.\n        degree (int): The desired degree of the polynomial features.\n\n    Returns:\n        numpy.ndarray: A 2D numpy array with polynomial features up to the specified degree.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    features = np.zeros((n_samples, degree + 1))\n    for i in range(degree + 1):\n        features[np.arange(n_samples), i] = np.polyval(X, i)\n    return features\nassert polynomial_features(np.array([[2, 3], [3, 4], [5, 6]]), 2) == [[ 1., 2., 3., 4., 6., 9.], [ 1., 3., 4., 9., 12., 16.], [ 1., 5., 6., 25., 30., 36.]]\nassert polynomial_features(np.array([[1, 2], [3, 4], [5, 6]]), 3) == [[ 1., 1., 2., 1., 2., 4., 1., 2., 4., 8.], [ 1., 3., 4., 9., 12., 16., 27., 36., 48., 64.], [ 1., 5., 6., 25., 30., 36., 125., 150., 180., 216.]]\nassert polynomial_features(np.array([[1, 2, 3], [3, 4, 5], [5, 6, 9]]), 3) == [[ 1., 1., 2., 3., 1., 2., 3., 4., 6., 9., 1., 2., 3., 4., 6., 9., 8., 12., 18., 27.], [ 1., 3., 4., 5., 9., 12., 15., 16., 20., 25., 27., 36., 45., 48., 60., 75., 64., 80., 100., 125.],[ 1., 5., 6., 9., 25., 30., 45., 36., 54., 81., 125., 150., 225., 180., 270., 405., 216., 324., 486., 729.]]"}
{"task_id": 33, "completion_id": 0, "passed": false, "result": "failed: get_random_subsets() got an unexpected keyword argument 'seed'", "solution": "import numpy as np\nimport numpy as np\nimport random\ndef get_random_subsets(X, y, n_subsets, replacements=True):\n    \"\"\"\n    Generates random subsets of a dataset.\n\n    Args:\n        X (numpy.ndarray): The input dataset (2D numpy array).\n        y (numpy.ndarray): The target dataset (1D numpy array).\n        n_subsets (int): The number of subsets to generate.\n        replacements (bool): Whether to replace subsets with random replacements.\n        seed (int): Seed for the random number generator.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a subset.\n    \"\"\"\n    if replacements:\n        random.shuffle(X)\n        random.shuffle(y)\n    else:\n        X_copy = X.copy()\n        y_copy = y.copy()\n        subsets = []\n        for _ in range(n_subsets):\n            subset = tuple(np.random.choice(X_copy, size=len(y_copy), replace=replacements))\n            subsets.append(subset)\n        return subsets\nassert get_random_subsets(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), 3, False, seed=42) == [([[3, 4], [9, 10]], [2, 5]), ([[7, 8], [3, 4]], [4, 2]), ([[3, 4], [1, 2]], [2, 1])]\nassert get_random_subsets(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), 1, True, seed=42) == [([[3, 3], [4, 4], [1, 1], [3, 3]], [30, 40, 10, 30])]\nassert get_random_subsets(np.array([[1, 3], [2, 4], [3, 5], [4, 6]]), np.array([1, 20, 30, 40]), 2, True, seed=42) == [([[3, 5], [4, 6], [1, 3], [3, 5]], [30, 40, 1, 30]), ([[3, 5], [4, 6], [1, 3], [1, 3]], [30, 40, 1, 1])]"}
{"task_id": 34, "completion_id": 0, "passed": false, "result": "failed: local variable 'n_col' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(x):\n    \"\"\"\n    Performs one-hot encoding of a 1D numpy array.\n\n    Args:\n        x (numpy.ndarray): A 1D numpy array of integer values.\n\n    Returns:\n        list: A list of one-hot encoded vectors.\n    \"\"\"\n    if n_col is None:\n        n_col = len(x.shape) - 1\n    else:\n        n_col = min(n_col, len(x))\n    one_hot = np.eye(n_col)[x.shape]\n    return one_hot.tolist()\nassert to_categorical(np.array([0, 1, 2, 1, 0])) == [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.], [0., 1., 0.], [1., 0., 0.]]\nassert to_categorical(np.array([3, 1, 2, 1, 3]), 4) == [[0., 0., 0., 1.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 1., 0., 0.], [0., 0., 0., 1.]]\nassert to_categorical(np.array([2, 3, 4, 1, 1]), 5) == [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]]\nassert to_categorical(np.array([2, 4, 1, 1])) == [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0]]"}
{"task_id": 35, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix using numpy's tolist() method.\n\n    Args:\n        x (numpy.ndarray): A 1D numpy array.\n\n    Returns:\n        numpy.ndarray: A 2D numpy array representing the diagonal matrix.\n    \"\"\"\n    return np.diag(x.tolist())\nassert make_diagonal(np.array([1, 2, 3])) == [[1., 0., 0.], [0., 2., 0.], [0., 0., 3.]]\nassert make_diagonal(np.array([4, 5, 6, 7])) == [[4., 0., 0., 0.], [0., 5., 0., 0.], [0., 0., 6., 0.], [0., 0., 0., 7.]]\nassert make_diagonal(np.array([2, 4, 1, 1])) == [[2.0, 0.0, 0.0, 0.0], [0.0, 4.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\nassert make_diagonal(np.array([1, 3, 5, 0])) == [[1.0, 0.0, 0.0, 0.0], [0.0, 3.0, 0.0, 0.0], [0.0, 0.0, 5.0, 0.0], [0.0, 0.0, 0.0, 0.0]]"}
{"task_id": 36, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculates the accuracy score of a model's predictions.\n\n    Args:\n        y_true (numpy.ndarray): A 1D numpy array containing the true labels.\n        y_pred (numpy.ndarray): A 1D numpy array containing the predicted labels.\n\n    Returns:\n        float: The accuracy score as a float.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)\nassert accuracy_score(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 0, 1, 0, 1])) == 0.8333\nassert accuracy_score(np.array([1, 1, 1, 1]), np.array([1, 0, 1, 0])) == 0.5\nassert accuracy_score(np.array([1, 0, 1, 0, 1]), np.array([1, 0, 0, 1, 1])) == 0.6\nassert accuracy_score(np.array([0, 1, 0, 1]), np.array([1, 0, 1, 1])) == 0.25"}
{"task_id": 37, "completion_id": 0, "passed": false, "result": "failed: calculate_correlation_matrix() missing 1 required positional argument: 'Y'", "solution": "import numpy as np\nimport numpy as np\ndef calculate_correlation_matrix(X, Y):\n    \"\"\"\n    Calculates the correlation matrix for a given dataset.\n\n    Args:\n        X (numpy.ndarray): A 2D numpy array representing the first dataset.\n        Y (numpy.ndarray): A 2D numpy array representing the second dataset.\n\n    Returns:\n        numpy.ndarray: A 2D numpy array representing the correlation matrix.\n    \"\"\"\n    if Y is None:\n        Y = X\n    correlation_matrix = np.corrcoef(X, Y)[0, 1]\n    return correlation_matrix.tolist()\nassert calculate_correlation_matrix(np.array([[1, 2], [3, 4], [5, 6]])) == [[1.0, 1.0], [1.0, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 2, 3], [7, 15, 6], [7, 8, 9]])) == [[1.0, 0.843, 0.866], [0.843, 1.0, 0.4611], [0.866, 0.4611, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[ -1.0, -1.0], [ 1.0, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 3], [3, 6], [5, 8], [7, 11]])) == [[1.0, 0.9971], [0.9971, 1.0]]\nassert calculate_correlation_matrix(np.array([[1, 4], [3, 6]]), np.array([[8, 9], [7, 11]])) == [[-1.0, 1.0], [-1.0, 1.0]]"}
{"task_id": 38, "completion_id": 0, "passed": false, "result": "failed: index 2 is out of bounds for axis 0 with size 2", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Implements the fit method for AdaBoost.\n\n    Args:\n        X (numpy.ndarray): 2D numpy array of shape (n_samples, n_features).\n        y (numpy.ndarray): 1D numpy array of shape (n_samples,) representing the labels.\n        n_clf (int): The number of classifiers to use.\n\n    Returns:\n        list: A list of classifiers with their parameters.\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    weights = np.ones(n_features)\n    best_thresholds = np.zeros(n_features)\n    best_error = float('inf')\n    for i in range(n_features):\n        threshold = np.round(i * 1.414213562373095)\n        error = np.mean((y == i) & (X[:, i] > 0))\n        if error < best_error:\n            best_error = error\n            best_thresholds[i] = threshold\n        weights[i] = 1.0 / (1.0 + weights[i])\n    classifiers = []\n    for i in range(n_clf):\n        classifier = np.zeros(n_features)\n        classifier[i] = weights[i]\n        classifiers.append(classifier)\n    return classifiers\nassert adaboost_fit(np.array([[1, 2], [2, 3], [3, 4], [4, 5]]), np.array([1, 1, -1, -1]), 3)  == [{'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 11.5129}]\nassert adaboost_fit(np.array([[8, 7], [3, 4], [5, 9], [4, 0], [1, 0], [0, 7], [3, 8], [4, 2], [6, 8], [0, 2]]), np.array([1, -1, 1, -1, 1, -1, -1, -1, 1, 1]), 2) == [{'polarity': 1, 'threshold': 5, 'feature_index': 0, 'alpha': 0.6931}, {'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 0.5493}]\nassert adaboost_fit(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([1, 1, -1, -1]), 3) == [{'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}, {'polarity': -1, 'threshold': 5, 'feature_index': 0, 'alpha': 11.5129}]\nassert adaboost_fit(np.array([[1, 3], [3, 6], [5, 8], [7, 11]]), np.array([1, -1, 1, -1]), 2) == [{'polarity': -1, 'threshold': 3, 'feature_index': 0, 'alpha': 0.5493}, {'polarity': -1, 'threshold': 7, 'feature_index': 0, 'alpha': 0.8047}]"}
{"task_id": 39, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef log_softmax(scores: list) -> list:\n    \"\"\"\n    Computes the log-softmax of a list of scores.\n\n    Args:\n        scores (list): A list of numerical scores.\n\n    Returns:\n        list: A list of log-softmax values rounded to 4 decimal places.\n    \"\"\"\n    scores_np = np.array(scores)\n    log_softmax_np = np.log(scores_np)\n    log_softmax = log_softmax_np.tolist()\n    return log_softmax\nassert log_softmax([1, 2, 3]) == [-2.4076, -1.4076, -0.4076]\nassert log_softmax([1, 1, 1]) == [-1.0986, -1.0986, -1.0986]\nassert log_softmax([1, 1, .0000001]) == [-0.862, -0.862, -1.862]"}
{"task_id": 40, "completion_id": 0, "passed": false, "result": "failed: name 'Dense' is not defined", "solution": "import numpy as np\nimport copy\nimport math\n\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n    \n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nimport numpy as np\nimport math\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[1, 2]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.1, 0.2, 0.3]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.2082, -0.2293]]\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[3, 5]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.2, 0.3, 0.4]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.287, -0.3126]]\nnp.random.seed(42)\ndense_layer = Dense(n_units=3, input_shape=(2,)) \nclass MockOptimizer: \n    def update(self, weights, grad): \n        return weights - 0.01 * grad \noptimizer = MockOptimizer() \ndense_layer.initialize(optimizer) \nX = np.array([[2, 3]]) \noutput = dense_layer.forward_pass(X) \naccum_grad = np.array([[0.3, 0.4, 0.5]]) \nback_output = dense_layer.backward_pass(accum_grad) \nassert back_output == [[0.3658, -0.396]]"}
{"task_id": 41, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef simple_conv2d(input_matrix, kernel, padding, stride):\n    \"\"\"\n    Applies a 2D convolutional layer to an input matrix.\n\n    Args:\n        input_matrix (np.ndarray): The input matrix.\n        kernel (np.ndarray): The convolutional kernel.\n        padding (int): The padding value.\n        stride (int): The stride value.\n\n    Returns:\n        list: The reshaped list of output values.\n    \"\"\"\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width, input_height, input_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            for k in range(input_height):\n                for l in range(input_width):\n                    output[i, j, k, l] = np.sum(input_matrix[k, l] * kernel)\n    return output.tolist()\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2.], [3., -1.], ]), 0, 1)  == [[ 16., 21., 26., 31.], [ 41., 46., 51., 56.], [ 66., 71., 76., 81.], [ 91., 96., 101., 106.]]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [.5, 3.2], [1., -1.], ]), 2, 2)  == [[ 0., 0., 0., 0. ], [ 0., 5.9, 13.3, 12.5], [ 0., 42.9, 50.3, 27.5], [ 0., 80.9, 88.3, 12.5],]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2.], [3., -1.], ]), 1, 1)  == [[ -1., 1., 3., 5., 7., 15.], [ -4., 16., 21., 26., 31., 35.], [  1., 41., 46., 51., 56., 55.], [  6., 66., 71., 76., 81., 75.], [ 11., 91., 96., 101., 106., 95.], [ 42., 65., 68., 71., 74.,  25.],]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2., 3.], [-6., 2., 8.], [5., 2., 3.], ]), 0, 1)  == [ [174., 194., 214.], [274., 294., 314.], [374., 394., 414.], ]\nassert simple_conv2d(np.array([ [1., 2., 3., 4., 5.], [6., 7., 8., 9., 10.], [11., 12., 13., 14., 15.], [16., 17., 18., 19., 20.], [21., 22., 23., 24., 25.], ]), np.array([ [1., 2., 3.], [-6., 2., 8.], [5., 2., 3.], ]), 1, 2)  == [ [51., 104., 51.], [234., 294., 110.], [301., 216., -35.], ]\nassert simple_conv2d(np.array([ [1., 2., 3.], [1., 2., 3.], [1., 2., 3.],]), np.array([ [1., 2., 3.], [1., 2., 3.], [1., 2., 3.],]), 1, 1)  == [[16., 28., 16.], [24., 42., 24.], [16., 28., 16.]]"}
{"task_id": 42, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n\n    Args:\n        z: The input value.\n\n    Returns:\n        The output of the ReLU function.\n    \"\"\"\n    return max(0, z)\nassert relu(0) == 0\nassert relu(1) == 1\nassert relu(-1) == 0"}
{"task_id": 43, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (4,) (2,) ", "solution": "import numpy as np\nimport numpy as np\ndef ridge_loss(X, w, y_true, alpha):\n    \"\"\"\n    Implements the Ridge Regression Loss function.\n\n    Args:\n        X (np.ndarray): 2D numpy array representing the feature matrix.\n        w (np.ndarray): 1D numpy array representing the coefficients.\n        y_true (np.ndarray): 1D numpy array representing the true labels.\n        alpha (float): Regularization parameter.\n\n    Returns:\n        float: The Ridge Regression Loss.\n    \"\"\"\n    mse = np.mean((y_true - w) ** 2)\n    ridge_loss = alpha * (1 / 2) * mse + (1 - alpha) * np.sum((y_true - w) ** 2)\n    return round(ridge_loss, 4)\nassert ridge_loss(np.array([[1,1],[2,1],[3,1],[4,1]]), np.array([.2,2]), np.array([2,3,4,5]), 0.1) == 2.204\nassert ridge_loss(np.array([[1,1,4],[2,1,2],[3,1,.1],[4,1,1.2],[1,2,3]]), np.array([.2,2,5]), np.array([2,3,4,5,2]), 0.1) == 164.402\nassert ridge_loss(np.array([[3,4,1],[1,2,2],[1,.1,3],[1.2,1,4],[1,2,3]]), np.array([2,.2,5]), np.array([2,3,4,5,2]), 0.1) == 183.0721"}
{"task_id": 44, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky ReLU activation function.\n\n    Args:\n        z: The input to the function.\n        alpha: The slope for negative inputs (default is 0.01).\n\n    Returns:\n        The value after applying the Leaky ReLU function.\n    \"\"\"\n    return max(0.0, z - alpha * z)\nassert leaky_relu(5) == 5\nassert leaky_relu(1) == 1\nassert leaky_relu(-1) == -0.01\nassert leaky_relu(0) == 0\nassert leaky_relu(-2, alpha=0.1) == -0.2"}
{"task_id": 45, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors.\n\n    Args:\n        x1 (numpy.ndarray): The first input vector.\n        x2 (numpy.ndarray): The second input vector.\n\n    Returns:\n        numpy.ndarray: The kernel value.\n    \"\"\"\n    return np.dot(x1, x2)\nassert kernel_function(np.array([1, 2, 3]) , np.array([4, 5, 6]) ) == 32\nassert kernel_function(np.array([0, 1, 2]) , np.array([3, 4, 5]) ) == 14\nassert kernel_function(np.array([3, 1, 2, 5]) , np.array([3, 6, 4, 5]) ) == 48"}
{"task_id": 46, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculates the precision metric given two binary arrays.\n\n    Args:\n        y_true (numpy.ndarray): A numpy array containing the true labels (0 or 1).\n        y_pred (numpy.ndarray): A numpy array containing the predicted labels (0 or 1).\n\n    Returns:\n        float: The precision of the predictions.\n    \"\"\"\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 0))\n    total_predictions = len(y_true)\n    if total_predictions == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)\nassert precision(np.array([1, 0, 1, 1, 0, 1])  , np.array([1, 0, 1, 0, 0, 1]) ) == 1.0\nassert precision(np.array([1, 0, 1, 1, 0, 0])  , np.array([1, 0, 0, 0, 0, 1]) ) == 0.5\nassert precision(np.array([1, 0, 1, 1, 0, 0, 1, 1])  , np.array([1, 0, 0, 0, 0, 1, 0, 0])) == 0.5"}
{"task_id": 47, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Implements three gradient descent variants with MSE loss.\n\n    Args:\n        X (np.ndarray): Input features.\n        y (np.ndarray): Target values.\n        weights (np.ndarray): Weights for the model.\n        learning_rate (float): Learning rate.\n        n_iterations (int): Number of iterations.\n        batch_size (int, optional): Batch size. Defaults to 1.\n        method (str, optional): 'batch', 'stochastic', or 'mini'. Defaults to 'batch'.\n\n    Returns:\n        list: A list containing the final weights after the specified number of iterations.\n    \"\"\"\n    if method == 'batch':\n        return gradient_descent_batch(X, y, weights, learning_rate, n_iterations)\n    elif method == 'stochastic':\n        return gradient_descent_stochastic(X, y, weights, learning_rate, n_iterations)\n    elif method == 'mini':\n        return gradient_descent_mini(X, y, weights, learning_rate, n_iterations)\n    else:\n        raise ValueError(\"Invalid method. Choose from 'batch', 'stochastic', or 'mini'.\")\ndef gradient_descent_batch(X, y, weights, learning_rate, n_iterations):\n    \"\"\"\n    Batch Gradient Descent.\n    \"\"\"\n    n = len(X)\n    weights = weights.copy()\n    for i in range(n):\n        weights = weights - learning_rate * weights\n    return weights\ndef gradient_descent_stochastic(X, y, weights, learning_rate, n_iterations):\n    \"\"\"\n    Stochastic Gradient Descent.\n    \"\"\"\n    n = len(X)\n    weights = weights.copy()\n    for i in range(n):\n        weights = weights - learning_rate * X[i]\n    return weights\ndef gradient_descent_mini(X, y, weights, learning_rate, n_iterations):\n    \"\"\"\n    Mini-Batch Gradient Descent.\n    \"\"\"\n    n = len(X)\n    weights = weights.copy()\n    for i in range(n):\n        weights = weights - learning_rate * X[i]\n    return weights\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, method='batch') == [1.1491, 0.5618]\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, method='stochastic') == [1.0508, 0.8366]\nassert gradient_descent(np.array([[1, 1], [2, 1], [3, 1], [4, 1]]), np.array([2, 3, 4, 5]), np.zeros(2), 0.01, 100, 2, method='mini_batch') == [1.1033, 0.6833]"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a matrix to Reduced Row Echelon Form (RREF).\n\n    Args:\n        matrix (np.ndarray): The input matrix.\n\n    Returns:\n        list: The RREF of the matrix as a list of lists.\n    \"\"\"\n    matrix = np.array(matrix)\n    n = matrix.shape[0]\n    rref = []\n    for i in range(n):\n        row = matrix[i, :]\n        is_rref = True\n        for j in range(n):\n            if abs(row[j]) > 1e-09:\n                is_rref = False\n                break\n        if is_rref:\n            rref.append(row.tolist())\n        else:\n            pass\n    return rref\nassert rref(np.array([ [1, 2, -1, -4], [2, 3, -1, -11], [-2, 0, -3, 22] ])) == [[ 1., 0., 0., -8.], [ 0., 1., 0., 1.], [-0., -0., 1., -2.]]\nassert rref(np.array([ [2, 4, -2], [4, 9, -3], [-2, -3, 7] ])) == [[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]\nassert rref(np.array([ [0, 2, -1, -4], [2, 0, -1, -11], [-2, 0, 0, 22] ])) == [[ 1., 0., 0., -11.],[-0., 1., 0., -7.5],[-0., -0., 1., -11.]]\nassert rref(np.array([ [1, 2, -1], [2, 4, -1], [-2, -4, -3]])) == [[ 1., 2., 0.],[ 0., 0., 0.],[-0., -0., 1.]]"}
{"task_id": 49, "completion_id": 0, "passed": false, "result": "failed: adam_optimizer() missing 5 required positional arguments: 'learning_rate', 'beta1', 'beta2', 'epsilon', and 'num_iterations'", "solution": "import numpy as np\nimport numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate, beta1, beta2, epsilon, num_iterations):\n    \"\"\"\n    Implements the Adam optimization algorithm.\n\n    Args:\n        f (function): The objective function to be optimized.\n        grad (function): The gradient of the objective function.\n        x0 (float): Initial parameter values.\n        learning_rate (float): The learning rate.\n        beta1 (float): Exponential decay rate for the first moment estimate.\n        beta2 (float): Exponential decay rate for the second moment estimate.\n        epsilon (float): Small constant for numerical stability.\n        num_iterations (int): Number of iterations to run.\n\n    Returns:\n        list: The optimized parameters.\n    \"\"\"\n    params = []\n    for i in range(num_iterations):\n        grad = grad(x0)\n        params.append(x0)\n        x0 = x0 - learning_rate * grad\n    return params\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([1.0, 1.0])) == [0.99, 0.99]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([0.2, 12.3])) == [ 0.19, 12.29]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([1, 3])) == [0.99, 2.99]\nassert adam_optimizer(lambda x: x[0]**2 + x[1]**2, lambda y: np.array([2*y[0], 2*y[1]]), np.array([5, 8])) == [4.99, 7.99]"}
{"task_id": 50, "completion_id": 0, "passed": false, "result": "failed: name 'l1_regularization_gradient_descent' is not defined", "solution": "import numpy as np\n\nassert l1_regularization_gradient_descent(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 2]), alpha=0.1, learning_rate=0.01, max_iter=1000)  == ([0.4237, 0.4237], 0.1539)\nassert l1_regularization_gradient_descent(np.array([[0, 0], [1, 1], [2, 2]]), np.array([0, 1, 2]), alpha=0.1, learning_rate=0.01, max_iter=5000)  == ([0.4249, 0.4249], 0.1504)\nassert l1_regularization_gradient_descent(np.array([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]), np.array([1, 2, 3, 4, 5]), alpha=0.1, learning_rate=0.01, max_iter=1000)  == ([0.2728, 0.6811], 0.4083)"}
{"task_id": 51, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef OSA(s1: str, s2: str) -> int:\n    \"\"\"\n    Calculates the Optimal String Alignment Distance between two strings.\n\n    Args:\n        s1 (str): The source string.\n        s2 (str): The target string.\n\n    Returns:\n        int: The Optimal String Alignment Distance.\n    \"\"\"\n    n = len(s1)\n    m = len(s2)\n    dp = np.zeros((n + 1, m + 1), dtype=int)\n    for i in range(n + 1):\n        dp[i, 0] = i\n    for j in range(m + 1):\n        dp[0, j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i, j] = dp[i - 1, j - 1]\n            else:\n                dp[i, j] = 1 + min(dp[i - 1, j], dp[i, j - 1], dp[i - 1, j - 1])\n    return dp[n, m]\nassert OSA(\"butterfly\", \"dragonfly\") == 6\nassert OSA(\"caper\", \"acer\") == 2\nassert OSA(\"telescope\", \"microscope\") == 5\nassert OSA(\"london\", \"paris\") == 6\nassert OSA(\"shower\", \"grower\") == 2\nassert OSA(\"labyrinth\", \"puzzle\") == 9\nassert OSA(\"silhouette\", \"shadow\") == 8\nassert OSA(\"whisper\", \"screaming\") == 9\nassert OSA(\"enigma\", \"mystery\") == 7\nassert OSA(\"symphony\", \"cacophony\") == 4\nassert OSA(\"mirage\", \"oasis\") == 6\nassert OSA(\"asteroid\", \"meteorite\") == 5\nassert OSA(\"palindrome\", \"palladium\") == 5"}
{"task_id": 52, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculates the recall metric in a binary classification setting.\n\n    Args:\n        y_true (list): A list of true labels (0 or 1).\n        y_pred (list): A list of predicted labels (0 or 1).\n\n    Returns:\n        float: The recall value rounded to three decimal places.\n    \"\"\"\n    tp = np.sum(y_true)\n    fn = np.sum(y_pred == 0)\n    if tp + fn == 0:\n        return 0.0\n    return round(tp / (tp + fn), 3)\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 1])) == 0.75\nassert recall(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 0, 0, 0, 1])) == 0.333\nassert recall(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 1, 1, 0, 0])) == 1.0\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 0, 0, 1, 0, 1])) == 0.5\nassert recall(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 1, 0, 0, 1, 0])) == 0.0\nassert recall(np.array([1, 0, 0, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 0])) == 0.667"}
{"task_id": 53, "completion_id": 0, "passed": false, "result": "failed: not enough values to unpack (expected 3, got 2)", "solution": "import numpy as np\nimport numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Implements the self-attention mechanism.\n\n    Args:\n        X (np.ndarray): Input sequence (batch_size, sequence_length, embedding_dim).\n        W_q (np.ndarray): Query weight matrix.\n        W_k (np.ndarray): Key weight matrix.\n        W_v (np.ndarray): Value weight matrix.\n\n    Returns:\n        np.ndarray: Output self-attention output (batch_size, sequence_length, embedding_dim).\n    \"\"\"\n    (batch_size, seq_len, _) = X.shape\n    scores = np.matmul(X, W_q)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = np.matmul(attention_weights, W_v)\n    return output.tolist()\nassert self_attention(np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[1.6605, 2.6605], [2.3395, 3.3395]]\nassert self_attention(np.array([[1, 1], [1, 0]]), np.array([[1, 0], [0, 1]]), np.array([[1, 0], [0, 1]]), np.array([[1, 2], [3, 4]])) == [[3.0093, 4.679], [2.5, 4.0]]\nassert self_attention(np.array([[1, 0, 1], [0, 1, 1], [1, 1, 0]]), np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]), np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]), np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [[8.0, 10.0, 12.0], [8.6199, 10.6199, 12.6199], [7.3801, 9.3801, 11.3801]]"}
{"task_id": 54, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_state: list[float], weight_matrix: list[list[float]], bias_vector: list[float], threshold: float=0.1) -> list[float]:\n    \"\"\"\n    Implements a simple Recurrent Neural Network (RNN) cell.\n\n    Args:\n        input_sequence (list[list[float]]): A list of input vectors.\n        initial_state (list[float]): The initial hidden state.\n        weight_matrix (list[list[float]]): The weight matrix for the input-to-hidden connection.\n        bias_vector (list[float]): The bias vector for the hidden layer.\n        threshold (float): Threshold for the tanh activation function.\n\n    Returns:\n        list[float]: The final hidden state after processing the entire sequence.\n    \"\"\"\n    input_sequences = [np.array(seq) for seq in input_sequence]\n    initial_state = np.array(initial_state)\n    hidden_state = initial_state\n    for i in range(len(input_sequences)):\n        hidden_state = np.tanh(hidden_state + weight_matrix[0, 0] * input_sequences[i][0] + bias_vector[0])\n        hidden_state = np.tanh(hidden_state)\n    return hidden_state.tolist()\nassert rnn_forward([[1.0], [2.0], [3.0]], [0.0], [[0.5]], [[0.8]], [0.0]) == [0.9759]\nassert rnn_forward([[0.5], [0.1], [-0.2]], [0.0], [[1.0]], [[0.5]], [0.1]) == [0.118]\nassert rnn_forward( [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [0.0, 0.0], [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8], [0.9, 1.0]], [0.1, 0.2] ) == [0.7474, 0.9302]"}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation matrix to a set of points.\n\n    Args:\n        points (list): A list of tuples, where each tuple represents a point (x, y).\n        tx (float): The translation value in the x direction.\n        ty (float): The translation value in the y direction.\n\n    Returns:\n        list: A list of tuples representing the translated points.\n    \"\"\"\n    points_np = np.array(points)\n    translated_points = points_np.copy()\n    translated_points[:, 0] += tx\n    translated_points[:, 1] += ty\n    return translated_points.tolist()\nassert translate_object([[0, 0], [1, 0], [0.5, 1]], 2, 3) ==  [[2.0, 3.0], [3.0, 3.0], [2.5, 4.0]]\nassert translate_object([[0, 0], [1, 0], [1, 1], [0, 1]], -1, 2) == [[-1.0, 2.0], [0.0, 2.0], [0.0, 3.0], [-1.0, 3.0]]\nassert translate_object([[0, 0], [1, 0], [1, 1], [0, 1]], 2, 3) == [[2.0, 3.0], [3.0, 3.0], [3.0, 4.0], [2.0, 4.0]]"}
{"task_id": 56, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculates the Kullback-Leibler divergence between two normal distributions.\n\n    Args:\n        mu_p (numpy.ndarray): The mean of the first normal distribution.\n        sigma_p (numpy.ndarray): The standard deviation of the first normal distribution.\n        mu_q (numpy.ndarray): The mean of the second normal distribution.\n        sigma_q (numpy.ndarray): The standard deviation of the second normal distribution.\n\n    Returns:\n        float: The KL divergence between the two normal distributions.\n    \"\"\"\n    return np.sum(np.log(np.linalg.norm(mu_p - mu_q)))\nassert kl_divergence_normal(0.0, 1.0, 0.0, 1.0) == 0.0\nassert kl_divergence_normal(0.0, 1.0, 1.0, 1.0) == 0.5\nassert kl_divergence_normal(0.0, 1.0, 0.0, 2.0) == 0.3181471805599453\nassert kl_divergence_normal(1.0, 1.0, 0.0, 2.0) == 0.4431471805599453\nassert kl_divergence_normal(2.0, 1.0, 3.0, 2.0) == 0.4431471805599453\nassert kl_divergence_normal(0.0, 2.0, 0.0, 3.0) == 0.1276873303303866"}
{"task_id": 57, "completion_id": 0, "passed": false, "result": "failed: index 3 is out of bounds for axis 1 with size 3", "solution": "import numpy as np\nimport numpy as np\ndef gauss_seidel(A, b, n):\n    \"\"\"\n    Implements the Gauss-Seidel method for solving a system of linear equations Ax = b.\n\n    Args:\n        A (numpy.ndarray): The coefficient matrix.\n        b (numpy.ndarray): The right-hand side vector.\n        n (int): The number of iterations.\n\n    Returns:\n        numpy.ndarray: The approximated solution vector x.\n    \"\"\"\n    n = len(b)\n    x = np.zeros(n + 1)\n    for k in range(n + 1):\n        x[k] = 0.0\n        for i in range(n):\n            x[k] += A[i, k] * b[i]\n        for i in range(n):\n            A[i, :] = A[i, :] - A[i, i] * b[i]\n    return x\nassert gauss_seidel(np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float), np.array([4, 7, 3], dtype=float), 5) == [0.5008, 0.9997, 0.4998]\nassert gauss_seidel(np.array([[4, -1, 0, 1], [-1, 4, -1, 0], [0, -1, 4, -1], [1, 0, -1, 4]], dtype=float), np.array([15, 10, 10, 15], dtype=float), 1) == [3.75, 3.4375, 3.3594, 3.6523]\nassert gauss_seidel(np.array([[10, -1, 2], [-1, 11, -1], [2, -1, 10]], dtype=float), np.array([6, 25, -11], dtype=float), 100) == [1.0433, 2.2692, -1.0817]"}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Performs Gaussian Elimination on a system of linear equations.\n\n    Args:\n        A (numpy.ndarray): The coefficient matrix (n x n).\n        b (numpy.ndarray): The constant vector (n x 1).\n\n    Returns:\n        numpy.ndarray: The solution vector (n x 1).\n    \"\"\"\n    n = A.shape[0]\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    for i in range(n):\n        pivot_row = i\n        for j in range(i + 1, n):\n            if abs(A[j, i]) > abs(A[pivot_row, i]):\n                pivot_row = j\n        if pivot_row != i:\n            A[[i, pivot_row]] = A[[pivot_row, i]]\n            b[[i, pivot_row]] = b[[pivot_row, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, :] = A[j, :] - factor * A[i, :]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = b[i]\n        for j in range(i + 1, n):\n            x[i] = x[i] - A[i, j] * x[j]\n        x[i] = x[i] / A[i, i]\n    return x.tolist()\nassert gaussian_elimination(np.array([[2,8,4], [2,5,1], [4,10,-1]], dtype=float), np.array([2,5,1], dtype=float)) == [11.0, -4.0, 3.0]\nassert gaussian_elimination(np.array([ [0, 2, 1, 0, 0, 0, 0], [2, 6, 2, 1, 0, 0, 0], [1, 2, 7, 2, 1, 0, 0], [0, 1, 2, 8, 2, 1, 0], [0, 0, 1, 2, 9, 2, 1], [0, 0, 0, 1, 2, 10, 2], [0, 0, 0, 0, 1, 2, 11] ], dtype=float), np.array([1, 2, 3, 4, 5, 6, 7], dtype=float)) == [-0.4894, 0.3617, 0.2766, 0.2554, 0.319, 0.4039, 0.5339]\nassert gaussian_elimination(np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float), np.array([8, -11, -3], dtype=float)) == [2.0, 3.0, -1.0]"}
{"task_id": 59, "completion_id": 0, "passed": false, "result": "failed: LSTM.forward() takes 3 positional arguments but 4 were given", "solution": "import numpy as np\nimport numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size) * 0.1\n        self.Wi = np.random.randn(hidden_size, input_size) * 0.1\n        self.Wc = np.random.randn(hidden_size, input_size) * 0.1\n        self.Wo = np.random.randn(hidden_size, input_size) * 0.1\n        self.bf = np.random.randn(hidden_size, input_size) * 0.1\n        self.bi = np.random.randn(hidden_size, input_size) * 0.1\n        self.bc = np.random.randn(hidden_size, input_size) * 0.1\n        self.bo = np.random.randn(hidden_size, input_size) * 0.1\n\n    def forward(self, x, initial_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden state, final state,\n        and cell state.\n        \"\"\"\n        hidden = np.zeros(self.hidden_size)\n        final_state = np.zeros(self.hidden_size)\n        cell_state = initial_state\n        for i in range(len(x)):\n            hidden[i] = np.dot(self.Wf[i], x[i]) + self.bf[i]\n            final_state[i] = np.dot(self.Wi[i], hidden[i]) + self.bi[i]\n            cell_state = np.dot(self.Wc[i], final_state) + self.bc[i]\n        return (hidden, final_state, cell_state)\ninput_sequence = np.array([[1.0], [2.0], [3.0]]) \ninitial_hidden_state = np.zeros((1, 1)) \ninitial_cell_state = np.zeros((1, 1)) \nlstm = LSTM(input_size=1, hidden_size=1) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.5, 0.5]]) \nlstm.Wi = np.array([[0.5, 0.5]]) \nlstm.Wc = np.array([[0.3, 0.3]]) \nlstm.Wo = np.array([[0.5, 0.5]]) \nlstm.bf = np.array([[0.1]]) \nlstm.bi = np.array([[0.1]]) \nlstm.bc = np.array([[0.1]]) \nlstm.bo = np.array([[0.1]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.7370]]\ninput_sequence = np.array([[0.1, 0.2], [0.3, 0.4]]) \ninitial_hidden_state = np.zeros((2, 1)) \ninitial_cell_state = np.zeros((2, 1)) \nlstm = LSTM(input_size=2, hidden_size=2) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wi = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wc = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wo = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.bf = np.array([[0.1], [0.2]]) \nlstm.bi = np.array([[0.1], [0.2]]) \nlstm.bc = np.array([[0.1], [0.2]]) \nlstm.bo = np.array([[0.1], [0.2]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.1661], [0.4030]]\ninput_sequence = np.array([[1, 3], [2, 4]]) \ninitial_hidden_state = np.zeros((2, 1)) \ninitial_cell_state = np.zeros((2, 1)) \nlstm = LSTM(input_size=2, hidden_size=2) # Set weights and biases for reproducibility \nlstm.Wf = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wi = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wc = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.Wo = np.array([[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8]]) \nlstm.bf = np.array([[0.1], [0.2]]) \nlstm.bi = np.array([[0.1], [0.2]]) \nlstm.bc = np.array([[0.1], [0.2]]) \nlstm.bo = np.array([[0.1], [0.2]]) \noutputs, final_h, final_c = lstm.forward(input_sequence, initial_hidden_state, initial_cell_state)\nassert final_h == [[0.8543], [0.9567]]"}
{"task_id": 60, "completion_id": 0, "passed": false, "result": "failed: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.", "solution": "import numpy as np\nimport numpy as np\ndef compute_tf_idf(corpus, query):\n    \"\"\"\n    Computes the TF-IDF scores for a query against a corpus of documents.\n\n    Args:\n        corpus (list): A list of documents, where each document is a list of words.\n        query (list): A list of words for which to compute TF-IDF scores.\n\n    Returns:\n        list: A list of TF-IDF scores, rounded to five decimal places.\n    \"\"\"\n    if not corpus or not query:\n        return []\n    corpus = np.array(corpus)\n    query = np.array(query)\n    tfidf_scores = []\n    for i in range(len(corpus)):\n        document_words = corpus[i]\n        document_tfidf = 0\n        for word in document_words:\n            if word in query:\n                document_tfidf += 1\n        tfidf_scores.append(round(document_tfidf, 4))\n    return tfidf_scores\nassert compute_tf_idf([ [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"], [\"the\", \"dog\", \"chased\", \"the\", \"cat\"], [\"the\", \"bird\", \"flew\", \"over\", \"the\", \"mat\"] ] , [\"cat\"]) == [[0.2146], [0.2575], [0.0]]\nassert compute_tf_idf([ [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"], [\"the\", \"dog\", \"chased\", \"the\", \"cat\"], [\"the\", \"bird\", \"flew\", \"over\", \"the\", \"mat\"] ], [\"cat\", \"mat\"]) == [[0.2146, 0.2146], [0.2575, 0.0], [0.0, 0.2146]]\nassert compute_tf_idf([ [\"this\", \"is\", \"a\", \"sample\"], [\"this\", \"is\", \"another\", \"example\"], [\"yet\", \"another\", \"sample\", \"document\"], [\"one\", \"more\", \"document\", \"for\", \"testing\"] ], [\"sample\", \"document\", \"test\"]) == [[0.3777, 0.0, 0.0], [0.0, 0.0, 0.0], [0.3777, 0.3777, 0.0], [0.0, 0.3022, 0.0]]"}
{"task_id": 61, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate the F-Score for a binary classification task.\n\n    Args:\n        y_true (numpy.ndarray): A numpy array of true labels (0 or 1).\n        y_pred (numpy.ndarray): A numpy array of predicted labels (0 or 1).\n        beta (float): A value that adjusts the F-Score.\n\n    Returns:\n        float: The F-Score rounded to three decimal places.\n    \"\"\"\n    precision = np.mean(y_true == 1)\n    recall = np.mean(y_true == 1)\n    f_score = 2 * precision * recall\n    return round(f_score, 3)\nassert f_score(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 1]), 1) == 0.857\nassert f_score(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 0, 0, 0, 1]), 1) == 0.4\nassert f_score(np.array([1, 0, 1, 1, 0, 0]), np.array([1, 0, 1, 1, 0, 0]), 2) == 1.0\nassert f_score(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 0, 0, 1, 0, 1]), 2) == 0.556\nassert f_score(np.array([1, 1, 1, 1, 0, 0, 0]), np.array([0, 1, 0, 1, 1, 0, 0]), 3) == 0.513"}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 4 is different from 1)", "solution": "import numpy as np\nimport numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the SimpleRNN with random weights and biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.W = np.random.randn(hidden_size, input_size) * 0.1\n        self.b = np.zeros((hidden_size, 1))\n        self.h = np.zeros((1, self.hidden_size))\n        self.c = np.zeros((1, self.output_size))\n\n    def forward(self, x):\n        \"\"\"\n        Performs the forward pass of the RNN.\n\n        Args:\n            x (numpy.ndarray): The input sequence.\n\n        Returns:\n            numpy.ndarray: The output of the RNN.\n        \"\"\"\n        self.h = np.tanh(self.W @ x + self.b)\n        self.c = np.tanh(self.h @ x + self.c)\n        self.W = np.dot(self.W, self.h)\n        self.b = np.dot(self.b, self.h)\n        self.h = np.tanh(self.W @ x + self.b)\n        self.c = np.tanh(self.h @ x + self.c)\n        return self.c\n\n    def backward(self, x, y, h):\n        \"\"\"\n        Performs backpropagation to calculate the gradients.\n\n        Args:\n            x (numpy.ndarray): The input sequence.\n            y (numpy.ndarray): The target sequence.\n            h (numpy.ndarray): The hidden state.\n\n        Returns:\n            numpy.ndarray: The gradients of the loss with respect to the hidden state.\n        \"\"\"\n        d_h = x - h\n        d_w = np.dot(d_h.T, h)\n        d_b = np.dot(d_h, h)\n        d_c = np.dot(d_h, y)\n        return (d_w, d_b, d_c)\n\n    def train(self, x, y, learning_rate):\n        \"\"\"\n        Trains the RNN using the backpropagation algorithm.\n\n        Args:\n            x (numpy.ndarray): The input sequence.\n            y (numpy.ndarray): The target sequence.\n            learning_rate (float): The learning rate.\n        \"\"\"\n        h = self.forward(x)\n        (d_w, d_b, d_c) = self.backward(x, y, h)\n        self.W -= learning_rate * d_w\n        self.b -= learning_rate * d_b\n        self.h -= learning_rate * d_c\n        self.c -= learning_rate * d_c\n        return (d_w, d_b, d_c)\nnp.random.seed(42)\ninput_sequence = np.array([[1.0], [2.0], [3.0], [4.0]])\nexpected_output = np.array([[2.0], [3.0], [4.0], [5.0]])\nrnn = SimpleRNN(input_size=1, hidden_size=5, output_size=1)\n# Train the RNN over multiple epochs\n\nfor epoch in range(100): \n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[2.2414]], [[3.1845]], [[4.0431]], [[4.5742]]]\nnp.random.seed(42)\ninput_sequence = np.array([[1.0,2.0], [7.0,2.0], [1.0,3.0], [12.0,4.0]])\nexpected_output = np.array([[2.0], [3.0], [4.0], [5.0]])\nrnn = SimpleRNN(input_size=2, hidden_size=3, output_size=1)\n# Train the RNN over multiple epochs\nfor epoch in range(100):\n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[2.422]], [[3.4417]], [[3.613]], [[4.5066]]]\nnp.random.seed(42)\ninput_sequence = np.array([[1.0,2.0], [7.0,2.0], [1.0,3.0], [12.0,4.0]])\nexpected_output = np.array([[2.0,1.0], [3.0,7.0], [4.0,8.0], [5.0,10.0]])\nrnn = SimpleRNN(input_size=2, hidden_size=10, output_size=2)\n# Train the RNN over multiple epochs\nfor epoch in range(50):\n    output = rnn.forward(input_sequence)\n    rnn.backward(input_sequence, expected_output, learning_rate=0.01)\n    output = np.round(output, 4).tolist()\n\nassert output == [[[3.2842], [5.9353]], [[3.6039], [6.8201]], [[3.5259], [6.5828]], [[3.6134], [6.8492]]]"}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: Matrix A must be square.", "solution": "import numpy as np\nimport numpy as np\ndef conjugate_gradient(A, b, n, x0=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    Args:\n        A (np.ndarray): The symmetric, positive-definite matrix.\n        b (np.ndarray): The right-hand side vector.\n        n (int): The size of the system.\n        x0 (np.ndarray, optional): Initial guess for the solution vector. Defaults to None.\n        tol (float, optional): Convergence tolerance. Defaults to 1e-8.\n\n    Returns:\n        np.ndarray: The solution vector x.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    if A.shape[0] != n:\n        raise ValueError('Matrix A must be square.')\n    if x0 is None:\n        x0 = np.zeros(n)\n    x = x0.copy()\n    gradient = np.zeros(n)\n    gradient[0] = 1.0\n    for i in range(n):\n        if i == 0:\n            x[i] = b[i]\n            continue\n        sum_x = np.dot(A, x)\n        sum_gradient = np.dot(A, x)\n        if sum_gradient == 0:\n            return x\n        x[i] = (b[i] - sum_x) / sum_gradient\n    return x.tolist()\nassert conjugate_gradient(np.array([[6, 2, 1, 1, 0], [2, 5, 2, 1, 1], [1, 2, 6, 1, 2], [1, 1, 1, 7, 1], [0, 1, 2, 1, 8]]), np.array([1, 2, 3, 4, 5]), 100) == [0.01666667, 0.11666667, 0.21666667, 0.45, 0.5]\nassert conjugate_gradient(np.array([[4, 1, 2], [1, 3, 0], [2, 0, 5]]), np.array([7, 8, 5]), 1) == [1.2627451, 1.44313725, 0.90196078]\nassert conjugate_gradient(np.array([[6, 2, 1, 1, 0], [2, 5, 2, 1, 1], [1, 2, 6, 1, 2], [1, 1, 1, 7, 1], [0, 1, 2, 1, 8]]), np.array([1, 2, 3, 4, 5]), 100) == [0.01666667, 0.11666667, 0.21666667, 0.45, 0.5]"}
{"task_id": 64, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not numpy.float64", "solution": "import numpy as np\nimport numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    Args:\n        y: A list of integers representing the class labels.\n\n    Returns:\n        The Gini Impurity of the set of classes.\n    \"\"\"\n    n = len(y)\n    if n == 0:\n        return 0.0\n    counts = np.zeros(n)\n    for c in y:\n        counts[c] += 1\n    gini = 1.0\n    for c in counts:\n        gini -= c * np.sum(y[c] == c) / n\n    return round(gini, 3)\nassert gini_impurity([0, 0, 0, 0, 1, 1, 1, 1]) == 0.5\nassert gini_impurity([0, 0, 0, 0, 0, 1]) == 0.278\nassert gini_impurity([0, 1, 2, 2, 2, 1, 2]) == 0.571"}
{"task_id": 65, "completion_id": 0, "passed": false, "result": "failed: name 'compressed_row_sparse_matrix' is not defined", "solution": "\n\nassert compressed_row_sparse_matrix([[1, 0, 0, 0], [0, 2, 0, 0], [3, 0, 4, 0], [1, 0, 0, 5]]) == ([1, 2, 3, 4, 1, 5], [0, 1, 0, 2, 0, 3], [0, 1, 2, 4, 6])\nassert compressed_row_sparse_matrix([[0, 0, 0], [1, 2, 0], [0, 3, 4]]) == ([1, 2, 3, 4], [0, 1, 1, 2], [0, 0, 2, 4])\nassert compressed_row_sparse_matrix([[0, 0, 3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 6, 0], [0, 0, 0, 0, 0], [0, 7, 0, 0, 8]]) == ([3, 4, 5, 6, 7, 8], [2, 1, 0, 3, 1, 4], [0, 1, 2, 4, 4, 6])"}
{"task_id": 66, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "\nimport numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    Args:\n        v (list): The vector to be projected.\n        L (list): The line vector.\n\n    Returns:\n        list: The projection of v onto L.\n    \"\"\"\n    v = np.array(v)\n    L = np.array(L)\n    if L.shape[0] == 0:\n        return [v]\n    projection = np.dot(v, L) / np.dot(L, L) * L\n    return [round(projection, 3)]\nassert orthogonal_projection([3, 4], [1, 0]) == [3.0, 0.0]\nassert orthogonal_projection([1, 2, 3], [0, 0, 1]) == [0.0, 0.0, 3.0]\nassert orthogonal_projection([5, 6, 7], [2, 0, 0]) == [5.0, 0.0, 0.0]"}
{"task_id": 67, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    Args:\n        dense_matrix (list of lists): A 2D list representing the dense matrix.\n\n    Returns:\n        tuple: A tuple containing:\n            - values: A list of non-zero elements in the matrix, stored in column-major order.\n            - row_indices: A list of row indices corresponding to the non-zero elements.\n            - column_pointer: The starting index of the column in the output list.\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = 0\n    for row in dense_matrix:\n        for element in row:\n            if element != 0:\n                values.append(element)\n                row_indices.append(column_pointer)\n                column_pointer += 1\n    return (values, row_indices, column_pointer)\nassert compressed_col_sparse_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == ([], [], [0, 0, 0, 0])\nassert compressed_col_sparse_matrix([[0, 0, 0], [1, 2, 0], [0, 3, 4]]) == ([1, 2, 3, 4], [1, 1, 2, 2], [0, 1, 3, 4])\nassert compressed_col_sparse_matrix([[0, 0, 3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 6, 0], [0, 0, 0, 0, 0], [0, 7, 0, 0, 8]]) == ([5, 4, 7, 3, 6, 8], [2, 1, 4, 0, 2, 4], [0, 1, 3, 4, 5, 6])"}
{"task_id": 68, "completion_id": 0, "passed": false, "result": "failed: 'list' object has no attribute 'tolist'", "solution": "import numpy as np\nimport numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Calculates the column space of a matrix using row echelon form.\n\n    Args:\n        A (np.ndarray): The input matrix.\n\n    Returns:\n        list: A list of linearly independent columns that span the matrix's column space.\n    \"\"\"\n    A = np.array(A, dtype=np.float64)\n    (rows, cols) = A.shape\n    basis = []\n    for i in range(rows):\n        pivot_row = np.argmax(np.abs(A[i, :]))\n        A[i, :] = A[i, :] / A[pivot_row, :]\n        for j in range(rows):\n            if j != i:\n                factor = A[j, i]\n                A[j, :] = A[j, :] - factor * A[i, :]\n        basis.append(A[i, :])\n    return basis.tolist()\nassert matrix_image(np.array([[1, 0], [0, 1]])) == [[1, 0], [0, 1]]\nassert matrix_image(np.array([[1, 2], [2, 4]])) == [[1], [2]]\nassert matrix_image(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) == [[1, 2], [4, 5], [7, 8]]\nassert matrix_image(np.array([[3, 9, 6], [1, 4, 7], [2, 5, 8]])) == [[3, 9, 6], [1, 4, 7], [2, 5, 8]]\nassert matrix_image(np.array([[3, 3, 3], [1, 1, 1], [2, 2, 2]])) == [[3], [1], [2]]"}
{"task_id": 69, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculates the R-squared value for a regression model.\n\n    Args:\n        y_true (list or numpy.ndarray): A list or numpy array of true values.\n        y_pred (list or numpy.ndarray): A list or numpy array of predicted values.\n\n    Returns:\n        float: The R-squared value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    y_true = y_true.reshape(-1, 1)\n    y_pred = y_pred.reshape(-1, 1)\n    y_true = y_true.astype(float)\n    y_pred = y_pred.astype(float)\n    y_true = y_true.reshape(-1, 1)\n    y_pred = y_pred.reshape(-1, 1)\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    y_true = y_true.reshape(-1, 1)\n    y_pred = y_pred.reshape(-1, 1)\n    y_true = y_true.astype(float)\n    y_pred = y_pred.astype(float)\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)\n    r_squared = 1 - ss_res / ss_tot\n    return round(r_squared, 3)\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])) == 1.0\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([1.1, 2.1, 2.9, 4.2, 4.8])) == 0.989\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([2, 1, 4, 3, 5])) == 0.6\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([3, 3, 3, 3, 3])) == 0.0\nassert r_squared(np.array([3, 3, 3, 3, 3]), np.array([1, 2, 3, 4, 5])) == 0.0\nassert r_squared(np.array([1, 2, 3, 4, 5]), np.array([5, 4, 3, 2, 1])) == -3.0\nassert r_squared(np.array([0, 0, 0, 0, 0]), np.array([0, 0, 0, 0, 0])) == 1.0\nassert r_squared(np.array([-2, -2, -2]), np.array([-2, -2, -2 + 1e-8])) == 0.0"}
{"task_id": 70, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image.\n\n    Args:\n        img (list of list): A 2D matrix representing the grayscale image.\n\n    Returns:\n        float: The average brightness of the image, rounded to two decimal places.\n               Returns -1 if the image is empty, has inconsistent rows, or contains invalid values.\n    \"\"\"\n    if not img:\n        return -1\n    num_rows = len(img)\n    num_cols = len(img[0]) if num_rows > 0 else 0\n    if num_rows == 0 or num_cols == 0:\n        return -1\n    for row in img:\n        if len(row) != num_cols:\n            return -1\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            total_brightness += pixel\n    average_brightness = total_brightness / (num_rows * num_cols)\n    return round(average_brightness, 2)\nassert calculate_brightness([]) == -1\nassert calculate_brightness([[100, 200], [150]]) == -1\nassert calculate_brightness([[100, 300]]) == -1\nassert calculate_brightness([[100, -1]]) == -1\nassert calculate_brightness([[128]]) == 128.0\nassert calculate_brightness([[100, 200], [50, 150]]) == 125.0"}
{"task_id": 71, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculates the Root Mean Squared Error (RMSE) between the true and predicted values.\n\n    Args:\n        y_true (list or numpy.ndarray): The true values.\n        y_pred (list or numpy.ndarray): The predicted values.\n\n    Returns:\n        float: The RMSE value, rounded to three decimal places.\n    \"\"\"\n    if not isinstance(y_true, (list, np.ndarray)) or not isinstance(y_pred, (list, np.ndarray)):\n        raise TypeError('Inputs must be lists or numpy arrays.')\n    if len(y_true) != len(y_pred):\n        raise ValueError('Arrays must have the same length.')\n    if not y_true or not y_pred:\n        return 0.0\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    return np.sqrt(np.mean((y_true - y_pred) ** 2))\nassert rmse(np.array([3, -0.5, 2, 7]), np.array([2.5, 0.0, 2, 8])) == 0.612\nassert rmse(np.array([[0.5, 1], [-1, 1], [7, -6]]), np.array([[0, 2], [-1, 2], [8, -5]])) == 0.842\nassert rmse(np.array([[1, 2], [3, 4]]), np.array([[1, 2], [3, 4]])) == 0.0"}
{"task_id": 72, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculates the Jaccard Index between two binary arrays.\n\n    Args:\n        y_true (list): A list of booleans representing the true labels.\n        y_pred (list): A list of booleans representing the predicted labels.\n\n    Returns:\n        float: The Jaccard Index, rounded to three decimal places.\n    \"\"\"\n    true_set = set(y_true)\n    pred_set = set(y_pred)\n    intersection = len(true_set.intersection(pred_set))\n    union = len(true_set.union(pred_set))\n    if union == 0:\n        return 0.0\n    else:\n        return round(intersection / union, 3)\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 1, 0, 1])) == 1.0\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 0]), np.array([0, 1, 0, 0, 1, 1])) == 0.0\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([1, 0, 1, 0, 0, 0])) == 0.5\nassert jaccard_index(np.array([1, 0, 1, 1, 0, 1]), np.array([0, 1, 0, 1, 1, 0])) == 0.167\nassert jaccard_index(np.array([1, 1, 1, 1, 1, 1]), np.array([0, 0, 0, 1, 1, 0])) == 0.333\nassert jaccard_index(np.array([1, 1, 1, 0, 1, 1]), np.array([1, 0, 0, 0, 0, 0])) == 0.2"}
{"task_id": 73, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculates the Dice Score between two binary arrays.\n\n    Args:\n        y_true (numpy.ndarray): A NumPy array of true labels (0 or 1).\n        y_pred (numpy.ndarray): A NumPy array of predicted labels (0 or 1).\n\n    Returns:\n        float: The Dice Score, rounded to 3 decimal places.\n    \"\"\"\n    intersection = np.sum((y_true == 1) & (y_pred == 1))\n    union = np.sum((y_true == 1) | (y_pred == 1))\n    if union == 0:\n        return 0.0\n    dice_score = 2 * intersection / (union + 1e-09)\n    return round(dice_score, 3)\nassert dice_score(np.array([1, 1, 0, 0]), np.array([1, 1, 0, 0])) == 1.0\nassert dice_score(np.array([1, 1, 0, 0]), np.array([0, 0, 1, 1])) == 0.0\nassert dice_score(np.array([1, 1, 0, 0]), np.array([1, 0, 0, 0])) == 0.667\nassert dice_score(np.array([0, 0, 0, 0]), np.array([0, 0, 0, 0])) == 0.0\nassert dice_score(np.array([1, 1, 1, 1]), np.array([1, 1, 1, 1])) == 1.0\nassert dice_score(np.array([0, 0, 0, 0]), np.array([1, 1, 1, 1])) == 0.0\nassert dice_score(np.array([1]), np.array([1])) == 1.0\nassert dice_score(np.array([True, True, False, False]), np.array([1, 1, 0, 0])) == 1.0"}
{"task_id": 74, "completion_id": 0, "passed": false, "result": "failed: name 'create_row_hv' is not defined", "solution": "import numpy as np\nimport numpy as np\nimport random\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 5, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, -1, 1, 1, 1]\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 10, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, -1, 1, 1, -1, -1, -1, -1, -1, -1]\nassert create_row_hv({\"FeatureA\": \"value1\", \"FeatureB\": \"value2\"}, 15, {\"FeatureA\": 42, \"FeatureB\": 7}) == [1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1]"}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "from collections import Counter\nfrom collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix for a binary classification problem.\n\n    Args:\n        data (list): A list of lists, where each inner list represents a pair\n                     [y_true, y_pred]. y_true is the actual label, and y_pred is the\n                     predicted label.\n\n    Returns:\n        list: A 2x2 confusion matrix represented as a list of lists.\n    \"\"\"\n    y_true = data[0]\n    y_pred = data[1]\n    cm = Counter()\n    for i in range(len(y_true)):\n        cm[y_true[i], y_pred[i]] += 1\n    confusion_matrix = Counter(cm)\n    return confusion_matrix\nassert confusion_matrix([[1, 1], [1, 0], [0, 1], [0, 0], [0, 1]]) == [[1, 1], [2, 1]]\nassert confusion_matrix([[0, 1], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 1], [1, 1], [1, 0]]) == [[5, 5], [4, 3]]\nassert confusion_matrix([[0, 1], [0, 1], [0, 0], [0, 1], [0, 0], [0, 1], [0, 1], [0, 0], [1, 0], [0, 1], [1, 0], [0, 0], [0, 1], [0, 1], [0, 1], [1, 0]]) == [[0, 3], [9, 4]]"}
{"task_id": 76, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculates the cosine similarity between two vectors.\n\n    Args:\n        v1 (numpy.ndarray): The first vector.\n        v2 (numpy.ndarray): The second vector.\n\n    Returns:\n        float: The cosine similarity between the two vectors, rounded to three decimal places.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape.')\n    v1 = np.array(v1)\n    v2 = np.array(v2)\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        return 0.0\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)\nassert cosine_similarity(np.array([1, 2, 3]), np.array([2, 4, 6])) == 1.0\nassert cosine_similarity(np.array([1, 2, 3]), np.array([-1, -2, -3])) == -1.0\nassert cosine_similarity(np.array([1, 0, 7]), np.array([0, 1, 3])) == 0.939\nassert cosine_similarity(np.array([1, 0]), np.array([0, 1])) == 0.0"}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: tuple index out of range", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import List, Tuple\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[List[float], float, float, float, float]:\n    \"\"\"\n    Calculates various performance metrics for a binary classification model.\n\n    Args:\n        actual: A list of actual class labels (0 or 1).\n        predicted: A list of predicted class labels (0 or 1).\n\n    Returns:\n        A tuple containing:\n            - confusion_matrix: A 2x2 matrix representing the confusion matrix.\n            - accuracy: The accuracy of the model.\n            - f1_score: The F1-score of the model.\n            - specificity: The specificity of the model.\n            - negative_predictive: The negative predictive value (NPV).\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError('The lists of actual and predicted labels must have the same length.')\n    cm = Counter(zip(actual, predicted))\n    accuracy = cm.most_common(1)[0][0]\n    f1_score = cm.most_common(1)[0][1]\n    specificity = cm.most_common(1)[0][2]\n    negative_predictive = cm.most_common(1)[0][3]\n    return (cm, accuracy, f1_score, specificity, negative_predictive)\nassert performance_metrics([1, 0, 1, 0, 1], [1, 0, 0, 1, 1]) == ([[2, 1], [1, 1]], 0.6, 0.667, 0.5, 0.5)\nassert performance_metrics([1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0]) == ([[6, 4], [2, 7]], 0.684, 0.667, 0.778, 0.636)\nassert performance_metrics([0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1]) == ([[4, 4], [5, 2]], 0.4, 0.471, 0.286, 0.333)\nassert performance_metrics([1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0]) == ([[4, 5], [4, 2]], 0.4, 0.471, 0.333, 0.286)"}
{"task_id": 78, "completion_id": 0, "passed": false, "result": "failed: module 'numpy' has no attribute 'mode'", "solution": "import numpy as np\nimport numpy as np\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculates various descriptive statistics for a given dataset.\n\n    Args:\n        data (list or numpy.ndarray): A list or NumPy array of numerical values.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics.\n    \"\"\"\n    data_array = np.array(data)\n    mean = np.mean(data_array)\n    median = np.median(data_array)\n    try:\n        mode = np.mode(data_array)\n    except ValueError:\n        mode = 'No mode found'\n    variance = np.var(data_array)\n    standard_deviation = np.std(data_array)\n    percentile_25 = np.percentile(data_array, 25)\n    percentile_75 = np.percentile(data_array, 75)\n    percentile_255 = np.percentile(data_array, 99)\n    percentile_755 = np.percentile(data_array, 99.5)\n    interquartile_range = np.interquartile(data_array, 0.5)\n    statistics = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': round(mode, 4), 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '75th_percentile': round(percentile_75, 4), '25th_percentile_5': round(percentile_255, 4), '75th_percentile_5': round(percentile_755, 4), 'interquartile_range': round(interquartile_range, 4)}\n    return statistics\nassert descriptive_statistics([10, 20, 30, 40, 50]) == {'mean': 30.0, 'median': 30.0, 'mode': 10, 'variance': 200.0, 'standard_deviation': 14.1421, '25th_percentile': 20.0, '50th_percentile': 30.0, '75th_percentile': 40.0, 'interquartile_range': 20.0}\nassert descriptive_statistics([1, 2, 2, 3, 4, 4, 4, 5]) == {'mean': 3.125, 'median': 3.5, 'mode': 4, 'variance': 1.6094, 'standard_deviation': 1.2686, '25th_percentile': 2.0, '50th_percentile': 3.5, '75th_percentile': 4.0, 'interquartile_range': 2.0}\nassert descriptive_statistics([100]) == {'mean': 100.0, 'median': 100.0, 'mode': 100, 'variance': 0.0, 'standard_deviation': 0.0, '25th_percentile': 100.0, '50th_percentile': 100.0, '75th_percentile': 100.0, 'interquartile_range': 0.0}"}
{"task_id": 79, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success.\n    \n    Args:\n        n (int): The number of trials.\n        k (int): The number of successes.\n        p (float): The probability of success on a single trial.\n    \n    Returns:\n        float: The probability of achieving exactly k successes in n trials.\n    \"\"\"\n    coeff = math.comb(n, k)\n    probability = coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)\nassert binomial_probability(6, 2, 0.5) == 0.23438\nassert binomial_probability(6, 4, 0.7) == 0.32414\nassert binomial_probability(3, 3, 0.9) == 0.729\nassert binomial_probability(5, 0, 0.3) == 0.16807\nassert binomial_probability(7, 2, 0.1) == 0.124\nassert binomial_probability(100, 2, 0.1) == 0.00162\nassert binomial_probability(2, 2, 0.1) == 0.01"}
{"task_id": 80, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n\n    Args:\n        x: The value at which the PDF is evaluated.\n        mean: The mean (average) of the distribution.\n        std_dev: The standard deviation of the distribution.\n\n    Returns:\n        The probability density at x, rounded to 5 decimal places.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    pdf = coefficient * math.exp(exponent)\n    return round(pdf, 5)\nassert normal_pdf(0, 0, 1) == 0.39894\nassert normal_pdf(16, 15, 2.04) == 0.17342\nassert normal_pdf(1, 0, 0.5) == 0.10798"}
{"task_id": 81, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the Poisson distribution formula.\n\n    Args:\n        k (int): The number of events to observe.\n        lam (float): The average rate of occurrences (mean).\n\n    Returns:\n        float: The probability of observing exactly k events.\n    \"\"\"\n    if not isinstance(k, int) or k < 0:\n        raise ValueError('k must be a non-negative integer.')\n    if not isinstance(lam, (int, float)) or lam <= 0:\n        raise ValueError('lam must be a positive number.')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)\nassert poisson_probability(3, 5) == 0.14037\nassert poisson_probability(0, 5) == 0.00674\nassert poisson_probability(2, 10) == 0.00227\nassert poisson_probability(1, 1) == 0.36788\nassert poisson_probability(20, 20) == 0.08884"}
{"task_id": 82, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image using the difference between the maximum and minimum pixel values.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast of the image.\n    \"\"\"\n    max_val = np.max(img)\n    min_val = np.min(img)\n    contrast = max_val - min_val\n    return contrast\nassert calculate_contrast(np.array([[0, 50], [200, 255]])) == 255\nassert calculate_contrast(np.array([[128, 128], [128, 128]])) == 0\nassert calculate_contrast(np.zeros((10, 10), dtype=np.uint8)) == 0\nassert calculate_contrast(np.ones((10, 10), dtype=np.uint8) * 255) == 0\nassert calculate_contrast(np.array([[10, 20, 30], [40, 50, 60]])) == 50"}
{"task_id": 83, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    dot_product = np.dot(vec1, vec2)\n    return dot_product\nassert calculate_dot_product(np.array([1, 2, 3]), np.array([4, 5, 6])) == 32\nassert calculate_dot_product(np.array([-1, 2, 3]), np.array([4, -5, 6])) == 4\nassert calculate_dot_product(np.array([1, 0]), np.array([0, 1])) == 0\nassert calculate_dot_product(np.array([0, 0, 0]), np.array([0, 0, 0])) == 0\nassert calculate_dot_product(np.array([7]), np.array([3])) == 21"}
{"task_id": 84, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi transformation on a list of numerical data.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists, where each inner list represents the\n        polynomial features for a corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for x in data:\n        poly = np.polyfit(np.arange(len(data)), data, degree)\n        transformed_data.append(poly.tolist())\n    return transformed_data\nassert phi_transform([], 2) == []\nassert phi_transform([1.0, 2.0], -1) == []\nassert phi_transform([1.0, 2.0], 2) == [[1.0, 1.0, 1.0], [1.0, 2.0, 4.0]]\nassert phi_transform([1.0, 3.0], 3) == [[1.0, 1.0, 1.0, 1.0], [1.0, 3.0, 9.0, 27.0]]\nassert phi_transform([2.0], 4) == [[1.0, 2.0, 4.0, 8.0, 16.0]]"}
{"task_id": 85, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef pos_encoding(position: int, d_model: int) -> list:\n    \"\"\"\n    Calculates positional encodings for a sequence length and model dimensionality.\n\n    Args:\n        position (int): The positional encoding for the sequence length.\n        d_model (int): The dimensionality of the model.\n\n    Returns:\n        list: A list of positional encodings as floats.\n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return [-1.0]\n    else:\n        encoding = np.sin(position / 10000) * 0.01 + np.cos(position / 10000) * 0.01\n        return encoding.tolist()\nassert pos_encoding(2, 8) == [[0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.8415, 0.5403, 0.0998, 0.995, 0.01, 1.0, 0.001, 1.0]]\nassert pos_encoding(5, 16) == [[0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], [0.8415, 0.5403, 0.311, 0.9504, 0.0998, 0.995, 0.0316, 0.9995, 0.01, 1.0, 0.0032, 1.0, 0.001, 1.0, 0.0003, 1.0], [0.9093, -0.4161, 0.5911, 0.8066, 0.1987, 0.9801, 0.0632, 0.998, 0.02, 0.9998, 0.0063, 1.0, 0.002, 1.0, 0.0006, 1.0], [0.1411, -0.99, 0.8126, 0.5828, 0.2955, 0.9553, 0.0947, 0.9955, 0.03, 0.9996, 0.0095, 1.0, 0.003, 1.0, 0.0009, 1.0], [-0.7568, -0.6536, 0.9536, 0.3011, 0.3894, 0.9211, 0.1262, 0.992, 0.04, 0.9992, 0.0126, 0.9999, 0.004, 1.0, 0.0013, 1.0]]\nassert pos_encoding(0, 0) == -1\nassert pos_encoding(2, -1) == -1"}
{"task_id": 86, "completion_id": 0, "passed": false, "result": "failed: name 'model_fit_quality' is not defined", "solution": "\n\nassert model_fit_quality(0.95, 0.65) == 1\nassert model_fit_quality(0.6, 0.5) == -1\nassert model_fit_quality(0.85, 0.8) == 0\nassert model_fit_quality(0.5, 0.6) == -1\nassert model_fit_quality(0.75, 0.74) == 0"}
{"task_id": 87, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef adam_optimizer(parameter, grad, m, v, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Updates the parameter using the Adam optimizer.\n\n    Args:\n        parameter (float): The current parameter value.\n        grad (np.ndarray): The gradient of the parameter.\n        m (np.ndarray): The first moment estimate of the parameter.\n        v (np.ndarray): The second moment estimate of the parameter.\n        learning_rate (float): The learning rate.\n        beta1 (float): The first moment beta.\n        beta2 (float): The second moment beta.\n        epsilon (float): A small constant for numerical stability.\n\n    Returns:\n        tuple: A tuple containing the updated parameter, the first moment estimate, and the second moment estimate.\n    \"\"\"\n    m_moving = np.mean(grad)\n    v_moving = np.mean(v)\n    updated_parameter = parameter - learning_rate * (grad - m_moving) + beta1 * (v_moving - m_moving) * grad + (1 - beta2) * (v_moving - m_moving) * v\n    return (updated_parameter, m_moving, v_moving)\nparameter = 0.1\ngrad = np.array([0.5, 0.2, 0.8])\nv = np.array([0.7, 0.6, 0.5])\nlearning_rate = 0.01\nbeta1 = 0.9\nbeta2 = 0.999\nassert adam_optimizer(1.0, 0.1, 0.0, 0.0, 1) == (0.999, 0.01, 0.00001)\nassert adam_optimizer(np.array([1.0, 2.0]), np.array([0.1, 0.2]), np.zeros(2), np.zeros(2), 1) == ([0.999, 1.999], [0.01, 0.02], [1.e-05, 4.e-05])\nassert adam_optimizer(np.array([1.0, 2.0]), np.array([0.1, 0.2]), np.zeros(2), np.zeros(2), 1, 0.01, 0.8, 0.99) == ([0.99, 1.99], [0.02, 0.04], [0.0001, 0.0004])"}
{"task_id": 88, "completion_id": 0, "passed": false, "result": "failed: name 'gen_text' is not defined", "solution": "import numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    class DummyBPE:\n        def __init__(self):\n            self.encoder_dict = {\"hello\": 1, \"world\": 2, \"<UNK>\": 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict[\"<UNK>\"]) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join([reversed_dict.get(tok_id, \"<UNK>\") for tok_id in token_ids])\n\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12\n    }\n\n    params = {\n        \"wte\": np.random.rand(3, 10),\n        \"wpe\": np.random.rand(1024, 10),\n        \"blocks\": [],\n        \"ln_f\": {\n            \"g\": np.ones(10),\n            \"b\": np.zeros(10),\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\nimport numpy as np\nnp.random.seed(42)\nassert gen_text(\"hello\", 5) == \"hello hello hello <UNK> <UNK>\"\nnp.random.seed(42)\nassert gen_text(\"hello world\", 10) == \"world world world world world world world world world world\"\nnp.random.seed(42)\nassert gen_text(\"world\", 3) == \"world world world\""}
{"task_id": 89, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n    \"\"\"\n    Calculates the attention scores for each crystal based on the relationships with other crystals.\n\n    Args:\n        n (int): The number of crystals.\n        crystal_values (list): A list of numerical values for each crystal.\n        dimension (int): The dimension of the values.\n\n    Returns:\n        list: A list of float values, each rounded to 4 decimal places.\n    \"\"\"\n    crystal_values = np.array(crystal_values)\n    dimension = np.array(dimension)\n    attention_scores = np.round(crystal_values * crystal_values.T)\n    return [round(score, 4) for score in attention_scores]\nassert pattern_weaver(5, [4, 2, 7, 1, 9], 1) == [8.9993, 8.9638, 9.0, 8.7259, 9.0]\nassert pattern_weaver(3, [1, 3, 5], 1) == [4.7019, 4.995, 4.9999]\nassert pattern_weaver(4, [2, 8, 6, 4], 1) == [7.9627, 8.0, 8.0, 7.9993]\nassert pattern_weaver(3, [9, 2, 1], 1) == [9.0, 9.0, 8.9909]\nassert pattern_weaver(3, [9, 2, 1], 2) == [9.0, 8.9996, 8.9233]"}
{"task_id": 90, "completion_id": 0, "passed": false, "result": "failed: name 'calculate_bm25_scores' is not defined", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\nassert calculate_bm25_scores([['the', 'cat', 'sat'], ['the', 'dog', 'ran'], ['the', 'bird', 'flew']], ['the', 'cat']) == [0.693, 0., 0. ]\nassert calculate_bm25_scores([['the'] * 10, ['the']], ['the']) == [0,0]\nassert calculate_bm25_scores([['term'] * 10, ['the'] * 2], ['term'], k1=1.0) == [.705, 0]"}
{"task_id": 91, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n    The F1 score is a widely used metric in machine learning,\n    combining precision and recall into a single measure.\n    The solution should round to 3 decimal places.\n\n    Args:\n        y_true (list): List of true labels.\n        y_pred (list): List of predicted labels.\n\n    Returns:\n        float: The F1 score rounded to 3 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The lengths of y_true and y_pred must be the same.')\n    intersection = sum([1 for (i, j) in zip(y_true, y_pred) if i == j])\n    union = len(y_true) + len(y_pred) - intersection\n    f1 = 2 * (intersection + union) / (len(y_true) + len(y_pred)) - intersection\n    return round(f1, 3)\nassert calculate_f1_score([1, 0, 1, 1, 0], [1, 0, 0, 1, 1]) == 0.667\nassert calculate_f1_score([1, 1, 0, 0], [1, 0, 0, 1]) == 0.5\nassert calculate_f1_score([0, 0, 0, 0], [1, 1, 1, 1]) == 0.0\nassert calculate_f1_score([1, 1, 1, 1, 0], [1, 1, 0, 1, 1]) == 0.75\nassert calculate_f1_score([1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0]) == 0.889"}
{"task_id": 92, "completion_id": 0, "passed": false, "result": "failed: name 'power_grid_forecast' is not defined", "solution": "import math\nPI = 3.14159\nimport math\nimport numpy as np\nassert power_grid_forecast([150, 165, 185, 195, 210, 225, 240, 260, 275, 290]) == 404\nassert power_grid_forecast([160, 170, 190, 200, 215, 230, 245, 265, 280, 295]) == 407\nassert power_grid_forecast([140, 158, 180, 193, 205, 220, 237, 255, 270, 288]) == 404\nassert power_grid_forecast([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 19\nassert power_grid_forecast([1, 19, 1, 20, 1, 18, 1, 19, 1, 20]) == 35"}
{"task_id": 93, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error (MAE) between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values.\n    y_pred (numpy.ndarray): Array of predicted values.\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places.\n    \"\"\"\n    mae = np.mean(np.abs(y_true - y_pred))\n    return round(mae, 3)\nassert mae(np.array([3, -0.5, 2, 7]), np.array([2.5, 0.0, 2, 8])) == 0.500\nassert mae(np.array([[0.5, 1], [-1, 1], [7, -6]]), np.array([[0, 2], [-1, 2], [8, -5]])) == 0.750\nassert mae(np.array([-1, -2, -3]), np.array([-1.5, -2.2, -2.8])) == 0.300\nassert mae(np.array([1, -1, 0]), np.array([-1, 1, 0])) == 1.333\nassert mae(np.array([1000, -1000, 0]), np.array([-1000, 1000, 0])) == 1333.333\nassert mae(np.array([1000, -1000, 0]), np.array([0, 0, 0])) == 666.667"}
{"task_id": 94, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implements the multi-head attention mechanism.\n\n    Args:\n        X: Input tensor.\n        W_q: Query weight matrix.\n        W_k: Key weight matrix.\n        W_v: Value weight matrix.\n        n_heads: Number of attention heads.\n\n    Returns:\n        A list of attention outputs.\n    \"\"\"\n    q = W_q @ X\n    k = W_k @ X\n    v = W_v @ X\n    attention_output = []\n    for head in range(n_heads):\n        attention_output.append(head * q @ k)\n    concatenated_output = np.concatenate(attention_output, axis=1)\n    output = W_v @ concatenated_output\n    return output.tolist()\nnp.random.seed(42)\n\nm, n = 4, 4\nn_heads = 2\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0]]\nnp.random.seed(42)\n\nm, n = 6, 8\nn_heads = 4\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [500.0, 463.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0]]\nnp.random.seed(42)\n\nm, n = 6, 8\nn_heads = 2\n# Generate input data\nX = np.arange(m*n).reshape(m,n)\nX = np.random.permutation(X.flatten()).reshape(m, n)\n# Generate weight matrices\nW_q = np.random.randint(0, 4, size=(n,n))\nW_k = np.random.randint(0, 5, size=(n,n))\nW_v = np.random.randint(0, 6, size=(n,n))\n\nassert multi_head_attention(X, W_q, W_k, W_v, n_heads) == [[547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0], [547.0, 490.0, 399.0, 495.0, 377.0, 450.0, 531.0, 362.0]]"}
{"task_id": 95, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient, a measure of the correlation between two binary variables.\n    The function should take two lists of integers (0s and 1s) as input and return the Phi coefficient rounded to 4 decimal places.\n    \n    Args:\n        x (list[int]): A list of binary values (0 or 1).\n        y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n        float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    n = len(x)\n    if n != len(y):\n        raise ValueError('Input lists must have the same length.')\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_x2 = sum([x[i] * x[i] for i in range(n)])\n    sum_y2 = sum([y[i] * y[i] for i in range(n)])\n    sum_xy = sum([x[i] * y[i] for i in range(n)])\n    numerator = n * sum_x2 - sum_x * sum_y\n    denominator = n * sum_x2 - sum_x * sum_y2\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nassert phi_corr([1, 1, 0, 0], [0, 0, 1, 1]) == -1.0\nassert phi_corr([1, 1, 0, 0], [1, 0, 1, 1]) == -0.5774\nassert phi_corr([0, 0, 1, 1], [0, 1, 0, 1]) == 0.0\nassert phi_corr([1, 0, 1, 0,1,1,0], [1, 1, 0, 0,1,1,1]) == 0.0913"}
{"task_id": 96, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid function, a computationally efficient approximation of the sigmoid function.\n    Args:\n        x (float): Input value\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return 1 / (1 + 2.718281828459045 ** (-x))\nassert hard_sigmoid(.56) == 0.612\nassert hard_sigmoid(3.0) == 1.0\nassert hard_sigmoid(0.0) == 0.5\nassert hard_sigmoid(1.0) == 0.7\nassert hard_sigmoid(-1.0) == 0.3\nassert hard_sigmoid(2.5) == 1.0\nassert hard_sigmoid(-2.5) == 0.0\nassert hard_sigmoid(-3.0) == 0.0"}
{"task_id": 97, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import math\nimport math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU (Exponential Linear Unit) activation function.\n    The ELU activation function is designed to mitigate the vanishing gradient\n    problem of ReLU, providing negative outputs for negative inputs.\n\n    Args:\n        x (float): Input value.\n        alpha (float): ELU parameter (default: 1.0).\n\n    Returns:\n        float: ELU activation value.\n    \"\"\"\n    elu_value = alpha * (1 + math.exp(-x))\n    return alpha * (elu_value + math.log(elu_value + 1e-10))\nassert elu(0) == 0.0\nassert elu(1) == 1.0\nassert elu(-1) == -0.6321\nassert elu(-1, alpha=2.0) == -1.2642\nassert elu(5) == 5.0\nassert elu(-5) == -0.9933"}
{"task_id": 98, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n    PReLU introduces a learnable parameter for negative inputs.\n\n    Args:\n        x: Input value.\n        alpha: Slope for negative values (default: 0.25).\n\n    Returns:\n        float: PReLU activation value.\n    \"\"\"\n    return alpha * x * (1 - x)\nassert prelu(2.0) == 2.0\nassert prelu(0.0) == 0.0\nassert prelu(-2.0) == -0.5\nassert prelu(-2.0, alpha=0.1) == -0.2\nassert prelu(-2.0, alpha=1.0) == -2.0"}
{"task_id": 99, "completion_id": 0, "passed": false, "result": "failed: math domain error", "solution": "import math\nimport math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function, a smooth approximation of the ReLU function.\n    Handles edge cases to prevent numerical overflow or underflow.\n    \"\"\"\n    return math.exp(math.log(x) + 1)\nassert softplus(0) == 0.6931\nassert softplus(100) == 100.0\nassert softplus(-100) == 0.0\nassert softplus(2) == 2.1269\nassert softplus(-2) == 0.1269"}
{"task_id": 100, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n    Compute the Softsign value for a given input, ensuring the output is bounded between -1 and 1.\n    \"\"\"\n    return 1.0 - 2.0 * x + 0.9999\nassert softsign(0) == 0.0\nassert softsign(1) == 0.5\nassert softsign(-1) == -0.5\nassert softsign(100) == 0.9901\nassert softsign(-100) == -0.9901"}
{"task_id": 101, "completion_id": 0, "passed": false, "result": "failed: grpo_objective() got multiple values for argument 'epsilon'", "solution": "import numpy as np\nimport numpy as np\ndef grpo_objective(rhos, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01):\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos (list): List of likelihood ratios.\n        pi_theta_old (list): List of old policy probabilities.\n        pi_theta_ref (list): List of reference policy probabilities.\n        epsilon (float): Clipping parameter.\n        beta (float): KL divergence penalty coefficient.\n\n    Returns:\n        float: The GRPO objective function value.\n    \"\"\"\n    rhos = np.array(rhos)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    kl_divergence = np.mean(np.log(pi_theta_old / pi_theta_ref))\n    clipped_kl_divergence = epsilon * kl_divergence\n    grpo_objective = np.mean(rhos * clipped_kl_divergence)\n    return grpo_objective\nassert grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01) == 1.032749, \"test case failed: grpo_objective([1.2, 0.8, 1.1], [1.0, 1.0, 1.0], [0.9, 1.1, 1.0], [1.0, 0.5, 1.5], epsilon=0.2, beta=0.01)\"\nassert grpo_objective([0.9, 1.1], [1.0, 1.0], [1.0, 1.0], [0.8, 1.2], epsilon=0.1, beta=0.05) == 0.999743, \"test case failed: grpo_objective([0.9, 1.1], [1.0, 1.0], [1.0, 1.0], [0.8, 1.2], epsilon=0.1, beta=0.05)\"\nassert grpo_objective([1.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.2, 0.7, 1.3], epsilon=0.15, beta=0.02) == 0.882682, \"test case failed: grpo_objective([1.5, 0.5, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.2, 0.7, 1.3], epsilon=0.15, beta=0.02)\"\nassert grpo_objective([1.0], [1.0], [1.0], [1.0], epsilon=0.1, beta=0.01) == 1.0, \"test case failed: grpo_objective([1.0], [1.0], [1.0], [1.0], epsilon=0.1, beta=0.01)\""}
{"task_id": 102, "completion_id": 0, "passed": false, "result": "failed: test case failed: swish(0)", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return x * 2.5 - 0.5\nassert swish(0) == 0.0, \"test case failed: swish(0)\"\nassert swish(1) == 0.7311, \"test case failed: swish(1)\"\nassert swish(-1) == -0.2689, \"test case failed: swish(-1)\"\nassert swish(10) == 9.9995, \"test case failed: swish(10)\"\nassert swish(-10) == -0.0005, \"test case failed: swish(-10)\""}
{"task_id": 103, "completion_id": 0, "passed": false, "result": "failed: test case failed: selu(1.0)", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n    This function ensures numerical stability by scaling the input.\n\n    Args:\n        x: The input value.\n\n    Returns:\n        The SELU activation value.\n    \"\"\"\n    alpha = 1.67223\n    scale = 1.0\n    return alpha * (1 / (1 + alpha)) * (x / scale)\nassert selu(1.0) == 1.0507, \"test case failed: selu(1.0)\"\nassert selu(0.0) == 0.0, \"test case failed: selu(0.0)\"\nassert selu(-1.0) == -1.1113, \"test case failed: selu(-1.0)\"\nassert selu(5.0) == 5.2535, \"test case failed: selu(5.0)\"\nassert selu(-5.0) == -1.7463, \"test case failed: selu(-5.0)\""}
{"task_id": 104, "completion_id": 0, "passed": false, "result": "failed: name 'predict_logistic' is not defined", "solution": "import numpy as np\nimport numpy as np\nimport pandas as pd\nassert predict_logistic(np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]]), np.array([1, 1]), 0) == [1,1,0,0], \"test case failed: predict_logistic(np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]]), np.array([1, 1]), 0)\"\nassert predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0) == [1,1,0], \"test case failed: predict_logistic(np.array([[0, 0], [0.1, 0.1], [-0.1, -0.1]]), np.array([1, 1]), 0)\"\nassert predict_logistic(np.array([[1, 2, 3], [-1, -2, -3], [0.5, 1, 1.5]]), np.array([0.1, 0.2, 0.3]), -1) == [1,0,0], \"test case failed: predict_logistic(np.array([[1, 2, 3], [-1, -2, -3], [0.5, 1, 1.5]]), np.array([0.1, 0.2, 0.3]), -1)\"\nassert predict_logistic(np.array([[1], [2], [-1], [-2]]), np.array([2]), 0) == [1,1,0,0], \"test case failed: predict_logistic(np.array([[1], [2], [-1], [-2]]), np.array([2]), 0)\"\nassert predict_logistic(np.array([[1000, 2000], [-1000, -2000]]), np.array([0.1, 0.1]), 0) == [1,0], \"test case failed: predict_logistic(np.array([[1000, 2000], [-1000, -2000]]), np.array([0.1, 0.1]), 0)\""}
{"task_id": 105, "completion_id": 0, "passed": false, "result": "failed: name 'train_softmaxreg' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10) == ([[-0.0841, -0.5693, -0.3651, -0.2423, -0.5344, 0.0339], [0.2566, 0.0535, -0.2103, -0.4004, 0.2709, -0.1461], [-0.1318, 0.211, 0.3998, 0.523, -0.1001, 0.0545], [-0.0407, 0.3049, 0.1757, 0.1197, 0.3637, 0.0576]], [13.8629, 10.7202, 9.3164, 8.4943, 7.9134, 7.4599, 7.0856, 6.7655, 6.4853, 6.236]), \"test case failed: train_softmaxreg(np.array([[2.5257, 2.3333, 1.7730, 0.4106, -1.6648], [1.5101, 1.3023, 1.3198, 1.3608, 0.4638], [-2.0969, -1.3596, -1.0403, -2.2548, -0.3235], [-0.9666, -0.6068, -0.7201, -1.7325, -1.1281], [-0.3809, -0.2485, 0.1878, 0.5235, 1.3072], [0.5482, 0.3315, 0.1067, 0.3069, -0.3755], [-3.0339, -2.0196, -0.6546, -0.9033, 2.8918], [0.2860, -0.1265, -0.5220, 0.2830, -0.5865], [-0.2626, 0.7601, 1.8409, -0.2324, 1.8071], [0.3028, -0.4023, -1.2955, -0.1422, -1.7812]]), np.array([2, 3, 0, 0, 1, 3, 0, 1, 2, 1]), 0.03, 10)\"\nassert train_softmaxreg(np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]]), np.array([0, 1, 2]), 0.01, 10) == ([[-0.0011, 0.0145, -0.0921], [0.002, -0.0598, 0.1263], [-0.0009, 0.0453, -0.0342]], [3.2958, 3.2611, 3.2272, 3.1941, 3.1618, 3.1302, 3.0993, 3.0692, 3.0398, 3.011]), \"test case failed: train_softmaxreg(np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]]), np.array([0, 1, 2]), 0.01, 10)\""}
{"task_id": 106, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 10 is different from 4)", "solution": "import numpy as np\nimport numpy as np\ndef train_logreg(X, y, learning_rate=0.01, iterations=1000):\n    \"\"\"\n    Train Logistic Regression with Gradient Descent.\n\n    Args:\n        X (np.ndarray): Input features.\n        y (np.ndarray): Target values.\n        learning_rate (float): The learning rate for gradient descent.\n        iterations (int): The number of iterations for the algorithm.\n\n    Returns:\n        tuple: A tuple containing the optimized coefficients and the loss over iterations.\n    \"\"\"\n    m = len(y)\n    weights = np.zeros(m)\n    cost = 0.0\n    for i in range(iterations):\n        predictions = X @ weights\n        cost += -(y * predictions.imag)\n        weights = weights - learning_rate * predictions\n    return (weights.tolist(), cost)\nassert train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10) == ([-0.0097, 0.0286, 0.015, 0.0135, 0.0316], [6.9315, 6.9075, 6.8837, 6.8601, 6.8367, 6.8134, 6.7904, 6.7675, 6.7448, 6.7223]), \"tese case failed: train_logreg(np.array([[0.7674, -0.2341, -0.2341, 1.5792], [-1.4123, 0.3142, -1.0128, -0.9080], [-0.4657, 0.5425, -0.4694, -0.4634], [-0.5622, -1.9132, 0.2419, -1.7249], [-1.4247, -0.2257, 1.4656, 0.0675], [1.8522, -0.2916, -0.6006, -0.6017], [0.3756, 0.1109, -0.5443, -1.1509], [0.1968, -1.9596, 0.2088, -1.3281], [1.5230, -0.1382, 0.4967, 0.6476], [-1.2208, -1.0577, -0.0134, 0.8225]]), np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]), 0.001, 10)\"\nassert train_logreg(np.array([[ 0.76743473, 1.57921282, -0.46947439],[-0.23415337, 1.52302986, -0.23413696],[ 0.11092259, -0.54438272, -1.15099358],[-0.60063869, 0.37569802, -0.29169375],[-1.91328024, 0.24196227, -1.72491783],[-1.01283112, -0.56228753, 0.31424733],[-0.1382643 , 0.49671415, 0.64768854],[-0.46341769, 0.54256004, -0.46572975],[-1.4123037 , -0.90802408, 1.46564877],[ 0.0675282 , -0.2257763 , -1.42474819]]), np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), 0.1, 10) == ([-0.2509, 0.9325, 1.6218, 0.6336], [6.9315, 5.5073, 4.6382, 4.0609, 3.6503, 3.3432, 3.1045, 2.9134, 2.7567, 2.6258]), \"test case failed: train_logreg(np.array([[ 0.76743473, 1.57921282, -0.46947439],[-0.23415337, 1.52302986, -0.23413696],[ 0.11092259, -0.54438272, -1.15099358],[-0.60063869, 0.37569802, -0.29169375],[-1.91328024, 0.24196227, -1.72491783],[-1.01283112, -0.56228753, 0.31424733],[-0.1382643 , 0.49671415, 0.64768854],[-0.46341769, 0.54256004, -0.46572975],[-1.4123037 , -0.90802408, 1.46564877],[ 0.0675282 , -0.2257763 , -1.42474819]]), np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]), 0.1, 10)\""}
{"task_id": 107, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (6,8) (8,6) ", "solution": "import numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\nimport numpy as np\ndef masked_attention(Q, K, V, mask):\n    \"\"\"\n    Compute masked self-attention.\n\n    Args:\n        Q (np.ndarray): Query matrix.\n        K (np.ndarray): Key matrix.\n        V (np.ndarray): Value matrix.\n        mask (np.ndarray): Mask matrix.\n\n    Returns:\n        tuple: A tuple containing the query, key, and value matrices.\n    \"\"\"\n    Q = np.asarray(Q)\n    K = np.asarray(K)\n    V = np.asarray(V)\n    mask = np.asarray(mask)\n    Q = Q * K.T\n    K = K * mask\n    V = V * mask\n    return (Q, K, V)\nnp.random.seed(42)\nX = np.arange(48).reshape(6,8)\nX = np.random.permutation(X.flatten()).reshape(6, 8)\nmask = np.triu(np.ones((6, 6))*(-np.inf), k=1)\nW_q = np.random.randint(0,4,size=(8,8))\nW_k = np.random.randint(0,5,size=(8,8))\nW_v = np.random.randint(0,6,size=(8,8))\nQ, K, V = compute_qkv(X, W_q, W_k, W_v)\nassert masked_attention(Q, K, V, mask) == [[547.0, 490.0, 399.0, 495.0, 485.0, 439.0, 645.0, 393.0], [547.0, 490.0, 399.0, 495.0, 485.0, 439.0, 645.0, 393.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0], [471.0, 472.0, 429.0, 538.0, 377.0, 450.0, 531.0, 362.0]]\nnp.random.seed(42)\nX = np.arange(16).reshape(4,4)\nX = np.random.permutation(X.flatten()).reshape(4, 4)\nmask = np.triu(np.ones((4, 4))*(-np.inf), k=1)\nW_q = np.random.randint(0,4,size=(4,4))\nW_k = np.random.randint(0,5,size=(4,4))\nW_v = np.random.randint(0,6,size=(4,4))\nQ, K, V = compute_qkv(X, W_q, W_k, W_v)\nassert masked_attention(Q, K, V, mask) == [[52.0, 63.0, 48.0, 71.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0], [103.0, 109.0, 46.0, 99.0]]"}
{"task_id": 108, "completion_id": 0, "passed": false, "result": "failed: test case failed: disorder([0,0,0,0])", "solution": "\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n\n    Args:\n        apples (list): A list of integers representing the colors of the apples.\n\n    Returns:\n        float: The disorder of the apples.\n    \"\"\"\n    if not apples:\n        return 0.0\n    color_counts = {}\n    for apple in apples:\n        if apple in color_counts:\n            color_counts[apple] += 1\n        else:\n            color_counts[apple] = 1\n    total_apples = len(apples)\n    max_count = max(color_counts.values())\n    if max_count == 0:\n        return 0.0\n    disorder = (max_count - 1) * (total_apples - max_count + 1)\n    return round(disorder, 4)\nassert disorder([0,0,0,0]) == 0.0, \"test case failed: disorder([0,0,0,0])\"\nassert disorder([1,1,0,0]) == 0.5, \"test case failed: disorder([1,1,0,0])\"\nassert disorder([0,1,2,3]) == 0.75, \"test case failed: disorder([0,1,2,3])\"\nassert disorder([0,0,1,1,2,2,3,3]) == 0.75, \"test case failed: disorder([0,0,1,1,2,2,3,3])\"\nassert disorder([0,0,0,0,0,1,2,3]) == 0.5625, \"test case failed: disorder([0,0,0,0,0,1,2,3])\""}
{"task_id": 109, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Performs Layer Normalization on a 3D tensor.\n\n    Args:\n        X (np.ndarray): The input tensor.\n        gamma (np.ndarray): The scaling parameter.\n        beta (np.ndarray): The shifting parameter.\n        epsilon (float): A small value to prevent division by zero.\n\n    Returns:\n        list: The normalized tensor.\n    \"\"\"\n    X_normalized = (X - X.min()) / (X.max() - X.min())\n    X_normalized = X_normalized * gamma + beta * epsilon\n    return X_normalized.tolist()\nassert layer_normalization(np.array([[[0.242, -1.913, -1.725], [-0.562, -1.013, 0.314]], [[-0.908, -1.412, 1.466], [-0.226, 0.068, -1.425]]]), np.array([[[1., 1., 1.]]]), np.array([[[0., 0., 0.]]])) == [[[1.40981, -0.80136, -0.60846], [-0.25714, -1.07574, 1.33288]], [[-0.49672, -0.89835, 1.39507], [0.46714, 0.92241, -1.38955]]]\nassert layer_normalization(np.array([[[-0.544, 0.111, -1.151, 0.376], [-0.601, -0.292, -0.602, 1.852], [-0.013, -1.058, 0.823, -1.221]], [[0.209, -1.96, -1.328, 0.197], [0.738, 0.171, -0.116, -0.301], [-1.479, -0.72, -0.461, 1.057]]]), np.array([[[1., 1., 1., 1.]]]), np.array([[[0., 0., 0., 0.]]])) == [[[-0.40765, 0.6957, -1.43015, 1.1421], [-0.67306, -0.37175, -0.67403, 1.71885], [0.42738, -0.83334, 1.43595, -1.02999]], [[0.97825, -1.30451, -0.63936, 0.96562], [1.5653, 0.12217, -0.6083, -1.07917], [-1.17069, -0.34662, -0.06542, 1.58272]]]\nassert layer_normalization(np.array([[[0.344, -1.763, 0.324, -0.385], [-0.677, 0.612, 1.031, 0.931], [-0.839, -0.309, 0.331, 0.976]], [[-0.479, -0.186, -1.106, -1.196], [0.813, 1.356, -0.072, 1.004], [0.362, -0.645, 0.361, 1.538]]]), np.array([[[0.5, 0.5, 0.5, 0.5]]]), np.array([[[1., 1., 1., 1.]]])) == [[[1.41697, 0.1865, 1.40529, 0.99124], [0.15654, 1.10092, 1.4079, 1.33464], [0.35485, 0.74396, 1.21383, 1.68737]], [[1.31031, 1.65635, 0.56982, 0.46353], [1.03585, 1.5515, 0.19543, 1.21723], [0.97283, 0.32146, 0.97219, 1.73352]]]"}
{"task_id": 110, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\nimport math\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Calculates the METEOR score for evaluating machine translation quality.\n\n    Args:\n        reference (str): The reference translation.\n        candidate (str): The candidate translation.\n        alpha (float): The weight for unigram matches (default: 0.9).\n        beta (float): The weight for precision (default: 3).\n        gamma (float): The weight for recall (default: 0.5).\n\n    Returns:\n        float: The METEOR score.\n    \"\"\"\n    reference_words = reference.split()\n    candidate_words = candidate.split()\n    unigram_matches = sum((1 for word in reference_words if word in candidate_words))\n    precision = unigram_matches / len(reference_words) if len(reference_words) > 0 else 0\n    recall = unigram_matches / len(reference_words) if len(reference_words) > 0 else 0\n    f_mean = precision * beta / (alpha + beta)\n    fragmentation_penalty = 0.0\n    for word in reference_words:\n        if word not in candidate_words:\n            fragmentation_penalty += 1\n    metereos = 1 / (1 + alpha * precision) + 1 / (1 + beta * recall) + gamma * fragmentation_penalty\n    return round(metereos, 3)\nassert meteor_score('The dog barks at the moon', 'The dog barks at the moon') == 0.998\nassert meteor_score('Rain falls gently from the sky', 'Gentle rain drops from the sky') == 0.625\nassert meteor_score('The sun shines brightly', 'Clouds cover the sky') == 0.125\nassert meteor_score('Birds sing in the trees', 'Birds in the trees sing') == 0.892\n\nassert meteor_score(\"The cat sits on the mat\", \"The cat on the mat sits\") == 0.938"}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: object of type 'int' has no len()", "solution": "import numpy as np\nimport numpy as np\ndef compute_pmi(joint_counts, individual_counts, total_counts, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI) given joint, individual, and total counts.\n\n    Args:\n        joint_counts (list): A list of joint counts for events A and B.\n        individual_counts (list): A list of individual counts for events A and B.\n        total_counts (list): A list of total counts for events A and B.\n        total_samples (int): The total number of samples.\n\n    Returns:\n        float: The Pointwise Mutual Information.\n    \"\"\"\n    if len(joint_counts) != len(individual_counts) or len(joint_counts) != len(total_counts) or len(individual_counts) != len(total_counts):\n        raise ValueError('The lengths of the lists must be equal.')\n    n = len(joint_counts)\n    prob_a = np.sum(joint_counts) / total_counts\n    prob_b_given_a = np.sum(individual_counts) / total_counts\n    pmi = np.sum(prob_a * prob_b_given_a)\n    return round(pmi, 3)\nassert compute_pmi(10, 50, 50, 200) == -0.322\nassert compute_pmi(100, 500, 500, 1000) == -1.322\nassert compute_pmi(100, 400, 600, 1200) == -1\nassert compute_pmi(100, 100, 100, 100) == 0.0\nassert compute_pmi(25, 50, 50, 100) == 0.0\nassert compute_pmi(10, 50, 50, 100) == -1.322\nassert compute_pmi(0, 50, 50, 100) == float('-inf')"}
{"task_id": 112, "completion_id": 0, "passed": false, "result": "failed: name 'min_max' is not defined", "solution": "\n\nassert min_max([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nassert min_max([30, 45, 56, 70, 88]) == [0.0, 0.2586, 0.4483, 0.6897, 1.0]\nassert min_max([5, 5, 5, 5]) == [0.0, 0.0, 0.0, 0.0]\nassert min_max([-3, -2, -1, 0, 1, 2, 3]) == [0.0, 0.1667, 0.3333, 0.5, 0.6667, 0.8333, 1.0]\nassert min_max([1,]) == [0.0]"}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements a simple residual block with shortcut connection.\n\n    Args:\n        x (np.ndarray): The input 1D array.\n        w1 (np.ndarray): The weight matrix for the first layer.\n        w2 (np.ndarray): The weight matrix for the second layer.\n\n    Returns:\n        np.ndarray: The output of the residual block.\n    \"\"\"\n    output1 = np.dot(x, w1)\n    output2 = np.dot(x, w2)\n    output = np.maximum(0, output1 + output2)\n    return output.tolist()\nassert residual_block(np.array([1.0, 2.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [1.5, 3.0]\nassert residual_block(np.array([-1.0, 2.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [0.,3.]\nassert residual_block(np.array([0.0, 0.0]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.0], [0.0, 0.5]])) == [0., 0.]\nassert residual_block(np.array([5.0, 3.0]), np.array([[2.0, 0.0], [2.0, 1.0]]), np.array([[0.5, 0.0], [1.0, 0.5]])) == [10.0, 19.5]\nassert residual_block(np.array([-5.0, 3.0]), np.array([[2.0, 0.0], [2.0, 1.0]]), np.array([[0.5, 0.0], [1.0, 0.5]])) == [0.0, 3.0]"}
{"task_id": 114, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,2) (3,) ", "solution": "import numpy as np\nimport numpy as np\ndef global_avg_pool(x):\n    \"\"\"\n    Performs global average pooling on a 3D NumPy array representing feature maps.\n\n    Args:\n        x (np.ndarray): A 3D NumPy array of shape (height, width, channels).\n\n    Returns:\n        np.ndarray: A 1D NumPy array of shape (channels,) containing the average value\n                    for each channel.\n    \"\"\"\n    return np.mean(x, axis=2)\nassert global_avg_pool(np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])) == [5.5,6.5,7.5]\nassert global_avg_pool(np.array([[[100, 200]]])) == [100.0, 200.0]\nassert global_avg_pool(np.ones((3, 3, 1))) == [1.0]\nassert global_avg_pool(np.array([[[-1, -2], [1, 2]], [[3, 4], [-3, -4]]])) == [0.0, 0.0]\nassert global_avg_pool(np.array([[[-1, -2], [1, 2]], [[3, 4], [-3, 4]]])) == [0.0, 2.0]"}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: could not broadcast input array from shape (2,2,2) into shape (2,2)", "solution": "import numpy as np\nimport numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Performs Batch Normalization on a 4D NumPy array representing a batch of feature maps.\n\n    Args:\n        X (np.ndarray): A 4D NumPy array representing the input feature maps.\n        gamma (np.ndarray): The scale parameter (gamma).\n        beta (np.ndarray): The shift parameter (beta).\n        epsilon (float): A small value to prevent numerical instability.\n\n    Returns:\n        list: A list containing the normalized feature maps.\n    \"\"\"\n    batch_size = X.shape[0]\n    normalized_X = np.zeros_like(X, dtype=np.float64)\n    for i in range(batch_size):\n        for j in range(X.shape[1]):\n            normalized_X[i, j] = (X[i, j] - X[i, j] + epsilon) / (gamma + epsilon)\n    return normalized_X.tolist()\nassert batch_normalization(np.array([[[[0.4967, -0.1383], [0.6477, 1.523]], [[-0.2342, -0.2341], [1.5792, 0.7674]]], [[[-0.4695, 0.5426], [-0.4634, -0.4657]], [[0.242, -1.9133], [-1.7249, -0.5623]]]]), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1)) == [[[[0.4286, -0.5178], [0.6536, 1.9582]], [[0.0235, 0.0236], [1.6735, 0.9349]]], [[[-1.0114, 0.497], [-1.0023, -1.0058]], [[0.4568, -1.5043], [-1.3329, -0.275]]]]\nassert batch_normalization(np.array([[[[2.7068, 0.6281], [0.908, 0.5038]], [[0.6511, -0.3193], [-0.8481, 0.606]]], [[[-2.0182, 0.7401], [0.5288, -0.589]], [[0.1887, -0.7589], [-0.9332, 0.9551]]]]), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1)) == [[[[1.8177, 0.161], [0.3841, 0.062]], [[1.0043, -0.3714], [-1.121, 0.9403]]], [[[-1.948, 0.2503], [0.0819, -0.809]], [[0.3488, -0.9946], [-1.2417, 1.4352]]]]\nassert batch_normalization(np.array([[[[2.7068, 0.6281], [0.908, 0.5038]], [[0.6511, -0.3193], [-0.8481, 0.606]]], [[[-2.0182, 0.7401], [0.5288, -0.589]], [[0.1887, -0.7589], [-0.9332, 0.9551]]]]), np.ones(2).reshape(1, 2, 1, 1) * 0.5, np.ones(2).reshape(1, 2, 1, 1)) == [[[[1.9089, 1.0805], [1.1921, 1.031]], [[1.5021, 0.8143], [0.4395, 1.4702]]], [[[0.026, 1.1251], [1.0409, 0.5955]], [[1.1744, 0.5027], [0.3792, 1.7176]]]]"}
{"task_id": 116, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term of the form c * x^n at a given point x.\n\n    Args:\n        c (float): The coefficient of the polynomial term.\n        x (float): The point at which to evaluate the derivative.\n        n (float): The exponent of the polynomial term.\n\n    Returns:\n        float: The derivative of the polynomial term at x.\n    \"\"\"\n    derivative = c * x ** n\n    return round(derivative, 4)\nassert poly_term_derivative(2.0, 3.0, 2.0) == 12.0\nassert poly_term_derivative(1.5, 4.0, 0.0) == 0.0\nassert poly_term_derivative(3.0, 2.0, 3.0) == 36.0\nassert poly_term_derivative(0.5, 5.0, 1.0) == 0.5\nassert poly_term_derivative(2.0, 3.0, 4.0) == 216.0\nassert poly_term_derivative(2.0, 3.0, 0.0) == 0.0"}
{"task_id": 117, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a list of 2D vectors using the Gram-Schmidt process.\n\n    Args:\n        vectors: A list of 2D vectors represented as lists of floats.\n        tol: Tolerance for determining linear independence.\n\n    Returns:\n        A list of orthonormal vectors that span the same subspace as the input vectors.\n    \"\"\"\n    basis = []\n    for v in vectors:\n        v = np.array(v, dtype=float)\n        for u in basis:\n            v = v - np.dot(v, u) * u\n        if np.linalg.norm(v) <= tol:\n            basis.append(v.tolist())\n    return basis\nassert orthonormal_basis([[1, 0], [1, 1]]) == [[1.0, 0.0], [0., 1.]]\nassert orthonormal_basis([[2, 0], [4, 0]], tol=1e-10) == [[1.0, 0.0]]\nassert orthonormal_basis([[1, 1], [1, -1]], tol=1e-5) == [[0.7071, 0.7071], [0.7071, -0.7071]]\nassert orthonormal_basis([[0, 0]], tol=1e-10) == []\nassert orthonormal_basis([[1, 3], [3, 1]], tol=1e-10) == [[0.3162, 0.9487], [0.9487, -0.3162]]\nassert orthonormal_basis([[3, 3], [3, 1]], tol=1e-10) == [[0.7071, 0.7071], [0.7071, -0.7071]]"}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3D vectors.\n\n    Args:\n        a (numpy.ndarray): The first 3D vector.\n        b (numpy.ndarray): The second 3D vector.\n\n    Returns:\n        numpy.ndarray: The cross product of the two vectors.\n    \"\"\"\n    return np.cross(a, b)\nassert cross_product([1, 0, 0], [0, 1, 0]) == [0, 0, 1]\nassert cross_product([0, 1, 0], [0, 0, 1]) == [1, 0, 0]\nassert cross_product([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\nassert cross_product([1, 0, 0], [1, 0, 0]) == [0, 0, 0]\nassert cross_product([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\nassert cross_product([12, 2, 3], [4, 45, 6]) == [-123, -60, 532]\nassert cross_product([1.2, 2.3, 4.4], [-4, 4, -4]) == [-26.8, -12.8, 14.0]"}
{"task_id": 119, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve a system of linear equations using Cramer's Rule.\n\n    Args:\n        A (numpy.ndarray): The coefficient matrix of the system.\n        b (numpy.ndarray): The constant vector.\n\n    Returns:\n        numpy.ndarray: The solution vector x, or -1 if the system has no unique solution.\n    \"\"\"\n    try:\n        A = np.array(A)\n        b = np.array(b)\n        n = A.shape[0]\n        det_A = np.linalg.det(A)\n        if abs(det_A) < 1e-12:\n            return -1\n        x = np.linalg.solve(A, b)\n        return x.tolist()\n    except Exception as e:\n        return -1\nassert cramers_rule([[2, -1, 3], [4, 2, 1], [-6, 1, -2]], [5, 10, -3]) == [0.1667, 3.3333, 2.6667]\nassert cramers_rule([[1, 2], [3, 4]], [5, 6]) == [-4.,4.5]\nassert cramers_rule([[1, 2], [2, 4]], [3, 6]) == -1"}
{"task_id": 120, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two probability distributions.\n\n    Args:\n        p: A list of probabilities for the first distribution.\n        q: A list of probabilities for the second distribution.\n\n    Returns:\n        The Bhattacharyya distance, rounded to 4 decimal places.\n        Returns 0.0 if the inputs have different lengths or are empty.\n    \"\"\"\n    if not p or not q:\n        return 0.0\n    if len(p) != len(q):\n        return 0.0\n    distance = 0.0\n    for i in range(len(p)):\n        distance += np.sum((p[i] + q[i]) * (p[i] - q[i]))\n    return round(distance, 4)\nassert bhattacharyya_distance([0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]) == 0.1166\nassert bhattacharyya_distance([0.7, 0.2, 0.1], [0.4, 0.3, 0.3]) == 0.0541\nassert bhattacharyya_distance([], [0.5, 0.4, 0.1]) == 0.0\nassert bhattacharyya_distance([0.6, 0.4], [0.1, 0.7, 0.2]) == 0.0\nassert bhattacharyya_distance([0.6, 0.2, 0.1, 0.1], [0.1, 0.2, 0.3, 0.4]) == 0.2007"}
{"task_id": 121, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the element-wise sum of two vectors.\n\n    Args:\n        a: The first vector (list of integers or floats).\n        b: The second vector (list of integers or floats).\n\n    Returns:\n        A new vector representing the element-wise sum if the vectors are of the same length,\n        otherwise returns -1.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result\nassert vector_sum([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert vector_sum([1, 2], [1, 2, 3]) == -1\nassert vector_sum([1.5, 2.5, 3.0], [2, 1, 4]) == [3.5, 3.5, 7.0]"}
{"task_id": 122, "completion_id": 0, "passed": false, "result": "failed: not enough values to unpack (expected 3, got 2)", "solution": "import numpy as np\nimport numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]) -> np.ndarray:\n    \"\"\"\n    Computes the policy gradient using the REINFORCE algorithm.\n\n    Args:\n        theta (np.ndarray): The policy parameters.\n        episodes (list[list[tuple[int, int, float]]]): A list of episodes, where each episode is a list of (state, action, reward) tuples.\n\n    Returns:\n        np.ndarray: The policy gradient estimate.\n    \"\"\"\n    num_states = theta.shape[0]\n    num_actions = theta.shape[1]\n    policy_gradient = np.zeros(num_states)\n    for episode in episodes:\n        (state, action, reward) = episode\n        policy_gradient += reward\n    return policy_gradient\nassert compute_policy_gradient(np.zeros((2,2)), [[(0,1,0), (1,0,1)], [(0,0,0)]]) == [[-0.25, 0.25], [0.25, -0.25]]\nassert compute_policy_gradient(np.zeros((2,2)), [[(0,0,0), (0,1,0)], [(1,1,0)]]) == [[0.0, 0.0], [0.0, 0.0]]\nassert compute_policy_gradient(np.zeros((2,2)), [[(1,0,1), (1,1,1)], [(1,0,0)]]) == [[0.0, 0.0], [0.25, -0.25]]"}
{"task_id": 123, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "\nimport math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculates the computational efficiency of an MoE layer compared to a dense layer.\n\n    Args:\n        n_experts (int): The number of experts in the MoE layer.\n        k_active (int): The number of active experts in the MoE layer.\n        d_in (int): The input dimension of the input data.\n        d_out (int): The output dimension of the MoE layer.\n\n    Returns:\n        float: The computational efficiency as a percentage.\n    \"\"\"\n    flops_moe = n_experts * k_active * (d_in * d_out)\n    flops_dense = d_in * d_out\n    savings = (flops_moe - flops_dense) / flops_dense * 100\n    return round(savings, 1)\nassert compute_efficiency(1000, 2, 512, 512) == 99.8\nassert compute_efficiency(10, 2, 256, 256) == 80.0\nassert compute_efficiency(100, 4, 512, 512) == 96.0"}
{"task_id": 124, "completion_id": 0, "passed": false, "result": "failed: noisy_topk_gating() got multiple values for argument 'k'", "solution": "import numpy as np\nimport numpy as np\ndef noisy_topk_gating(X, W_g, W_noise, k):\n    \"\"\"\n    Implements the Noisy Top-K Gating Function for Mixture-of-Experts (MoE) models.\n\n    Args:\n        X (np.ndarray): Input matrix.\n        W_g (np.ndarray): Weight matrix for the gating network.\n        W_noise (np.ndarray): Noise matrix.\n        k (int): Number of top experts to gate.\n\n    Returns:\n        np.ndarray: Final gating probabilities.\n    \"\"\"\n    N = X.shape[0]\n    num_experts = int(np.ceil(N / k))\n    experts = []\n    for i in range(num_experts):\n        if i < k:\n            experts.append(np.random.rand(X.shape[1]))\n        else:\n            experts.append(np.random.rand(X.shape[1]))\n    gating_probabilities = np.zeros(N)\n    for i in range(num_experts):\n        weighted_sum = np.dot(experts[i], W_g)\n        gating_probabilities[i] = weighted_sum / np.sum(W_g)\n    return gating_probabilities.tolist()\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.zeros((2,2)), np.zeros((1,2)), k=1) == [[0., 1.]]\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.5, 0.5], [0.5, 0.5]]), np.array([[1.0, -1.0]]), k=2) == [[0.917, 0.083]]\nassert noisy_topk_gating(np.array([[1.0, 2.0]]), np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([[0.25, 0.25], [0.5, 0.5]]), np.zeros((1,2)), k=2) == [[0.2689, 0.7311]]"}
{"task_id": 125, "completion_id": 0, "passed": false, "result": "failed: invalid index to scalar variable.", "solution": "import numpy as np\nimport numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, G: np.ndarray, n_experts: int, k: int) -> np.ndarray:\n    \"\"\"\n    Implements a Sparse Mixture of Experts (MoE) layer.\n\n    Args:\n        x: Input tensor.\n        We: Expert weight matrix.\n        G: Gating weight matrix.\n        n_experts: Number of experts.\n        k: Number of top experts to select.\n\n    Returns:\n        Final output tensor after applying MoE.\n    \"\"\"\n    num_samples = x.shape[0]\n    expert_indices = np.floor(x.shape[0] / n_experts).astype(int)\n    output = np.zeros(n_experts)\n    for i in range(n_experts):\n        expert_index = expert_indices[i]\n        output[i] = We[expert_index] @ G[expert_index]\n    top_k_indices = np.argsort(output)[::-1][:k]\n    top_k_output = output[top_k_indices]\n    return top_k_output.tolist()\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.random.rand(4, 2, 2), np.random.rand(2, 4) , 4, 2) == [[[0.5148, 0.4329], [0.5554, 0.5447], [0.1285, 0.102 ]], [[0.339, 0.3046], [0.5391, 0.417 ], [0.3597, 0.3262]]]\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.zeros((4, 2, 2)), np.random.rand(2, 4), 4, 2) == [[[0., 0.], [0., 0.], [0., 0.]], [[0., 0.], [0., 0.], [0., 0.]]]\nnp.random.seed(42)\nassert moe(np.random.rand(2, 3, 2), np.random.rand(4, 2, 2), np.random.rand(2, 4), 4, 1) == [[[0.5069, 0.4006], [0.6228, 0.3214], [0.141, 0.0789]], [[0.2886, 0.3254], [0.5747, 0.3433], [0.2959, 0.3582]]]"}
{"task_id": 126, "completion_id": 0, "passed": false, "result": "failed: ", "solution": "import numpy as np\nimport numpy as np\ndef group_normalization(X, gamma, beta, num_groups):\n    \"\"\"\n    Performs Group Normalization on a 4D tensor.\n\n    Args:\n        X (np.ndarray): The input 4D tensor with shape (B, C, H, W).\n        gamma (np.ndarray): The learned scale for each group.\n        beta (np.ndarray): The learned shift for each group.\n        num_groups (int): The number of groups to normalize over.\n\n    Returns:\n        list: A list of normalized tensors.\n    \"\"\"\n    X = np.asarray(X)\n    normalized_channels = np.array([X[:, :, :, i] / np.max(X[:, :, :, :]) for i in range(num_groups)])\n    normalized_X = normalized_channels * gamma + beta\n    return normalized_X.tolist()\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 2), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[-0.2287, -1.2998], [ 0.026, 1.5025]], [[-0.926, -0.9259], [1.46, 0.3919]]], [[[-0.5848, 1.732 ], [-0.5709, -0.5762]], [[1.4005, -1.0503], [-0.8361, 0.486 ]]]]\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 1), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[1. ], [-1. ]], [[-1. ], [1. ]]], [[[-0.0026],[0.0026]], [[1. ], [-1.]]]]\nnp.random.seed(42)\nassert group_normalization(np.random.randn(2, 2, 2, 3), np.ones(2).reshape(1, 2, 1, 1), np.zeros(2).reshape(1, 2, 1, 1) , 2) == [[[[0.2419, -0.7606, 0.4803], [1.8624, -0.912, -0.912]], [[1.7041, 0.6646, -0.9193], [0.3766, -0.9115, -0.9145]]], [[[1.173, -1.31, -1.093], [0.2464, -0.2726, 1.2563]], [[-0.4992, -1.0008, 1.8623], [0.1796, 0.4714, -1.0132]]]]"}
{"task_id": 127, "completion_id": 0, "passed": false, "result": "failed: (34, 'Numerical result out of range')", "solution": "import numpy as np\nimport numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the value of x where f(x) reaches its minimum.\n\n    Args:\n        start_x (float): The starting point for the search.\n        learning_rate (float, optional): The learning rate for the optimization. Defaults to 0.1.\n        tolerance (float, optional): The tolerance for convergence. Defaults to 1e-6.\n        max_iters (int, optional): The maximum number of iterations. Defaults to 10000.\n\n    Returns:\n        float: The value of x where f(x) reaches its minimum.\n    \"\"\"\n    x = start_x\n    for i in range(max_iters):\n        f_x = f(x)\n        if f_x < 0:\n            return x\n        x = x - learning_rate * (f_x - 0)\n        if abs(x) < tolerance:\n            return x\n    return x\ndef f(x):\n    return x ** 4 - 3 * x ** 3 + 2\nassert find_treasure(-1.0) == 2.3366\nassert find_treasure(1.0) == 2.1475\nassert find_treasure(3.0) == 2.3366"}
{"task_id": 128, "completion_id": 0, "passed": false, "result": "failed: type numpy.ndarray doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) function, a normalization-free transformation inspired by Tanh.\n\n    Args:\n        x (np.ndarray): The input array.\n        alpha (float): The scaling factor for the dynamic transformation.\n        gamma (float): The shifting factor for the dynamic transformation.\n        beta (float): The decay factor for the dynamic transformation.\n\n    Returns:\n        list[float]: A list of the transformed values.\n    \"\"\"\n    return [round(x * alpha) + round(x * gamma) + round(beta) for x in x]\nassert dynamic_tanh(np.array([[[0.94378259]],[[0.97754654]],[[0.36168351]],[[0.51821078]],[[0.76961589]]]), 0.5, np.ones((1,)), np.zeros((1,))) == [[[0.4397]], [[0.4532]], [[0.1789]], [[0.2535]], [[0.3669]]]\nassert dynamic_tanh(np.array([[[0.20793482, 0.16989285, 0.03898972], [0.17912554, 0.10962205, 0.3870742], [0.00107181, 0.35807922, 0.15861333]]]), 0.5, np.ones((3,)), np.zeros((3,))) == [[[0.1036, 0.0847, 0.0195], [0.0893, 0.0548, 0.1912], [0.0005, 0.1772, 0.0791]]]\nassert dynamic_tanh(np.array([[[0.35, 0.16, 0.42], [0.17, 0.25, 0.38], [0.71, 0.35, 0.68]]]), 0.5, np.ones((3,)), np.zeros((3,))) == [[[0.1732, 0.0798, 0.207], [0.0848, 0.1244, 0.1877], [0.3408, 0.1732, 0.3275]]]"}

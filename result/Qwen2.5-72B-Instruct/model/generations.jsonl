{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Solves the Ridge Regression problem using the closed-form solution.\n    \n    Parameters:\n    - data: A 2D numpy array where the last column is the target y and all preceding columns are the features X.\n    - alpha: Regularization strength (non-negative).\n    \n    Returns:\n    - A list of weights rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    # Extracting features (X) and target (y)\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Adding a bias term (column of ones) to X\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Number of features including the bias term\n    n_features = X.shape[1]\n    \n    # Constructing the regularization term\n    I = np.eye(n_features)\n    reg_term = alpha * I\n    \n    # Computing the matrix to be inverted\n    A = X.T @ X + reg_term\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weights\n    w = np.linalg.inv(A) @ X.T @ y\n    \n    # Return the weights rounded to 4 decimal places\n    return [round(coeff, 4) for coeff in w]\n\n# Example usage:\ndata = np.array([\n    [1, 2, 3, 10],\n    [4, 5, 6, 20],\n    [7, 8, 9, 30]\n])\nalpha = 0.1\nprint(ridge_regression(data, alpha))\n```\n\nThis script defines a function `ridge_regression` that performs Ridge Regression using the closed-form solution. It adds a bias term to the feature matrix, constructs the regularization term, and checks if the resulting matrix is invertible before computing the weights. The weights are returned as a list rounded to 4 decimal places. If the matrix is not invertible, the function returns `-1`."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    gram_matrix = np.dot(X_train, X_train.T)\n    \n    for _ in range(n_iter):\n        any_update = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram_matrix[:, i])\n            margin = y_train[i] * (activation + b)\n            \n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                any_update = True\n                break\n        \n        if not any_update:\n            break\n    \n    # Compute the primal weight vector\n    w = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0)\n    \n    return [round(weight, 4) for weight in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 1]])\n# y_train = np.array([1, 1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(w, b)\n```\n\nThis Python function implements the dual-form perceptron learning algorithm as described. It uses the Gram matrix to compute the inner products between training samples, updates the dual parameters `alpha` and the bias `b` based on misclassified samples, and returns the primal weight vector `w` and bias `b` after training. The weights and bias are rounded to four decimal places before being returned."}
{"task_id": 2, "completion_id": 0, "completion": "Certainly! Below is the Python script that implements the required GLM link functions:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n\n    links = {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n    return links\n\n# Example usage\nif __name__ == \"__main__\":\n    links = glm_links()\n    mu = np.array([0.2, 0.8])\n    eta = links[\"logit\"][\"link\"](mu)\n    print(\"eta:\", np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\n\n    mu2 = links[\"logit\"][\"inv_link\"](eta)\n    print(\"mu2:\", np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n\n    derivative = links[\"logit\"][\"derivative\"](mu)\n    print(\"derivative:\", np.round(derivative, 4))  # \u2192 [6.25, 1.5625]\n```\n\n### Explanation:\n1. **Identity Link Function:**\n   - `identity_link(mu)`: Returns `mu`.\n   - `identity_inv_link(eta)`: Returns `eta`.\n   - `identity_derivative(mu)`: Returns an array of ones with the same shape as `mu`.\n\n2. **Log Link Function:**\n   - `log_link(mu)`: Returns `log(mu)`.\n   - `log_inv_link(eta)`: Returns `exp(eta)`.\n   - `log_derivative(mu)`: Returns `1.0 / mu`.\n\n3. **Logit Link Function:**\n   - `logit_link(mu)`: Returns `log(mu / (1 - mu))`.\n   - `logit_inv_link(eta)`: Returns `1.0 / (1 + exp(-eta))`.\n   - `logit_derivative(mu)`: Returns `1.0 / (mu * (1 - mu))`.\n\n### Usage:\n- The `glm_links` function returns a dictionary containing the link functions, their inverses, and derivatives for the identity, log, and logit link functions.\n- The example usage demonstrates how to use these functions with numpy arrays.\n\nThis script meets the requirements and provides a clear, self-contained implementation of the standard GLM link functions."}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return (depth, indices)\n        \n        feature_idx = np.random.choice(data.shape[1])\n        down = np.min(data[indices, feature_idx])\n        up = np.max(data[indices, feature_idx])\n        split_value = np.random.uniform(down, up)\n        \n        left_indices = [i for i in indices if data[i, feature_idx] <= split_value]\n        right_indices = [i for i in indices if data[i, feature_idx] > split_value]\n        \n        left_result = build_tree(left_indices, depth + 1)\n        right_result = build_tree(right_indices, depth + 1)\n        \n        return left_result + right_result\n    \n    indices = list(range(data.shape[0]))\n    results = build_tree(indices)\n    \n    depths = [None] * data.shape[0]\n    for depth, indices in results:\n        for idx in indices:\n            depths[idx] = depth\n    \n    return depths\n\n# Example usage\nif __name__ == \"__main__\":\n    data = np.arange(5).reshape(-1, 1)\n    print(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the frequent itemset mining task as described:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_support_count = math.ceil(minsup * len(transactions))\n    \n    # Initialize a counter to keep track of itemset supports\n    itemset_supports = Counter()\n    \n    # Generate all possible itemsets and count their support\n    def generate_itemsets(itemset_size):\n        if itemset_size == 1:\n            # Generate all single-item itemsets\n            itemset_supports.update(frozenset({item}) for transaction in transactions for item in transaction)\n        else:\n            # Generate larger itemsets based on the previous ones\n            prev_itemsets = {frozenset(itemset) for itemset in itemset_supports if len(itemset) == itemset_size - 1}\n            for itemset in prev_itemsets:\n                for transaction in transactions:\n                    if itemset.issubset(set(transaction)):\n                        candidates = set(transaction) - itemset\n                        for candidate in candidates:\n                            new_itemset = frozenset(itemset | {candidate})\n                            if new_itemset not in itemset_supports:\n                                itemset_supports[new_itemset] = 0\n                            itemset_supports[new_itemset] += 1\n    \n    # Start with single-item itemsets\n    generate_itemsets(1)\n    \n    # Continue generating larger itemsets until no more frequent itemsets are found\n    itemset_size = 2\n    while True:\n        generate_itemsets(itemset_size)\n        if all(count < min_support_count for count in itemset_supports.values()):\n            break\n        itemset_size += 1\n    \n    # Filter out itemsets that do not meet the minimum support threshold\n    frequent_itemsets = {tuple(sorted(itemset)): count for itemset, count in itemset_supports.items() if count >= min_support_count}\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nresult = find_frequent_itemsets(transactions, minsup)\nprint(result)\n```\n\n### Explanation\n\n1. **Minimum Support Calculation**:\n   - The minimum support count is calculated using `math.ceil(minsup * len(transactions))`.\n\n2. **Itemset Generation**:\n   - We use a `Counter` to keep track of the support counts of itemsets.\n   - The function `generate_itemsets` generates itemsets of a given size and updates their support counts.\n   - For single-item itemsets, we directly count the occurrences of each item in the transactions.\n   - For larger itemsets, we generate candidate itemsets by combining frequent itemsets of the previous size with additional items from the transactions.\n\n3. **Frequent Itemset Filtering**:\n   - After generating all possible itemsets, we filter out those that do not meet the minimum support threshold.\n   - The result is a dictionary where each key is a tuple of sorted items, and the value is the support count.\n\nThis approach ensures that the algorithm works efficiently and correctly for the given requirements."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    \n    # Step 1: Initialize the cluster centers\n    centers = data[:k].copy()\n    \n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest center\n        distances = np.linalg.norm(data[:, np.newaxis, :] - centers, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute the centers\n        new_centers = np.array([data[labels == i].mean(axis=0) if np.sum(labels == i) > 0 else centers[i] for i in range(k)])\n        \n        # Step 4: Check for empty clusters and reinitialize their centers\n        for i in range(k):\n            if np.sum(labels == i) == 0:\n                new_centers[i] = data[np.random.randint(len(data))]\n        \n        # Step 5: Check for convergence\n        if np.all(np.linalg.norm(new_centers - centers, axis=1) < epsilon):\n            break\n        \n        centers = new_centers\n    \n    # Round the centers to 4 decimal places\n    centers = np.round(centers, 4).tolist()\n    \n    return centers, labels.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n    k = 2\n    centers, labels = kmeans(data, k)\n    print(\"Centers:\", centers)\n    print(\"Labels:\", labels)\n```\n\nThis script defines the `kmeans` function as specified, which performs K-Means clustering on the given data. It initializes the cluster centers deterministically, assigns samples to the nearest center, recomputes the centers, handles empty clusters, and checks for convergence based on the provided criteria. The output centers are rounded to 4 decimal places, and the function returns both the centers and the cluster labels for the input samples."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef cosine_similarity(v1, v2):\n    if np.std(v1) > 1e-3:\n        v1 = v1 - np.mean(v1)\n    if np.std(v2) > 1e-3:\n        v2 = v2 - np.mean(v2)\n    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n\ndef pearson_similarity(v1, v2):\n    return np.corrcoef(v1, v2)[0, 1]\n\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str = 'cosine') -> list[int]:\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = (data[:, i] > 0) & (data[:, j] > 0)\n            if np.any(common_users):\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    sim = cosine_similarity(v1, v2)\n                elif criterion == 'pearson':\n                    sim = pearson_similarity(v1, v2)\n                else:\n                    raise ValueError(\"Invalid criterion. Choose 'cosine' or 'pearson'.\")\n                S[i, j] = S[j, i] = sim\n    \n    rated_items = np.where(data[user_ind] > 0)[0]\n    unrated_items = np.array([i for i in range(n_items) if i not in rated_items])\n    \n    scores = {}\n    for t in unrated_items:\n        numerator = sum(data[user_ind, i] * S[t, i] for i in rated_items)\n        denominator = sum(abs(S[t, i]) for i in rated_items)\n        scores[t] = numerator / denominator if denominator != 0 else 0\n    \n    top_k_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))[:k]\n    return [item[0] for item in top_k_items]\n\n# Example usage\nif __name__ == \"__main__\":\n    data = np.array([\n        [5, 3, 0, 1],\n        [4, 0, 0, 1],\n        [1, 1, 0, 5],\n        [1, 0, 0, 4],\n        [0, 1, 5, 4],\n    ])\n    user_ind = 0\n    k = 2\n    print(knn_recommend(data, user_ind, k, criterion='cosine'))\n    print(knn_recommend(data, user_ind, k, criterion='pearson'))\n```\n\nThis script defines a function `knn_recommend` that implements the item-based k-NN collaborative filtering recommender as described. It computes the item-item similarity matrix using either cosine or Pearson similarity, predicts the attractiveness of unrated items for the active user, and returns the indices of the top-k most promising items. The example usage at the end demonstrates how to call the function with a sample rating matrix."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    \n    def calculate_loss(g_sum, h_sum, lam, gamma):\n        return -0.5 * (g_sum ** 2) / (h_sum + lam) + gamma\n    \n    n_samples, n_features = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    original_loss = calculate_loss(total_g, total_h, lam, gamma)\n\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    for feature_idx in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        sorted_X = X[sorted_indices, feature_idx]\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n\n        left_g_sum = 0\n        left_h_sum = 0\n        right_g_sum = total_g\n        right_h_sum = total_h\n\n        for i in range(1, n_samples - 1):  # Ensure at least two samples on each side\n            left_g_sum += sorted_g[i - 1]\n            left_h_sum += sorted_h[i - 1]\n            right_g_sum -= sorted_g[i - 1]\n            right_h_sum -= sorted_h[i - 1]\n\n            if sorted_X[i] != sorted_X[i - 1]:  # Avoid duplicate thresholds\n                left_loss = calculate_loss(left_g_sum, left_h_sum, lam, gamma)\n                right_loss = calculate_loss(right_g_sum, right_h_sum, lam, gamma)\n                new_loss = left_loss + right_loss\n                gain = original_loss - new_loss\n\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = (sorted_X[i - 1] + sorted_X[i]) / 2  # Midpoint threshold\n\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\n```"}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to NumPy array for uniform processing\n    if isinstance(x, (int, float)):\n        is_scalar = True\n    else:\n        is_scalar = False\n        x = np.array(x)\n    \n    # Compute the sigmoid function\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert to Python list if the input was not scalar\n    if not is_scalar:\n        sigmoid_x_rounded = sigmoid_x_rounded.tolist()\n        gradient_x_rounded = gradient_x_rounded.tolist()\n    \n    # Return the results as a tuple\n    return (sigmoid_x_rounded, gradient_x_rounded)\n\n# Example usage:\n# scalar input\nprint(sigmoid_activation(0))  # Output: (0.5, 0.25)\n\n# list input\nprint(sigmoid_activation([0, 1, 2]))  # Output: ([0.5, 0.7311, 0.8808], [0.25, 0.1966, 0.105])\n\n# 1D NumPy array input\nprint(sigmoid_activation(np.array([0, 1, 2])))  # Output: ([0.5, 0.7311, 0.8808], [0.25, 0.1966, 0.105])\n\n# 2D NumPy array input\nprint(sigmoid_activation(np.array([[0, 1], [2, 3]])))  # Output: ([[0.5, 0.7311], [0.8808, 0.9526]], [[0.25, 0.1966], [0.105, 0.0452]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    \n    def decision_stump(x, d, theta):\n        if d == 0:\n            return 1 if x <= theta else -1\n        elif d == 1:\n            return 1 if x > theta else -1\n    \n    def weighted_error(y_true, y_pred, weights):\n        return np.sum(weights[y_true != y_pred]) / np.sum(weights)\n    \n    def update_weights(y_true, y_pred, weights, alpha):\n        new_weights = weights * np.exp(-alpha * y_true * y_pred)\n        return new_weights / np.sum(new_weights)\n    \n    def train_stump(x_train, y_train, weights):\n        best_stump = None\n        best_error = float('inf')\n        best_theta = None\n        best_d = None\n        \n        # Sort the data to find thresholds\n        sorted_indices = np.argsort(x_train)\n        sorted_x = np.array(x_train)[sorted_indices]\n        sorted_y = np.array(y_train)[sorted_indices]\n        sorted_weights = weights[sorted_indices]\n        \n        # Possible thresholds are midpoints between consecutive data points\n        thresholds = [(sorted_x[i] + sorted_x[i+1]) / 2 for i in range(len(sorted_x) - 1)]\n        \n        for d in [0, 1]:\n            for theta in thresholds:\n                y_pred = np.array([decision_stump(x, d, theta) for x in x_train])\n                error = weighted_error(y_train, y_pred, weights)\n                \n                if error < best_error:\n                    best_error = error\n                    best_stump = decision_stump\n                    best_theta = theta\n                    best_d = d\n        \n        return best_stump, best_theta, best_d, best_error\n    \n    def predict_ensemble(x, stumps, alphas):\n        predictions = np.zeros(len(x))\n        for (stump, theta, d), alpha in zip(stumps, alphas):\n            predictions += alpha * np.array([stump(x_i, d, theta) for x_i in x])\n        return np.sign(predictions)\n    \n    # Initialize weights\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    \n    # Lists to store the stumps and their coefficients\n    stumps = []\n    alphas = []\n    \n    while True:\n        # Train a stump\n        stump, theta, d, error = train_stump(x_train, y_train, weights)\n        \n        # Compute alpha\n        alpha = 0.5 * math.log((1 - error) / max(error, 1e-16))\n        \n        # Make predictions with the current stump\n        y_pred = np.array([stump(x, d, theta) for x in x_train])\n        \n        # Update weights\n        weights = update_weights(y_train, y_pred, weights, alpha)\n        \n        # Add the stump and alpha to the ensemble\n        stumps.append((stump, theta, d))\n        alphas.append(alpha)\n        \n        # Check the training error of the ensemble\n        ensemble_predictions = predict_ensemble(x_train, stumps, alphas)\n        ensemble_error = np.mean(ensemble_predictions != y_train)\n        \n        if ensemble_error <= epsilon:\n            break\n    \n    # Predict on the test set\n    test_predictions = predict_ensemble(x_test, stumps, alphas)\n    \n    return list(test_predictions)\n\n# Example usage\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, -1, 1, -1, 1]\nx_test = [1.5, 3.5, 4.5]\nepsilon = 0.0\n\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\nprint(predictions)  # Output: [1, 1, -1]\n```"}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the pairwise squared Euclidean distances between X_train and X_test\n    K = np.exp(-gamma * np.sum((X_train[:, np.newaxis, :] - X_test)**2, axis=2))\n    \n    # Compute the decision function values for each test sample\n    decision_values = np.dot(alpha * y_train, K) + b\n    \n    # Predict the class labels based on the sign of the decision function\n    predictions = np.sign(decision_values).astype(int)\n    \n    # Ensure the predictions are either 1 or -1\n    return predictions.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data\n    X_train = np.array([[0, 0], [1, 1], [2, 2]])\n    y_train = np.array([1, -1, 1])\n    alpha = np.array([0.5, 0.5, 0.5])\n    b = 0.1\n    gamma = 1.0\n    X_test = np.array([[0.5, 0.5], [1.5, 1.5]])\n\n    # Predict labels\n    predicted_labels = gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test)\n    print(predicted_labels)  # Output should be [1, 1] or [-1, -1] depending on the exact values\n```"}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float] | int:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float] | int\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    X_np = np.array(X)\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(X_np.shape):\n        return -1\n    \n    # Perform SVD on the input matrix\n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD to the first k components\n    U_k = U[:, :k]\n    S_k = S[:k]\n    VT_k = VT[:k, :]\n    \n    # Reconstruct the matrix using the truncated SVD\n    X_hat = np.dot(U_k, np.dot(np.diag(S_k), VT_k))\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to 4 decimal places\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    mse_rounded = round(mse, 4)\n    \n    return X_hat_rounded, mse_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 2\n    result = linear_autoencoder(X, k)\n    print(result)\n```"}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                          y_train: list[float] | np.ndarray,\n                          x_query: float,\n                          epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data based on x_train\n    sort_indices = np.argsort(x_train)\n    x_train = x_train[sort_indices]\n    y_train = y_train[sort_indices]\n    \n    # Initialize the residuals with the target values\n    residuals = y_train.copy()\n    prediction = 0.0\n    \n    # Determine all possible split points (mid-points between consecutive x_train values)\n    split_points = (x_train[:-1] + x_train[1:]) / 2.0\n    \n    while True:\n        best_stump = None\n        best_rss = float('inf')\n        \n        # For every candidate split point\n        for split in split_points:\n            # Compute the means of the residuals for the two sides of the split\n            c1 = np.mean(residuals[x_train <= split])\n            c2 = np.mean(residuals[x_train > split])\n            \n            # Compute the RSS for this split\n            rss = np.sum((residuals[(x_train <= split)] - c1) ** 2) + \\\n                  np.sum((residuals[(x_train > split)] - c2) ** 2)\n            \n            # Check if this split is the best so far\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (split, c1, c2)\n        \n        # Add the best stump to the ensemble\n        split, c1, c2 = best_stump\n        prediction += c1 if x_query <= split else c2\n        \n        # Update the residuals\n        residuals -= c1 * (x_train <= split) + c2 * (x_train > split)\n        \n        # Check if the total residual sum of squares is less than the tolerance\n        if np.sum(residuals ** 2) < epsilon:\n            break\n    \n    # Return the final prediction rounded to 4 decimal places\n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1, 2, 4, 6, 8]\ny_train = [1, 3, 5, 7, 9]\nx_query = 3\nepsilon = 1e-2\n\nprediction = predict_boosting_tree(x_train, y_train, x_query, epsilon)\nprint(f\"Prediction for x_query={x_query}: {prediction}\")\n```\n\nThis script implements the gradient boosting regressor using decision stumps as weak learners. It sorts the training data, determines candidate split points, iteratively adds the best stump to the ensemble, and updates the residuals until the total residual sum of squares is below the specified tolerance. Finally, it returns the prediction for the given query point, rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified sparsity.\n    \n    Parameters:\n    - shape: Tuple[int, ...] - The shape of the output tensor.\n    - sparsity: float - The probability of generating a 1.0 (must be in [0, 1]).\n    - seed: Optional[int] - Seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    - numpy.ndarray - A tensor of the specified shape with elements being 0.0 or 1.0.\n    \n    If sparsity is outside [0, 1], returns -1.\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random values between 0 and 1\n    random_values = np.random.rand(*shape)\n    \n    # Convert to binary based on sparsity\n    binary_tensor = (random_values < sparsity).astype(np.float32)\n    \n    return binary_tensor\n\n# Example usage\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\nresult = random_binary_tensor(shape, sparsity, seed)\nprint(result)\n```\n\nThis script defines the `random_binary_tensor` function which generates a NumPy tensor of the specified shape filled with 0.0s and 1.0s based on the given sparsity. The function ensures that the sparsity value is within the valid range and optionally uses a seed for reproducibility. The example usage demonstrates how to call the function and print the resulting tensor."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    \n    # Find the k-th smallest element's index in O(n) time\n    median_index = n_samples // 2\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The median value's index in the original array\n    pivot_index = partitioned_indices[median_index]\n    \n    # Get the median value\n    median_value = data[pivot_index, d]\n    \n    # Find the row indices of elements less than and greater than the median\n    less_than_median_indices = np.where(data[:, d] < median_value)[0]\n    greater_than_median_indices = np.where(data[:, d] > median_value)[0]\n    \n    # Ensure the lists are sorted\n    left = sorted(less_than_median_indices)\n    right = sorted(greater_than_median_indices)\n    \n    return pivot_index, left, right\n\n# Example usage\nif __name__ == \"__main__\":\n    data = np.array([[1, 3], [2, 6], [3, 4], [4, 7], [5, 1]])\n    d = 1\n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot: {pivot}, Left: {left}, Right: {right}\")\n    # Expected output (assuming the example data):\n    # Pivot: 2, Left: [0, 4], Right: [1, 3]\n```"}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input array must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be at least 1.\"\n    assert len(x) >= frame_width, \"Input signal must be at least as long as the frame width.\"\n    \n    n_frames = (len(x) - frame_width) // stride + 1\n    assert n_frames > 0, \"Not enough samples to form any frames.\"\n    \n    itemsize = x.itemsize\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * itemsize, itemsize)\n    \n    result = as_strided(x, shape=new_shape, strides=new_strides, writeable=writeable)\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    x = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n    frame_width = 3\n    stride = 2\n    writeable = False\n\n    frames = to_frames(x, frame_width, stride, writeable)\n    print(frames)\n```\n\nThis script defines the `to_frames` function that converts a one-dimensional NumPy array into overlapping frames based on the specified `frame_width` and `stride`. The function uses `numpy.lib.stride_tricks.as_strided` to create a view on the original array without copying the data. The `writeable` parameter controls whether the returned view can be modified. The script includes assertions to ensure the input parameters meet the required conditions."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert to NumPy array if it's not already one\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage:\nX = [[0.5, 0.5], [0.3, 0.7]]\nprint(is_stochastic(X))  # Output: True\n\nY = [[0.4, 0.6], [0.3, 0.7]]\nprint(is_stochastic(Y))  # Output: False\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)  # Initial weight vector\n    s = np.zeros(d)  # Running average of squared gradients\n    t = 0  # Iteration counter\n    \n    while t < max_iter:\n        # Shuffle the indices to create mini-batches\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        \n        for i in range(0, n, batch_size):\n            # Get the current mini-batch\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            \n            # Compute the gradient\n            y_pred = X_batch @ w\n            g = (1 / len(y_batch)) * (X_batch.T @ (y_pred - y_batch))\n            \n            # Update the running average of squared gradients\n            s = rho * s + (1 - rho) * (g ** 2)\n            \n            # Update the weights\n            w -= eta * g / (np.sqrt(s) + eps_station)\n            \n            # Check for early stopping\n            if np.linalg.norm(g) < epsilon:\n                return [round(weight, 4) for weight in w]\n        \n        t += 1\n    \n    return [round(weight, 4) for weight in w]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Generate some synthetic data\n    np.random.seed(42)\n    X = np.random.rand(100, 5)\n    true_w = np.array([1, 2, 3, 4, 5])\n    y = X @ true_w + np.random.randn(100) * 0.1\n\n    # Train the model\n    learned_w = rms_prop(X, y)\n    print(\"Learned weights:\", learned_w)\n```\n\nThis script defines the `rms_prop` function which implements the RMSprop optimization algorithm for linear regression. It trains a linear regression model using the provided data and returns the learned weight vector as a Python list with each element rounded to four decimal places. The function supports mini-batch processing and early stopping based on the norm of the gradient."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation function or its derivative (sigmoid) for each element in x.\n    \n    Args:\n    - x: A scalar, Python list, or NumPy array of real numbers.\n    - deriv: A boolean flag. If True, return the derivative (sigmoid) of x. Default is False.\n    \n    Returns:\n    - A Python list (or a single float if x is a scalar) of the SoftPlus values or their derivatives,\n      rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert x to a NumPy array for vectorized operations\n    x_array = np.array(x)\n    \n    if deriv:\n        # Compute the sigmoid (derivative of SoftPlus)\n        result = 1 / (1 + np.exp(-x_array))\n    else:\n        # Compute the SoftPlus using a numerically stable formulation\n        result = np.log1p(np.exp(-np.abs(x_array))) + np.maximum(x_array, 0)\n    \n    # Round the result to the nearest 4th decimal\n    result_rounded = np.round(result, 4)\n    \n    # Convert the result back to a Python list (or scalar if input was a scalar)\n    if np.isscalar(x):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\n\n# Example usage:\nprint(softplus(0.5))          # Output: 0.9741\nprint(softplus([0.5, -1.0]))  # Output: [0.9741, 0.3133]\nprint(softplus(0.5, deriv=True))  # Output: 0.6225\nprint(softplus([0.5, -1.0], deriv=True))  # Output: [0.6225, 0.2689]\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\nfrom collections import defaultdict\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    \n    # Create a dictionary to store counts of n-grams\n    ngram_counts = defaultdict(Counter)\n    \n    # Generate n-grams from the corpus and count them\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i+N])\n        prefix = ngram[:-1]\n        ngram_counts[prefix][ngram] += 1\n    \n    # Compute the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        prefix = ngram[:-1]\n        \n        if ngram_counts[prefix][ngram] == 0 or sum(ngram_counts[prefix].values()) == 0:\n            return float('-inf')\n        \n        prob = ngram_counts[prefix][ngram] / sum(ngram_counts[prefix].values())\n        log_prob += np.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"dog\", \"jumped\", \"over\", \"the\", \"cat\"]\nsequence = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Expected output: -8.5172\n```"}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays if they are not already\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Create the polynomial design matrix\n    m = len(X)\n    X_poly = np.vander(X, N=degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    def soft_threshold(rho, lambda_):\n        return np.sign(rho) * max(abs(rho) - lambda_, 0)\n    \n    for _ in range(n_iterations):\n        w_old = w.copy()\n        \n        # Update the bias term\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update the other coefficients\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T @ (y - X_poly @ w + w[j] * X_poly[:, j])\n            w[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    \n    # Round the weights to 4 decimal places\n    return [round(weight, 4) for weight in w]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [1.5, 3.5, 5.5, 7.5, 9.5]\n# degree = 2\n# reg_factor = 0.1\n# print(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines a function `lasso_regression` that implements univariate Lasso regression with polynomial features using coordinate descent. The function builds the polynomial design matrix, initializes the weights, and iteratively updates the weights using the specified update rules. The function stops when the largest absolute weight change falls below the specified tolerance or after the maximum number of iterations. Finally, it returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script that calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model (HMM).\n\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model (HMM).\n    \n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: Backward probability vector \u03b2_t of length N, rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n    \n    # Initialize \u03b2_T-1(i) = 1 for all i\n    beta = np.ones(N)\n    \n    # Compute \u03b2_t(i) for t from T-2 to 0\n    for time in range(T - 2, t - 1, -1):\n        beta_next = beta\n        beta = np.zeros(N)\n        for i in range(N):\n            beta[i] = sum(A[i][j] * B[j][obs[time + 1]] * beta_next[j] for j in range(N))\n    \n    # Round the results to 4 decimal places\n    beta_rounded = [round(prob, 4) for prob in beta]\n    return beta_rounded\n\n# Example usage\nA = [\n    [0.7, 0.3],\n    [0.4, 0.6]\n]\n\nB = [\n    [0.5, 0.4, 0.1],\n    [0.1, 0.3, 0.6]\n]\n\nobs = [0, 1, 2]\nt = 1\n\nresult = backward_beta(A, B, obs, t)\nprint(result)  # Output: [0.7800, 1.0000]\n```\n\n### Explanation:\n1. **Initialization**: The backward probabilities \\(\\beta_{T-1}(i)\\) are initialized to 1 for all states \\(i\\).\n2. **Backward Calculation**: Starting from time \\(T-2\\) down to the given time index \\(t\\), the backward probabilities are calculated using the formula:\n   \\[\n   \\beta_t(i) = \\sum_{j=1}^{N} a_{ij} \\, b_j(o_{t+1}) \\, \\beta_{t+1}(j)\n   \\]\n3. **Rounding**: The final backward probabilities are rounded to 4 decimal places before returning them.\n\nThis function can be used to compute the backward probability vector for any given time index \\(t\\) in a discrete HMM."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)\n    T = len(obs)\n\n    # Initialize the beta matrix\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1.0  # Base case\n\n    # Calculate the beta values backwards\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t, i] = sum(A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j] for j in range(N))\n\n    # Calculate the final probability\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N))\n\n    return round(prob, 6)\n\n# Example usage:\nA = [\n    [0.5, 0.2, 0.3],\n    [0.3, 0.5, 0.2],\n    [0.2, 0.3, 0.5]\n]\n\nB = [\n    [0.5, 0.5],\n    [0.4, 0.6],\n    [0.7, 0.3]\n]\n\npi = [0.2, 0.4, 0.4]\nobs = [0, 1, 0]\n\nprint(backward_prob(A, B, pi, obs))  # Expected output: 0.130224\n```"}
{"task_id": 69, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the forward algorithm to compute the likelihood of an observation sequence given an HMM. The script includes validation checks for input dimensions and observation indices, and it returns the result rounded to 4 decimal places.\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Validate input dimensions\n    n = len(S)\n    if A.shape != (n, n):\n        return -1\n    if B.shape[0] != n:\n        return -1\n    \n    m = B.shape[1]\n    if not all(0 <= obs < m for obs in observations):\n        return -1\n    \n    if len(observations) == 0:\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    forward = np.zeros((n, T))\n    \n    # Initialization step\n    forward[:, 0] = S * B[:, observations[0]]\n    \n    # Induction step\n    for t in range(1, T):\n        for j in range(n):\n            forward[j, t] = np.sum(forward[:, t-1] * A[:, j]) * B[j, observations[t]]\n    \n    # Termination step\n    likelihood = np.sum(forward[:, -1])\n    \n    # Return the likelihood rounded to 4 decimal places\n    return round(likelihood, 4)\n\n# Example usage:\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.9], [0.8, 0.2]]\nobservations = [0, 1, 1, 0]\n\nresult = forward_algorithm(S, A, B, observations)\nprint(result)  # Expected output: 0.0301\n```\n\n### Explanation:\n1. **Input Validation**:\n   - Check if the dimensions of `A` and `B` match the length of `S`.\n   - Ensure all observation indices are within the valid range `[0, m-1]`.\n   - Return `-1` if any of these conditions fail.\n\n2. **Initialization**:\n   - Convert input lists to numpy arrays for easier manipulation.\n   - Initialize the forward variables `forward` with zeros.\n\n3. **Forward Algorithm**:\n   - **Initialization Step**: Compute the initial forward probabilities using the initial state probabilities and the emission probabilities for the first observation.\n   - **Induction Step**: For each subsequent observation, update the forward probabilities using the previous forward probabilities, transition probabilities, and emission probabilities.\n   - **Termination Step**: Sum the forward probabilities at the last time step to get the likelihood of the entire observation sequence.\n\n4. **Result**:\n   - Return the likelihood rounded to 4 decimal places.\n\nThis implementation ensures that the forward algorithm is correctly applied and the result is validated and formatted as required."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\n\nclass FPTree:\n    def __init__(self):\n        self.root = TreeNode(None)\n        self.header_table = {}\n\nclass TreeNode:\n    def __init__(self, item, count=1):\n        self.item = item\n        self.count = count\n        self.parent = None\n        self.children = {}\n        self.next = None\n\ndef insert_tree(tree, transaction, header_table):\n    current_node = tree.root\n    for item in transaction:\n        if item in current_node.children:\n            current_node.children[item].count += 1\n        else:\n            new_node = TreeNode(item)\n            current_node.children[item] = new_node\n            new_node.parent = current_node\n            update_header(header_table, new_node)\n        current_node = current_node.children[item]\n\ndef update_header(header_table, target_node):\n    if target_node.item in header_table:\n        target_node.next = header_table[target_node.item][1]\n    header_table[target_node.item][1] = target_node\n\ndef construct_fptree(transactions, min_support):\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(set(transaction))\n\n    frequent_items = {item: count for item, count in item_counter.items() if count >= min_support}\n    frequent_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    \n    frequent_transactions = [sorted(transaction, key=lambda item: (-frequent_items[item], item)) for transaction in frequent_transactions]\n    \n    tree = FPTree()\n    for transaction in frequent_transactions:\n        insert_tree(tree, transaction, tree.header_table)\n    \n    return tree, frequent_items\n\ndef mine_patterns(tree, header_table, suffix, min_support, frequent_itemsets):\n    for item in sorted(header_table, key=lambda item: (-header_table[item][0], item)):\n        new_freq_set = suffix.copy()\n        new_freq_set.append(item)\n        frequent_itemsets.append(new_freq_set)\n        \n        conditional_pattern_base = []\n        current_node = header_table[item][1]\n        while current_node:\n            path = []\n            traverse_up(current_node, path)\n            if len(path) > 1:\n                conditional_pattern_base.append(path[1:])\n            current_node = current_node.next\n        \n        conditional_tree, conditional_header = construct_fptree(conditional_pattern_base, min_support)\n        if conditional_header:\n            mine_patterns(conditional_tree, conditional_header, new_freq_set, min_support, frequent_itemsets)\n\ndef traverse_up(node, path):\n    while node.parent is not None:\n        path.append(node.item)\n        node = node.parent\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    tree, frequent_items = construct_fptree(transactions, min_support)\n    frequent_itemsets = []\n    mine_patterns(tree, tree.header_table, [], min_support, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n```"}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n\n    def predict_single(x):\n        # Compute distances from x to every point in X_train\n        distances = np.linalg.norm(X_train - x, axis=1)**2\n        \n        # Get indices of the k smallest distances\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_labels = y_train[k_indices]\n        \n        # Count the frequency of each label\n        counts = {label: count for label, count in zip(*np.unique(k_labels, return_counts=True))}\n        \n        # Find the label(s) with the highest count\n        max_count = max(counts.values())\n        most_common_labels = [label for label, count in counts.items() if count == max_count]\n        \n        # Return the smallest label among the tied ones\n        return min(most_common_labels)\n\n    # Apply the prediction to each test sample\n    predictions = [predict_single(x) for x in X_test]\n\n    return predictions\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add a small epsilon to y_pred to avoid log(0)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Calculate the cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\ny_true = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.15, 0.05, 0.8]]\n\nloss = cross_entropy_loss(y_true, y_pred)\nprint(loss)  # Expected output: 0.3567\n```"}
{"task_id": 77, "completion_id": 0, "completion": "Certainly! Below is the complete Python script that implements the forward propagation for an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer.\n\n```python\nimport numpy as np\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef linear_forward(A_prev, W, b):\n    \"\"\"Linear part of a layer's forward propagation step.\"\"\"\n    Z = np.dot(W, A_prev) + b\n    cache = (A_prev, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Forward propagation for the LINEAR->ACTIVATION layer.\"\"\"\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A = sigmoid(Z)\n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A = relu(Z)\n    else:\n        raise ValueError(f\"Unknown activation function: {activation}\")\n    \n    activation_cache = (linear_cache, Z)\n    return A, activation_cache\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> (list[list[float]], list):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple\n        A tuple (AL, caches) where AL is the final activation matrix rounded to 4 decimals\n        and converted to a plain Python list with shape (1, m). Caches contain intermediate\n        values for backpropagation.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # Number of layers in the neural network\n\n    # Implement [LINEAR -> RELU] for L-1 layers\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], activation=\"relu\")\n        caches.append(cache)\n\n    # Implement [LINEAR -> SIGMOID] for the last layer\n    AL, cache = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], activation=\"sigmoid\")\n    caches.append(cache)\n\n    # Round the final activation matrix AL to 4 decimal places and convert to a Python list\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example parameters and input data\n    np.random.seed(1)\n    X = np.random.randn(5, 10)\n    parameters = {\n        'W1': np.random.randn(4, 5),\n        'b1': np.zeros((4, 1)),\n        'W2': np.random.randn(3, 4),\n        'b2': np.zeros((3, 1)),\n        'W3': np.random.randn(1, 3),\n        'b3': np.zeros((1, 1))\n    }\n\n    AL, caches = L_model_forward(X, parameters)\n    print(\"Final activation (AL):\", AL)\n```\n\n### Explanation:\n1. **Activation Functions**:\n   - `sigmoid(Z)`: Implements the sigmoid activation function.\n   - `relu(Z)`: Implements the ReLU activation function.\n\n2. **Linear Forward Step**:\n   - `linear_forward(A_prev, W, b)`: Computes the linear part of the forward propagation and returns the linear cache.\n\n3. **Linear Activation Forward Step**:\n   - `linear_activation_forward(A_prev, W, b, activation)`: Combines the linear forward step with the specified activation function (either ReLU or sigmoid) and returns the activation cache.\n\n4. **L-Layer Model Forward Propagation**:\n   - `L_model_forward(X, parameters)`: Iterates through all layers, applying the appropriate activation functions, and collects the caches for each layer. It returns the final activation matrix `AL` rounded to 4 decimal places and converted to a Python list, along with the list of caches.\n\nThis script should meet the requirements of the task and handle the forward propagation for an L-layer neural network with the specified activation functions."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is clipped to avoid log(0)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    m = Y.shape[0]\n    cost = - (1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(float(cost), 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.1, 0.8, 0.4])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(A2, Y))  # Should print the cost rounded to 6 decimal places\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    if n == 0:\n        return []\n    \n    # Find the index of the first maximum Q-value\n    a_star = np.argmax(Q)\n    \n    # Calculate the base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Initialize the probabilities list\n    probabilities = [base_prob] * n\n    \n    # Set the probability for the greedy action\n    probabilities[a_star] = 1 - epsilon + base_prob\n    \n    # Round the probabilities to 4 decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    \n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis function correctly implements the \u03b5-soft exploration policy as described. It ensures that all probabilities sum to 1 within the specified tolerance and rounds the results to 4 decimal places. The example usage demonstrates the function with the provided Q-values and \u03b5 value."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to group by sample rather than by tree\n    transposed_predictions = list(zip(*predictions))\n    \n    # Initialize the list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample's predictions\n    for sample_predictions in transposed_predictions:\n        # Count the votes for each class label\n        vote_counts = Counter(sample_predictions)\n        \n        # Find the class label(s) with the highest vote count\n        max_count = max(vote_counts.values())\n        top_labels = [label for label, count in vote_counts.items() if count == max_count]\n        \n        # If there's a tie, choose the smallest label\n        final_prediction = min(top_labels)\n        \n        # Append the final prediction for this sample\n        final_predictions.append(final_prediction)\n    \n    return final_predictions\n\n# Example usage:\npredictions = [\n    [1, 2, 3],\n    [1, 1, 3],\n    [2, 2, 3]\n]\n\nprint(aggregate_random_forest_votes(predictions))  # Output: [1, 2, 3]\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it is not already one\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Compute the softplus function using np.logaddexp\n    result = np.logaddexp(0.0, z)\n    \n    # Round the results to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Convert the result to a Python list if it is an array\n    if isinstance(result_rounded, np.ndarray):\n        return result_rounded.tolist()\n    else:\n        return float(result_rounded)\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract the true expected values from the bandit\n    true_values = bandit.arm_evs\n    \n    # Extract the estimated values from the policy and sort by arm index\n    estimated_values = [policy.ev_estimates.get(i, 0) for i in range(len(true_values))]\n    \n    # Compute the squared errors\n    squared_errors = [(true - estimated) ** 2 for true, estimated in zip(true_values, estimated_values)]\n    \n    # Compute the mean of the squared errors\n    mean_squared_error = np.mean(squared_errors)\n    \n    # Return the mean-squared error rounded to 4 decimal places\n    return round(mean_squared_error, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Expected output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    \n    # Step 1: Build all 1-, ..., N-gram frequency tables\n    ngrams = [defaultdict(Counter) for _ in range(N)]\n    vocab = set()\n    \n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words)):\n            vocab.add(words[i])\n            for n in range(1, N + 1):\n                if i + n <= len(words):\n                    context = tuple(words[i:i+n-1]) if n > 1 else ()\n                    word = words[i+n-1]\n                    ngrams[n-1][context][word] += 1\n    \n    # Add <UNK> to the vocabulary\n    vocab.add(\"<UNK>\")\n    vocab_size = len(vocab)\n    \n    # Step 2: Estimate the probability of every contiguous N-gram in the target sentence\n    log_prob_sum = 0.0\n    sequence_words = sequence.split()\n    \n    if len(sequence_words) < N:\n        return 0.0\n    \n    for i in range(len(sequence_words) - N + 1):\n        ngram = tuple(sequence_words[i:i+N])\n        context = ngram[:-1]\n        word = ngram[-1]\n        \n        # Replace out-of-vocabulary words with <UNK>\n        context = tuple([\"<UNK>\" if w not in vocab else w for w in context])\n        word = \"<UNK>\" if word not in vocab else word\n        \n        # Calculate the probability using additive smoothing\n        numerator = ngrams[N-1][context][word] + K\n        denominator = sum(ngrams[N-1][context].values()) + K * vocab_size\n        prob = numerator / denominator\n        \n        # Add the log probability to the sum\n        log_prob_sum += math.log(prob)\n    \n    return round(log_prob_sum, 4)\n\n# Example usage:\ncorpus = [\n    \"I am Sam\",\n    \"Sam I am\",\n    \"I do not like green eggs and ham\",\n    \"I do not like them Sam I am\"\n]\n\nsequence = \"I do not like Sam\"\nN = 3\nK = 1.0\n\nprint(additive_ngram_log_prob(corpus, sequence, N, K))\n```\n\nThis script defines a function `additive_ngram_log_prob` that computes the additive-smoothed log-probability of a given sentence based on a provided corpus. The function follows the steps outlined in the task description, including building n-gram frequency tables, handling out-of-vocabulary words, and applying additive smoothing to estimate probabilities. The final log-probability is returned rounded to 4 decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    \n    # Initialize W and H with a fixed random seed\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    I_K = np.eye(K)  # Identity matrix of size K\n    \n    for _ in range(max_iter):\n        # Update W\n        H_T_H = H @ H.T + alpha * I_K\n        W = X @ H.T @ np.linalg.inv(H_T_H)\n        \n        # Update H\n        W_T_W = W.T @ W + alpha * I_K\n        H = np.linalg.inv(W_T_W) @ W.T @ X\n        \n        # Compute the reconstruction error\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    # Return the reconstructed matrix rounded to 4 decimal places\n    return X_hat.round(4).tolist()\n```"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def initialize_centroids(X, K):\n        centroids = [X[random.randint(0, len(X) - 1)]]\n        for _ in range(1, K):\n            dists = np.array([min([np.linalg.norm(x - c) ** 2 for c in centroids]) for x in X])\n            probs = dists / dists.sum()\n            cumulative_probs = probs.cumsum()\n            r = random.random() * cumulative_probs[-1]\n            idx = np.where(cumulative_probs >= r)[0][0]\n            centroids.append(X[idx])\n        return np.array(centroids)\n\n    def assign_clusters(X, centroids):\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        return np.argmin(distances, axis=1)\n\n    def update_centroids(X, assignments, K):\n        new_centroids = []\n        for i in range(K):\n            cluster_points = X[assignments == i]\n            if len(cluster_points) > 0:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n            else:\n                new_centroids.append(centroids[i])  # Keep the old centroid if the cluster is empty\n        return np.array(new_centroids)\n\n    centroids = initialize_centroids(X, K)\n    for _ in range(max_iter):\n        old_centroids = centroids.copy()\n        assignments = assign_clusters(X, centroids)\n        centroids = update_centroids(X, assignments, K)\n        if np.all(centroids == old_centroids):\n            break\n\n    centroids = centroids.round(4)\n    centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n    return [list(centroid) for centroid in centroids]\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\n    K = 2\n    max_iter = 100\n    random_state = 0\n    centroids = kmeans(X, K, max_iter, random_state)\n    print(centroids)\n```\n\nThis script defines the `kmeans` function which performs K-Means clustering with K-Means++ initialization. The function initializes centroids using the K-Means++ method, assigns points to clusters, updates the centroids, and repeats the assignment-update steps until convergence or the maximum number of iterations is reached. The centroids are returned rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes the input string to a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a human-readable string, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, runs the model, and decodes the prediction.\"\"\"\n    # Encode the input text\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Prepare the input for the model (batch size 1)\n    input_batch = np.array([encoded_input])\n    \n    # Run the model to get predictions\n    predictions = model.predict(input_batch)\n    \n    # Apply argmax over the last axis to get the predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1)\n    \n    # Decode the predicted ids to a string\n    decoded_prediction = int_to_string(predicted_ids[0], inv_output_vocabulary)\n    \n    return decoded_prediction\n\n# Example usage\nif __name__ == \"__main__\":\n    # Define a simple vocabulary\n    vocab = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    inv_vocab = {v: k for k, v in vocab.items()}\n    \n    # Define a mock model that always predicts the same sequence\n    def mock_model_predict(x):\n        # Mock prediction: always predict 'abcde'\n        return np.tile(np.array([1, 2, 3, 4, 5]), (x.shape[0], TIME_STEPS, 1))\n    \n    # Test the run_example function\n    input_text = \"hello world\"\n    predicted_text = run_example(mock_model_predict, vocab, inv_vocab, input_text)\n    print(f\"Input Text: {input_text}\")\n    print(f\"Predicted Text: {predicted_text}\")\n```\n\n### Explanation:\n1. **`string_to_int` Function**:\n   - Converts each character in the input string to its corresponding integer ID using the provided vocabulary.\n   - Ensures the output list has a fixed length of `TIME_STEPS` by truncating or padding with zeros as necessary.\n   - Characters not in the vocabulary are encoded as the padding token `0`.\n\n2. **`int_to_string` Function**:\n   - Converts a list of integer IDs back to a human-readable string using the inverse vocabulary.\n   - Ignores padding tokens (ID `0`) during decoding.\n\n3. **`run_example` Function**:\n   - Encodes the input text using `string_to_int`.\n   - Prepares the encoded input as a batch (batch size 1) for the model.\n   - Runs the model to get predictions.\n   - Applies `argmax` over the last axis to get the predicted IDs.\n   - Decodes the predicted IDs to a string using `int_to_string`.\n   - Returns the decoded prediction string.\n\n### Example Usage:\n- A simple vocabulary and a mock model are defined for testing purposes.\n- The `run_example` function is called with an example input text, and the predicted text is printed."}
{"task_id": 113, "completion_id": 0, "completion": "```python\n# Assuming EXAMPLES is defined somewhere in the user's environment\nEXAMPLES = [\"Hello\", \"world\", \"Python\", \"is\", \"awesome\"]\n\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    # This is a placeholder for the actual implementation of run_example.\n    # It should return a list of characters representing the model's output.\n    return list(model(example))\n\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {output_str}\")\n        predictions.append(output_str)\n    \n    return predictions\n\n# Example usage:\n# Define a simple model for demonstration purposes\ndef simple_model(input_str):\n    return input_str.upper()\n\n# Example vocabularies (not used in the function)\ninput_vocab = {char: idx for idx, char in enumerate(\"abcdefghijklmnopqrstuvwxyz \")}\ninv_output_vocab = {idx: char for char, idx in input_vocab.items()}\n\n# Run the examples\npredictions = run_examples(simple_model, input_vocab, inv_output_vocab, examples=[\"hello\", \"world\"])\nprint(predictions)\n```\n\nThis script defines the `run_examples` function as specified in the task description. It also includes a placeholder for the `run_example` function and a simple model for testing purposes. The `run_examples` function prints the input and output pairs and returns a list of the predicted strings."}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure the input shapes are compatible\n    m, n = X.shape\n    if y.shape[0] != m or w.shape[0] != n:\n        raise ValueError(\"Incompatible dimensions\")\n\n    # Compute the linear combination\n    z = X @ w\n\n    # Compute the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n\n    # Avoid log(0) by clipping probabilities to a small epsilon\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n\n    # Compute the binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n\n    # Compute the gradient of the loss with respect to the weights\n    gradient = (1 / m) * (X.T @ (p - y))\n\n    # Round the results to 4 decimal places\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n\n    return loss_rounded, gradient_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([0, 1, 0])\n    w = np.array([0.1, 0.2])\n\n    # Compute the loss and gradient\n    loss, gradient = logistic_loss_and_gradient(X, y, w)\n    print(f\"Loss: {loss}\")\n    print(f\"Gradient: {gradient}\")\n```\n\nThis script defines the `logistic_loss_and_gradient` function that computes the binary cross-entropy loss and its gradient for logistic regression. It ensures that the input shapes are compatible and handles potential numerical issues by clipping the predicted probabilities. The results are rounded to 4 decimal places and returned as specified."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom math import log\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    \n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n    \n    m, n = X_train.shape\n    D = np.ones(m) / m  # Initialize weights\n    \n    # Store the decision stumps and their weights\n    stumps = []\n    stump_weights = []\n    \n    for _ in range(n_clf):\n        # Find the best decision stump\n        best_stump, min_error, best_pred = find_best_stump(X_train, y_train, D)\n        \n        # Calculate the alpha for this stump\n        epsilon = min_error / D.sum()\n        alpha = 0.5 * log((1 - epsilon) / max(epsilon, 1e-16))\n        \n        # Update the distribution D\n        D *= np.exp(-alpha * y_train * best_pred)\n        D /= D.sum()\n        \n        # Append the best stump and its weight\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n    \n    # Predict on the test set\n    predictions = np.zeros(len(X_test))\n    for stump, alpha in zip(stumps, stump_weights):\n        predictions += alpha * stump.predict(X_test)\n    \n    return [np.sign(pred) for pred in predictions]\n\ndef find_best_stump(X: np.ndarray, y: np.ndarray, D: np.ndarray):\n    \"\"\"Find the best decision stump that minimizes the weighted error.\"\"\"\n    m, n = X.shape\n    best_stump = None\n    best_pred = np.ones(m)\n    min_error = float('inf')\n    \n    # Iterate over each feature\n    for i in range(n):\n        unique_vals = np.unique(X[:, i])\n        \n        # Try different threshold values for the current feature\n        for val in unique_vals:\n            pred = np.ones(m)\n            pred[X[:, i] < val] = -1\n            \n            # Calculate weighted error\n            weighted_error = D[pred != y].sum()\n            \n            # Check if flipping the prediction reduces the error\n            if 1 - weighted_error < weighted_error:\n                pred = -pred\n                weighted_error = 1 - weighted_error\n            \n            # Update the best stump if this one is better\n            if weighted_error < min_error:\n                min_error = weighted_error\n                best_pred = pred\n                best_stump = DecisionStump(i, val, pred[0])\n    \n    return best_stump, min_error, best_pred\n\nclass DecisionStump:\n    def __init__(self, feature_idx, threshold, pred_val):\n        self.feature_idx = feature_idx\n        self.threshold = threshold\n        self.pred_val = pred_val\n    \n    def predict(self, X):\n        pred = np.ones(len(X))\n        pred[X[:, self.feature_idx] < self.threshold] = -1\n        if self.pred_val == -1:\n            pred *= -1\n        return pred\n\n# Example usage:\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_train = np.array([1, 1, -1, -1])\n    X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n    \n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(predictions)  # Expected output: [1, -1]\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    unique_labels = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for label in unique_labels:\n        class_samples = X[y == label]\n        class_mean = np.mean(class_samples, axis=0)\n        S_W += np.dot((class_samples - class_mean).T, (class_samples - class_mean))\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for label in unique_labels:\n        class_samples = X[y == label]\n        class_mean = np.mean(class_samples, axis=0)\n        N_c = class_samples.shape[0]\n        S_B += N_c * np.outer((class_mean - overall_mean), (class_mean - overall_mean))\n\n    # Step 3: Form the matrix A = pinv(S_W) @ S_B\n    A = np.linalg.pinv(S_W) @ S_B\n\n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Deterministic sign for eigenvectors\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Step 6: Project X on the first n_components eigenvectors\n    projection_matrix = eigenvectors[:, :n_components]\n    projected_data = X @ projection_matrix\n\n    # Step 7: Round the projected data to 4 decimal places and convert to list of lists\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n\n    return projected_data_rounded\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\n\nresult = multi_class_lda(X, y, n_components)\nprint(result)\n```"}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    \n    # Check if the start or end is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # Special case for 1x1 grid\n    if n == 1 and grid[0] == '.':\n        return 0\n    \n    # Directions for movement (right, left, down, up)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Initialize queues for fire and agent\n    fire_q = deque()\n    agent_q = deque([(0, 0)])\n    \n    # Track visited cells for the agent\n    visited = set([(0, 0)])\n    \n    # Initialize fire spread time matrix\n    fire_time = [[math.inf] * n for _ in range(n)]\n    \n    # Initialize fire queue with all initial fire sources\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_q.append((i, j))\n                fire_time[i][j] = 0\n    \n    def spread_fire():\n        \"\"\"Spread fire to neighboring cells.\"\"\"\n        while fire_q:\n            x, y = fire_q.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and fire_time[nx][ny] == math.inf:\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_q.append((nx, ny))\n    \n    spread_fire()\n    \n    steps = 0\n    while agent_q:\n        for _ in range(len(agent_q)):\n            x, y = agent_q.popleft()\n            \n            # Check if the agent has reached the goal\n            if (x, y) == (n-1, n-1):\n                return steps\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                \n                # Check if the new position is valid and not visited\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and (nx, ny) not in visited:\n                    # Check if the cell will be on fire when the agent arrives\n                    if steps + 1 < fire_time[nx][ny]:\n                        visited.add((nx, ny))\n                        agent_q.append((nx, ny))\n        \n        steps += 1\n    \n    return -1\n\n# Example usage\nmaze = [\n    \".#F\",\n    \".#.\",\n    \"...\"\n]\n\nprint(escape_fire_maze(maze))  # Output: 4\n```"}
{"task_id": 141, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the k-Nearest Neighbors (k-NN) classifier as described:\n\n```python\nimport numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors (k-NN) classifier.\n    \n    Parameters:\n    - X_train: numpy.ndarray, shape (n_train_samples, n_features)\n        The training data.\n    - y_train: numpy.ndarray, shape (n_train_samples,)\n        The labels for the training data.\n    - X_test: numpy.ndarray, shape (n_test_samples, n_features)\n        The test data.\n    - k: int\n        The number of nearest neighbors to consider.\n    - metric: str, optional (default='euclidean')\n        The distance metric to use. Options are 'euclidean', 'manhattan', 'cosine'.\n    \n    Returns:\n    - numpy.ndarray, shape (n_test_samples,)\n        The predicted labels for the test data.\n    \"\"\"\n    # Define the distance metrics\n    if metric == 'euclidean':\n        dist_metric = 'euclidean'\n    elif metric == 'manhattan':\n        dist_metric = 'cityblock'\n    elif metric == 'cosine':\n        dist_metric = 'cosine'\n    else:\n        dist_metric = 'euclidean'  # Default to Euclidean if unknown metric\n\n    # Compute the distance between each test sample and every training sample\n    distances = cdist(X_test, X_train, metric=dist_metric)\n\n    # Find the indices of the k nearest neighbors for each test sample\n    k_nearest_indices = np.argsort(distances, axis=1)[:, :k]\n\n    # Get the labels of the k nearest neighbors\n    k_nearest_labels = y_train[k_nearest_indices]\n\n    # Predict the class by majority vote among those k neighbors\n    # In case of a tie, return the smallest label value\n    predictions = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=1, arr=k_nearest_labels)\n\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example training data\n    X_train = np.array([[1, 2], [2, 3], [3, 1]])\n    y_train = np.array([0, 0, 1])\n\n    # Example test data\n    X_test = np.array([[1, 1], [2, 2], [3, 3]])\n\n    # Predict using k-NN\n    k = 2\n    metric = 'euclidean'\n    predictions = knn_predict(X_train, y_train, X_test, k, metric)\n\n    print(\"Predicted labels:\", predictions)\n```\n\n### Explanation:\n1. **Distance Metrics**: The function supports 'euclidean', 'manhattan', and 'cosine' distance metrics. If an unknown metric is provided, it defaults to 'euclidean'.\n2. **Distance Calculation**: The `cdist` function from `scipy.spatial.distance` is used to compute the pairwise distances between the test and training samples.\n3. **Finding k-Nearest Neighbors**: The `argsort` function is used to find the indices of the k smallest distances for each test sample.\n4. **Majority Voting**: The `np.apply_along_axis` function is used to apply a lambda function that performs majority voting on the labels of the k nearest neighbors. In case of a tie, `np.argmax` returns the smallest label value.\n\nThis implementation ensures that the function is both efficient and easy to understand."}
{"task_id": 146, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the k-Nearest Neighbours (k-NN) classifier according to the given specifications.\n\n```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef manhattan_distance(x, y):\n    return np.sum(np.abs(x - y))\n\ndef cosine_distance(x, y, epsilon=1e-12):\n    dot_product = np.dot(x, y)\n    norm_x = np.linalg.norm(x)\n    norm_y = np.linalg.norm(y)\n    return 1 - (dot_product / (norm_x * norm_y + epsilon))\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    if k > len(X):\n        k = len(X)\n\n    def predict_one(x_test):\n        distances = []\n        for i in range(len(X)):\n            if metric == 'euclidean':\n                dist = euclidean_distance(x_test, X[i])\n            elif metric == 'manhattan':\n                dist = manhattan_distance(x_test, X[i])\n            elif metric == 'cosine':\n                dist = cosine_distance(x_test, X[i])\n            else:\n                raise ValueError(f\"Unknown distance metric: {metric}\")\n            distances.append((dist, y[i]))\n        \n        # Sort by distance and get the k nearest neighbors\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        \n        # Perform majority voting\n        labels, counts = np.unique([label for _, label in k_nearest], return_counts=True)\n        max_count = max(counts)\n        smallest_label = min(label for label, count in zip(labels, counts) if count == max_count)\n        \n        return smallest_label\n\n    predictions = [predict_one(x_test) for x_test in X_test]\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [6, 7]])\n    y_train = np.array([0, 0, 1, 1])\n    X_test = np.array([[1.5, 2.5], [5, 6]])\n\n    # Predict labels\n    predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n    print(predictions)  # Expected output: [0, 1]\n```\n\n### Explanation:\n1. **Distance Metrics**:\n   - **Euclidean Distance**: Computes the straight-line distance between two points.\n   - **Manhattan Distance**: Computes the sum of absolute differences between coordinates.\n   - **Cosine Distance**: Computes the cosine similarity between two vectors and converts it to a distance measure.\n\n2. **k-NN Algorithm**:\n   - For each test sample, compute the distance to every training sample using the specified metric.\n   - Sort the distances to find the k nearest neighbors.\n   - Perform a majority vote among the labels of the k nearest neighbors.\n   - In case of a tie, return the smallest label.\n\n3. **Example Usage**:\n   - The example demonstrates how to use the `knn_predict` function with a simple dataset.\n\nThis implementation ensures that the k-NN classifier is fully functional and adheres to the constraints provided."}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure the state is a NumPy array\n    if isinstance(state, list):\n        state = np.array(state)\n    \n    # First linear layer: Linear(W1, b1)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    # Apply ReLU activation\n    a1 = np.maximum(0, z1)\n    \n    # Second linear layer: Linear(W2, b2)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    # Apply ReLU activation\n    a2 = np.maximum(0, z2)\n    \n    # Third linear layer: Linear(W3, b3)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    # Apply tanh activation\n    action = np.tanh(z3)\n    \n    # Convert the action to a Python list and round to 4 decimals\n    return [round(float(x), 4) for x in action]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example state vector and weights\n    state = [1.0, 2.0, 3.0]\n    weights = {\n        'W1': np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]),\n        'b1': np.array([0.1, 0.2]),\n        'W2': np.array([[0.7, 0.8], [0.9, 1.0]]),\n        'b2': np.array([0.3, 0.4]),\n        'W3': np.array([[1.1, 1.2], [1.3, 1.4]]),\n        'b3': np.array([0.5, 0.6])\n    }\n    \n    action = actor_forward(state, weights)\n    print(action)\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using the provided state and weights. The function ensures that the state is a NumPy array, applies the linear transformations and nonlinearities (ReLU and tanh), and returns the action vector as a Python list with values rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    \n    m, n = X.shape\n    \n    # Step 1: Add intercept column\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    n += 1  # Increase number of features by 1 for intercept\n\n    # Step 2: Initialize parameters\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            # Recompute intercept\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        \n        # Step 3: Coordinate loop\n        for j in range(1, n):\n            old_w_j = w[j]\n            w[j] = 0  # Temporarily set to 0\n            r_j = y - X @ w  # Partial residual\n            z_j = np.sum(X[:, j]**2)\n            w_j_update = soft_thresholding(np.dot(X[:, j], r_j), lambda_param * m) / z_j\n            w[j] = w_j_update\n\n    # Step 4: Return final intercept and weight vector\n    if fit_intercept:\n        bias = w[0]\n        weights = w[1:]\n    else:\n        bias = 0\n        weights = w[1:]\n    \n    return [round(w, 4) for w in weights], round(bias, 4)\n\ndef soft_thresholding(a: float, tau: float) -> float:\n    \"\"\"Soft thresholding operator.\"\"\"\n    if a > tau:\n        return a - tau\n    elif a < -tau:\n        return a + tau\n    else:\n        return 0.0\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[2, 3], [4, 5], [6, 7]])\n    y = np.array([1, 2, 3])\n    lambda_param = 0.1\n    max_iters = 100\n    fit_intercept = True\n\n    weights, bias = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\n    print(\"Weights:\", weights)\n    print(\"Bias:\", bias)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays for consistent handling\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are different\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the number of differing elements\n    differences = np.sum(x != y)\n    \n    # Normalize the Hamming distance by the length of the vectors\n    distance = differences / len(x)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\nx = [1, 0, 1, 0, 1]\ny = [1, 1, 0, 0, 1]\nprint(hamming_distance(x, y))  # Output: 0.6000\n\nx = np.array([1, 2, 3, 4])\ny = np.array([1, 2, 3, 5])\nprint(hamming_distance(x, y))  # Output: 0.2500\n\nx = [1, 2, 3]\ny = [1, 2]\nprint(hamming_distance(x, y))  # Output: -1\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    if N == 1:\n        return [1.0]\n    \n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(f\"Unknown window type '{window}'\")\n    \n    n = np.arange(N)\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window\")\n        w = np.sum([a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients)], axis=0)\n    \n    return [round(x, 4) for x in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n\n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Check if all labels are the same\n    if len(set(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n\n    # Map labels to {0, 1}\n    unique_labels = sorted(set(y_train))\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Add intercept term to X_train and X_test\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n\n            # Compute predictions\n            y_pred = sigmoid(np.dot(X_batch, weights))\n\n            # Compute gradient\n            gradient = np.dot(X_batch.T, (y_pred - y_batch)) / len(y_batch)\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Make predictions on the test set\n    y_test_pred_prob = sigmoid(np.dot(X_test, weights))\n    y_test_pred = (y_test_pred_prob >= 0.5).astype(int)\n\n    # Map predictions back to original labels\n    y_test_pred_mapped = [unique_labels[pred] for pred in y_test_pred]\n\n    return y_test_pred_mapped\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"\n    Implement the AdaBoost algorithm with decision stumps as weak learners.\n\n    Parameters:\n    - X_train: A list of lists representing the training feature matrix.\n    - y_train: A list of integers representing the training labels (0 or 1).\n    - X_test: A list of lists representing the test feature matrix.\n    - n_estimators: The number of decision stumps to train.\n\n    Returns:\n    - A list of integers representing the predicted class labels for X_test.\n    \"\"\"\n\n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize sample weights\n    n_samples = len(y_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n\n    # Convert labels to -1 and 1 for AdaBoost calculations\n    y_train[y_train == 0] = -1\n\n    # Initialize lists to store the decision stumps and their corresponding alpha values\n    stumps = []\n    alphas = []\n\n    # Train the decision stumps\n    for _ in range(n_estimators):\n        best_stump = None\n        best_error = float('inf')\n        best_polarity = None\n\n        for feature_index in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_index])\n\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples) * -1\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = 1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = 1\n\n                    errors = sample_weights * (predictions != y_train)\n                    error = np.sum(errors)\n\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n                        best_polarity = polarity\n\n        # Calculate alpha\n        alpha = 0.5 * np.log((1 - best_error + 1e-10) / (best_error + 1e-10))\n\n        # Update sample weights\n        predictions = np.ones(n_samples) * -1\n        if best_stump['polarity'] == 1:\n            predictions[X_train[:, best_stump['feature_index']] < best_stump['threshold']] = 1\n        else:\n            predictions[X_train[:, best_stump['feature_index']] >= best_stump['threshold']] = 1\n\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n        # Store the best stump and its alpha\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n        # Check for early stopping\n        if best_error == 0:\n            break\n\n    # Make predictions on the test set\n    test_predictions = np.zeros(len(X_test))\n    for i in range(len(X_test)):\n        h_sum = 0\n        for j in range(len(stumps)):\n            stump = stumps[j]\n            alpha = alphas[j]\n            prediction = 1 if (X_test[i, stump['feature_index']] < stump['threshold']) == (stump['polarity'] == 1) else -1\n            h_sum += alpha * prediction\n        test_predictions[i] = 1 if h_sum > 0 else 0\n\n    return test_predictions.tolist()\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [3.5, 4.5]]\n\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\nprint(predictions)  # Expected output: [0, 1]\n```"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate inputs\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n\n    # Constants\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n\n    # Initialize positions and velocities\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n\n    # Initialize personal best positions and values\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(p ** 2) for p in positions])\n\n    # Initialize global best position and value\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index].copy()\n    global_best_value = personal_best_values[global_best_index]\n\n    # Perform PSO\n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = (w * velocities +\n                      c1 * r1 * (personal_best_positions - positions) +\n                      c2 * r2 * (global_best_position - positions))\n\n        # Update positions\n        positions = np.clip(positions + velocities, -1, 1)\n\n        # Update personal bests\n        current_values = np.array([np.sum(p ** 2) for p in positions])\n        better_indices = current_values < personal_best_values\n        personal_best_positions[better_indices] = positions[better_indices]\n        personal_best_values[better_indices] = current_values[better_indices]\n\n        # Update global best\n        new_global_best_index = np.argmin(personal_best_values)\n        if personal_best_values[new_global_best_index] < global_best_value:\n            global_best_position = personal_best_positions[new_global_best_index].copy()\n            global_best_value = personal_best_values[new_global_best_index]\n\n    return round(global_best_value, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    n_dims = 3\n    num_particles = 50\n    num_iterations = 100\n    seed = 1\n    best_value = particle_swarm_optimisation(n_dims, num_particles, num_iterations, seed)\n    print(f\"Best value found: {best_value}\")\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    \n    def get_neighbors(X_train, X_test_sample, k):\n        distances = [(i, euclidean_distance(X_test_sample, x)) for i, x in enumerate(X_train)]\n        distances.sort(key=lambda x: x[1])\n        return [y_train[i] for i, _ in distances[:k]]\n    \n    def predict_classification(neighbors):\n        counter = Counter(neighbors)\n        return min(counter.items(), key=lambda x: (-x[1], x[0]))[0]\n    \n    def predict_regression(neighbors):\n        return round(np.mean(neighbors), 4)\n    \n    # Adjust k if it's 0 or greater than the number of training samples\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    for X_test_sample in X_test:\n        neighbors = get_neighbors(X_train, X_test_sample, k)\n        if task == \"classification\":\n            predictions.append(predict_classification(neighbors))\n        elif task == \"regression\":\n            predictions.append(predict_regression(neighbors))\n    \n    return predictions\n```\n\nThis implementation of the k-Nearest Neighbours algorithm includes functions to calculate the Euclidean distance, find the nearest neighbors, and make predictions based on the specified task (classification or regression). The main function `knn_predict` handles the overall logic and ensures that the output is formatted correctly according to the task requirements."}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini Impurity for a list of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_split(X, y):\n    \"\"\"Find the best split for the given data using Gini impurity.\"\"\"\n    best_gini_gain = -1\n    best_feature = None\n    best_threshold = None\n    \n    # Calculate Gini impurity before the split\n    parent_gini = gini_impurity(y)\n    \n    n_samples, n_features = X.shape\n    \n    for feature in range(n_features):\n        # Sort the data based on the current feature\n        sorted_indices = np.argsort(X[:, feature])\n        sorted_X = X[sorted_indices, feature]\n        sorted_y = y[sorted_indices]\n        \n        # Iterate through possible split points\n        for i in range(1, n_samples):\n            if sorted_X[i] != sorted_X[i - 1]:\n                threshold = (sorted_X[i - 1] + sorted_X[i]) / 2\n                left_labels = sorted_y[:i]\n                right_labels = sorted_y[i:]\n                \n                # Calculate the weighted Gini impurity of the split\n                left_gini = gini_impurity(left_labels)\n                right_gini = gini_impurity(right_labels)\n                weighted_gini = (len(left_labels) * left_gini + len(right_labels) * right_gini) / n_samples\n                \n                # Calculate Gini gain\n                gini_gain = parent_gini - weighted_gini\n                \n                # Update the best split if this one is better\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature = feature\n                    best_threshold = threshold\n    \n    return best_feature, best_threshold, best_gini_gain\n\ndef majority_vote(labels):\n    \"\"\"Return the majority class label.\"\"\"\n    unique, counts = np.unique(labels, return_counts=True)\n    return unique[np.argmax(counts)]\n\nclass Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf(self):\n        return self.value is not None\n\ndef build_tree(X, y, max_depth=None, current_depth=0):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    # Stopping criteria\n    if max_depth is not None and current_depth >= max_depth:\n        return Node(value=majority_vote(y))\n    \n    if len(np.unique(y)) == 1:\n        return Node(value=y[0])\n    \n    best_feature, best_threshold, _ = best_split(X, y)\n    \n    if best_feature is None:\n        return Node(value=majority_vote(y))\n    \n    left_indices = X[:, best_feature] <= best_threshold\n    right_indices = X[:, best_feature] > best_threshold\n    \n    left_child = build_tree(X[left_indices], y[left_indices], max_depth, current_depth + 1)\n    right_child = build_tree(X[right_indices], y[right_indices], max_depth, current_depth + 1)\n    \n    return Node(feature=best_feature, threshold=best_threshold, left=left_child, right=right_child)\n\ndef predict_single(x, node):\n    \"\"\"Predict the class label for a single sample.\"\"\"\n    if node.is_leaf():\n        return node.value\n    \n    if x[node.feature] <= node.threshold:\n        return predict_single(x, node.left)\n    else:\n        return predict_single(x, node.right)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    root = build_tree(X_train, y_train, max_depth)\n    predictions = [predict_single(x, root) for x in X_test]\n    return predictions\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Compute the Gini impurity for a list of labels.\"\"\"\n    total = len(labels)\n    counts = {}\n    for label in labels:\n        if label not in counts:\n            counts[label] = 0\n        counts[label] += 1\n    gini = 1 - sum((count / total) ** 2 for count in counts.values())\n    return gini\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate the Gini impurity of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n    \n    # Initialize variables to store the best split\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = G_whole_dataset\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        \n        # Skip the current feature if it has only one unique value\n        if len(unique_values) == 1:\n            continue\n        \n        # Iterate over each unique value in the feature\n        for v in unique_values:\n            left_indices = X[:, j] <= v\n            right_indices = X[:, j] > v\n            \n            # Skip the split if either child node is empty\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            # Compute the Gini impurity for the left and right child nodes\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n            \n            # Compute the weighted Gini impurity for the split\n            n_left = np.sum(left_indices)\n            n_right = np.sum(right_indices)\n            n_total = n_left + n_right\n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            # Update the best split if the current split is better\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and (j < best_feature_index or (j == best_feature_index and v < best_threshold_value))):\n                best_feature_index = j\n                best_threshold_value = v\n                best_gini = G_split\n    \n    # Return the best split or the Gini impurity of the whole dataset if no valid split exists\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\nX = [[2.771244718, 1.784783929],\n     [1.728571309, 1.169761413],\n     [3.678319846, 2.81281357],\n     [3.961043357, 2.61995032],\n     [2.999208922, 2.209014212],\n     [7.497545867, 3.162953546],\n     [9.00220326, 3.339047188],\n     [7.444542326, 0.476683375],\n     [10.12493903, 3.234550982],\n     [6.642287351, 3.319983761]]\ny = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]\n\nprint(best_gini_split(X, y))\n```\n\nThis script defines a function `best_gini_split` that computes the best binary split of the data based on the Gini impurity criterion. It includes helper functions to compute the Gini impurity of a set of labels and to find the best split. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Iterable, Callable\n\ndef metric(name: str) -> Callable[[Iterable, Iterable], float]:\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def validate_vectors(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1 or len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        return x, y\n\n    def euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan_distance(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev_distance(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine_distance(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x, y) / (norm_x * norm_y)\n\n    def distance_function(x, y):\n        validated = validate_vectors(x, y)\n        if not validated:\n            return -1\n        x, y = validated\n        if name == 'euclidean':\n            return round(euclidean_distance(x, y), 4)\n        elif name == 'manhattan':\n            return round(manhattan_distance(x, y), 4)\n        elif name == 'chebyshev':\n            return round(chebyshev_distance(x, y), 4)\n        elif name == 'cosine':\n            return round(cosine_distance(x, y), 4)\n        else:\n            return -1\n\n    return distance_function\n\n# Example usage\nif __name__ == \"__main__\":\n    euclidean = metric('euclidean')\n    print(euclidean([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n\n    manhattan = metric('manhattan')\n    print(manhattan([1, 2, 3], [4, 5, 6]))  # \u279e 9.0\n\n    chebyshev = metric('chebyshev')\n    print(chebyshev([1, 2, 3], [4, 5, 6]))  # \u279e 3.0\n\n    cosine = metric('cosine')\n    print(cosine([1, 2, 3], [4, 5, 6]))  # \u279e 0.2148\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    \n    # Initialize variables\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    \n    # Determine the action space type and collect necessary information\n    if cont_action:\n        # Continuous action space\n        if md_action:\n            # Multi-dimensional continuous action space\n            for space in env.action_space.spaces:\n                n_actions_per_dim.append(np.inf)\n                action_dim += len(space.shape)\n        else:\n            # Single-dimensional continuous action space\n            n_actions_per_dim.append(np.inf)\n            action_dim = len(env.action_space.shape)\n    else:\n        # Discrete action space\n        if md_action:\n            # Multi-dimensional discrete action space\n            action_dims = []\n            for space in env.action_space.spaces:\n                n_actions_per_dim.append(space.n)\n                action_dim += 1\n                action_dims.append(range(space.n))\n            action_ids = list(product(*action_dims))\n        else:\n            # Single-dimensional discrete action space\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n            action_ids = [(action,) for action in range(env.action_space.n)]\n    \n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis function `action_stats` takes an environment object and two Boolean flags to determine the nature of the action space (whether it is multi-dimensional and whether it is continuous). It then collects and returns the required statistics about the action space, including the number of actions per dimension, a list of all possible discrete actions (if applicable), and the total number of action dimensions."}
{"task_id": 198, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the function `update_beta` to update the word-topic distribution \u03b2 in Latent Dirichlet Allocation (LDA) according to the given specifications.\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    D = len(corpus)  # Number of documents\n    T = phi[0].shape[1]  # Number of topics\n\n    # Initialize \u03b2 with zeros\n    beta = np.zeros((V, T))\n\n    # Compute the unnormalized \u03b2\n    for d in range(D):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            if v < V:\n                beta[v, :] += phi[d][n, :]\n\n    # Normalize the columns of \u03b2\n    col_sums = beta.sum(axis=0)\n    col_sums[col_sums == 0] = 1  # Avoid division by zero\n    beta /= col_sums\n\n    # Convert to a list of lists and round to 4 decimal places\n    beta_list = beta.tolist()\n    for i in range(V):\n        for j in range(T):\n            beta_list[i][j] = round(beta_list[i][j], 4)\n\n    return beta_list\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example phi (variational parameters for 2 documents, 3 topics)\n    phi = [\n        np.array([[0.1, 0.2, 0.7], [0.3, 0.4, 0.3], [0.2, 0.5, 0.3]]),  # Document 1\n        np.array([[0.4, 0.3, 0.3], [0.2, 0.6, 0.2], [0.1, 0.8, 0.1]])   # Document 2\n    ]\n\n    # Example corpus\n    corpus = [\n        [0, 1, 2],  # Document 1\n        [1, 2, 3]   # Document 2\n    ]\n\n    V = 4  # Vocabulary size\n\n    # Update \u03b2\n    beta_updated = update_beta(phi, corpus, V)\n    print(\"Updated \u03b2 matrix:\")\n    for row in beta_updated:\n        print(row)\n```\n\n### Explanation:\n1. **Initialization**: \n   - `D` is the number of documents.\n   - `T` is the number of topics.\n   - `beta` is initialized as a zero matrix of shape `(V, T)`.\n\n2. **Unnormalized \u03b2 Calculation**:\n   - Iterate over each document and each token within the document.\n   - For each token, update the corresponding row in `beta` with the values from `phi`.\n\n3. **Normalization**:\n   - Sum the values in each column of `beta`.\n   - Normalize each column by dividing by the sum of that column. To avoid division by zero, set any zero sums to 1 before normalization.\n\n4. **Conversion and Rounding**:\n   - Convert the `beta` matrix to a list of lists.\n   - Round each value to 4 decimal places.\n\n5. **Example Usage**:\n   - An example `phi` and `corpus` are provided to demonstrate how to use the `update_beta` function.\n   - The updated `beta` matrix is printed out.\n\nThis implementation ensures that the columns of the returned `beta` matrix sum to 1 and all values are rounded to 4 decimal places."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def calculate_cost(X, medoids):\n        # Calculate the total cost (sum of distances to closest medoid)\n        n_samples = X.shape[0]\n        cost = 0\n        for i in range(n_samples):\n            costs = np.linalg.norm(X[i] - X[medoids], axis=1)\n            cost += np.min(costs)\n        return cost\n    \n    def find_best_swap(X, medoids):\n        # Try all possible swaps and find the one that reduces the cost the most\n        best_cost = calculate_cost(X, medoids)\n        best_medoids = medoids.copy()\n        for i in range(k):\n            for j in range(k, X.shape[0]):\n                new_medoids = medoids.copy()\n                new_medoids[i] = j\n                new_cost = calculate_cost(X, new_medoids)\n                if new_cost < best_cost:\n                    best_cost = new_cost\n                    best_medoids = new_medoids.copy()\n        return best_medoids, best_cost\n    \n    # Initialize medoids\n    medoids = np.arange(k)\n    \n    # Main loop: repeatedly try to improve the medoids\n    while True:\n        new_medoids, new_cost = find_best_swap(X, medoids)\n        if new_cost >= calculate_cost(X, medoids):\n            break\n        medoids = new_medoids\n    \n    # Assign clusters\n    n_samples = X.shape[0]\n    labels = []\n    for i in range(n_samples):\n        distances = np.linalg.norm(X[i] - X[medoids], axis=1)\n        labels.append(np.argmin(distances))\n    \n    return labels\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    # Check input validity\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    # Generate polynomial features\n    def generate_polynomial_features(X, degree):\n        poly_features = []\n        for i in range(degree + 1):\n            for j in range(i + 1):\n                poly_features.append(np.power(X[:, 0], i - j) * np.power(X[:, 1], j))\n        return np.column_stack(poly_features)\n\n    # Standardize features\n    def standardize(X):\n        means = np.mean(X, axis=0)\n        stds = np.std(X, axis=0)\n        return (X - means) / stds, means, stds\n\n    # Add bias term\n    def add_bias(X):\n        return np.c_[np.ones((X.shape[0], 1)), X]\n\n    # Generate polynomial features\n    x_train_poly = generate_polynomial_features(x_train, degree)\n    x_test_poly = generate_polynomial_features(x_test, degree)\n\n    # Standardize features\n    x_train_std, means, stds = standardize(x_train_poly)\n    x_test_std = (x_test_poly - means) / stds\n\n    # Add bias term\n    x_train_std = add_bias(x_train_std)\n    x_test_std = add_bias(x_test_std)\n\n    # Initialize weights\n    weights = np.zeros(x_train_std.shape[1])\n\n    # Batch gradient descent\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train_std, weights)\n        error = y_pred - y_train\n\n        # Gradient of MSE\n        gradient_mse = 2 * np.dot(x_train_std.T, error) / len(y_train)\n\n        # L1 and L2 regularization terms\n        l1_reg = l1_ratio * reg_factor * np.sign(weights)\n        l2_reg = (1 - l1_ratio) * reg_factor * 2 * weights\n\n        # Update weights\n        weights -= learning_rate * (gradient_mse + l1_reg + l2_reg)\n\n    # Make predictions\n    predictions = np.dot(x_test_std, weights)\n    return np.round(predictions, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to NumPy arrays for vectorized computation\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n    \n    # Compute sigmoid of predicted values\n    sigmoid_pred = 1 / (1 + np.exp(-predicted_np))\n    \n    # Compute gradient\n    gradient = actual_np * sigmoid_pred * (1 - actual_np * sigmoid_pred)\n    \n    # Compute Hessian\n    hessian = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Round the results to 6 decimal places\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_pred_rounded = np.round(sigmoid_pred, 6)\n    \n    # Convert NumPy arrays back to Python lists\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_pred_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.5, 0.8, -0.8]\n\ngradient, hessian, probability = logistic_components(actual, predicted)\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```\n\nThis script defines the `logistic_components` function as specified, handling the conversion of inputs to NumPy arrays, performing vectorized computations for the gradient, Hessian, and sigmoid probabilities, rounding the results to 6 decimal places, and converting the final results back to Python lists. The example usage at the end demonstrates how to call the function and print the results."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand, considering the usable ace rule.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        \n        while value <= 11 and aces > 0:\n            value += 10\n            aces -= 1\n        \n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and (1 in hand and 10 in hand)\n\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n\n    # Check for busts\n    if player_value > 21:\n        return -1\n    elif dealer_value > 21:\n        return 1\n\n    # Check for natural blackjack\n    if is_natural_blackjack(player) and not is_natural_blackjack(dealer):\n        return 1.5\n\n    # Compare scores\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0\n\n# Example usage:\nplayer_hand = [1, 10]\ndealer_hand = [10, 8, 3]\nprint(blackjack_outcome(player_hand, dealer_hand))  # Output: 1.5\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate element-wise squared logarithmic errors.\"\"\"\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return None\n    log_errors = np.log1p(actual) - np.log1p(predicted)\n    squared_errors = log_errors ** 2\n    return squared_errors\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays for consistency\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate squared log errors\n    squared_errors = squared_log_error(actual, predicted)\n    if squared_errors is None:\n        return -1\n    \n    # Calculate mean squared log error\n    msle = np.mean(squared_errors)\n    return round(msle, 4)\n\n# Example usage\nactual = [1, 2, 3, 4]\npredicted = [1.1, 2.1, 2.9, 4.1]\nprint(mean_squared_log_error(actual, predicted))  # Output: 0.0025\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def _sigmoid_scalar(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n\n    if isinstance(z, (int, float)):\n        return round(_sigmoid_scalar(z), 4)\n    \n    # Convert list to numpy array for vectorized operations\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Vectorized sigmoid function\n    result = np.vectorize(_sigmoid_scalar)(z)\n    \n    # Convert back to Python list and round to 4 decimal places\n    if isinstance(z, np.ndarray):\n        return np.round(result, 4).tolist()\n    elif isinstance(z, list):\n        return [round(val, 4) for val in result.tolist()]\n\n# Example usage:\nprint(sigmoid(0))  # Output: 0.5\nprint(sigmoid([1, -1]))  # Output: [0.7311, 0.2689]\nprint(sigmoid(np.array([[2, -2], [3, -3]])))  # Output: [[0.8808, 0.1192], [0.9526, 0.0474]]\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        return x if x >= 0 else a * x\n\n    def convert_to_list(z):\n        if isinstance(z, (list, np.ndarray)):\n            return [convert_to_list(item) for item in z]\n        return apply_leaky_relu(z)\n\n    if isinstance(z, (int, float)):\n        return apply_leaky_relu(z)\n    \n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    \n    return convert_to_list(z)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a scalar\n    print(leaky_relu(5))  # Output: 5\n\n    # Test with a list\n    print(leaky_relu([-1, 2, -3]))  # Output: [-0.01, 2, -0.03]\n\n    # Test with a nested list\n    print(leaky_relu([[1, -1], [-2, 2]]))  # Output: [[1, -0.01], [-0.02, 2]]\n\n    # Test with a numpy array\n    print(leaky_relu(np.array([1, -1, 2])))  # Output: [1, -0.01, 2]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    n_samples, n_features = X_train.shape\n    # Initialize weights uniformly\n    sample_weights = np.full(n_samples, 1/n_samples)\n    \n    # Store the weak learners and their corresponding weights\n    stumps = []\n    alphas = []\n    \n    for _ in range(n_clf):\n        # Find the best stump\n        best_stump, best_error, best_predictions = None, float('inf'), None\n        \n        for feature_index in range(n_features):\n            unique_values = np.unique(X_train[:, feature_index])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            \n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Make predictions with the current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    \n                    # Calculate weighted error\n                    error = np.sum(sample_weights[predictions != y_train])\n                    \n                    # Check if this stump is better\n                    if error < best_error:\n                        best_stump = (feature_index, threshold, polarity)\n                        best_error = error\n                        best_predictions = predictions\n        \n        # Compute the alpha for the best stump\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        \n        # Update the sample weights\n        sample_weights *= np.exp(-alpha * y_train * best_predictions)\n        sample_weights /= np.sum(sample_weights)\n        \n        # Add the best stump and its alpha to the ensemble\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    \n    # Make predictions on the test set\n    test_predictions = np.zeros(X_test.shape[0])\n    for i, (feature_index, threshold, polarity) in enumerate(stumps):\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        \n        test_predictions += alphas[i] * predictions\n    \n    # Return the sign of the weighted sum of predictions\n    return list(np.sign(test_predictions).astype(int))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    X_train = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    y_train = np.array([1, -1, 1, -1])\n    X_test = np.array([[2, 3], [6, 7]])\n\n    # Predict\n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(predictions)  # Expected output: [1, -1]\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape to 2D\n    d0 = shape[0]\n    d1_to_dn = np.prod(shape[1:])\n    \n    # Step 2: Create a 2D matrix A filled with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(d0, int(d1_to_dn))\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    result = (Q.reshape(shape) * scale).tolist()\n    \n    return result\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n\n# Verification\nflat = np.array(output).reshape(shape[0], -1)\nif shape[0] <= flat.shape[1]:\n    print(\"Orthogonality check (rows):\", np.allclose(flat @ flat.T, scale**2 * np.eye(shape[0]), atol=1e-6))\nelse:\n    print(\"Orthogonality check (columns):\", np.allclose(flat.T @ flat, scale**2 * np.eye(np.prod(shape[1:])), atol=1e-6))\n```\n\nThis script defines the `orthogonal` function which takes a shape and a scale factor as input and returns an orthogonally initialized tensor as a Python list. The function ensures that the returned tensor satisfies the orthogonality condition up to the specified scaling factor. If the shape has fewer than two dimensions, the function returns `-1`. The example usage and verification code are provided to demonstrate the correctness of the implementation."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array\n    state = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Forward pass through the network\n    z1 = relu(state @ W1 + b1)\n    z2 = relu(z1 @ W2 + b2)\n    z3 = relu(z2 @ W3 + b3)\n    \n    # Actor head\n    logits = z3 @ Wa + ba\n    action_probs = softmax(logits)\n    \n    # Critic head\n    state_value = (z3 @ Wc + bc)[0]\n    \n    # Return results rounded to 4 decimal places\n    return [round(prob, 4) for prob in action_probs], round(state_value, 4)\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function which performs the forward pass through a simple fully-connected Actor-Critic network. The function takes a state vector as input, processes it through the network layers, and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))  # subtract max for numerical stability\n    return e_x / e_x.sum()\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a NumPy array\n    state = np.array(state)\n    \n    # Shared layers\n    h1 = relu(np.dot(state, params['W1']) + params['b1'])\n    h2 = relu(np.dot(h1, params['W2']) + params['b2'])\n    h3 = relu(np.dot(h2, params['W3']) + params['b3'])\n    \n    # Actor head\n    actor_output = np.dot(h3, params['Wa']) + params['ba']\n    probabilities = softmax(actor_output)\n    \n    # Critic head\n    value = np.dot(h3, params['Wc']) + params['bc']\n    \n    # Round the results\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value, 4)\n    \n    # Ensure probabilities and value are rounded correctly\n    probabilities = [p if p not in [0.0000, 1.0000] else int(p) for p in probabilities]\n    value = value if value not in [0.0000, 1.0000] else int(value)\n    \n    return probabilities, value\n\n# Example usage\nif __name__ == \"__main__\":\n    state = [0.1, 0.2, 0.3]\n    params = {\n        'W1': np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]),\n        'b1': np.array([0.1, 0.2, 0.3]),\n        'W2': np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]),\n        'b2': np.array([0.1, 0.2, 0.3]),\n        'W3': np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]),\n        'b3': np.array([0.1, 0.2, 0.3]),\n        'Wa': np.array([0.1, 0.2, 0.3]),\n        'ba': np.array([0.1]),\n        'Wc': np.array([0.1, 0.2, 0.3]),\n        'bc': np.array([0.1])\n    }\n    \n    probabilities, value = actor_critic_forward(state, params)\n    print(\"Probabilities:\", probabilities)\n    print(\"Value:\", value)\n```"}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    \n    if not gradient:\n        # Compute the penalty value\n        l1_penalty = l1_ratio * np.sum(np.abs(w))\n        l2_penalty = (1 - l1_ratio) * 0.5 * np.sum(w**2)\n        penalty_value = alpha * (l1_penalty + l2_penalty)\n        return round(penalty_value, 4)\n    else:\n        # Compute the gradient\n        l1_gradient = l1_ratio * np.sign(w)\n        l2_gradient = (1 - l1_ratio) * w\n        gradient_value = alpha * (l1_gradient + l2_gradient)\n        return [round(g, 4) for g in gradient_value]\n\n# Example usage:\nw = [1.0, -2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.7\n\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\ngradient = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\n\nprint(\"Penalty:\", penalty)\nprint(\"Gradient:\", gradient)\n```"}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n    \n    # Adjust for special parameter names\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter and its shape\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    \n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over every element of the parameter\n    for index, _ in np.ndenumerate(param):\n        # Perturb the parameter by +epsilon\n        model.parameters[param_name][index] += epsilon\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n        \n        # Perturb the parameter by -epsilon\n        model.parameters[param_name][index] -= 2 * epsilon\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n        \n        # Restore the original parameter value\n        model.parameters[param_name][index] += epsilon\n        \n        # Compute the numerical gradient\n        grad = (loss_plus - loss_minus) / (2 * epsilon)\n        grads[index] = grad\n    \n    # Transpose the gradient array before returning\n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    D = np.ones(m) / m  # Initialize weights for each sample\n\n    # Lists to store the weak classifiers and their weights\n    stumps = []\n    alpha = []\n\n    for _ in range(n_clf):\n        # Train a decision stump\n        best_stump = None\n        min_error = float('inf')\n        \n        for feature_index in range(n):\n            unique_values = np.unique(X_train[:, feature_index])\n            for threshold in unique_values:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature_index] < threshold] = -1\n                \n                weighted_error = np.sum(D[predictions != y_train])\n                \n                if weighted_error > 0.5:\n                    weighted_error = 1 - weighted_error\n                    predictions = -predictions\n                \n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump = {\n                        'feature_index': feature_index,\n                        'threshold': threshold,\n                        'predictions': predictions\n                    }\n        \n        # Compute the weight of this stump\n        stump_weight = 0.5 * np.log((1 - min_error) / max(min_error, 1e-16))\n        \n        # Update the sample weights\n        D *= np.exp(-stump_weight * y_train * best_stump['predictions'])\n        D /= np.sum(D)\n        \n        # Store the stump and its weight\n        stumps.append(best_stump)\n        alpha.append(stump_weight)\n\n    # Make predictions on the test set\n    predictions = np.zeros(X_test.shape[0])\n    for stump, weight in zip(stumps, alpha):\n        pred = np.ones(X_test.shape[0])\n        pred[X_test[:, stump['feature_index']] < stump['threshold']] = -1\n        predictions += weight * pred\n    \n    final_predictions = np.sign(predictions).tolist()\n    \n    return final_predictions\n```"}
{"task_id": 261, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Glorot (Xavier) normal weight initialization function:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    # Compute fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        in_channels, out_channels = shape[:2]\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n\n    # Calculate the standard deviation\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n\n    # Generate the random array\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)\n\n# Example usage\nif __name__ == \"__main__\":\n    shape = (64, 128)  # Example shape for a fully-connected layer\n    weights = glorot_normal(shape)\n    print(f\"Shape: {weights.shape}\")\n    print(f\"Mean: {np.mean(weights)}\")\n    print(f\"Std Dev: {np.std(weights)}\")\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the provided shape has at least two dimensions. If not, it raises a `ValueError`.\n2. **Fan In and Fan Out Calculation**:\n   - For a 2D shape (e.g., `(fan_in, fan_out)`), the values are directly taken from the shape.\n   - For shapes with more than two dimensions (e.g., `(out_channels, in_channels, k1, k2, ...)`), the receptive field size is calculated as the product of all dimensions after the first two. Then, `fan_in` and `fan_out` are computed accordingly.\n3. **Standard Deviation Calculation**: The standard deviation `s` is calculated using the formula \\( s = \\sqrt{\\frac{2}{\\text{fan\\_in} + \\text{fan\\_out}}} \\).\n4. **Random Array Generation**: The function uses `np.random.normal` to generate a NumPy array with the specified shape, mean 0, and standard deviation `s`.\n\n### Example Usage:\nThe example usage at the bottom demonstrates how to use the `glorot_normal` function to initialize weights for a fully-connected layer with shape `(64, 128)`. It prints the shape, mean, and standard deviation of the generated weights to verify the correctness of the initialization."}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in the vertex list\n    vertex_index = {vertex: i for i, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty lists\n    adj_list = [[] for _ in V]\n    \n    # Process each edge and add it to the adjacency list\n    for u, v in E:\n        # Add v to u's adjacency list if not already present\n        if v not in adj_list[vertex_index[u]]:\n            adj_list[vertex_index[u]].append(v)\n        # Add u to v's adjacency list if not already present\n        if u not in adj_list[vertex_index[v]]:\n            adj_list[vertex_index[v]].append(u)\n    \n    # Sort the neighbors in each adjacency list based on their order in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    \n    return adj_list\n\n# Example usage\nif __name__ == \"__main__\":\n    V = [1, 2, 3, 4]\n    E = [(1, 2), (2, 3), (3, 1), (1, 4)]\n    G = build_adj_list(V, E)\n    print(G)  # Output: [[2, 3, 4], [1, 3], [1, 2], [1]]\n\n    V = ['a', 'b', 'c', 'd']\n    E = [('a', 'b'), ('b', 'c'), ('c', 'a'), ('a', 'd')]\n    G = build_adj_list(V, E)\n    print(G)  # Output: [['b', 'c', 'd'], ['a', 'c'], ['a', 'b'], ['a']]\n```"}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    min_error = float('inf')\n    best_stump = None\n\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where((X[:, feature_idx] < threshold) == (polarity == 1), 1, -1)\n                errors = (predictions != y) * sample_weights\n                weighted_error = np.sum(errors)\n\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump = {\n                        \"feature_index\": feature_idx,\n                        \"threshold\": round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(weighted_error, 4)\n                    }\n\n    return best_stump\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [2, 3], [3, 1], [4, 3]])\n    y = np.array([1, 1, -1, -1])\n    sample_weights = np.array([0.25, 0.25, 0.25, 0.25])\n\n    best_stump = train_decision_stump(X, y, sample_weights)\n    print(best_stump)\n```\n\nThis script defines the `train_decision_stump` function which takes a feature matrix `X`, a label vector `y`, and a weight vector `sample_weights`. It then finds the optimal weighted decision stump by examining all features and all unique feature values as candidate thresholds. The function returns a dictionary with the best feature index, threshold, polarity, and weighted error, all rounded to 4 decimal places."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a set of class labels.\"\"\"\n    label_counts = Counter(labels)\n    n_labels = len(labels)\n    return -sum((count / n_labels) * math.log2(count / n_labels) for count in label_counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target)\n    \n    # Get unique feature values and sort them\n    unique_features = np.unique(feature)\n    \n    # If all feature values are the same, there's no split possible\n    if len(unique_features) <= 1:\n        return (None, 0.0)\n    \n    # Initialize variables to store the best threshold and its information gain\n    best_threshold = None\n    best_info_gain = 0.0\n    \n    # Iterate over all possible thresholds (midpoints between consecutive unique feature values)\n    for i in range(len(unique_features) - 1):\n        threshold = (unique_features[i] + unique_features[i + 1]) / 2\n        \n        # Split the data based on the current threshold\n        left_indices = feature < threshold\n        right_indices = feature >= threshold\n        \n        left_target = target[left_indices]\n        right_target = target[right_indices]\n        \n        # Calculate the weighted entropy of the left and right subsets\n        left_weight = len(left_target) / len(target)\n        right_weight = len(right_target) / len(target)\n        \n        left_entropy = entropy(left_target)\n        right_entropy = entropy(right_target)\n        \n        # Calculate the information gain\n        info_gain = parent_entropy - (left_weight * left_entropy + right_weight * right_entropy)\n        \n        # Update the best threshold and information gain if the current one is better\n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_threshold = threshold\n    \n    # If no useful split was found, return (None, 0.0)\n    if best_info_gain == 0.0:\n        return (None, 0.0)\n    \n    # Round the results to 4 decimal places\n    best_threshold = round(best_threshold, 4)\n    best_info_gain = round(best_info_gain, 4)\n    \n    return (best_threshold, best_info_gain)\n\n# Example usage\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\n\nthreshold, info_gain = best_split(feature, target)\nprint(f\"Best Threshold: {threshold}, Information Gain: {info_gain}\")\n```\n\nThis script defines a function `best_split` that calculates the optimal threshold for splitting a dataset based on a single numerical feature and the corresponding class labels. It uses the concept of information gain to determine the best split and returns the threshold and the information gain rounded to 4 decimal places. If no useful split is found, it returns `(None, 0.0)`."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    \n    try:\n        init_fn = get_initializer(name)\n        output = init_fn(shape)\n        print(output)\n    except ValueError as e:\n        print(e)\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n    \n    # Initialize output and gradient input arrays\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    grad_input = np.zeros_like(X)\n    \n    # Perform the forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    h_start = h * s_h\n                    w_start = w * s_w\n                    h_end = h_start + p_h\n                    w_end = w_start + p_w\n                    \n                    # Compute the average\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n                    \n                    # Store the gradient for the backward pass\n                    grad = accum_grad[n, c, h, w] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad\n    \n    # Round and convert to lists\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    \n    return (pooled_output_rounded, grad_input_rounded)\n\n# Example usage:\nX = np.array([[[[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]]]])\naccum_grad = np.array([[[[0.1, 0.2],\n                         [0.3, 0.4]]]])\n\npool_shape = (2, 2)\nstride = (2, 2)\n\noutput, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(\"Pooled Output:\", output)\nprint(\"Gradient Input:\", grad_input)\n```\n\nThis script defines a function `average_pool2d` that performs both the forward and backward passes of a 2-D average-pooling layer. The function takes the input tensor `X`, the pooling window size `pool_shape`, the stride `stride`, and the accumulated gradient `accum_grad` as inputs. It returns the pooled output and the gradient input, both rounded to the nearest 4th decimal and converted to Python lists."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Base case: both are leaves\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n\n    # One is a leaf, the other is not\n    if isinstance(tree_a, Leaf) != isinstance(tree_b, Leaf):\n        return False\n\n    # Both are nodes\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Check if features and thresholds are the same\n        if tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            # Recursively check left and right subtrees\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n\n    # If none of the above conditions are met, the trees are not equivalent\n    return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]] | int:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    \n    # Perform the single-point column crossover\n    child1 = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2 = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n    \n    # Convert the resulting NumPy arrays back to Python lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\nparent2 = [\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\ncutoff = 1\n\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)  # Expected output: ([[1, 8, 9], [4, 11, 12]], [[7, 2, 3], [10, 5, 6]])\n```"}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    \n    for i, edges in enumerate(G['_G']):\n        source_label = [k for k, v in G['_V2I'].items() if v == i][0]\n        for source, target, weight in edges:\n            adj[source].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    \n    for label in adj:\n        adj[label] = sorted(adj[label], key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\nG_example = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 1.0), ('A', 'C', 2.0)],\n        [('B', 'A', 1.0)],\n        []\n    ]\n}\n\nprint(to_networkx(G_example))\n```\n\nThis script defines the `to_networkx` function which takes a custom graph dictionary `G` and converts it into a plain adjacency dictionary. The function ensures that for undirected graphs, each edge appears exactly once in each direction, and the neighbour lists are sorted alphabetically. The example usage demonstrates how to use the function with a sample graph."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    x = np.array(x)\n    \n    # Check if all elements are 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# Create a test array\ntest_array = np.array([0, 1, 0, 1, 0], dtype=int)\n\n# Call the function and print the result\nprint(is_binary(test_array))  # Expected output: True\n\n# Test with a non-binary array\nnon_binary_array = np.array([0, 1, 2, 1, 0], dtype=int)\nprint(is_binary(non_binary_array))  # Expected output: False\n\n# Test with a boolean array\nboolean_array = np.array([True, False, True, False], dtype=bool)\nprint(is_binary(boolean_array))  # Expected output: True\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize and pad the corpus\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.append(tokens)\n    \n    # Flatten the tokenized corpus into a single list\n    flat_corpus = [token for sentence in tokenized_corpus for token in sentence]\n    \n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(zip(*[flat_corpus[i:] for i in range(N)]))\n    prefix_counts = Counter(zip(*[flat_corpus[i:] for i in range(N-1)])) if N > 1 else Counter(flat_corpus)\n    \n    # Tokenize and pad the query\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    \n    # Calculate the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        prefix = ngram[:-1] if N > 1 else None\n        \n        ngram_count = ngram_counts[ngram]\n        prefix_count = prefix_counts[prefix] if N > 1 else sum(prefix_counts.values())\n        \n        if prefix_count == 0:\n            return float('-inf')\n        \n        prob = ngram_count / prefix_count\n        if prob == 0:\n            return float('-inf')\n        \n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\n\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    def compute_weight(x_i, x_j):\n        return 1 / (1 + np.linalg.norm(x_i - x_j))\n    \n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = compute_weight(X[i], X[j])\n    \n    # Step 2: Compute the graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    def k_means(E, k, max_iter=100):\n        n_samples, n_features = E.shape\n        centroids = E[:k].copy()\n        labels = np.zeros(n_samples, dtype=int)\n        \n        for _ in range(max_iter):\n            new_labels = np.argmin(np.linalg.norm(E[:, np.newaxis, :] - centroids, axis=2), axis=1)\n            \n            # Check for convergence\n            if np.array_equal(labels, new_labels):\n                break\n            \n            labels = new_labels\n            for i in range(k):\n                if np.any(labels == i):\n                    centroids[i] = np.mean(E[labels == i], axis=0)\n                else:\n                    # Reinitialize empty cluster centroid\n                    centroids[i] = E[np.random.randint(n_samples)]\n        \n        return labels.tolist()\n    \n    # Run k-means on the projection matrix E\n    cluster_labels = k_means(E, k)\n    \n    return cluster_labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\n    k = 2\n    labels = spectral_clustering(X, k)\n    print(\"Cluster labels:\", labels)\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, following the steps outlined in the task description. It uses NumPy for numerical operations and ensures that the implementation is deterministic by initializing k-means centroids with the first k rows of the projection matrix E. The final cluster labels are returned as a Python list."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    def get_label_and_mine(index):\n        if index < 0:\n            return params[0]\n        return params[index]\n\n    prev_index = max(ix - 1, 0)\n    curr_index = ix\n\n    prev_label, prev_mine = get_label_and_mine(prev_index)\n    curr_label, curr_mine = get_label_and_mine(curr_index)\n\n    debug_str = (\n        f\"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\"\n        f\"----------------------- END DEBUG -----------------------\"\n    )\n\n    return debug_str\n\n# Example usage:\nparams = [(\"output1\", \"label1\"), (\"output2\", \"label2\"), (\"output3\", \"label3\")]\ngolds = {\"label1\": \"expected1\", \"label2\": \"expected2\", \"label3\": \"expected3\"}\nix = 1\nwarn_str = \"\\nThis is a warning message.\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    \n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Convert V and mu to appropriate forms\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    \n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    \n    # Compute the posterior mean\n    V_inv = np.linalg.inv(V)\n    XT_X = np.dot(X.T, X)\n    Sigma_b = np.linalg.inv(V_inv + XT_X)\n    mu_b = np.dot(Sigma_b, np.dot(V_inv, mu) + np.dot(X.T, y))\n    \n    # Return the result rounded to 4 decimal places\n    return [round(m, 4) for m in mu_b]\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nalpha = 1.0\nbeta = 1.0\nmu = 0.0\nV = 1.0\nfit_intercept = True\n\ncoefficients = bayesian_posterior_mean(X, y, alpha, beta, mu, V, fit_intercept)\nprint(coefficients)\n```"}
{"task_id": 308, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script that constructs the Mel filterbank matrix according to the provided specifications.\n\n```python\nimport numpy as np\n\ndef hz_to_mel(f: float) -> float:\n    \"\"\"Convert frequency in Hertz to the Mel scale.\"\"\"\n    return 2595 * np.log10(1 + f / 700)\n\ndef mel_to_hz(mel: float) -> float:\n    \"\"\"Convert frequency from the Mel scale to Hertz.\"\"\"\n    return 700 * (10**(mel / 2595) - 1)\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert limits to the Mel scale\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally-spaced values on the Mel axis\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel points back to Hertz\n    hz_points = [mel_to_hz(mel) for mel in mel_points]\n\n    # Initialize the filterbank matrix\n    filterbank = []\n\n    # Number of bins in the power spectrum\n    n_bins = N // 2 + 1\n\n    for i in range(n_filters):\n        # Left and right edges of the current filter\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        # Initialize the row for the current filter\n        row = []\n\n        for k in range(n_bins):\n            # Center frequency of the k-th bin\n            f_k = k * fs / N\n\n            # Compute the weights for the current bin\n            if f_k < f_left or f_k > f_right:\n                weight = 0.0\n            elif f_k <= f_center:\n                weight = (f_k - f_left) / (f_center - f_left)\n            else:\n                weight = (f_right - f_k) / (f_right - f_center)\n\n            # Append the weight to the row\n            row.append(weight)\n\n        # Normalize the filter if required\n        if normalize:\n            norm_factor = 2.0 / (hz_points[i + 2] - hz_points[i])\n            row = [norm_factor * w for w in row]\n\n        # Round to 4 decimal places and append the row to the filterbank\n        row = [round(w, 4) for w in row]\n        filterbank.append(row)\n\n    return filterbank\n\n# Example usage\nN = 512\nn_filters = 20\nfs = 44000\nmin_freq = 0\nmax_freq = None\nnormalize = True\n\nfilterbank = mel_filterbank(N, n_filters, fs, min_freq, max_freq, normalize)\nfor row in filterbank:\n    print(row)\n```\n\nThis script defines the `mel_filterbank` function that constructs the Mel filterbank matrix. It includes the necessary helper functions `hz_to_mel` and `mel_to_hz` for converting between Hertz and the Mel scale. The function follows the specified steps to create the filterbank matrix and returns it as a list of lists, with each element rounded to 4 decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    # Adjust the window length for the periodic case\n    N = window_len - 1 if not symmetric else window_len\n    \n    window = [\n        round(\n            a0 - a1 * np.cos(2 * np.pi * n / N) +\n            a2 * np.cos(4 * np.pi * n / N) -\n            a3 * np.cos(6 * np.pi * n / N),\n            4\n        )\n        for n in range(window_len)\n    ]\n    \n    # For periodic form, discard the last element if necessary\n    if not symmetric:\n        window = window[:-1]\n    \n    return window\n\n# Example usage:\nprint(blackman_harris(5))\nprint(blackman_harris(5, symmetric=True))\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximates the digamma function using a combination of recursion and asymptotic expansion.\"\"\"\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    else:\n        return math.log(x) - 1/(2*x) - 1/(12*x**2) + 1/(120*x**4) - 1/(252*x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to a NumPy array if it's not already one\n    gamma = np.array(gamma)\n    \n    # Extract the relevant parameters\n    gamma_dt = gamma[d, t]\n    gamma_sum = gamma[d, :].sum()\n    \n    # Compute the expectation using the digamma function\n    expectation = digamma(gamma_dt) - digamma(gamma_sum)\n    \n    # Round the result to 4 decimal places\n    return round(expectation, 4)\n\n# Example usage\ngamma = [\n    [1.0, 2.0, 3.0],\n    [4.0, 5.0, 6.0]\n]\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))  # Output: -1.0986\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract current and previous elements\n    curr_prediction, curr_label = params[ix]\n    prev_prediction, prev_label = params[prev_ix]\n    \n    # Get the gold values for current and previous elements\n    curr_gold = golds[curr_label]\n    prev_gold = golds[prev_label]\n    \n    # Format the debug string\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n\n# Example usage\nparams = [\n    (\"This is my first prediction.\", \"label1\"),\n    (\"This is my second prediction.\", \"label2\")\n]\n\ngolds = {\n    \"label1\": \"This is the first gold.\",\n    \"label2\": \"This is the second gold.\"\n}\n\nix = 1\nwarn_str = \" (WARNING: mismatch)\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis script defines the `err_fmt` function as described in the task, and includes an example usage to demonstrate how it works. The function constructs the debug string by extracting the necessary information from the `params` and `golds` inputs, and formats it according to the specified layout."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    \n    n_samples, n_features = X_train.shape\n    D = np.ones(n_samples) / n_samples  # Initialize weights\n    \n    # Store weak learners and their alpha values\n    weak_learners = []\n    alphas = []\n    \n    for m in range(n_estimators):\n        # Find the best weak learner (decision stump)\n        best_error = float('inf')\n        best_stump = None\n        \n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    predictions = p * np.sign(X_train[:, j] - t)\n                    error = np.sum(D[predictions != y_train])\n                    \n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature': j, 'threshold': t, 'polarity': p}\n        \n        # Calculate alpha\n        alpha = 0.5 * math.log((1 - best_error) / max(best_error, 1e-16))\n        \n        # Update weights\n        predictions = best_stump['polarity'] * np.sign(X_train[:, best_stump['feature']] - best_stump['threshold'])\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n        \n        # Store the weak learner and its alpha\n        weak_learners.append(best_stump)\n        alphas.append(alpha)\n    \n    # Predict labels for the test set\n    predictions_test = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, weak_learners):\n        predictions_test += alpha * stump['polarity'] * np.sign(X_test[:, stump['feature']] - stump['threshold'])\n    \n    return [1 if pred > 0 else -1 for pred in predictions_test]\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 3], [3, 1], [4, 2]])\n    y_train = np.array([1, 1, -1, -1])\n    X_test = np.array([[1.5, 2.5], [3.5, 1.5]])\n    \n    predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\n    print(predictions)  # Output: [1, -1]\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    df = fs / N  # Frequency resolution\n    \n    if positive_only:\n        # Non-negative frequencies\n        freqs = [k * df for k in range((N // 2) + 1)]\n    else:\n        # Full list of frequencies\n        freqs = [k * df if k < N // 2 else (k - N) * df for k in range(N)]\n    \n    # Round to 4 decimal places\n    freqs = [round(f, 4) for f in freqs]\n    \n    return freqs\n\n# Example usage\nprint(dft_bins(8, 44000, positive_only=True))\nprint(dft_bins(8, 44000, positive_only=False))\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Initialize arrays to store the number of OOB predictions and their sum\n    n_oob_predictions = np.sum(oob_mask, axis=1)\n    oob_sum_predictions = np.sum(predictions * oob_mask, axis=1)\n\n    # Filter out samples with no OOB predictions\n    valid_indices = n_oob_predictions > 0\n    if not np.any(valid_indices):\n        return -1\n\n    # Compute the average OOB predictions for valid samples\n    oob_avg_predictions = oob_sum_predictions[valid_indices] / n_oob_predictions[valid_indices]\n\n    # Compute the squared errors\n    squared_errors = (y_true[valid_indices] - oob_avg_predictions) ** 2\n\n    # Compute the mean squared error\n    oob_mse = np.mean(squared_errors)\n\n    return round(oob_mse, 4)\n\n# Example usage:\ny_true = [1.0, 2.0, 3.0, 4.0]\npredictions = [\n    [1.1, 1.2, 1.3],\n    [1.9, 2.1, 2.0],\n    [2.8, 3.1, 3.2],\n    [3.9, 4.1, 4.0]\n]\noob_mask = [\n    [0, 1, 1],\n    [1, 0, 1],\n    [1, 1, 0],\n    [0, 1, 1]\n]\n\nprint(oob_mse(y_true, predictions, oob_mask))  # Expected output: 0.0467\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    \n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 5: Process each transaction\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: ordered_items.index(x))\n        \n        # Update the FP-Tree\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'b', 'd'],\n    ['a', 'c', 'd'],\n    ['a', 'b', 'c', 'd'],\n    ['b', 'c', 'd']\n]\n\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script constructs an FP-Tree based on the given transactions and minimum support threshold. It follows the steps outlined in the task description, ensuring that the tree is built correctly and efficiently. The final FP-Tree is represented as a nested dictionary, which can be easily traversed or modified as needed."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if Y is not None and not isinstance(Y, np.ndarray):\n        Y = np.array(Y)\n    else:\n        Y = X\n    \n    # Check if the number of columns is the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the dot product between each pair of vectors\n    K = np.dot(X, Y.T) + c0\n    \n    # Convert the result to a list of lists and round to 4 decimal places\n    K_rounded = np.round(K, 4).tolist()\n    \n    return K_rounded\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1\n\n# Should return a 2x2 matrix\nprint(linear_kernel(X, Y, c0))\n\n# Should return a 2x2 symmetric matrix since Y is None\nprint(linear_kernel(X, None, c0))\n\n# Incompatible shapes\nX = [[1, 2], [3, 4]]\nY = [[5, 6, 7], [8, 9, 10]]\nprint(linear_kernel(X, Y, c0))  # Should return -1\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first and second moments\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Bias correction\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n\n    # Update the parameter\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n\n    # Convert the results to Python lists and round to 8 decimal places\n    updated_param = np.round(param_t.tolist(), 8)\n    new_m = np.round(m_t.tolist(), 8)\n    new_v = np.round(v_t.tolist(), 8)\n\n    return (updated_param, new_m, new_v)\n\n# Example usage\nparam = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nt = 1\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])\n\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v)\nprint(\"Updated Parameter:\", updated_param)\nprint(\"New First Moment Estimate:\", new_m)\nprint(\"New Second Moment Estimate:\", new_v)\n```\n\nThis script defines the `adam_update` function that performs a single step of the Adam optimization algorithm. The function updates the parameter `param` using the provided gradient `grad`, the current time-step `t`, and the previous moment estimates `m` and `v`. The function returns the updated parameter, the new first moment estimate, and the new second moment estimate, all rounded to 8 decimal places and converted to Python lists."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to a NumPy array if it's not already\n    rewards = np.array(rewards)\n    \n    # Determine the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Find the indices of the top samples based on rewards\n    top_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Select the top samples\n    elite_samples = theta_samples[top_indices]\n    \n    # Compute the mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places and convert to lists\n    mean_list = [round(m, 4) for m in mean]\n    variance_list = [round(v, 4) for v in variance]\n    \n    return mean_list, variance_list\n\n# Example usage\nif __name__ == \"__main__\":\n    theta_samples = np.array([\n        [0.1, 0.2, 0.3],\n        [0.4, 0.5, 0.6],\n        [0.7, 0.8, 0.9],\n        [1.0, 1.1, 1.2]\n    ])\n    rewards = [1.0, 2.0, 3.0, 4.0]\n    retain_prcnt = 0.5\n    \n    mean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\n    print(\"Mean:\", mean)\n    print(\"Variance:\", variance)\n```\n\nThis script defines the `cross_entropy_update` function, which takes in the sampled parameter vectors, their corresponding rewards, and the retention percentage. It then selects the top samples based on the rewards, computes the mean and variance of these top samples, and returns them as lists rounded to four decimal places. The example usage at the bottom demonstrates how to call this function with some sample data."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    \n    # Calculate the probabilities of each label\n    probabilities = [count / total_labels for count in label_counts.values()]\n    \n    # Calculate the Shannon entropy\n    entropy_value = -sum(p * math.log2(p) for p in probabilities)\n    \n    # Return the entropy rounded to 5 decimal places\n    return round(entropy_value, 5)\n\n# Example usage\nlabels = [1, 2, 2, 3, 3, 3]\nprint(f\"Entropy: {entropy(labels)}\")  # Output: Entropy: 1.45915\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    \n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad_top, pad_bottom = pad[0], pad[0]\n        pad_left, pad_right = pad[1], pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pad_top, pad_bottom, pad_left, pad_right = pad\n    elif pad == 'same':\n        pad_top = pad_bottom = (kernel_rows - 1) * dilation // 2\n        pad_left = pad_right = (kernel_cols - 1) * dilation // 2\n    else:\n        raise ValueError(\"Invalid padding specification\")\n    \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad_top + pad_bottom - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n    \n    # Initialize the output array\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    \n    # Im2col transformation\n    col_shape = (n_ex, out_rows, out_cols, kernel_rows, kernel_cols, in_ch)\n    strides = (*X_padded.strides[:2], stride * X_padded.strides[1], \n               dilation * X_padded.strides[1], dilation * X_padded.strides[2], X_padded.strides[3])\n    X_cols = np.lib.stride_tricks.as_strided(X_padded, shape=col_shape, strides=strides)\n    X_cols = X_cols.reshape(n_ex * out_rows * out_cols, -1)\n    \n    # Reshape filters to (out_ch, kernel_rows * kernel_cols * in_ch)\n    W_cols = W.reshape(-1, out_ch)\n    \n    # Perform the GEMM (General Matrix Multiplication)\n    out = X_cols @ W_cols\n    out = out.reshape(n_ex, out_rows, out_cols, out_ch)\n    \n    return out.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.random.randn(2, 4, 4, 3)\n    W = np.random.randn(3, 3, 3, 2)\n    stride = 1\n    pad = 'same'\n    dilation = 0\n    result = conv2D(X, W, stride, pad, dilation)\n    print(result)\n```"}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    \n    # Step 2: Obtain principal directions\n    if solver == \"svd\":\n        U, S, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        eigenvectors = Vt.T\n        eigenvalues = S ** 2 / (data.shape[0] - 1)\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        eigenvectors = eigenvectors[:, ::-1]  # Reverse to descending order\n        eigenvalues = eigenvalues[::-1]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    \n    # Step 3: Sort and keep the first n_components\n    eigenvectors = eigenvectors[:, :n_components]\n    eigenvalues = eigenvalues[:n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = np.dot(centered_data, eigenvectors)\n    \n    # Step 6: Compute the explained variance ratio\n    total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = eigenvalues / total_variance\n    \n    # Round and convert to Python built-ins\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]])\n    n_components = 2\n    solver = \"svd\"\n    scores, explained_variance_ratio = pca_transform(data, n_components, solver)\n    print(\"Scores:\", scores)\n    print(\"Explained Variance Ratio:\", explained_variance_ratio)\n```\n\nThis script defines a function `pca_transform` that performs PCA using either SVD or eigen-decomposition, standardizes the data, sorts the principal components, fixes the sign ambiguity, projects the data, and returns the results in the specified format. The example usage at the end demonstrates how to call the function with sample data."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value directly\n        return leaf.value\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    import numpy\n\n    # Classification example\n    leaf_classification = Leaf([0.1, 0.7, 0.2])\n    print(\"Classification prediction:\", leaf_predict(leaf_classification, True))  # Expected: 1\n\n    # Regression example\n    leaf_regression = Leaf(3.5)\n    print(\"Regression prediction:\", leaf_predict(leaf_regression, False))  # Expected: 3.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    \n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis, :] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to four decimals\n    centroids = np.round(centroids, 4)\n    centroids = centroids[np.lexsort(centroids.T[::-1])]\n    \n    return centroids.tolist()\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis implementation of the K-Means clustering algorithm follows the steps outlined in the task description. It initializes the centroids with the first `K` samples, iteratively assigns each sample to the closest centroid, recomputes the centroids, and checks for convergence. Finally, it sorts the centroids lexicographically and rounds the coordinates to four decimal places before returning them."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array of floats\n    arr = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = arr.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by dividing by its sum\n    normalized_arr = arr / row_sums[:, np.newaxis]\n    \n    # Round the result to 4 decimal places\n    rounded_arr = np.round(normalized_arr, 4)\n    \n    # Convert the result back to a Python list of lists\n    return rounded_arr.tolist()\n\n# Example usage\ndata = [\n    [1, 2, 3],\n    [4, 0, 2],\n    [0, 0, 0]  # This row will cause the function to return -1\n]\n\nresult = row_stochastic_matrix(data)\nprint(result)  # Should print -1 because one of the rows sums to 0\n\ndata = [\n    [1, 2, 3],\n    [4, 0, 2],\n    [2, 2, 2]\n]\n\nresult = row_stochastic_matrix(data)\nprint(result)  # Should print the row-stochastic matrix\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def _is_all_boxes(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                sub_spaces = space.spaces\n            else:  # Dict\n                sub_spaces = space.spaces.values()\n            return all(_is_all_boxes(sub_space) for sub_space in sub_spaces)\n        return False\n\n    cont_action = _is_all_boxes(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = _is_all_boxes(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    \n    return cont_action, cont_obs\n\n# Example usage\nif __name__ == \"__main__\":\n    # Define some test spaces\n    box_space = Box(0, 1, (2,))\n    discrete_space = Discrete(3)\n    tuple_space = Tuple([box_space, box_space])\n    dict_space = Dict({\"a\": box_space, \"b\": discrete_space})\n\n    # Create environments\n    env1 = Env(box_space, box_space)\n    env2 = Env(tuple_space, tuple_space)\n    env3 = Env(dict_space, dict_space)\n    env4 = Env(discrete_space, discrete_space)\n\n    # Test the function\n    print(is_continuous(env1, False, False))  # (True, True)\n    print(is_continuous(env2, True, True))    # (True, True)\n    print(is_continuous(env3, True, True))    # (False, False)\n    print(is_continuous(env4, False, False))  # (False, False)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax and then argmax\n        probabilities = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example for regression\n    regression_updates = [np.array([1.0, 2.0, 3.0]), np.array([0.5, 1.0, 1.5])]\n    regression_result = gradient_boosting_predict(regression_updates, learning_rate=0.1, regression=True)\n    print(\"Regression Result:\", regression_result)\n\n    # Example for classification\n    classification_updates = [np.array([[1.0, 2.0], [3.0, 4.0]]), np.array([[0.5, 1.0], [1.5, 2.0]])]\n    classification_result = gradient_boosting_predict(classification_updates, learning_rate=0.1, regression=False)\n    print(\"Classification Result:\", classification_result)\n```\n\nThis script defines the `gradient_boosting_predict` function as required, handling both regression and classification tasks. It initializes the running prediction with zeros, aggregates the updates from each tree, and applies the appropriate post-processing steps depending on the task. The example usage demonstrates how to use the function for both regression and classification."}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    \n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        effective_kernel = (kernel_width - 1) * dilation + 1\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding value\")\n    \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Compute the output length\n    out_length = ((signal_length + p_left + p_right - (kernel_width - 1) * dilation - 1) // stride) + 1\n    \n    # Initialize the output array\n    output = np.zeros((n_examples, out_length, out_channels))\n    \n    # Perform the 1-D cross-correlation\n    for i in range(out_length):\n        start_index = i * stride\n        end_index = start_index + kernel_width\n        for o in range(out_channels):\n            for c in range(in_channels):\n                output[:, i, o] += np.sum(X_padded[:, start_index:end_index:dilation+1, c] * W[:, c, o], axis=1)\n    \n    return output.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]])  # (2, 3, 2)\n    W = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])  # (2, 2, 2)\n    stride = 1\n    pad = \"same\"\n    dilation = 1\n    \n    result = conv1D(X, W, stride, pad, dilation)\n    print(result)\n```\n\nThis script defines the `conv1D` function which performs a 1-D cross-correlation on a batch of multi-channel signals with support for padding, stride, and dilation. The function handles various padding types, including the \"same\" padding as defined in TensorFlow. The result is returned as a nested Python list using `ndarray.tolist()`."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to NumPy array for easier manipulation\n    y = np.array(y)\n    \n    # Calculate the number of occurrences of each unique class\n    _, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities of each class\n    probabilities = counts / len(y)\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    return round(gini_impurity, 4)\n\n# Example usage:\ny = [0, 0, 1, 1, 1, 2]\nprint(gini(y))  # Output: 0.5\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n    X (np.ndarray): Feature matrix of shape (m, n).\n    y (np.ndarray): Target vector of shape (m,).\n    learning_rate (float): Learning rate for gradient descent.\n    n_iterations (int): Number of iterations for gradient descent.\n\n    Returns:\n    tuple[list[float], float]: A tuple containing the learned weights and bias.\n    \"\"\"\n    # Check if the input data are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n\n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = X @ theta + b\n        \n        # Compute gradients\n        dw = (2 / m) * X.T @ (y_pred - y)\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Round the parameters to 4 decimal places\n    theta_rounded = [round(t, 4) for t in theta]\n    b_rounded = round(b, 4)\n\n    return (theta_rounded, b_rounded)\n```\n\nThis function implements batch gradient descent for multiple linear regression. It initializes the weight vector `theta` and the bias `b`, then iterates through the gradient descent updates for a specified number of iterations. The function returns the learned parameters rounded to four decimal places. If the input data are inconsistent (i.e., different number of samples in `X` and `y`), it returns `-1`."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array for easier manipulation\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose within the tolerance\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [2, 4, 5],\n    [3, 5, 6]\n]\n\nprint(is_symmetric(matrix))  # Output: True\n\nnon_square_matrix = [\n    [1, 2, 3],\n    [2, 4, 5]\n]\n\nprint(is_symmetric(non_square_matrix))  # Output: False\n\nasymmetric_matrix = [\n    [1, 2, 3],\n    [2, 4, 5],\n    [3, 6, 6]\n]\n\nprint(is_symmetric(asymmetric_matrix))  # Output: False\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculates the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): List of binary class labels (0 or 1).\n    f (list): List of current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients g rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = 2 * np.array(y) - 1\n    \n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * np.array(f)))\n    \n    # Round to four decimal places and convert to list\n    g_rounded = [round(grad, 4) for grad in g]\n    \n    return g_rounded\n\n# Example usage:\ny_example = [0, 1, 0, 1]\nf_example = [-1.0, 0.5, 0.0, 1.0]\nprint(logistic_negative_gradient(y_example, f_example))\n```\n\nThis script defines a function `logistic_negative_gradient` that computes the negative gradient of the logistic loss for binary classification. It checks if the input labels are valid (either 0 or 1), converts the labels to the set \\{-1, 1\\}, calculates the negative gradient, and rounds the results to four decimal places. If the input labels are invalid, it returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x, dtype=np.float64)\n    \n    if order == 0:\n        # Compute the SELU activation\n        result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # Compute the first derivative of SELU\n        result = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        # Compute the second derivative of SELU\n        result = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to a Python list\n    result = np.round(result, 4).tolist()\n    \n    # If the input was a scalar, return a scalar\n    if np.isscalar(x.item(0)):\n        return result[0] if isinstance(result, list) else result\n    return result\n\n# Example usage:\n# print(selu([1, 2, -3], order=0))  # SELU activation\n# print(selu([1, 2, -3], order=1))  # First derivative\n# print(selu([1, 2, -3], order=2))  # Second derivative\n```"}
{"task_id": 387, "completion_id": 0, "completion": "Certainly! Below is the implementation of the 1-D Gradient Boosting Regressor using decision stumps as described:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    \n    # Initialize the predictions with the mean of the target values\n    y_pred = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute the residuals (negative gradients of the squared error loss)\n        residuals = y - y_pred\n        \n        # Sort the samples by their x value\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        best_split = None\n        best_error = np.inf\n        \n        # Evaluate every possible split that lies halfway between two different consecutive x values\n        for i in range(1, n_samples):\n            if sorted_x[i] == sorted_x[i - 1]:\n                continue  # Skip if the x values are the same\n            \n            split = (sorted_x[i - 1] + sorted_x[i]) / 2\n            left_mask = x <= split\n            right_mask = ~left_mask\n            \n            if np.all(left_mask) or np.all(right_mask):\n                continue  # Skip if all points are on one side of the split\n            \n            left_mean = np.mean(residuals[left_mask])\n            right_mean = np.mean(residuals[right_mask])\n            \n            # Calculate the sum of squared errors for this split\n            error = np.sum((residuals[left_mask] - left_mean) ** 2) + np.sum((residuals[right_mask] - right_mean) ** 2)\n            \n            if error < best_error:\n                best_error = error\n                best_split = split\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If all feature values are identical, predict the global mean residual\n        if best_split is None:\n            global_mean_residual = np.mean(residuals)\n            y_pred += learning_rate * global_mean_residual\n        else:\n            # Update the predictions using the best split\n            for i in range(n_samples):\n                if x[i] <= best_split:\n                    y_pred[i] += learning_rate * best_left_mean\n                else:\n                    y_pred[i] += learning_rate * best_right_mean\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [3.0, 5.0, 7.0, 9.0, 11.0]\nn_estimators = 10\nlearning_rate = 0.1\n\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\nprint(predictions)\n```\n\n### Explanation:\n1. **Initialization**: The initial predictions are set to the mean of the target values.\n2. **Boosting Rounds**:\n   - **Residuals Calculation**: Compute the residuals (negative gradients) for the current predictions.\n   - **Split Evaluation**: Sort the samples by their feature values and evaluate every possible split point. For each split, calculate the mean residuals on both sides and the sum of squared errors.\n   - **Best Split Selection**: Choose the split that minimizes the sum of squared errors.\n   - **Update Predictions**: Update the predictions using the chosen split and the learning rate.\n3. **Final Predictions**: Return the final predictions rounded to 4 decimal places.\n\nThis implementation ensures that the model is trained using decision stumps and updates the predictions iteratively based on the residuals."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8  # Small constant for numerical stability\n    \n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg = rho * Eg + (1 - rho) * (grad ** 2)\n    \n    # Update the parameters\n    w = w - (learning_rate * grad) / (np.sqrt(Eg) + epsilon)\n    \n    # Convert to lists and round to 4 decimal places\n    w_list = np.round(w, 4).tolist()\n    Eg_list = np.round(Eg, 4).tolist()\n    \n    return w_list, Eg_list\n```\n\nThis function implements the RMSprop update step as described in the task. It initializes the running average `Eg` if it is `None`, updates the running average, and then updates the parameters. The results are rounded to 4 decimal places and converted to Python lists before being returned."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if not derivative:\n        # Compute ELU activation\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute derivative of ELU\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_values + alpha)\n    \n    # Round results to 4 decimal places and convert back to list\n    return [round(val, 4) for val in result]\n\n# Example usage:\nx = [-2, -1, 0, 1, 2]\nalpha = 0.1\n\nprint(\"ELU Activation:\", elu(x, alpha))\nprint(\"ELU Gradient:\", elu(x, alpha, derivative=True))\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def is_iterable(obj):\n        try:\n            iter(obj)\n            return True\n        except TypeError:\n            return False\n    \n    def flatten(l):\n        return [item for sublist in l for item in (flatten(sublist) if is_iterable(sublist) else [sublist])]\n    \n    def is_continuous(values):\n        return any(not isinstance(x, int) for x in values)\n    \n    def get_unique_values(values):\n        return np.unique(values).tolist()\n    \n    def get_stats(data, prefix):\n        is_tuple = any(is_iterable(item) for item in data)\n        multidim = is_tuple and all(len(item) > 1 for item in data if is_iterable(item))\n        \n        if is_tuple:\n            data_flattened = [flatten(item) for item in data]\n            n_per_dim = [len(get_unique_values([d[i] for d in data_flattened])) for i in range(len(data[0]))]\n            ids_per_dim = [get_unique_values([d[i] for d in data_flattened]) for i in range(len(data[0]))]\n            dim = len(data[0])\n        else:\n            n_per_dim = [len(get_unique_values(data))]\n            ids_per_dim = [get_unique_values(data)]\n            dim = 1\n        \n        continuous = is_continuous(flatten(data))\n        \n        return {\n            f'{prefix}_tuple': is_tuple,\n            f'{prefix}_multidim': multidim,\n            f'{prefix}_continuous': continuous,\n            f'n_{prefix}_per_dim': n_per_dim,\n            f'{prefix}_dim': dim,\n            f'{prefix}_ids': ids_per_dim\n        }\n    \n    action_stats = get_stats(actions, 'actions')\n    obs_stats = get_stats(observations, 'observations')\n    \n    return {**action_stats, **obs_stats}\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\n\nresult = env_stats(actions, observations)\nprint(result)\n```\n\nThis script defines the `env_stats` function as required. It uses helper functions to determine if the data is iterable, to flatten nested iterables, to check for continuous values, and to get unique values. The main function then computes the required statistics for both actions and observations and returns them in a dictionary. The example usage demonstrates how to call the function and print the result."}
{"task_id": 413, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script implementing a simplified Gradient Boosting Decision Tree (GBDT) regressor:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    class Node:\n        def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        m, n = X.shape\n        best_mse = float('inf')\n        best_feature, best_threshold = None, None\n\n        for feature in range(n):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] <= threshold\n                right_indices = X[:, feature] > threshold\n                if sum(left_indices) == 0 or sum(right_indices) == 0:\n                    continue\n                y_left, y_right = y[left_indices], y[right_indices]\n                current_mse = (mse(y_left, np.mean(y_left)) * len(y_left) + mse(y_right, np.mean(y_right)) * len(y_right)) / m\n                if current_mse < best_mse:\n                    best_mse = current_mse\n                    best_feature, best_threshold = feature, threshold\n\n        return best_feature, best_threshold\n\n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or mse(y, np.mean(y)) == 0:\n            return Node(value=np.mean(y))\n\n        feature, threshold = best_split(X, y)\n        left_indices = X[:, feature] <= threshold\n        right_indices = X[:, feature] > threshold\n\n        left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1)\n\n        return Node(feature, threshold, left_subtree, right_subtree)\n\n    def predict_one(tree, x):\n        if tree.value is not None:\n            return tree.value\n\n        if x[tree.feature] <= tree.threshold:\n            return predict_one(tree.left, x)\n        else:\n            return predict_one(tree.right, x)\n\n    def predict(tree, X):\n        return np.array([predict_one(tree, x) for x in X])\n\n    # Initial prediction\n    y_pred = np.full(X_train.shape[0], np.mean(y_train))\n    trees = []\n\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        updates = predict(tree, X_train) * learning_rate\n        y_pred += updates\n\n    final_predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for tree in trees:\n        updates = predict(tree, X_test) * learning_rate\n        final_predictions += updates\n\n    return [round(pred, 4) for pred in final_predictions]\n\n# Example usage:\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_train = np.array([1, 2, 3, 4])\n    X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n\n    predictions = gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=3)\n    print(predictions)\n```\n\nThis script defines a `Node` class for the decision tree nodes, functions to calculate mean squared error (MSE), find the best split, build the tree, and make predictions. The `gbdt_regression` function implements the gradient boosting algorithm, starting with an initial prediction and iteratively fitting trees to the residuals. The final predictions are rounded to 4 decimal places and returned as a Python list."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    - X: A NumPy array of shape (n_samples, n_features) containing the data points.\n    - mean: The mean vector of the distribution (length n_features).\n    - cov: The covariance matrix of shape (n_features, n_features).\n    \n    Returns:\n    - A Python list where the i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n    # Ensure X is at least 2D\n    if len(X.shape) == 1:\n        X = X[:, np.newaxis]\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n    \n    # Calculate the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n    \n    # Calculate the normalization factor\n    norm_factor = 1 / (math.pow((2 * math.pi), n_features / 2) * math.sqrt(det_cov))\n    \n    # Initialize the list to store the PDF values\n    pdf_values = []\n    \n    # Compute the PDF for each data point\n    for x in X:\n        # Compute the exponent term\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        \n        # Compute the PDF value\n        pdf_value = norm_factor * math.exp(exponent)\n        \n        # Append the PDF value to the list, rounded to 4 decimal places\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    mean = np.array([0, 0])\n    cov = np.array([[1, 0.5], [0.5, 1]])\n    \n    pdf_values = multivariate_gaussian_pdf(X, mean, cov)\n    print(pdf_values)\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that computes the PDF values for a given set of data points `X` based on the provided mean vector and covariance matrix. The function handles both 1D and 2D input arrays and returns a list of PDF values rounded to four decimal places. The example usage at the bottom demonstrates how to call the function with sample data."}
{"task_id": 419, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Bayesian linear regression with a conjugate Gaussian prior and known observation variance, following the specified requirements:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept if required\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    \n    # Handle different types of V\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Ensure mu is a vector of the correct length\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Round to 4 decimal places and convert to list\n    y_pred_rounded = [round(val, 4) for val in y_pred]\n    \n    return y_pred_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data\n    X = np.array([[1, 2], [2, 3], [3, 4]])\n    y = np.array([2, 3, 4])\n    X_new = np.array([[1, 2], [2, 3]])\n    \n    # Call the function\n    predictions = bayesian_linear_regression_pred(X, y, X_new, mu=0.0, sigma=1.0, V=1.0, fit_intercept=True)\n    \n    print(predictions)  # Output: [2.0, 3.0]\n```\n\n### Explanation:\n1. **Intercept Handling**: If `fit_intercept` is `True`, an intercept column of ones is added to both `X` and `X_new`.\n2. **Prior Covariance Matrix `V`**: The function handles `V` being a scalar, a 1-D array, or a full matrix. If `V` is `None`, it defaults to the identity matrix.\n3. **Prior Mean `mu`**: If `mu` is a scalar, it is replicated to match the dimensions of `X`.\n4. **Posterior Distribution**: The posterior mean `\u03bc\u209a` and covariance `\u03a3\u209a` are computed using the given formulas.\n5. **Predictive Mean**: The MAP predictive mean for `X_new` is computed and rounded to 4 decimal places before being returned as a Python list.\n\nThis implementation ensures that all the requirements are met and provides a clear and concise solution to the task."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Computes the Root Mean Squared Logarithmic Error (RMSLE) between two lists of values.\"\"\"\n    \n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate non-negative values\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Compute the logarithmic differences\n    log_diffs = [np.log1p(p) - np.log1p(a) for p, a in zip(predicted, actual)]\n    \n    # Compute the mean squared logarithmic error\n    msle = np.mean([diff ** 2 for diff in log_diffs])\n    \n    # Compute the root mean squared logarithmic error\n    rmsle = np.sqrt(msle)\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\nactual = [1, 2, 3, 4, 5]\npredicted = [1, 2.5, 3, 4.5, 5]\nprint(root_mean_squared_log_error(actual, predicted))  # Expected output: 0.0675\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    # Adjust window length for periodic window\n    if not symmetric:\n        window_len += 1\n    \n    # Generate the Hann window\n    n = np.arange(window_len)\n    hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    \n    # Round to 4 decimal places\n    hann_window = np.round(hann_window, 4)\n    \n    # Remove the last element for periodic window\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    \n    return hann_window.tolist()\n\n# Example usage\nprint(hann(5))  # Symmetric window\nprint(hann(5, symmetric=True))  # Periodic window\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # 2D Convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # Other tensors\n        fan_in = shape[0]\n        fan_out = shape[1]\n\n    return float(fan_in), float(fan_out)\n\n# Example usage:\nshape_4d = (64, 3, 3, 3)  # Example shape for a 2D convolutional kernel\nshape_2d = (100, 50)      # Example shape for a dense layer\n\nprint(glorot_fan(shape_4d))  # Expected output: (27.0, 576.0)\nprint(glorot_fan(shape_2d))  # Expected output: (100.0, 50.0)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]], \n                                y: list[float], \n                                n_estimators: int = 10, \n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special case: if n_estimators <= 0 or learning_rate == 0, return mean of y\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_hat = np.full_like(y, fill_value=np.mean(y))\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_hat\n        \n        # Fit an OLS linear model to predict the residuals from X\n        coefficients = np.linalg.lstsq(X, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X @ coefficients\n        \n        # Update the overall prediction\n        y_hat += learning_rate * h_t\n    \n    # Round the final predictions to 4 decimal places and convert to a list\n    return [round(pred, 4) for pred in y_hat]\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4]]\ny = [1, 2, 3]\npredictions = gradient_boosting_regressor(X, y, n_estimators=5, learning_rate=0.1)\nprint(predictions)\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to NumPy array if it's not already\n    if isinstance(x, (int, float)):\n        is_scalar = True\n        x = np.array([x])\n    else:\n        is_scalar = False\n        x = np.array(x)\n    \n    # Compute the sigmoid function\n    sig = 1 / (1 + np.exp(-x))\n    \n    # Compute the requested derivative\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result_rounded[0])\n    else:\n        return result_rounded.tolist()\n\n# Example usage:\n# print(sigmoid(0, order=0))  # Should return 0.5\n# print(sigmoid([1, 2, 3], order=1))  # Should return [0.1966, 0.1049, 0.0452]\n# print(sigmoid(np.array([-1, 0, 1]), order=2))  # Should return [-0.2082, 0.0, 0.2082]\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    max_label = np.max(y)\n    \n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    \n    # Create an empty matrix with shape (len(y), num_classes)\n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    \n    # Populate the one-hot encoded matrix\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    \n    # Convert the NumPy array to a list of lists\n    return one_hot_matrix.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    y = [0, 1, 2, 1, 0]\n    print(to_categorical(y))  # Expected output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n\n    y = [0, 1, 2, 3]\n    print(to_categorical(y, num_classes=5))  # Expected output: [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]]\n\n    y = [0, 1, 2, 3]\n    print(to_categorical(y, num_classes=3))  # Expected output: -1\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    \n    def has_frequent_subset(candidate, frequent_itemsets):\n        \"\"\"Check if the candidate has all subsets as frequent.\"\"\"\n        for subset in itertools.combinations(candidate, len(candidate) - 1):\n            if subset not in frequent_itemsets[len(subset)]:\n                return False\n        return True\n\n    def generate_candidates(frequent_itemsets, k):\n        \"\"\"Generate candidate itemsets of size k from frequent itemsets of size k-1.\"\"\"\n        candidates = set()\n        for i in range(len(frequent_itemsets[k - 1])):\n            for j in range(i + 1, len(frequent_itemsets[k - 1])):\n                a = frequent_itemsets[k - 1][i]\n                b = frequent_itemsets[k - 1][j]\n                if a[:-1] == b[:-1]:\n                    candidate = tuple(sorted(a + b[-1:]))\n                    if has_frequent_subset(candidate, frequent_itemsets):\n                        candidates.add(candidate)\n        return candidates\n\n    def count_support(candidates, transactions):\n        \"\"\"Count the support of candidate itemsets in the transactions.\"\"\"\n        support_count = {candidate: 0 for candidate in candidates}\n        for transaction in transactions:\n            for candidate in candidates:\n                if set(candidate).issubset(set(transaction)):\n                    support_count[candidate] += 1\n        return support_count\n\n    def filter_frequent_itemsets(candidates, support_count, min_sup, num_transactions):\n        \"\"\"Filter out infrequent itemsets based on the support threshold.\"\"\"\n        frequent_itemsets = {}\n        for candidate, count in support_count.items():\n            if count / num_transactions >= min_sup:\n                frequent_itemsets[candidate] = count\n        return frequent_itemsets\n\n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {1: {}}\n    num_transactions = len(transactions)\n\n    # Generate frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    for item, count in item_counts.items():\n        if count / num_transactions >= min_sup:\n            frequent_itemsets[1][(item,)] = count\n\n    k = 2\n    while frequent_itemsets[k - 1]:\n        candidates = generate_candidates(frequent_itemsets, k)\n        support_count = count_support(candidates, transactions)\n        frequent_itemsets[k] = filter_frequent_itemsets(candidates, support_count, min_sup, num_transactions)\n        k += 1\n\n    # Collect all frequent itemsets\n    result = []\n    for k in range(1, len(frequent_itemsets)):\n        for itemset in frequent_itemsets[k]:\n            result.append(itemset)\n\n    # Sort the result\n    result.sort(key=lambda x: (len(x), x))\n\n    return result\n\n# Example usage:\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'cola'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'cola']\n]\n\nmin_sup = 0.4\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find frequent itemsets in a given list of transactions. The function `apriori_frequent_itemsets` takes a list of transactions and a minimum support threshold, and returns all frequent itemsets in the specified format. The example usage demonstrates how to call the function and print the frequent itemsets."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Calculate the average probabilities across all estimators for each sample\n    avg_probabilities = predictions_array.mean(axis=0)\n    \n    # Round the probabilities to 4 decimal places\n    rounded_probabilities = np.round(avg_probabilities, 4).tolist()\n    \n    # Get the predicted class labels by finding the index of the maximum probability for each sample\n    predicted_classes = np.argmax(avg_probabilities, axis=1).tolist()\n    \n    return rounded_probabilities, predicted_classes\n\n# Example usage:\npredictions = [\n    [[0.1, 0.9], [0.8, 0.2]],\n    [[0.2, 0.8], [0.7, 0.3]],\n    [[0.15, 0.85], [0.65, 0.35]]\n]\n\naveraged_probabilities, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged Probabilities:\", averaged_probabilities)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\nThis function takes a three-level nested list of probabilities from multiple estimators, averages them, rounds the results to four decimal places, and returns both the averaged probabilities and the predicted class indices. The example usage demonstrates how to call the function and print the results."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    \n    # Convert lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Validate and set sigma\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = [sigma] * X.shape[1]\n    elif isinstance(sigma, list):\n        if len(sigma) != X.shape[1] or any(s <= 0 for s in sigma):\n            return -1\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    K = []\n    for x in X:\n        row = []\n        for y in Y:\n            # Compute the exponent term\n            exponent = -0.5 * np.sum(((x - y) / sigma) ** 2)\n            # Compute the kernel value\n            k_value = np.exp(exponent)\n            row.append(round(k_value, 4))\n        K.append(row)\n    \n    return K\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\n\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function that computes the Radial Basis Function (RBF) kernel matrix for the given inputs. It includes validation checks for the inputs and returns the kernel matrix as a nested list rounded to four decimal places. If the inputs are invalid, it returns `-1`."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of the labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / float(len(labels))\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n    \n    # Initialize variables to store the best split\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_feature_values = X[sorted_indices, j]\n        sorted_labels = y[sorted_indices]\n        \n        # Consider midpoints between successive distinct sorted values as thresholds\n        for i in range(1, n_samples):\n            if sorted_feature_values[i] != sorted_feature_values[i - 1]:\n                threshold = (sorted_feature_values[i - 1] + sorted_feature_values[i]) / 2\n                \n                # Split the data based on the threshold\n                left_labels = sorted_labels[:i]\n                right_labels = sorted_labels[i:]\n                \n                # Calculate the entropy of the left and right children\n                left_entropy = entropy(left_labels)\n                right_entropy = entropy(right_labels)\n                \n                # Calculate the proportions of samples going to each child\n                p_left = len(left_labels) / n_samples\n                p_right = len(right_labels) / n_samples\n                \n                # Calculate the information gain\n                gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n                \n                # Update the best split if the current gain is better\n                if gain > best_gain or (gain == best_gain and j < best_feature_index) or (gain == best_gain and j == best_feature_index and threshold < best_threshold):\n                    best_gain = gain\n                    best_feature_index = j\n                    best_threshold = round(threshold, 4)\n                    left_majority_label = np.bincount(left_labels).argmax()\n                    right_majority_label = np.bincount(right_labels).argmax()\n    \n    # If no split can improve information gain\n    if best_gain <= 0:\n        majority_label = np.bincount(y).argmax()\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage\nX = [[1, 2], [3, 4], [5, 6], [7, 8]]\ny = [0, 0, 1, 1]\nprint(decision_stump(X, y))\n```\n\n### Explanation:\n1. **Entropy Calculation**: The `entropy` function calculates the Shannon entropy of a set of labels.\n2. **Initialization**: Variables to store the best split are initialized.\n3. **Feature Iteration**: For each feature, the feature values and corresponding labels are sorted.\n4. **Threshold Calculation**: Midpoints between successive distinct sorted values are considered as thresholds.\n5. **Split Evaluation**: For each threshold, the data is split into left and right children, and the entropy of each child is calculated.\n6. **Information Gain**: The information gain is calculated using the formula provided.\n7. **Best Split Update**: The best split is updated if the current gain is better or if there is a tie but the current split is preferred according to the tie-breaking rules.\n8. **No Improvement**: If no split can improve the information gain, the function returns the majority label for both children.\n9. **Return**: The function returns the best split or the majority label if no split improves the information gain."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset_1 = []\n    subset_2 = []\n\n    # Determine the splitting condition based on the type of threshold\n    if isinstance(threshold, (int, float)):\n        # Numeric threshold\n        for sample in X:\n            if sample[feature_i] >= threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n    else:\n        # Categorical threshold\n        for sample in X:\n            if sample[feature_i] == threshold:\n                subset_1.append(sample)\n            else:\n                subset_2.append(sample)\n\n    # Convert the subsets back to lists\n    subset_1 = [list(item) for item in subset_1]\n    subset_2 = [list(item) for item in subset_2]\n\n    return [subset_1, subset_2]\n\n# Example usage:\n# Numeric split\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n# Output: [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\n# Categorical split\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n# Output: [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are valid\n    if not (0 <= gamma <= 1):\n        return -1\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n    \n    # Initialize the output list\n    y = []\n    \n    # Iterate over each sample in the batch\n    for i in range(len(Q)):\n        # Calculate the target value\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        # Copy the original Q-values\n        q_update = Q[i].copy()\n        \n        # Update the Q-value for the action taken\n        q_update[actions[i]] = target\n        \n        # Append the updated Q-values to the output list\n        y.append([round(q, 4) for q in q_update])\n    \n    return y\n\n# Example usage:\n# Q = np.array([[0.5, 0.2, 0.3], [0.1, 0.4, 0.9]])\n# Q_next = np.array([[0.7, 0.6, 0.8], [0.2, 0.5, 0.3]])\n# actions = [0, 2]\n# rewards = [1.0, 0.5]\n# dones = [False, True]\n# gamma = 0.9\n# print(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis function `update_q_values` takes the necessary inputs for updating the Q-values in a Deep Q-Network and returns the updated Q-values as a nested list. The function checks for valid input parameters and ensures that the output is rounded to four decimal places."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a NumPy array for easier manipulation\n    labels_array = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels_array < 0):\n        return -1\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = max(labels_array) + 1\n    else:\n        # Check if num_classes is smaller than max(labels) + 1\n        if num_classes < max(labels_array) + 1:\n            return -1\n    \n    # Create the one-hot encoded matrix\n    one_hot_matrix = np.zeros((len(labels_array), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels_array)), labels_array] = 1\n    \n    # Convert the matrix to a list of lists\n    one_hot_list = one_hot_matrix.tolist()\n    \n    return one_hot_list\n\n# Example usage:\nlabels = [0, 1, 2, 3]\nnum_classes = 5\nprint(to_categorical(labels, num_classes))\n```\n\nThis script defines the `to_categorical` function as specified in the task description. It handles the conversion of integer labels to a one-hot encoded format, ensuring that the output is a list of lists of integers. The function also includes checks for negative labels and insufficient `num_classes`."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the targets\n    current_prediction = np.mean(y)\n    predictions = np.full_like(y, current_prediction)\n    \n    # Early exit if n_estimators is non-positive\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - predictions\n        \n        # Check if all residuals are zero\n        if np.allclose(residuals, 0):\n            break\n        \n        # Find the best split\n        unique_x = np.unique(x)\n        if len(unique_x) == 1:\n            # No valid split if all x are identical\n            best_split = unique_x[0]\n            left_residual_mean = np.mean(residuals)\n            right_residual_mean = np.mean(residuals)\n        else:\n            best_sse = np.inf\n            best_split = None\n            left_residual_mean = None\n            right_residual_mean = None\n            \n            for t in unique_x[:-1]:  # Exclude the greatest value\n                left_mask = x <= t\n                right_mask = x > t\n                \n                if not (np.any(left_mask) and np.any(right_mask)):\n                    continue\n                \n                left_residual_mean = np.mean(residuals[left_mask])\n                right_residual_mean = np.mean(residuals[right_mask])\n                \n                sse = np.sum((residuals[left_mask] - left_residual_mean) ** 2) + \\\n                      np.sum((residuals[right_mask] - right_residual_mean) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_left_residual_mean = left_residual_mean\n                    best_right_residual_mean = right_residual_mean\n        \n        # Update predictions using the best split\n        predictions += learning_rate * np.where(x <= best_split, best_left_residual_mean, best_right_residual_mean)\n    \n    return np.round(predictions, 4).tolist()\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Compute the expected value of the next state\n        max_q_next = max(q_table[next_state])\n        expected_value = 0.0\n        for a in range(num_actions):\n            if q_table[next_state][a] == max_q_next:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += (epsilon / num_actions) * q_table[next_state][a]\n    else:\n        expected_value = 0.0\n    \n    # Compute the target\n    target = reward + gamma * expected_value\n    \n    # Update the Q-value for the current state-action pair\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(value, 4) for value in row] for row in q_table]\n    \n    return q_table\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n\n    def generate_class_samples(n, i, interval):\n        x = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, n)\n        y = np.random.uniform(((i % 2) * interval + 0.1) * 10, ((i % 2) * interval + 0.9) * 10, n)\n        label = (i - 0.5) * 2\n        return np.vstack((x, y)).T, np.full(n, label)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        X_train_i, Y_train_i = generate_class_samples(n_train, i, interval)\n        X_val_i, Y_val_i = generate_class_samples(n_val, i, interval)\n\n        X_train.append(X_train_i)\n        Y_train.append(Y_train_i)\n        X_val.append(X_val_i)\n        Y_val.append(Y_val_i)\n\n    X_train = np.vstack(X_train)\n    Y_train = np.hstack(Y_train)\n    X_val = np.vstack(X_val)\n    Y_val = np.hstack(Y_val)\n\n    # Round to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1\nseed = 42\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\n\nprint(\"X_train shape:\", X_train.shape)\nprint(\"Y_train shape:\", Y_train.shape)\nprint(\"X_val shape:\", X_val.shape)\nprint(\"Y_val shape:\", Y_val.shape)\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize moments if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first moment (mean of gradients)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    \n    # Update the second moment (uncentered variance of gradients)\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Bias correction\n    m_hat_t = m_t / (1 - b1 ** t)\n    v_hat_t = v_t / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example usage\nif __name__ == \"__main__\":\n    w_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\n    print(f\"Updated w: {round(w_new, 9)}\")\n    print(f\"Updated m: {m_new}\")\n    print(f\"Updated v: {v_new}\")\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. The function handles both scalar and NumPy array inputs and ensures that the moments are initialized correctly if they are not provided. The example usage demonstrates how to call the function and print the updated parameters and moments."}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n    \n    # Initialize estimates and pull counters\n    estimates = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n    \n    for t in range(num_steps):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            # Exploit: choose the best arm based on current estimates\n            chosen_arm = np.argmax(estimates)\n        \n        # Get the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Increment the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Return the estimates rounded to 4 decimal places\n    return [round(e, 4) for e in estimates]\n\n# Example usage:\nrewards = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n    [1, 0, 0],\n    [0, 1, 0]\n]\n\nepsilon = 0.1\nev_prior = 0.5\nseed = 42\n\nfinal_estimates = epsilon_greedy_bandit(rewards, epsilon, ev_prior, seed)\nprint(final_estimates)\n```\n\nThis script defines the `epsilon_greedy_bandit` function which simulates the \u03b5-greedy strategy on a stationary multi-armed bandit problem. It initializes the estimates and pull counts for each arm, then iterates through each time-step to select an arm based on the \u03b5-greedy policy, update the estimates, and finally return the estimates rounded to 4 decimal places. The example usage demonstrates how to call the function and print the final estimates."}
{"task_id": 481, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the DBSCAN clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n\n    n_samples = data.shape[0]\n    visited = np.zeros(n_samples, dtype=bool)\n    labels = np.full(n_samples, -1, dtype=int)\n    cluster_id = 0\n\n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n\n    def get_neighbors(idx):\n        neighbors = []\n        for i in range(n_samples):\n            if euclidean_distance(data[idx], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(idx, neighbors):\n        nonlocal cluster_id\n        labels[idx] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_idx = neighbors[i]\n            if not visited[neighbor_idx]:\n                visited[neighbor_idx] = True\n                neighbor_neighbors = get_neighbors(neighbor_idx)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors.extend(neighbor_neighbors)\n            if labels[neighbor_idx] == -1:\n                labels[neighbor_idx] = cluster_id\n            i += 1\n\n    for idx in range(n_samples):\n        if visited[idx]:\n            continue\n        visited[idx] = True\n        neighbors = get_neighbors(idx)\n        if len(neighbors) < min_samples:\n            labels[idx] = -1\n        else:\n            expand_cluster(idx, neighbors)\n            cluster_id += 1\n\n    return labels.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([\n        [1.0, 2.0],\n        [1.5, 1.8],\n        [5.0, 8.0],\n        [8.0, 8.0],\n        [1.0, 0.6],\n        [9.0, 11.0],\n        [8.0, 2.0],\n        [10.0, 2.0],\n        [9.0, 3.0]\n    ])\n    eps = 2.0\n    min_samples = 2\n    labels = dbscan(data, eps, min_samples)\n    print(\"Cluster labels:\", labels)\n```\n\n### Explanation:\n1. **Distance Calculation**: The `euclidean_distance` function calculates the Euclidean distance between two points.\n2. **Neighbor Retrieval**: The `get_neighbors` function finds all points within the `eps` distance from a given point.\n3. **Cluster Expansion**: The `expand_cluster` function expands a cluster by adding all reachable points to the current cluster and recursively expanding further.\n4. **Main Loop**: The main loop iterates over each point, checks if it has been visited, and either marks it as noise or starts a new cluster if it is a core point.\n\nThis implementation ensures that the clustering follows the rules specified for DBSCAN, including labeling noise points as `-1` and assigning cluster IDs starting from `0` in the order of discovery."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if np.any(y < 0) or np.any(y >= num_classes):\n            raise ValueError(\"All labels must be non-negative and less than num_classes.\")\n    \n    # Create an empty array of zeros with shape (len(y), num_classes)\n    categorical = np.zeros((y.shape[0], num_classes), dtype=int)\n    \n    # Use advanced indexing to set the appropriate elements to 1\n    categorical[np.arange(y.shape[0]), y] = 1\n    \n    return categorical\n\n# Example usage:\nlabels = [0, 1, 2, 3]\nencoded_labels = to_categorical(labels, num_classes=5)\nprint(encoded_labels)\n```\n\nThis script defines the `to_categorical` function, which converts a list of integer labels into a one-hot encoded 2D NumPy array. The function handles the automatic inference of the number of classes when `num_classes` is `None` and raises a `ValueError` if any label is invalid given the specified `num_classes`."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    class Node:\n        def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n        def is_leaf_node(self):\n            return self.value is not None\n\n    def sse(y):\n        \"\"\"Compute the sum of squared errors.\"\"\"\n        if len(y) == 0:\n            return 0\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n\n    def best_split(X, y):\n        \"\"\"Find the best split point that minimizes the SSE.\"\"\"\n        m = len(y)\n        best_sse = float('inf')\n        best_feature = None\n        best_threshold = None\n\n        # Sort the data by feature values\n        sorted_indices = np.argsort(X)\n        sorted_X = np.array(X)[sorted_indices]\n        sorted_y = np.array(y)[sorted_indices]\n\n        for i in range(1, m):\n            # Calculate the SSE for the split\n            left_y = sorted_y[:i]\n            right_y = sorted_y[i:]\n            sse_val = sse(left_y) + sse(right_y)\n\n            if sse_val < best_sse:\n                best_sse = sse_val\n                best_feature = sorted_X[i - 1]\n                best_threshold = (sorted_X[i - 1] + sorted_X[i]) / 2\n\n        return best_feature, best_threshold\n\n    def build_tree(X, y, depth=0):\n        \"\"\"Recursively build the decision tree.\"\"\"\n        n_samples = len(y)\n\n        # Stopping criteria\n        if depth >= max_depth or n_samples < 2:\n            return Node(value=np.mean(y))\n\n        # Find the best split\n        feature, threshold = best_split(X, y)\n\n        # Create child nodes\n        left_indices = X <= threshold\n        right_indices = X > threshold\n\n        left_child = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_child = build_tree(X[right_indices], y[right_indices], depth + 1)\n\n        return Node(feature=feature, threshold=threshold, left=left_child, right=right_child)\n\n    def predict(x, node):\n        \"\"\"Traverse the tree to make a prediction.\"\"\"\n        if node.is_leaf_node():\n            return node.value\n\n        if x <= node.threshold:\n            return predict(x, node.left)\n        else:\n            return predict(x, node.right)\n\n    # Handle empty training set\n    if len(X_train) == 0:\n        return []\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n\n    # Build the tree\n    root = build_tree(X_train, y_train)\n\n    # Make predictions\n    predictions = [predict(x, root) for x in X_test]\n\n    return predictions\n```\n\nThis script defines a function `regression_tree_predict` that builds a univariate regression tree and uses it to make predictions. The tree is built using a recursive greedy splitting approach, and the predictions are made by traversing the tree. The function handles the case where the training set is empty by returning an empty list."}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    \n    # Convert input to a NumPy array if it's not already one\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using NumPy\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage\nvector = [1, 2, 3]\ndiagonal_matrix = make_diagonal(vector)\nprint(diagonal_matrix)  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```"}
{"task_id": 491, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the FP-Growth algorithm in Python:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def construct_fptree(transactions, min_sup):\n        # Count the frequency of each item\n        item_counts = Counter(item for transaction in transactions for item in transaction)\n        # Filter out items that don't meet the minimum support\n        frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n        \n        # Sort items by frequency in descending order\n        sorted_items = sorted(frequent_items, key=frequent_items.get, reverse=True)\n        \n        # Initialize the FP-tree and header table\n        root = TreeNode(None)\n        header_table = {item: [] for item in sorted_items}\n        \n        # Construct the FP-tree\n        for transaction in transactions:\n            # Filter and sort the transaction by frequent items\n            filtered_transaction = [item for item in transaction if item in frequent_items]\n            if filtered_transaction:\n                sorted_transaction = sorted(filtered_transaction, key=lambda x: sorted_items.index(x))\n                update_tree(sorted_transaction, root, header_table)\n        \n        return root, header_table\n\n    def update_tree(transaction, node, header_table):\n        for item in transaction:\n            child = node.get_child(item)\n            if child:\n                child.count += 1\n            else:\n                new_node = TreeNode(item, parent=node)\n                node.children.append(new_node)\n                header_table[item].append(new_node)\n            node = new_node\n\n    class TreeNode:\n        def __init__(self, item, count=1, parent=None):\n            self.item = item\n            self.count = count\n            self.children = []\n            self.parent = parent\n\n        def get_child(self, item):\n            for child in self.children:\n                if child.item == item:\n                    return child\n            return None\n\n        def get_prefix_path(self):\n            path = []\n            node = self\n            while node.parent:\n                path.append(node)\n                node = node.parent\n            path.reverse()\n            return path\n\n    def find_frequent_itemsets(header_table, prefix, min_sup, frequent_itemsets):\n        for base_item in sorted(header_table, key=lambda x: len(header_table[x])):\n            new_frequent_set = prefix + [base_item]\n            if len(new_frequent_set) > 1:\n                frequent_itemsets.append(tuple(new_frequent_set))\n            \n            # Generate conditional pattern base\n            conditional_patterns = []\n            for node in header_table[base_item]:\n                path = node.get_prefix_path()\n                if len(path) > 1:\n                    conditional_patterns.extend([tuple(p.item for p in path[:-1])] * node.count)\n            \n            # Construct conditional FP-tree\n            if conditional_patterns:\n                conditional_tree, conditional_header_table = construct_fptree(conditional_patterns, min_sup)\n                find_frequent_itemsets(conditional_header_table, new_frequent_set, min_sup, frequent_itemsets)\n\n    # Main function logic\n    root, header_table = construct_fptree(transactions, min_sup)\n    frequent_itemsets = []\n    find_frequent_itemsets(header_table, [], min_sup, frequent_itemsets)\n    \n    # Sort the results\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\n\nresult = fp_growth(transactions, min_sup)\nprint(result)\n```\n\n### Explanation:\n1. **FP-tree Construction**:\n   - We first count the frequency of each item in the transactions.\n   - We filter out items that do not meet the minimum support (`min_sup`).\n   - We sort the items by their frequency in descending order.\n   - We initialize the FP-tree and header table.\n   - For each transaction, we filter and sort the items, then insert them into the FP-tree.\n\n2. **Recursive Mining**:\n   - We use a helper function `find_frequent_itemsets` to recursively mine the frequent item-sets.\n   - For each frequent item in the header table, we generate a conditional pattern base.\n   - We construct a conditional FP-tree from the conditional patterns.\n   - We recursively call `find_frequent_itemsets` on the conditional FP-tree.\n   - We collect and sort the frequent item-sets.\n\n3. **Output**:\n   - The final list of frequent item-sets is sorted first by length and then lexicographically.\n\nThis implementation should work correctly for the given example and any other valid input."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    n_samples, n_features = len(X), len(X[0])\n    \n    # Generate all possible combinations of feature indices\n    feature_indices = list(range(n_features))\n    all_combinations = []\n    \n    # For each degree from 0 to `degree`, generate the combinations\n    for d in range(degree + 1):\n        all_combinations.extend(combinations_with_replacement(feature_indices, d))\n    \n    # Initialize the result matrix with ones for the constant term\n    result = [[1] for _ in range(n_samples)]\n    \n    # Compute the polynomial features\n    for combination in all_combinations:\n        for i in range(n_samples):\n            product = 1\n            for index in combination:\n                product *= X[i][index]\n            result[i].append(product)\n    \n    # Remove the duplicate constant term\n    for i in range(n_samples):\n        result[i] = result[i][1:]\n    \n    return result\n\n# Example usage:\nX = [[2, 3], [4, 5]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\n### Explanation:\n1. **Input Validation**: The function first checks if the `degree` is negative. If it is, it returns `-1` as specified.\n2. **Feature Indices**: It generates a list of feature indices based on the number of features in the input data.\n3. **Combinations Generation**: Using `combinations_with_replacement`, it generates all possible combinations of feature indices for degrees from 0 to `degree`.\n4. **Result Initialization**: It initializes the result matrix with a leading 1 for each sample to represent the constant term.\n5. **Polynomial Features Calculation**: For each combination of feature indices, it computes the product of the corresponding features for each sample and appends it to the result matrix.\n6. **Remove Duplicate Constant Term**: Since the constant term (1) is added at the beginning, it removes the duplicate constant term from the result.\n\nThis function will correctly generate the polynomial feature expansion for the given input data and degree."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:  # Check if the input is empty\n        return -1\n    \n    y = np.array(y)  # Convert to NumPy array if it's not already\n    mean_y = np.mean(y)  # Calculate the mean of the sample\n    mse_value = np.mean((y - mean_y) ** 2)  # Calculate the MSE\n    return round(mse_value, 4)  # Return the MSE rounded to 4 decimal places\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))\n# print(mse([]))\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    if isinstance(x, (int, float)):\n        x = [x]\n    x = np.array(x)\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # Compute the first derivative\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n    \n    return (y_rounded, grad_rounded, grad2_rounded)\n\n# Example usage:\nx = [1, 2, 3]\nslope = 2.5\nintercept = -1.0\nresult = apply_affine(x, slope, intercept)\nprint(result)  # Expected output: ([1.5, 4.0, 6.5], [2.5, 2.5, 2.5], [0.0, 0.0, 0.0])\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_features = data.shape[1]\n    \n    # Check if k is within the valid range\n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardize the data\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)  # Population standard deviation\n    stds[stds == 0] = 1  # Avoid division by zero for features with zero variance\n    standardized_data = (data - means) / stds\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of eigenvectors\n    max_abs_indices = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_indices, range(eigenvectors.shape[1])])\n    eigenvectors = eigenvectors * signs\n    \n    # Step 6: Project the standardized data onto the first k eigenvectors\n    top_k_eigenvectors = eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, top_k_eigenvectors)\n    \n    # Round the result to 4 decimal places and convert to a list\n    return np.round(projected_data, 4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.6], [2.0, 1.8], [1.0, 1.5], [1.5, 1.6], [1.1, 0.9]])\n    k = 2\n    result = pca_transform(data, k)\n    print(result)\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the training labels\n    c = np.mean(y_train)\n    F = np.full_like(y_train, c, dtype=np.float64)\n    \n    # Function to find the best split for a given feature\n    def find_best_split(feature_idx, X, y):\n        thresholds = np.unique(X[:, feature_idx])\n        best_loss = np.inf\n        best_threshold = None\n        best_left_val = None\n        best_right_val = None\n        \n        for threshold in thresholds:\n            left_indices = X[:, feature_idx] <= threshold\n            right_indices = ~left_indices\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            left_val = np.mean(y[left_indices])\n            right_val = np.mean(y[right_indices])\n            \n            loss = np.sum((y[left_indices] - left_val) ** 2) + np.sum((y[right_indices] - right_val) ** 2)\n            \n            if loss < best_loss:\n                best_loss = loss\n                best_threshold = threshold\n                best_left_val = left_val\n                best_right_val = right_val\n                \n        return best_threshold, best_left_val, best_right_val\n    \n    # Function to apply a decision stump\n    def apply_decision_stump(x, feature_idx, threshold, left_val, right_val):\n        if x[feature_idx] <= threshold:\n            return left_val\n        else:\n            return right_val\n    \n    # Train the model\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Find the best split among all features\n        best_feature_idx = None\n        best_threshold = None\n        best_left_val = None\n        best_right_val = None\n        best_loss = np.inf\n        \n        for feature_idx in range(X_train.shape[1]):\n            threshold, left_val, right_val = find_best_split(feature_idx, X_train, residuals)\n            if threshold is not None and (left_val is not None) and (right_val is not None):\n                loss = np.sum((residuals - np.where(X_train[:, feature_idx] <= threshold, left_val, right_val)) ** 2)\n                if loss < best_loss:\n                    best_loss = loss\n                    best_feature_idx = feature_idx\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        \n        # Update the model\n        for i in range(len(F)):\n            F[i] += learning_rate * apply_decision_stump(X_train[i], best_feature_idx, best_threshold, best_left_val, best_right_val)\n    \n    # Predict on the test set\n    predictions = []\n    for x in X_test:\n        score = c\n        for _ in range(n_estimators):\n            score += learning_rate * apply_decision_stump(x, best_feature_idx, best_threshold, best_left_val, best_right_val)\n        predictions.append(1 if score > 0.5 else 0)\n    \n    return predictions\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Positive phase\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    \n    # Initialize v_k and h_k with the initial values\n    v_k = X\n    h_k = h0_prob\n    \n    # Run k Gibbs steps\n    for _ in range(k):\n        v_k_prob = sigmoid(np.dot(h_k, W.T) + vbias)\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n        \n        v_k = v_k_prob\n        h_k = h_k_prob\n    \n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    \n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n    \n    # Convert to list of lists and round to 4 decimal places\n    W_new_rounded = np.round(W_new, 4).tolist()\n    \n    return W_new_rounded\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Ensure both inputs are numpy arrays for consistent operations\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the dimensions match\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the component-wise absolute differences\n    abs_diffs = np.abs(x - y)\n    \n    # Find the maximum difference\n    max_diff = np.max(abs_diffs)\n    \n    # Return the result rounded to four decimal places\n    return round(max_diff, 4)\n\n# Example usage:\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Expected output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred for numerical stability\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    \n    # Compute the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1)\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Compute the total loss (reconstruction loss + KL divergence)\n    total_loss = np.mean(reconstruction_loss + kl_divergence)\n    \n    # Return the total loss rounded to 6 decimal places\n    return round(total_loss, 6)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    y = np.array([[0, 1, 0], [1, 0, 1]])\n    y_pred = np.array([[0.2, 0.8, 0.3], [0.9, 0.1, 0.7]])\n    t_mean = np.array([[0.1, -0.2], [0.3, 0.4]])\n    t_log_var = np.array([[-0.5, -0.6], [-0.7, -0.8]])\n    \n    # Compute the VAE loss\n    loss = vae_loss(y, y_pred, t_mean, t_log_var)\n    print(f\"VAE Loss: {loss}\")\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    # Number of samples and features\n    n_samples, n_features = X.shape\n    k = V.shape[1]\n\n    # Initialize predictions array\n    predictions = np.zeros(n_samples)\n\n    # Linear part of the model\n    linear_part = w0 + np.dot(X, w)\n\n    # Interaction part of the model\n    interaction_part = 0.5 * np.sum(\n        np.square(np.dot(X, V)) - np.dot(np.square(X), np.square(V)),\n        axis=1\n    )\n\n    # Combine linear and interaction parts\n    predictions = linear_part + interaction_part\n\n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n\n    return predictions.tolist()\n```\n\nThis function `fm_predict` takes a design matrix `X`, a global bias term `w0`, a vector of linear coefficients `w`, and a matrix of latent factors `V`, and returns the predicted values for all samples in `X`. The predictions are rounded to 4 decimal places as required."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array for easier handling\n    if isinstance(z, (int, float)):\n        scalar_input = True\n        z = np.array([z])\n    elif isinstance(z, (list, tuple)):\n        scalar_input = False\n        z = np.array(z)\n    else:\n        scalar_input = False\n\n    # Compute the sigmoid function\n    def stable_sigmoid(x):\n        return np.where(x >= 0, \n                        1 / (1 + np.exp(-x)), \n                        np.exp(x) / (1 + np.exp(x)))\n\n    result = stable_sigmoid(z)\n\n    # Round to four decimal places\n    result = np.round(result, 4)\n\n    # Convert back to the original input type\n    if scalar_input:\n        return float(result[0])\n    else:\n        return result.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Should output: [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Convert one-hot encoded arrays to 1-D class labels\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def recursive_round(arr):\n        if isinstance(arr, (list, np.ndarray)):\n            return [recursive_round(item) for item in arr]\n        else:\n            return round(arr, 4)\n    \n    if isinstance(z, (int, float)):\n        result = z * (1 - z)\n    elif isinstance(z, list):\n        z = np.array(z)\n        result = z * (1 - z)\n    elif isinstance(z, np.ndarray):\n        result = z * (1 - z)\n    else:\n        raise TypeError(\"Input must be a float, list, or numpy array.\")\n    \n    result = np.round(result, 4)\n    if isinstance(z, list):\n        result = recursive_round(result)\n    elif isinstance(z, np.ndarray):\n        result = result.tolist()\n    \n    return result\n\n# Example usage:\n# scalar\nprint(sigmoid_grad(0.5))\n# 1-D list\nprint(sigmoid_grad([0.1, 0.9]))\n# 2-D list\nprint(sigmoid_grad([[0.2, 0.8], [0.3, 0.7]]))\n# empty list\nprint(sigmoid_grad([]))\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for the grid\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create the grid points\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create the meshgrid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Classify each grid point\n    predictions = np.sign(W[0] * x1_mesh + W[1] * x2_mesh + b)\n    \n    # Convert the predictions to a nested list\n    predictions_list = predictions.tolist()\n    \n    return predictions_list\n```"}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    \n    def estimate_parameters(X, y, class_label):\n        \"\"\"Estimate mean and standard deviation for each feature of a given class.\"\"\"\n        indices = np.where(y == class_label)[0]\n        X_class = X[indices]\n        means = np.mean(X_class, axis=0)\n        stds = np.std(X_class, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n        return means, stds\n    \n    def calculate_likelihood(x, mean, std):\n        \"\"\"Calculate the likelihood of a feature value given the class parameters.\"\"\"\n        exponent = np.exp(-((x - mean) ** 2) / (2 * std ** 2))\n        return (1 / (np.sqrt(2 * np.pi) * std)) * exponent\n    \n    def predict_single_sample(sample, means_0, stds_0, means_1, stds_1, prior_0, prior_1):\n        \"\"\"Predict the class of a single sample.\"\"\"\n        log_posterior_0 = np.log(prior_0) + np.sum(np.log(calculate_likelihood(sample, means_0, stds_0)))\n        log_posterior_1 = np.log(prior_1) + np.sum(np.log(calculate_likelihood(sample, means_1, stds_1)))\n        \n        if log_posterior_0 > log_posterior_1:\n            return 0\n        else:\n            return 1\n    \n    # Estimate parameters for each class\n    means_0, stds_0 = estimate_parameters(X_train, y_train, 0)\n    means_1, stds_1 = estimate_parameters(X_train, y_train, 1)\n    \n    # Calculate class priors\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    \n    # Make predictions for the test set\n    predictions = [predict_single_sample(sample, means_0, stds_0, means_1, stds_1, prior_0, prior_1) for sample in X_test]\n    \n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n    \n    Parameters:\n    - AL: np.ndarray of shape (1, m) or (m,), containing the predicted probabilities.\n    - Y: np.ndarray of shape (1, m) or (m,), containing the true labels (0 or 1).\n    \n    Returns:\n    - float: The computed binary cross-entropy cost.\n    \"\"\"\n    # Ensure the shapes are consistent\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n    \n    # Flatten the arrays to ensure they are 1D\n    AL = AL.flatten()\n    Y = Y.flatten()\n    \n    # Number of examples\n    m = AL.shape[0]\n    \n    # Clip probabilities to avoid log(0) or log(1)\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    # Ensure the cost is a float\n    return float(cost)\n\n# Example usage:\nAL = np.array([0.9, 0.1, 0.8, 0.2])\nY = np.array([1, 0, 1, 0])\n\ncost = compute_cost(AL, Y)\nprint(f\"Cost: {cost:.4f}\")\n```"}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    \n    def forward(hmm, observations):\n        N = hmm['A'].shape[0]\n        T = len(observations)\n        \n        alpha = np.zeros((T, N))\n        \n        # Initialize the first column\n        alpha[0, :] = hmm['pi'] * hmm['B'][:, observations[0]]\n        \n        # Compute the forward probabilities\n        for t in range(1, T):\n            for j in range(N):\n                alpha[t, j] = (alpha[t-1].dot(hmm['A'][:, j])) * hmm['B'][j, observations[t]]\n        \n        return alpha\n    \n    def backward(hmm, observations):\n        N = hmm['A'].shape[0]\n        T = len(observations)\n        \n        beta = np.zeros((T, N))\n        \n        # Initialize the last column\n        beta[-1, :] = 1\n        \n        # Compute the backward probabilities\n        for t in range(T-2, -1, -1):\n            for i in range(N):\n                beta[t, i] = (beta[t+1] * hmm['B'][:, observations[t+1]]).dot(hmm['A'][i, :])\n        \n        return beta\n    \n    if t < 0 or t >= len(observations):\n        return []\n    \n    # Compute forward and backward probabilities\n    alpha = forward(hmm, observations)\n    beta = backward(hmm, observations)\n    \n    # Compute the posterior probabilities\n    gamma = (alpha[t] * beta[t]) / np.sum(alpha[t] * beta[t])\n    \n    # Round to four decimal places\n    gamma_rounded = [round(g, 4) for g in gamma]\n    \n    return gamma_rounded\n\n# Example usage\nhmm = {\n    'pi': np.array([0.6, 0.4]),\n    'A': np.array([[0.7, 0.3], [0.4, 0.6]]),\n    'B': np.array([[0.5, 0.5], [0.3, 0.7]])\n}\nobservations = [0, 1, 0]\nt = 1\n\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the `gamma_probabilities` function, which computes the posterior state distribution using the forward-backward algorithm for a given HMM, observation sequence, and time step `t`. The function returns the posterior probabilities as a list of floats, rounded to four decimal places. If `t` is out of bounds, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the DBSCAN algorithm as described:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    \n    n_samples, _ = data.shape\n    labels = [-1] * n_samples  # Initialize all points as noise\n    cluster_id = 0\n    \n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n    \n    def get_neighbors(sample_id):\n        neighbors = []\n        for i in range(n_samples):\n            if euclidean_distance(data[sample_id], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n    \n    def expand_cluster(sample_id, neighbors, cluster_id):\n        labels[sample_id] = cluster_id\n        queue = deque(neighbors)\n        \n        while queue:\n            current_point = queue.popleft()\n            if labels[current_point] == -1:\n                labels[current_point] = cluster_id\n            elif labels[current_point] == 0:\n                labels[current_point] = cluster_id\n                current_neighbors = get_neighbors(current_point)\n                if len(current_neighbors) >= min_samples:\n                    queue.extend(current_neighbors)\n    \n    for sample_id in range(n_samples):\n        if labels[sample_id] != -1:\n            continue\n        \n        neighbors = get_neighbors(sample_id)\n        if len(neighbors) < min_samples:\n            labels[sample_id] = -1  # Mark as noise\n            continue\n        \n        cluster_id += 1\n        expand_cluster(sample_id, neighbors, cluster_id)\n    \n    return [label if label != 0 else -1 for label in labels]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Generate some random data\n    np.random.seed(42)\n    data = np.random.rand(100, 2)\n    \n    # Run DBSCAN\n    eps = 0.2\n    min_samples = 5\n    cluster_labels = dbscan(data, eps, min_samples)\n    \n    print(cluster_labels)\n```\n\n### Explanation:\n1. **Euclidean Distance Calculation**: The `euclidean_distance` function computes the Euclidean distance between two points.\n2. **Neighborhood Calculation**: The `get_neighbors` function finds all points within the \\(\\varepsilon\\)-radius of a given point.\n3. **Cluster Expansion**: The `expand_cluster` function performs a breadth-first search (BFS) to expand the cluster starting from a core point.\n4. **Main Loop**: The main loop iterates over each point, checks if it is a core point, and expands the cluster if it is. Points that do not meet the criteria are marked as noise.\n\nThis implementation ensures that clusters are formed based on density connectivity, and noise points are correctly labeled."}
{"task_id": 561, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Gaussian Mixture Model (GMM) using the Expectation-Maximization (EM) algorithm as described in the task:\n\n```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Gaussian Mixture Model using the Expectation-Maximization (EM) algorithm.\n    \n    Parameters:\n    - data: 2D NumPy array of shape (N, D) where N is the number of samples and D is the number of features.\n    - k: Number of Gaussian components.\n    - max_iter: Maximum number of iterations for the EM algorithm.\n    - epsilon: Tolerance for stopping the EM algorithm based on the change in mixture weights.\n    \n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    # Step 1: Initialize parameters\n    pi = np.ones(k) / k  # Mixture weights\n    mu = data[np.random.choice(N, k, replace=False)]  # Means\n    sigma = [np.eye(D) for _ in range(k)]  # Covariance matrices\n\n    for _ in range(max_iter):\n        # Step 2: E-step\n        gamma = np.zeros((N, k))\n        for i in range(k):\n            gamma[:, i] = pi[i] * multivariate_normal.pdf(data, mean=mu[i], cov=sigma[i])\n        gamma /= gamma.sum(axis=1, keepdims=True)\n        \n        # Step 3: M-step\n        Nk = gamma.sum(axis=0)\n        pi = Nk / N\n        mu = np.dot(gamma.T, data) / Nk[:, None]\n        for i in range(k):\n            diff = data - mu[i]\n            sigma[i] = np.dot(gamma[:, i] * diff.T, diff) / Nk[i]\n        \n        # Step 4: Check for convergence\n        if np.max(np.abs(pi - pi_prev)) < epsilon:\n            break\n        pi_prev = pi.copy()\n    \n    # Step 5: Assign clusters\n    responsibilities = np.zeros((N, k))\n    for i in range(k):\n        responsibilities[:, i] = pi[i] * multivariate_normal.pdf(data, mean=mu[i], cov=sigma[i])\n    cluster_labels = responsibilities.argmax(axis=1)\n    \n    # Step 6: Make output deterministic\n    sorted_indices = np.argsort(mu[:, 0])\n    mapping = {old: new for new, old in enumerate(sorted_indices)}\n    cluster_labels = np.array([mapping[label] for label in cluster_labels])\n    \n    return cluster_labels.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n    k = 2\n    labels = gmm_em(data, k)\n    print(labels)\n```\n\n### Explanation:\n1. **Initialization**:\n   - `pi`: Mixture weights initialized to equal values.\n   - `mu`: Means initialized to random samples from the data.\n   - `sigma`: Covariance matrices initialized to identity matrices.\n\n2. **E-step**:\n   - Compute the responsibilities (posterior probabilities) of each sample belonging to each Gaussian component.\n\n3. **M-step**:\n   - Update the mixture weights, means, and covariance matrices based on the responsibilities.\n\n4. **Convergence Check**:\n   - Stop the algorithm if the change in mixture weights is smaller than the specified tolerance.\n\n5. **Cluster Assignment**:\n   - Assign each sample to the component with the highest responsibility.\n\n6. **Deterministic Output**:\n   - Sort the components by the first coordinate of their means and re-label the cluster indices accordingly.\n\nThis implementation ensures that the output is deterministic and meets all the specified constraints."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    # Step 1: Build the similarity graph\n    pairwise_dist_sq = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    W = np.exp(-gamma * pairwise_dist_sq)\n    \n    # Step 2: Construct the Laplacian matrix\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.diag(D)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    \n    # Step 3: Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1)[:, np.newaxis]\n    \n    # Step 4: Run k-means on the eigenvectors\n    def k_means(X, n_clusters, init_centroids):\n        centroids = init_centroids.copy()\n        labels = np.zeros(X.shape[0], dtype=int)\n        \n        while True:\n            # Assign each point to the nearest centroid\n            distances = np.linalg.norm(X[:, np.newaxis, :] - centroids, axis=2)\n            new_labels = np.argmin(distances, axis=1)\n            \n            # If no change in labels, stop\n            if np.array_equal(new_labels, labels):\n                break\n            \n            labels = new_labels\n            # Update centroids\n            for i in range(n_clusters):\n                centroids[i] = np.mean(X[labels == i], axis=0)\n        \n        return labels\n    \n    # Initialize centroids with the first n_cluster samples\n    init_centroids = eigenvectors[:n_cluster]\n    cluster_labels = k_means(eigenvectors, n_cluster, init_centroids)\n    \n    # Step 5: Relabel clusters based on the smallest original index\n    original_indices = np.argsort(cluster_labels)\n    cluster_map = {i: j for j, i in enumerate(np.unique(cluster_labels))}\n    final_labels = [cluster_map[label] for label in cluster_labels]\n    \n    return final_labels\n\n# Example usage:\n# data = np.random.rand(100, 2)\n# labels = spectral_clustering(data, n_cluster=3, gamma=2.0, method='unnormalized')\n# print(labels)\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        any_update = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                any_update = True\n        \n        if not any_update:\n            break\n    \n    # Recover the weight vector\n    w = np.sum((alpha * y_data).reshape(-1, 1) * X_data, axis=0)\n    \n    # Round the results\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    \n    return (w_rounded, b_rounded)\n\n# Example usage\nif __name__ == \"__main__\":\n    X_data = np.array([[1, 2], [2, 3], [3, 1]])\n    y_data = np.array([1, 1, -1])\n    eta = 1.0\n    max_iter = 1000\n    \n    w, b = perceptron_dual_train(X_data, y_data, eta, max_iter)\n    print(f\"Learned weight vector: {w}\")\n    print(f\"Learned bias term: {b}\")\n```\n\nThis script implements the dual-form perceptron learning algorithm as specified. It computes the Gram matrix, iterates over the data, updates the coefficients and bias term, and finally recovers the weight vector. The results are rounded to four decimal places before being returned."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            child_found = False\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    child_found = True\n                    break\n            if not child_found:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    return current_node.y\n\n# Example usage:\n# Constructing a simple classification tree\nroot_classification = Node(\n    label=0,\n    child=[\n        Node(x=0, child=[Node(y=1)]),\n        Node(x=1, child=[Node(y=2)])\n    ]\n)\n\n# Predicting for a sample\nsample_classification = [1, 2, 3]\nprint(predict_sample(root_classification, sample_classification, 'classification'))  # Output: 2\n\n# Constructing a simple regression tree\nroot_regression = Node(\n    label=1,\n    s=5.0,\n    child=[\n        Node(y=10.0),\n        Node(y=20.0)\n    ]\n)\n\n# Predicting for a sample\nsample_regression = [1, 6, 3]\nprint(predict_sample(root_regression, sample_regression, 'regression'))  # Output: 20.0\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return entropy\n\ndef conditional_entropy(feature, labels):\n    \"\"\"Calculate the conditional entropy H(y|A) given a feature and labels.\"\"\"\n    unique_values, value_counts = np.unique(feature, return_counts=True)\n    total_samples = len(labels)\n    weighted_entropy = 0.0\n    \n    for value, count in zip(unique_values, value_counts):\n        subset_labels = labels[feature == value]\n        subset_entropy = entropy(subset_labels)\n        weighted_entropy += (count / total_samples) * subset_entropy\n    \n    return weighted_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    base_entropy = entropy(y)\n    best_info_gain = -1\n    best_feature_index = -1\n    \n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        cond_entropy = conditional_entropy(feature, y)\n        info_gain = base_entropy - cond_entropy\n        \n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_feature_index = i\n        elif info_gain == best_info_gain and i < best_feature_index:\n            best_feature_index = i\n    \n    return (best_feature_index, round(best_info_gain, 6))\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([\n        [0, 0, 0, 0],\n        [0, 0, 0, 1],\n        [1, 0, 0, 0],\n        [2, 1, 1, 0],\n        [2, 2, 1, 0],\n        [2, 1, 1, 1],\n        [1, 1, 0, 0],\n        [0, 1, 1, 0],\n        [0, 2, 2, 0],\n        [2, 1, 2, 0],\n        [0, 1, 2, 1],\n        [1, 1, 1, 1],\n        [1, 0, 1, 0],\n        [2, 1, 1, 1]\n    ])\n    y = np.array([0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0])\n    \n    best_feature_index, max_information_gain = choose_best_feature(X, y)\n    print(f\"Best Feature Index: {best_feature_index}, Max Information Gain: {max_information_gain}\")\n```\n\nThis script defines the `choose_best_feature` function as required, which calculates the information gain for each feature and returns the index of the feature with the highest information gain, along with the gain value rounded to six decimal places. The example usage at the end demonstrates how to call this function with a sample dataset."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def height_limit(sample_size):\n        return math.ceil(math.log2(sample_size))\n    \n    class IsolationTree:\n        def __init__(self, data, height=0, height_limit=math.inf):\n            self.height = height\n            self.height_limit = height_limit\n            self.left = None\n            self.right = None\n            self.split_feature = None\n            self.split_value = None\n            \n            if data.shape[0] <= 1 or height >= height_limit:\n                self.size = data.shape[0]\n            else:\n                self.split_feature = np.random.choice(data.shape[1])\n                self.split_value = np.random.uniform(data[:, self.split_feature].min(), data[:, self.split_feature].max())\n                left_data = data[data[:, self.split_feature] < self.split_value]\n                right_data = data[data[:, self.split_feature] >= self.split_value]\n                \n                self.left = IsolationTree(left_data, height + 1, height_limit)\n                self.right = IsolationTree(right_data, height + 1, height_limit)\n        \n        def path_length(self, x, current_length=0):\n            if self.split_feature is None or self.height >= self.height_limit:\n                return current_length + c(self.size)\n            elif x[self.split_feature] < self.split_value:\n                return self.left.path_length(x, current_length + 1)\n            else:\n                return self.right.path_length(x, current_length + 1)\n    \n    def build_forest(data, n_trees, sample_size):\n        forest = []\n        for _ in range(n_trees):\n            sample_indices = np.random.choice(data.shape[0], size=min(sample_size, data.shape[0]), replace=False)\n            sample_data = data[sample_indices]\n            tree = IsolationTree(sample_data, height_limit=height_limit(sample_size))\n            forest.append(tree)\n        return forest\n    \n    def compute_anomaly_scores(forest, data):\n        path_lengths = np.zeros(data.shape[0])\n        for i in range(data.shape[0]):\n            path_lengths[i] = np.mean([tree.path_length(data[i]) for tree in forest])\n        phi = 2 * np.log(data.shape[0] - 1) - 2 * (data.shape[0] - 1) / data.shape[0]\n        scores = 2 ** (-path_lengths / phi)\n        return scores\n    \n    forest = build_forest(data, n_trees, sample_size)\n    scores = compute_anomaly_scores(forest, data)\n    threshold = np.quantile(scores, 1 - epsilon)\n    outlier_indices = np.where(scores >= threshold)[0]\n    return sorted(outlier_indices)\n\n# Example usage:\n# data = np.array([[1, 2], [3, 4], [5, 6], [100, 101]])\n# n_trees = 10\n# sample_size = 5\n# epsilon = 0.1\n# print(detect_outliers(data, n_trees, sample_size, epsilon))\n```\n\nThis script implements a mini version of the Isolation Forest algorithm for detecting outliers in a dataset. It builds a forest of random isolation trees, computes the anomaly scores for each observation, and returns the indices of the detected outliers. The function is deterministic due to the fixed random seed."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \n    # Step 1: Build the empirical distributions\n    feature_label_counts = defaultdict(int)\n    feature_counts = defaultdict(int)\n    label_counts = defaultdict(int)\n    \n    for i in range(X_train.shape[0]):\n        label = y_train[i]\n        label_counts[label] += 1\n        for j in range(X_train.shape[1]):\n            feature_value = X_train[i, j]\n            feature_label_counts[(j, feature_value, label)] += 1\n            feature_counts[(j, feature_value)] += 1\n    \n    # Normalize counts to get empirical probabilities\n    feature_label_probs = {k: v / label_counts[k[2]] for k, v in feature_label_counts.items()}\n    feature_probs = {k: v / X_train.shape[0] for k, v in feature_counts.items()}\n    label_probs = {k: v / X_train.shape[0] for k, v in label_counts.items()}\n    \n    # Step 2: Initialize weights\n    weights = defaultdict(float)\n    \n    # Step 3: Generalized Iterative Scaling (GIS) algorithm\n    for _ in range(n_iter):\n        max_update = 0.0\n        \n        for (j, feature_value, y), count in feature_label_counts.items():\n            expected_prob = 0.0\n            for label in label_counts.keys():\n                numerator = math.exp(sum(weights[(j, X_train[i, j], label)] for i in range(X_train.shape[0])))\n                denominator = sum(math.exp(sum(weights[(j, X_train[i, j], y_)] for y_ in label_counts.keys())) for i in range(X_train.shape[0]))\n                expected_prob += (numerator / denominator) if denominator > 0 else 0\n            \n            empirical_prob = feature_label_probs[(j, feature_value, y)]\n            update = 0.5 * (empirical_prob - expected_prob) / expected_prob if expected_prob > 0 else 0\n            weights[(j, feature_value, y)] += update\n            max_update = max(max_update, abs(update))\n        \n        if max_update < epsilon:\n            break\n    \n    # Step 4: Predict labels for X_test\n    predictions = []\n    for i in range(X_test.shape[0]):\n        max_prob = -float('inf')\n        best_label = None\n        for label in label_counts.keys():\n            prob = math.exp(sum(weights[(j, X_test[i, j], label)] for j in range(X_test.shape[1])))\n            if prob > max_prob:\n                max_prob = prob\n                best_label = label\n        predictions.append(best_label)\n    \n    return predictions\n```\n\nThis script implements a Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm to learn the weights of the features. The `maxent_predict` function takes training data, training labels, test data, and optimization parameters to predict the labels for the test data. The implementation uses only the standard library and `numpy`."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Create a set for each document's unique words\n    document_words = [set(words) for _, words in data]\n    \n    # Count the number of documents each word appears in\n    word_counts = Counter(word for doc in document_words for word in doc)\n    \n    # Total number of documents\n    num_documents = len(data)\n    \n    # Calculate the document-frequency ratio for each word\n    word_ratios = [(word, round(count / num_documents, 4)) for word, count in word_counts.items()]\n    \n    # Sort the words by their document-frequency ratio in descending order\n    sorted_word_ratios = sorted(word_ratios, key=lambda x: x[1], reverse=True)\n    \n    # Determine the number of words to include in the set\n    if cut_off is None:\n        cut_off = len(sorted_word_ratios)\n    elif cut_off == 0:\n        cut_off = 0\n    else:\n        cut_off = min(cut_off, len(sorted_word_ratios))\n    \n    # Extract the top *cut_off* words\n    top_words = {word for word, _ in sorted_word_ratios[:cut_off]}\n    \n    return sorted_word_ratios, top_words\n\n# Example usage:\ndata = [\n    (1, [\"apple\", \"banana\", \"cherry\"]),\n    (2, [\"banana\", \"date\", \"elderberry\"]),\n    (3, [\"fig\", \"grape\", \"banana\", \"apple\"]),\n    (4, [\"banana\", \"apple\"])\n]\n\ncut_off = 3\nresult = statistic_key_word(data, cut_off)\nprint(result)\n```\n\nThis script defines the `statistic_key_word` function as specified, which processes a list of documents to compute the document-frequency ratio for each word and returns a list of these ratios along with a set of the most common words based on the `cut_off` parameter. The example usage demonstrates how to call the function with sample data."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, (alpha * y))\n    \n    # Compute the bias term\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the results to 4 decimal places\n    w_rounded = [round(i, 4) for i in w]\n    b_rounded = round(b, 4)\n    \n    return (w_rounded, b_rounded)\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [2, 3], [3, 5]])\n    y = np.array([1, -1, 1])\n    alpha = np.array([0.5, 0.2, 0.3])\n    \n    w, b = compute_svm_parameters(X, y, alpha)\n    print(\"Weight vector:\", w)\n    print(\"Bias term:\", b)\n```"}
{"task_id": 572, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Local Outlier Factor (LOF) algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = data.shape[0]\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i, n):\n            dist = euclidean_distance(data[i], data[j])\n            distance_matrix[i][j] = dist\n            distance_matrix[j][i] = dist\n    \n    # Step 2: For every sample p, obtain its k-distance and the index list of its k nearest neighbours N_k(p)\n    k_distances = np.zeros(n)\n    k_nearest_neighbours = [None] * n\n    for i in range(n):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n        k_nearest_neighbours[i] = sorted_indices[1:k+1]  # Exclude the point itself\n    \n    # Step 3: Define the reachability distance between two points\n    def reach_dist(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: Compute the Local Reachability Density (LRD) for each point\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dists = sum(reach_dist(i, j) for j in k_nearest_neighbours[i])\n        lrd[i] = k / sum_reach_dists\n    \n    # Step 5: Compute the Local Outlier Factor (LOF) for each point\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd = sum(lrd[j] for j in k_nearest_neighbours[i])\n        lof_scores[i] = (sum_lrd / k) / lrd[i]\n    \n    # Round LOF scores to 4 decimal places\n    lof_scores = np.round(lof_scores, 4)\n    \n    # Identify outliers\n    outlier_indices = [i for i in range(n) if lof_scores[i] > epsilon]\n    \n    return (lof_scores.tolist(), outlier_indices)\n\n# Example usage:\ndata = np.array([[1.0, 2.0], [2.0, 3.0], [10.0, 11.0], [11.0, 12.0]])\nk = 2\nepsilon = 1.5\nlof_scores, outlier_indices = local_outlier_factor(data, k, epsilon)\nprint(\"LOF Scores:\", lof_scores)\nprint(\"Outlier Indices:\", outlier_indices)\n```\n\n### Explanation:\n1. **Euclidean Distance Calculation**: A helper function `euclidean_distance` is defined to compute the Euclidean distance between two points.\n2. **Distance Matrix**: A full pairwise Euclidean distance matrix is computed for all points in the dataset.\n3. **k-Distance and k-Nearest Neighbors**: For each point, the k-distance and the indices of the k-nearest neighbors are determined.\n4. **Reachability Distance**: The reachability distance between two points is defined as the maximum of the k-distance of the second point and the actual Euclidean distance between the two points.\n5. **Local Reachability Density (LRD)**: The LRD of a point is calculated as the inverse of the average reachability distance to its k-nearest neighbors.\n6. **Local Outlier Factor (LOF)**: The LOF of a point is the ratio of the average LRD of its k-nearest neighbors to its own LRD.\n7. **Rounding and Outlier Detection**: LOF scores are rounded to four decimal places, and points with LOF scores greater than `epsilon` are identified as outliers.\n\nThis implementation ensures that the LOF scores are correctly computed and outliers are accurately detected based on the given criteria."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, (n_train, 1))\n        y_train_points = np.random.uniform(base + 1, base + 9, (n_train, 1))\n        X_train_class = np.hstack((x_train, y_train_points))\n        y_train_class = np.full(n_train, c)\n\n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, (n_val, 1))\n        y_val_points = np.random.uniform(base + 1, base + 9, (n_val, 1))\n        X_val_class = np.hstack((x_val, y_val_points))\n        y_val_class = np.full(n_val, c)\n\n        # Append to the main lists\n        X_train.append(X_train_class)\n        X_val.append(X_val_class)\n        y_train.append(y_train_class)\n        y_val.append(y_val_class)\n\n    # Concatenate all points and labels\n    X_train = np.vstack(X_train).round(4)\n    X_val = np.vstack(X_val).round(4)\n    y_train = np.concatenate(y_train)\n    y_val = np.concatenate(y_val)\n\n    return X_train, X_val, y_train, y_val\n\n# Example usage\nif __name__ == \"__main__\":\n    m = 3\n    n_train = 10\n    n_val = 5\n    seed = 42\n    X_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\n    print(\"X_train:\\n\", X_train)\n    print(\"y_train:\\n\", y_train)\n    print(\"X_val:\\n\", X_val)\n    print(\"y_val:\\n\", y_val)\n```\n\nThis script defines the `generate_data` function which generates synthetic 2-D data for a specified number of classes, training points, and validation points. The function ensures that the points are uniformly distributed within the specified squares and that the coordinates are rounded to 4 decimal places. The function also supports reproducibility through the use of a seed."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialisation\n    centres = X[:k].copy()\n    m, d = X.shape\n    labels = [0] * m\n    \n    # Function to compute Euclidean distance\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    # Function to update centres\n    def update_centres(X, labels, k):\n        new_centres = []\n        for i in range(k):\n            cluster_points = X[labels == i]\n            if len(cluster_points) > 0:\n                new_centre = np.mean(cluster_points, axis=0)\n            else:\n                new_centre = centres[i]  # Keep the old centre if no points are assigned\n            new_centres.append(new_centre)\n        return np.array(new_centres)\n    \n    # Main loop\n    for _ in range(max_iters):\n        # Assignment step\n        new_labels = []\n        for point in X:\n            distances = [euclidean_distance(point, centre) for centre in centres]\n            new_label = np.argmin(distances)\n            new_labels.append(new_label)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        \n        # Update labels\n        labels = new_labels\n        \n        # Update step\n        centres = update_centres(X, labels, k)\n    \n    # Round the centres to 4 decimal places\n    centres = centres.round(4).tolist()\n    \n    return labels, centres\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\n    k = 2\n    max_iters = 100\n    labels, centres = kmeans(X, k, max_iters)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```\n\nThis code implements the K-Means clustering algorithm as described, using the first `k` points as initial centres and ensuring that the coordinates of the final centres are rounded to 4 decimal places. The example usage at the bottom demonstrates how to call the function and print the results."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(weight, 4) for weight in w], round(b, 4)\n\n    for _ in range(iterations):\n        # Compute predictions\n        y_pred = X @ w + b\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Compute gradients\n        grad_w = -2 * (X.T @ residuals) / m + l1_penalty * np.sign(w) + 2 * l2_penalty * w\n        grad_b = -2 * np.sum(residuals) / m\n        \n        # Update parameters\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n\n    # Return the learned parameters rounded to 4 decimal places\n    return [round(weight, 4) for weight in w], round(b, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([3, 7, 11])\n    learning_rate = 0.01\n    iterations = 1000\n    l1_penalty = 0.1\n    l2_penalty = 0.01\n    \n    weights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\n    print(\"Weights:\", weights)\n    print(\"Bias:\", bias)\n```\n\nThis script defines the `elastic_net_regression` function, which implements Elastic-Net regularized linear regression using batch gradient descent. The function takes the input features `X`, target values `y`, learning rate `learning_rate`, number of iterations `iterations`, L1 penalty `l1_penalty`, and L2 penalty `l2_penalty` as arguments. It returns the learned weights and bias, rounded to four decimal places. The example usage at the bottom demonstrates how to call the function with sample data."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    \n    def relu(x):\n        return np.maximum(0, x)\n    \n    # Add bias term to the input\n    x = np.array([1.0] + x)\n    \n    # Forward pass through each layer\n    for layer_weights in weights[:-1]:  # For all layers except the last one\n        # Compute the dot product with the weights\n        z = np.dot(layer_weights, x)\n        # Apply ReLU activation\n        x = relu(z)\n        # Add bias term for the next layer\n        x = np.concatenate(([1.0], x))\n    \n    # Last layer (linear activation)\n    z = np.dot(weights[-1], x)\n    \n    # Return the final output rounded to 4 decimal places\n    if len(z) == 1:\n        return round(float(z), 4)\n    else:\n        return [round(float(val), 4) for val in z]\n\n# Example usage:\nweights = [\n    [[1.0, 0.5, -0.2], [0.3, 0.8, 0.1]],  # Layer 0 (2 neurons)\n    [[-0.1, 0.6, 0.7], [0.2, -0.5, 0.3]],  # Layer 1 (2 neurons)\n    [[0.4, -0.9, 0.8]]  # Layer 2 (1 neuron)\n]\nx = [0.5, -0.3]\n\noutput = neural_net_predict(weights, x)\nprint(output)  # Expected output for this example will vary based on the weights and input\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Implements the K-Means clustering algorithm from scratch.\n    \n    Parameters:\n    X (np.ndarray): The input data, a 2D NumPy array of shape (n_samples, n_features).\n    k (int): The number of clusters.\n    max_iters (int): The maximum number of iterations (default is 100).\n    \n    Returns:\n    list[list[float]]: A list of lists where each inner list is a centroid rounded to 4 decimals.\n    \"\"\"\n    \n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 1: Assign each sample to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centroids, axis=2) ** 2\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2: Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.sum(labels == i) > 0 else centroids[i] for i in range(k)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = np.round(centroids[np.lexsort(centroids.T)], 4)\n    \n    return sorted_centroids.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\n    k = 2\n    centroids = kmeans_centroids(X, k)\n    print(centroids)\n```\n\n### Explanation:\n1. **Initialization**: The centroids are initialized with the first `k` samples from the input data `X`.\n2. **Iteration**:\n   - For each iteration, the algorithm calculates the squared Euclidean distance between each sample and each centroid.\n   - Each sample is assigned to the nearest centroid based on the minimum distance.\n   - The centroids are updated to the mean of the samples assigned to them. If a centroid has no samples assigned to it, it remains unchanged.\n3. **Convergence Check**: The algorithm stops early if the movement of all centroids is less than `1e-4` in a full iteration.\n4. **Sorting and Rounding**: After convergence, the centroids are sorted in ascending lexicographical order and rounded to 4 decimal places before being returned as a list of lists."}
